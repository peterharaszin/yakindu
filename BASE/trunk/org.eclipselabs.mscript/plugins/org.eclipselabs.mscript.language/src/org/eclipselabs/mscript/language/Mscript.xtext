/****************************************************************************
 * Copyright (c) 2010 Andreas Unger and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Andreas Unger - initial API and implementation 
 ****************************************************************************/

grammar org.eclipselabs.mscript.language.Mscript
hidden(WS, ML_COMMENT, SL_COMMENT)

import "platform:/resource/org.eclipselabs.mscript.typesystem/model/TypeSystem.ecore"
import "platform:/resource/org.eclipselabs.mscript.language/model/Mscript.ecore"
import 'http://www.eclipse.org/emf/2002/Ecore' as ecore

Module:
	(definitions+=Definition)*;
	
Definition:
	DataTypeDefinition |
	FunctionDefinition;

/*
 * DataTypeDefinition
 */
 
DataTypeDefinition:
	EnumerationDefinition |
	RecordDefinition |
	TypeAliasDefinition;

/*
 * Enumeration
 */
 	
EnumerationDefinition:
	'enum' name=ValidID '{'
		(literalDeclarations+=EnumerationLiteralDeclaration (',' literalDeclarations+=EnumerationLiteralDeclaration)*)?
	'}';
	
EnumerationLiteralDeclaration:
	name=ValidID;
	
/*
 * TypeAlias
 */
 
TypeAliasDefinition:
	'type' name=ValidID '=' type=PrimitiveType ';';	

/*
 * Record
 */

RecordDefinition:
	'record' name=ValidID '{'
		(fieldDeclarations+=RecordFieldDeclaration)*
	'}'; 

RecordFieldDeclaration:
	name=ValidID ':' type=DataTypeSpecifier ';';

/*
 * Function
 */
 
FunctionDefinition:
	(stateful?='stateful')? 'func' name=ValidID
			('<' templateParameterDeclarations+=ParameterDeclaration (',' templateParameterDeclarations+=ParameterDeclaration)* '>')?
			'(' (inputParameterDeclarations+=ParameterDeclaration (',' inputParameterDeclarations+=ParameterDeclaration)*)? ')'
			'->' outputParameterDeclarations+=ParameterDeclaration (',' outputParameterDeclarations+=ParameterDeclaration)* '{'
		(assertions+=Assertion |
		functionObjectDeclarations+=FunctionObjectDeclaration |
		stateVariableDeclarations+=StateVariableDeclaration |
		equations+=Equation)*
	'}';

ParameterDeclaration:
	name=ValidID;

enum AssertionStatusKind:
	Info='info' |
	Warning='warning' |
	Error='error' |
	Fatal='fatal';

Assertion:
	(static?='static')? 'assert' condition=Expression ':' statusKind=AssertionStatusKind message=Expression ';';

StateVariableDeclaration:
	'var' name=ValidID ';';
	
FunctionObjectDeclaration:
	'fob' name=ValidID ':' functionName=[FunctionDefinition|QualifiedName] ('<' templateArguments+=Expression (',' templateArguments+=Expression)* '>')? ';';

Equation:
	leftHandSide=Expression '=' rightHandSide=Expression ';';

/*
 * Data type specifier
 */

DataTypeSpecifier:
	definedType=(PrimitiveType | ArrayType) | type=[DataType];

PrimitiveType:
	NumericType | BooleanType | StringType;
	
NumericType:
	RealType | IntegerType | ComplexType | GaussianType;
	
RealType:
	{RealType} 'real' ('(' unit=Unit ')')?;
	
IntegerType:
	{IntegerType} 'int' ('(' unit=Unit ')')?;
	
ComplexType:
	{ComplexType} 'complex' ('(' unit=Unit ')')?;

GaussianType:
	{GaussianType} 'gauss' ('(' unit=Unit ')')?;

BooleanType:
	{BooleanType} 'bool';
	
StringType:
	{StringType} 'string';
	
ArrayType:
	TensorType | =>(definedElementType=PrimitiveType | elementType=[DataType]) '[' dimensions+=ArrayDimension (',' dimensions+=ArrayDimension)* ']';
	
TensorType:
	definedElementType=NumericType '[' dimensions+=ArrayDimension (',' dimensions+=ArrayDimension)* ']';
	
ArrayDimension:
	{ArrayDimension} (size=Expression)?;

/*
 * Expressions
 */

Expression:
	LetExpression | IfExpression | SwitchExpression | RangeExpression;

LetExpression:
	'let' variableDeclarations+=LetExpressionVariableDeclaration (',' variableDeclarations+=LetExpressionVariableDeclaration)* 'in' targetExpression=Expression;
	
LetExpressionVariableDeclaration:
	(parts+=LetExpressionVariableDeclarationPart | '(' parts+=LetExpressionVariableDeclarationPart (',' parts+=LetExpressionVariableDeclarationPart)+ ')') '=' assignedExpression=Expression;

LetExpressionVariableDeclarationPart:
	name=ValidID;
	
IfExpression:
	(static?='static')? 'if' condition=Expression 'then' thenExpression=Expression 'else' elseExpression=Expression;

SwitchExpression:
	(static?='static')? 'switch' controlExpression=Expression
		(cases+=SwitchCase)*
		'default' ':' defaultExpression=Expression;

SwitchCase:
	'case' caseExpression=ImpliesExpression ':' resultExpression=Expression;

RangeExpression returns Expression:
	ImpliesExpression ({RangeExpression.operands+=current} ':' operands+=ImpliesExpression (':' operands+=ImpliesExpression)?)?;

ImpliesExpression returns Expression:
	LogicalOrExpression ({ImpliesExpression.leftOperand=current} '=>' rightOperand=LogicalOrExpression)?;

LogicalOrExpression returns Expression:
	LogicalAndExpression ({LogicalOrExpression.operands+=current} ('||' operands+=LogicalAndExpression)+)?;
	
LogicalAndExpression returns Expression:
	EqualityExpression ({LogicalAndExpression.operands+=current} ('&&' operands+=EqualityExpression)+)?;

EqualityExpression returns Expression:
	RelationalExpression ({EqualityExpression.leftOperand=current} operator=EqualityOperator rightOperand=RelationalExpression)?;

enum EqualityOperator:
	EqualTo='==' |
	NotEqualTo='!=';
	
RelationalExpression returns Expression:
	AdditiveExpression ({RelationalExpression.leftOperand=current} operator=RelationalOperator rightOperand=AdditiveExpression | {TypeTestExpression.expression=current} 'is' type=DataTypeSpecifier)?;

enum RelationalOperator:
	LessThan='<' |
	LessThanOrEqualTo='<=' |
	GreaterThan='>' |
	GreaterThanOrEqualTo='>=';

AdditiveExpression returns Expression:
	MultiplicativeExpression ({AdditiveExpression.leftOperand=current} (rightParts+=AdditiveExpressionPart)+)?;

AdditiveExpressionPart:
	operator=AdditiveOperator operand=MultiplicativeExpression;

enum AdditiveOperator:
	Add='+' |
	Subtract='-';

MultiplicativeExpression returns Expression:
	PowerExpression ({MultiplicativeExpression.leftOperand=current} (rightParts+=MultiplicativeExpressionPart)+)?;

MultiplicativeExpressionPart:
	operator=MultiplicativeOperator operand=PowerExpression;
	
enum MultiplicativeOperator:
	Multiply='*' |
	Divide='/' |
	ElementWiseMultiply='.*' |
	ElementWiseDivide='./';
	
PowerExpression returns Expression:
	UnaryExpression ({PowerExpression.operand=current} operator=PowerOperator exponent=UnaryExpression)?;

enum PowerOperator:
	Power='^' |
	ElementWisePower='.^';
	
UnaryExpression returns Expression:
	PostfixExpression | {UnaryExpression} operator=UnaryOperator operand=PostfixExpression;
	
enum UnaryOperator:
	Negate='-' |
	LogicalNot='!';
	
PostfixExpression returns Expression:
	PrimaryExpression ({PostfixExpression.operand=current} operator=PostfixOperator)?;

enum PostfixOperator:
	Transpose="'";

PrimaryExpression returns Expression:
	Literal |
	FeatureCall |
	UnitConstructionOperator |
	ArrayConstructionOperator |
	ArrayConcatenationOperator |
	ParenthesizedExpression |
	BeginExpression |
	EndExpression;

Literal:
	NumericLiteral | BooleanLiteral | StringLiteral;
	
NumericLiteral:
	RealLiteral | IntegerLiteral;
	
RealLiteral:
	value=ValidReal (modifier=ValidID)? ('(' unit=Unit ')')?;
	
IntegerLiteral:
	value=ValidInteger (modifier=ValidID)? ('(' unit=Unit ')')?;

BooleanLiteral:
	value=BooleanKind;

enum BooleanKind:
	False='false' | True='true';
	
StringLiteral:
	value=STRING;
		
FeatureCall returns Expression:
	{FeatureCall} target=[CallableElement|QualifiedName] (parts+=FeatureCallPart)*;

FeatureCallPart:
	NameComponent | ArrayElementAccess | OperationArgumentList | IterationCall;
	
NameComponent:
	'.' identifier=ValidID;
	
ArrayElementAccess:
	'[' subscripts+=ArraySubscript (',' subscripts+=ArraySubscript)* ']';

ArraySubscript:
	slice?=':' | expression=Expression;

OperationArgumentList:
	{OperationArgumentList} '(' (arguments+=Expression (',' arguments+=Expression)*)? ')';

IterationCall:
	'.' name=ValidID '(' variables+=IterationVariable (',' variables+=IterationVariable)* (';' accumulator=IterationAccumulator)? (';' breakCondition=Expression)? '|' expression=Expression ')';

IterationVariable:
	name=ValidID;

IterationAccumulator:
	name=ValidID '=' initializer=Expression;
	
ArrayConstructionOperator:
	'{' expressions+=Expression ((',' expressions+=Expression)* | 'for' iterationClauses+=ArrayConstructionIterationClause (',' iterationClauses+=ArrayConstructionIterationClause)*) '}';

ArrayConstructionIterationClause:
	variableName=ValidID 'in' collectionExpression=Expression;

ArrayConcatenationOperator:
	'[' rows+=ExpressionList (';' rows+=ExpressionList)* ']';
	
ExpressionList:
	expressions+=Expression (',' expressions+=Expression)*;
	
UnitConstructionOperator:
	'$' '(' unit=Unit ')';

ParenthesizedExpression:
	'(' expressions+=Expression (',' expressions+=Expression)* ')';

BeginExpression:
	{BeginExpression} 'begin';

EndExpression:
	{EndExpression} 'end';
	
/*
 * Unit expressions
 */
	
Unit:
	{Unit} (numerator=UnitNumerator ('/' denominator=UnitDenominator)?)?;

UnitNumerator:
	{UnitNumerator} ONE | factors+=UnitFactor ('*' factors+=UnitFactor)*;

UnitDenominator:
	factors+=UnitFactor | '(' factors+=UnitFactor ('*' factors+=UnitFactor)* ')';

UnitFactor:
	symbol=ValidID ('^' exponent=UnitExponent)?;

UnitExponent returns ecore::EInt:
	('-')? ValidInteger;

ValidReal returns ecore::EDouble:
	REAL;

ValidInteger returns ecore::ELong:
	ONE | INTEGER;

ValidID:
	ID;

QualifiedName:
  ValidID (=>'.' ValidID)*;

/*
 * Terminals
 */
 
terminal ID:
	('_' | 'a'..'z' | 'A'..'Z') ('0'..'9' | '_' | 'a'..'z' | 'A'..'Z')*;

terminal STRING: 
	'"' (!('\\' | '"') | '\\' ("'" | '"' | '?' | '\\' | 'a' | 'b' | 'f' | 'n' | 'r' | 't' | 'v'))* '"';

terminal ONE:
	'1';

terminal REAL:
	('0'..'9')+ '.' ('0'..'9')* (('e' | 'E') ('+'|'-')? ('0'..'9')+)?;

terminal INTEGER:
	('0'..'9')+;

terminal ML_COMMENT:
	'/*' -> '*/';

terminal SL_COMMENT:
	'//' !('\n'|'\r')* ('\r'? '\n')?;

terminal WS:
	(' '|'\t'|'\r'|'\n')+;

terminal ANY_OTHER:
	.;
