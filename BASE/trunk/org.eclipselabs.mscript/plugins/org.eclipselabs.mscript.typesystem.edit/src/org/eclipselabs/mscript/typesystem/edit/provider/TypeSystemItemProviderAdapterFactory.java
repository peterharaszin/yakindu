/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipselabs.mscript.typesystem.edit.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipselabs.mscript.typesystem.util.TypeSystemAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class TypeSystemItemProviderAdapterFactory extends TypeSystemAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TypeSystemItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipselabs.mscript.typesystem.ArrayType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArrayTypeItemProvider arrayTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipselabs.mscript.typesystem.ArrayType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArrayTypeAdapter() {
		if (arrayTypeItemProvider == null) {
			arrayTypeItemProvider = new ArrayTypeItemProvider(this);
		}

		return arrayTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipselabs.mscript.typesystem.ArrayDimension} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArrayDimensionItemProvider arrayDimensionItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipselabs.mscript.typesystem.ArrayDimension}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArrayDimensionAdapter() {
		if (arrayDimensionItemProvider == null) {
			arrayDimensionItemProvider = new ArrayDimensionItemProvider(this);
		}

		return arrayDimensionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipselabs.mscript.typesystem.RealType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RealTypeItemProvider realTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipselabs.mscript.typesystem.RealType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRealTypeAdapter() {
		if (realTypeItemProvider == null) {
			realTypeItemProvider = new RealTypeItemProvider(this);
		}

		return realTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipselabs.mscript.typesystem.Unit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnitItemProvider unitItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipselabs.mscript.typesystem.Unit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnitAdapter() {
		if (unitItemProvider == null) {
			unitItemProvider = new UnitItemProvider(this);
		}

		return unitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipselabs.mscript.typesystem.UnitFactor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnitFactorItemProvider unitFactorItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipselabs.mscript.typesystem.UnitFactor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnitFactorAdapter() {
		if (unitFactorItemProvider == null) {
			unitFactorItemProvider = new UnitFactorItemProvider(this);
		}

		return unitFactorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipselabs.mscript.typesystem.IntegerType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerTypeItemProvider integerTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipselabs.mscript.typesystem.IntegerType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerTypeAdapter() {
		if (integerTypeItemProvider == null) {
			integerTypeItemProvider = new IntegerTypeItemProvider(this);
		}

		return integerTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipselabs.mscript.typesystem.BooleanType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanTypeItemProvider booleanTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipselabs.mscript.typesystem.BooleanType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanTypeAdapter() {
		if (booleanTypeItemProvider == null) {
			booleanTypeItemProvider = new BooleanTypeItemProvider(this);
		}

		return booleanTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipselabs.mscript.typesystem.StringType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringTypeItemProvider stringTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipselabs.mscript.typesystem.StringType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringTypeAdapter() {
		if (stringTypeItemProvider == null) {
			stringTypeItemProvider = new StringTypeItemProvider(this);
		}

		return stringTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipselabs.mscript.typesystem.InvalidDataType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InvalidDataTypeItemProvider invalidDataTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipselabs.mscript.typesystem.InvalidDataType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInvalidDataTypeAdapter() {
		if (invalidDataTypeItemProvider == null) {
			invalidDataTypeItemProvider = new InvalidDataTypeItemProvider(this);
		}

		return invalidDataTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipselabs.mscript.typesystem.TensorType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TensorTypeItemProvider tensorTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipselabs.mscript.typesystem.TensorType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTensorTypeAdapter() {
		if (tensorTypeItemProvider == null) {
			tensorTypeItemProvider = new TensorTypeItemProvider(this);
		}

		return tensorTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipselabs.mscript.typesystem.Record} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RecordItemProvider recordItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipselabs.mscript.typesystem.Record}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRecordAdapter() {
		if (recordItemProvider == null) {
			recordItemProvider = new RecordItemProvider(this);
		}

		return recordItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipselabs.mscript.typesystem.RecordField} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RecordFieldItemProvider recordFieldItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipselabs.mscript.typesystem.RecordField}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRecordFieldAdapter() {
		if (recordFieldItemProvider == null) {
			recordFieldItemProvider = new RecordFieldItemProvider(this);
		}

		return recordFieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipselabs.mscript.typesystem.UnitType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnitTypeItemProvider unitTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipselabs.mscript.typesystem.UnitType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnitTypeAdapter() {
		if (unitTypeItemProvider == null) {
			unitTypeItemProvider = new UnitTypeItemProvider(this);
		}

		return unitTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipselabs.mscript.typesystem.AnyDataType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnyDataTypeItemProvider anyDataTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipselabs.mscript.typesystem.AnyDataType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnyDataTypeAdapter() {
		if (anyDataTypeItemProvider == null) {
			anyDataTypeItemProvider = new AnyDataTypeItemProvider(this);
		}

		return anyDataTypeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (arrayTypeItemProvider != null) arrayTypeItemProvider.dispose();
		if (arrayDimensionItemProvider != null) arrayDimensionItemProvider.dispose();
		if (realTypeItemProvider != null) realTypeItemProvider.dispose();
		if (unitItemProvider != null) unitItemProvider.dispose();
		if (unitFactorItemProvider != null) unitFactorItemProvider.dispose();
		if (integerTypeItemProvider != null) integerTypeItemProvider.dispose();
		if (booleanTypeItemProvider != null) booleanTypeItemProvider.dispose();
		if (stringTypeItemProvider != null) stringTypeItemProvider.dispose();
		if (invalidDataTypeItemProvider != null) invalidDataTypeItemProvider.dispose();
		if (tensorTypeItemProvider != null) tensorTypeItemProvider.dispose();
		if (recordItemProvider != null) recordItemProvider.dispose();
		if (recordFieldItemProvider != null) recordFieldItemProvider.dispose();
		if (unitTypeItemProvider != null) unitTypeItemProvider.dispose();
		if (anyDataTypeItemProvider != null) anyDataTypeItemProvider.dispose();
	}

}
