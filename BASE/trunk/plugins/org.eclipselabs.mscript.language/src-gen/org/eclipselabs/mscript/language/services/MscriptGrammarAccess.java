/*
* generated by Xtext
*/

package org.eclipselabs.mscript.language.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class MscriptGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Module");
		private final Assignment cDefinitionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDefinitionsDefinitionParserRuleCall_0 = (RuleCall)cDefinitionsAssignment.eContents().get(0);
		
		//Module:
		//	definitions+=Definition*;
		public ParserRule getRule() { return rule; }

		//definitions+=Definition*
		public Assignment getDefinitionsAssignment() { return cDefinitionsAssignment; }

		//Definition
		public RuleCall getDefinitionsDefinitionParserRuleCall_0() { return cDefinitionsDefinitionParserRuleCall_0; }
	}

	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Definition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDataTypeDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Definition:
		//	DataTypeDefinition | FunctionDefinition;
		public ParserRule getRule() { return rule; }

		//DataTypeDefinition | FunctionDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//DataTypeDefinition
		public RuleCall getDataTypeDefinitionParserRuleCall_0() { return cDataTypeDefinitionParserRuleCall_0; }

		//FunctionDefinition
		public RuleCall getFunctionDefinitionParserRuleCall_1() { return cFunctionDefinitionParserRuleCall_1; }
	}

	public class DataTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataTypeDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnumerationDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRecordDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTypeAliasDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		/// *
		// * DataTypeDefinition
		// * /DataTypeDefinition:
		//	EnumerationDefinition | RecordDefinition | TypeAliasDefinition;
		public ParserRule getRule() { return rule; }

		//EnumerationDefinition | RecordDefinition | TypeAliasDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//EnumerationDefinition
		public RuleCall getEnumerationDefinitionParserRuleCall_0() { return cEnumerationDefinitionParserRuleCall_0; }

		//RecordDefinition
		public RuleCall getRecordDefinitionParserRuleCall_1() { return cRecordDefinitionParserRuleCall_1; }

		//TypeAliasDefinition
		public RuleCall getTypeAliasDefinitionParserRuleCall_2() { return cTypeAliasDefinitionParserRuleCall_2; }
	}

	public class EnumerationDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumerationDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cLiteralDeclarationsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cLiteralDeclarationsEnumerationLiteralDeclarationParserRuleCall_3_0_0 = (RuleCall)cLiteralDeclarationsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cLiteralDeclarationsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cLiteralDeclarationsEnumerationLiteralDeclarationParserRuleCall_3_1_1_0 = (RuleCall)cLiteralDeclarationsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// *
		// * Enumeration
		// * /EnumerationDefinition:
		//	"enum" name=ID "{" (literalDeclarations+=EnumerationLiteralDeclaration (","
		//	literalDeclarations+=EnumerationLiteralDeclaration)*)? "}";
		public ParserRule getRule() { return rule; }

		//"enum" name=ID "{" (literalDeclarations+=EnumerationLiteralDeclaration (","
		//literalDeclarations+=EnumerationLiteralDeclaration)*)? "}"
		public Group getGroup() { return cGroup; }

		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(literalDeclarations+=EnumerationLiteralDeclaration ("," literalDeclarations+=EnumerationLiteralDeclaration)*)?
		public Group getGroup_3() { return cGroup_3; }

		//literalDeclarations+=EnumerationLiteralDeclaration
		public Assignment getLiteralDeclarationsAssignment_3_0() { return cLiteralDeclarationsAssignment_3_0; }

		//EnumerationLiteralDeclaration
		public RuleCall getLiteralDeclarationsEnumerationLiteralDeclarationParserRuleCall_3_0_0() { return cLiteralDeclarationsEnumerationLiteralDeclarationParserRuleCall_3_0_0; }

		//("," literalDeclarations+=EnumerationLiteralDeclaration)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//literalDeclarations+=EnumerationLiteralDeclaration
		public Assignment getLiteralDeclarationsAssignment_3_1_1() { return cLiteralDeclarationsAssignment_3_1_1; }

		//EnumerationLiteralDeclaration
		public RuleCall getLiteralDeclarationsEnumerationLiteralDeclarationParserRuleCall_3_1_1_0() { return cLiteralDeclarationsEnumerationLiteralDeclarationParserRuleCall_3_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class EnumerationLiteralDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumerationLiteralDeclaration");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//EnumerationLiteralDeclaration:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class TypeAliasDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeAliasDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypePrimitiveTypeSpecifierParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// *
		// * TypeAlias
		// * /TypeAliasDefinition:
		//	"type" name=ID "=" type=PrimitiveTypeSpecifier ";";
		public ParserRule getRule() { return rule; }

		//"type" name=ID "=" type=PrimitiveTypeSpecifier ";"
		public Group getGroup() { return cGroup; }

		//"type"
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//type=PrimitiveTypeSpecifier
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//PrimitiveTypeSpecifier
		public RuleCall getTypePrimitiveTypeSpecifierParserRuleCall_3_0() { return cTypePrimitiveTypeSpecifierParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class RecordDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RecordDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRecordKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFieldDeclarationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFieldDeclarationsRecordFieldDeclarationParserRuleCall_3_0 = (RuleCall)cFieldDeclarationsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// *
		// * Record
		// * /RecordDefinition:
		//	"record" name=ID "{" fieldDeclarations+=RecordFieldDeclaration* "}";
		public ParserRule getRule() { return rule; }

		//"record" name=ID "{" fieldDeclarations+=RecordFieldDeclaration* "}"
		public Group getGroup() { return cGroup; }

		//"record"
		public Keyword getRecordKeyword_0() { return cRecordKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//fieldDeclarations+=RecordFieldDeclaration*
		public Assignment getFieldDeclarationsAssignment_3() { return cFieldDeclarationsAssignment_3; }

		//RecordFieldDeclaration
		public RuleCall getFieldDeclarationsRecordFieldDeclarationParserRuleCall_3_0() { return cFieldDeclarationsRecordFieldDeclarationParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class RecordFieldDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RecordFieldDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeDataTypeSpecifierParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RecordFieldDeclaration:
		//	name=ID ":" type=DataTypeSpecifier ";";
		public ParserRule getRule() { return rule; }

		//name=ID ":" type=DataTypeSpecifier ";"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=DataTypeSpecifier
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//DataTypeSpecifier
		public RuleCall getTypeDataTypeSpecifierParserRuleCall_2_0() { return cTypeDataTypeSpecifierParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class FunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStatefulAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cStatefulStatefulKeyword_0_0 = (Keyword)cStatefulAssignment_0.eContents().get(0);
		private final Keyword cFuncKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLessThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTemplateParameterDeclarationsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTemplateParameterDeclarationsParameterDeclarationParserRuleCall_3_1_0 = (RuleCall)cTemplateParameterDeclarationsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cTemplateParameterDeclarationsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cTemplateParameterDeclarationsParameterDeclarationParserRuleCall_3_2_1_0 = (RuleCall)cTemplateParameterDeclarationsAssignment_3_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cInputParameterDeclarationsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cInputParameterDeclarationsParameterDeclarationParserRuleCall_5_0_0 = (RuleCall)cInputParameterDeclarationsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cInputParameterDeclarationsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cInputParameterDeclarationsParameterDeclarationParserRuleCall_5_1_1_0 = (RuleCall)cInputParameterDeclarationsAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cOutputParameterDeclarationsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cOutputParameterDeclarationsParameterDeclarationParserRuleCall_8_0 = (RuleCall)cOutputParameterDeclarationsAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cCommaKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cOutputParameterDeclarationsAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cOutputParameterDeclarationsParameterDeclarationParserRuleCall_9_1_0 = (RuleCall)cOutputParameterDeclarationsAssignment_9_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Alternatives cAlternatives_11 = (Alternatives)cGroup.eContents().get(11);
		private final Assignment cAssertionsAssignment_11_0 = (Assignment)cAlternatives_11.eContents().get(0);
		private final RuleCall cAssertionsAssertionParserRuleCall_11_0_0 = (RuleCall)cAssertionsAssignment_11_0.eContents().get(0);
		private final Assignment cFunctorDeclarationsAssignment_11_1 = (Assignment)cAlternatives_11.eContents().get(1);
		private final RuleCall cFunctorDeclarationsFunctorDeclarationParserRuleCall_11_1_0 = (RuleCall)cFunctorDeclarationsAssignment_11_1.eContents().get(0);
		private final Assignment cStateVariableDeclarationsAssignment_11_2 = (Assignment)cAlternatives_11.eContents().get(2);
		private final RuleCall cStateVariableDeclarationsStateVariableDeclarationParserRuleCall_11_2_0 = (RuleCall)cStateVariableDeclarationsAssignment_11_2.eContents().get(0);
		private final Assignment cEquationsAssignment_11_3 = (Assignment)cAlternatives_11.eContents().get(3);
		private final RuleCall cEquationsEquationParserRuleCall_11_3_0 = (RuleCall)cEquationsAssignment_11_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		/// *
		// * Function
		// * /FunctionDefinition:
		//	stateful?="stateful"? "func" name=ID ("<" templateParameterDeclarations+=ParameterDeclaration (","
		//	templateParameterDeclarations+=ParameterDeclaration)* ">")? "(" (inputParameterDeclarations+=ParameterDeclaration (","
		//	inputParameterDeclarations+=ParameterDeclaration)*)? ")" "->" outputParameterDeclarations+=ParameterDeclaration (","
		//	outputParameterDeclarations+=ParameterDeclaration)* "{" (assertions+=Assertion |
		//	functorDeclarations+=FunctorDeclaration | stateVariableDeclarations+=StateVariableDeclaration | equations+=Equation)*
		//	"}";
		public ParserRule getRule() { return rule; }

		//stateful?="stateful"? "func" name=ID ("<" templateParameterDeclarations+=ParameterDeclaration (","
		//templateParameterDeclarations+=ParameterDeclaration)* ">")? "(" (inputParameterDeclarations+=ParameterDeclaration (","
		//inputParameterDeclarations+=ParameterDeclaration)*)? ")" "->" outputParameterDeclarations+=ParameterDeclaration (","
		//outputParameterDeclarations+=ParameterDeclaration)* "{" (assertions+=Assertion |
		//functorDeclarations+=FunctorDeclaration | stateVariableDeclarations+=StateVariableDeclaration | equations+=Equation)*
		//"}"
		public Group getGroup() { return cGroup; }

		//stateful?="stateful"?
		public Assignment getStatefulAssignment_0() { return cStatefulAssignment_0; }

		//"stateful"
		public Keyword getStatefulStatefulKeyword_0_0() { return cStatefulStatefulKeyword_0_0; }

		//"func"
		public Keyword getFuncKeyword_1() { return cFuncKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("<" templateParameterDeclarations+=ParameterDeclaration ("," templateParameterDeclarations+=ParameterDeclaration)*
		//">")?
		public Group getGroup_3() { return cGroup_3; }

		//"<"
		public Keyword getLessThanSignKeyword_3_0() { return cLessThanSignKeyword_3_0; }

		//templateParameterDeclarations+=ParameterDeclaration
		public Assignment getTemplateParameterDeclarationsAssignment_3_1() { return cTemplateParameterDeclarationsAssignment_3_1; }

		//ParameterDeclaration
		public RuleCall getTemplateParameterDeclarationsParameterDeclarationParserRuleCall_3_1_0() { return cTemplateParameterDeclarationsParameterDeclarationParserRuleCall_3_1_0; }

		//("," templateParameterDeclarations+=ParameterDeclaration)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//templateParameterDeclarations+=ParameterDeclaration
		public Assignment getTemplateParameterDeclarationsAssignment_3_2_1() { return cTemplateParameterDeclarationsAssignment_3_2_1; }

		//ParameterDeclaration
		public RuleCall getTemplateParameterDeclarationsParameterDeclarationParserRuleCall_3_2_1_0() { return cTemplateParameterDeclarationsParameterDeclarationParserRuleCall_3_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_3_3() { return cGreaterThanSignKeyword_3_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//(inputParameterDeclarations+=ParameterDeclaration ("," inputParameterDeclarations+=ParameterDeclaration)*)?
		public Group getGroup_5() { return cGroup_5; }

		//inputParameterDeclarations+=ParameterDeclaration
		public Assignment getInputParameterDeclarationsAssignment_5_0() { return cInputParameterDeclarationsAssignment_5_0; }

		//ParameterDeclaration
		public RuleCall getInputParameterDeclarationsParameterDeclarationParserRuleCall_5_0_0() { return cInputParameterDeclarationsParameterDeclarationParserRuleCall_5_0_0; }

		//("," inputParameterDeclarations+=ParameterDeclaration)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }

		//inputParameterDeclarations+=ParameterDeclaration
		public Assignment getInputParameterDeclarationsAssignment_5_1_1() { return cInputParameterDeclarationsAssignment_5_1_1; }

		//ParameterDeclaration
		public RuleCall getInputParameterDeclarationsParameterDeclarationParserRuleCall_5_1_1_0() { return cInputParameterDeclarationsParameterDeclarationParserRuleCall_5_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_7() { return cHyphenMinusGreaterThanSignKeyword_7; }

		//outputParameterDeclarations+=ParameterDeclaration
		public Assignment getOutputParameterDeclarationsAssignment_8() { return cOutputParameterDeclarationsAssignment_8; }

		//ParameterDeclaration
		public RuleCall getOutputParameterDeclarationsParameterDeclarationParserRuleCall_8_0() { return cOutputParameterDeclarationsParameterDeclarationParserRuleCall_8_0; }

		//("," outputParameterDeclarations+=ParameterDeclaration)*
		public Group getGroup_9() { return cGroup_9; }

		//","
		public Keyword getCommaKeyword_9_0() { return cCommaKeyword_9_0; }

		//outputParameterDeclarations+=ParameterDeclaration
		public Assignment getOutputParameterDeclarationsAssignment_9_1() { return cOutputParameterDeclarationsAssignment_9_1; }

		//ParameterDeclaration
		public RuleCall getOutputParameterDeclarationsParameterDeclarationParserRuleCall_9_1_0() { return cOutputParameterDeclarationsParameterDeclarationParserRuleCall_9_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_10() { return cLeftCurlyBracketKeyword_10; }

		//(assertions+=Assertion | functorDeclarations+=FunctorDeclaration | stateVariableDeclarations+=StateVariableDeclaration |
		//equations+=Equation)*
		public Alternatives getAlternatives_11() { return cAlternatives_11; }

		//assertions+=Assertion
		public Assignment getAssertionsAssignment_11_0() { return cAssertionsAssignment_11_0; }

		//Assertion
		public RuleCall getAssertionsAssertionParserRuleCall_11_0_0() { return cAssertionsAssertionParserRuleCall_11_0_0; }

		//functorDeclarations+=FunctorDeclaration
		public Assignment getFunctorDeclarationsAssignment_11_1() { return cFunctorDeclarationsAssignment_11_1; }

		//FunctorDeclaration
		public RuleCall getFunctorDeclarationsFunctorDeclarationParserRuleCall_11_1_0() { return cFunctorDeclarationsFunctorDeclarationParserRuleCall_11_1_0; }

		//stateVariableDeclarations+=StateVariableDeclaration
		public Assignment getStateVariableDeclarationsAssignment_11_2() { return cStateVariableDeclarationsAssignment_11_2; }

		//StateVariableDeclaration
		public RuleCall getStateVariableDeclarationsStateVariableDeclarationParserRuleCall_11_2_0() { return cStateVariableDeclarationsStateVariableDeclarationParserRuleCall_11_2_0; }

		//equations+=Equation
		public Assignment getEquationsAssignment_11_3() { return cEquationsAssignment_11_3; }

		//Equation
		public RuleCall getEquationsEquationParserRuleCall_11_3_0() { return cEquationsEquationParserRuleCall_11_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}

	public class ParameterDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterDeclaration");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ParameterDeclaration:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class AssertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assertion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStaticAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cStaticStaticKeyword_0_0 = (Keyword)cStaticAssignment_0.eContents().get(0);
		private final Keyword cAssertKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatusKindAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatusKindAssertionStatusKindEnumRuleCall_4_0 = (RuleCall)cStatusKindAssignment_4.eContents().get(0);
		private final Assignment cMessageAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMessageExpressionParserRuleCall_5_0 = (RuleCall)cMessageAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Assertion:
		//	static?="static"? "assert" condition=Expression ":" statusKind=AssertionStatusKind message=Expression ";";
		public ParserRule getRule() { return rule; }

		//static?="static"? "assert" condition=Expression ":" statusKind=AssertionStatusKind message=Expression ";"
		public Group getGroup() { return cGroup; }

		//static?="static"?
		public Assignment getStaticAssignment_0() { return cStaticAssignment_0; }

		//"static"
		public Keyword getStaticStaticKeyword_0_0() { return cStaticStaticKeyword_0_0; }

		//"assert"
		public Keyword getAssertKeyword_1() { return cAssertKeyword_1; }

		//condition=Expression
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }

		//Expression
		public RuleCall getConditionExpressionParserRuleCall_2_0() { return cConditionExpressionParserRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//statusKind=AssertionStatusKind
		public Assignment getStatusKindAssignment_4() { return cStatusKindAssignment_4; }

		//AssertionStatusKind
		public RuleCall getStatusKindAssertionStatusKindEnumRuleCall_4_0() { return cStatusKindAssertionStatusKindEnumRuleCall_4_0; }

		//message=Expression
		public Assignment getMessageAssignment_5() { return cMessageAssignment_5; }

		//Expression
		public RuleCall getMessageExpressionParserRuleCall_5_0() { return cMessageExpressionParserRuleCall_5_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class StateVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//StateVariableDeclaration:
		//	"var" name=ID ";";
		public ParserRule getRule() { return rule; }

		//"var" name=ID ";"
		public Group getGroup() { return cGroup; }

		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class FunctorDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctorDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFunctionNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFunctionNameQualifiedNameParserRuleCall_3_0 = (RuleCall)cFunctionNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLessThanSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTemplateArgumentsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTemplateArgumentsExpressionParserRuleCall_4_1_0 = (RuleCall)cTemplateArgumentsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cTemplateArgumentsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cTemplateArgumentsExpressionParserRuleCall_4_2_1_0 = (RuleCall)cTemplateArgumentsAssignment_4_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//FunctorDeclaration:
		//	"functor" name=ID ":" functionName=QualifiedName ("<" templateArguments+=Expression (","
		//	templateArguments+=Expression)* ">")? ";";
		public ParserRule getRule() { return rule; }

		//"functor" name=ID ":" functionName=QualifiedName ("<" templateArguments+=Expression ("," templateArguments+=Expression)*
		//">")? ";"
		public Group getGroup() { return cGroup; }

		//"functor"
		public Keyword getFunctorKeyword_0() { return cFunctorKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//functionName=QualifiedName
		public Assignment getFunctionNameAssignment_3() { return cFunctionNameAssignment_3; }

		//QualifiedName
		public RuleCall getFunctionNameQualifiedNameParserRuleCall_3_0() { return cFunctionNameQualifiedNameParserRuleCall_3_0; }

		//("<" templateArguments+=Expression ("," templateArguments+=Expression)* ">")?
		public Group getGroup_4() { return cGroup_4; }

		//"<"
		public Keyword getLessThanSignKeyword_4_0() { return cLessThanSignKeyword_4_0; }

		//templateArguments+=Expression
		public Assignment getTemplateArgumentsAssignment_4_1() { return cTemplateArgumentsAssignment_4_1; }

		//Expression
		public RuleCall getTemplateArgumentsExpressionParserRuleCall_4_1_0() { return cTemplateArgumentsExpressionParserRuleCall_4_1_0; }

		//("," templateArguments+=Expression)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//templateArguments+=Expression
		public Assignment getTemplateArgumentsAssignment_4_2_1() { return cTemplateArgumentsAssignment_4_2_1; }

		//Expression
		public RuleCall getTemplateArgumentsExpressionParserRuleCall_4_2_1_0() { return cTemplateArgumentsExpressionParserRuleCall_4_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_4_3() { return cGreaterThanSignKeyword_4_3; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class EquationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Equation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftHandSideAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftHandSideExpressionParserRuleCall_0_0 = (RuleCall)cLeftHandSideAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightHandSideAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightHandSideExpressionParserRuleCall_2_0 = (RuleCall)cRightHandSideAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Equation:
		//	leftHandSide=Expression "=" rightHandSide=Expression ";";
		public ParserRule getRule() { return rule; }

		//leftHandSide=Expression "=" rightHandSide=Expression ";"
		public Group getGroup() { return cGroup; }

		//leftHandSide=Expression
		public Assignment getLeftHandSideAssignment_0() { return cLeftHandSideAssignment_0; }

		//Expression
		public RuleCall getLeftHandSideExpressionParserRuleCall_0_0() { return cLeftHandSideExpressionParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//rightHandSide=Expression
		public Assignment getRightHandSideAssignment_2() { return cRightHandSideAssignment_2; }

		//Expression
		public RuleCall getRightHandSideExpressionParserRuleCall_2_0() { return cRightHandSideExpressionParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class DataTypeSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataTypeSpecifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveTypeSpecifierParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNamedTypeSpecifierParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// *
		// * Data type specifier
		// * /DataTypeSpecifier:
		//	PrimitiveTypeSpecifier | NamedTypeSpecifier;
		public ParserRule getRule() { return rule; }

		//PrimitiveTypeSpecifier | NamedTypeSpecifier
		public Alternatives getAlternatives() { return cAlternatives; }

		//PrimitiveTypeSpecifier
		public RuleCall getPrimitiveTypeSpecifierParserRuleCall_0() { return cPrimitiveTypeSpecifierParserRuleCall_0; }

		//NamedTypeSpecifier
		public RuleCall getNamedTypeSpecifierParserRuleCall_1() { return cNamedTypeSpecifierParserRuleCall_1; }
	}

	public class PrimitiveTypeSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveTypeSpecifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumericTypeSpecifierParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanTypeSpecifierParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringTypeSpecifierParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//PrimitiveTypeSpecifier:
		//	NumericTypeSpecifier | BooleanTypeSpecifier | StringTypeSpecifier;
		public ParserRule getRule() { return rule; }

		//NumericTypeSpecifier | BooleanTypeSpecifier | StringTypeSpecifier
		public Alternatives getAlternatives() { return cAlternatives; }

		//NumericTypeSpecifier
		public RuleCall getNumericTypeSpecifierParserRuleCall_0() { return cNumericTypeSpecifierParserRuleCall_0; }

		//BooleanTypeSpecifier
		public RuleCall getBooleanTypeSpecifierParserRuleCall_1() { return cBooleanTypeSpecifierParserRuleCall_1; }

		//StringTypeSpecifier
		public RuleCall getStringTypeSpecifierParserRuleCall_2() { return cStringTypeSpecifierParserRuleCall_2; }
	}

	public class NumericTypeSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumericTypeSpecifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRealTypeSpecifierParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerTypeSpecifierParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cComplexTypeSpecifierParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cGaussianTypeSpecifierParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//NumericTypeSpecifier:
		//	RealTypeSpecifier | IntegerTypeSpecifier | ComplexTypeSpecifier | GaussianTypeSpecifier;
		public ParserRule getRule() { return rule; }

		//RealTypeSpecifier | IntegerTypeSpecifier | ComplexTypeSpecifier | GaussianTypeSpecifier
		public Alternatives getAlternatives() { return cAlternatives; }

		//RealTypeSpecifier
		public RuleCall getRealTypeSpecifierParserRuleCall_0() { return cRealTypeSpecifierParserRuleCall_0; }

		//IntegerTypeSpecifier
		public RuleCall getIntegerTypeSpecifierParserRuleCall_1() { return cIntegerTypeSpecifierParserRuleCall_1; }

		//ComplexTypeSpecifier
		public RuleCall getComplexTypeSpecifierParserRuleCall_2() { return cComplexTypeSpecifierParserRuleCall_2; }

		//GaussianTypeSpecifier
		public RuleCall getGaussianTypeSpecifierParserRuleCall_3() { return cGaussianTypeSpecifierParserRuleCall_3; }
	}

	public class RealTypeSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RealTypeSpecifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRealTypeSpecifierAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRealKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cUnitAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cUnitUnitExpressionParserRuleCall_2_1_0 = (RuleCall)cUnitAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDimensionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDimensionsArrayDimensionSpecificationParserRuleCall_3_1_0 = (RuleCall)cDimensionsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cDimensionsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cDimensionsArrayDimensionSpecificationParserRuleCall_3_2_1_0 = (RuleCall)cDimensionsAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//RealTypeSpecifier:
		//	{RealTypeSpecifier} "real" ("(" unit=UnitExpression ")")? ("[" dimensions+=ArrayDimensionSpecification (","
		//	dimensions+=ArrayDimensionSpecification)* "]")?;
		public ParserRule getRule() { return rule; }

		//{RealTypeSpecifier} "real" ("(" unit=UnitExpression ")")? ("[" dimensions+=ArrayDimensionSpecification (","
		//dimensions+=ArrayDimensionSpecification)* "]")?
		public Group getGroup() { return cGroup; }

		//{RealTypeSpecifier}
		public Action getRealTypeSpecifierAction_0() { return cRealTypeSpecifierAction_0; }

		//"real"
		public Keyword getRealKeyword_1() { return cRealKeyword_1; }

		//("(" unit=UnitExpression ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//unit=UnitExpression
		public Assignment getUnitAssignment_2_1() { return cUnitAssignment_2_1; }

		//UnitExpression
		public RuleCall getUnitUnitExpressionParserRuleCall_2_1_0() { return cUnitUnitExpressionParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//("[" dimensions+=ArrayDimensionSpecification ("," dimensions+=ArrayDimensionSpecification)* "]")?
		public Group getGroup_3() { return cGroup_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }

		//dimensions+=ArrayDimensionSpecification
		public Assignment getDimensionsAssignment_3_1() { return cDimensionsAssignment_3_1; }

		//ArrayDimensionSpecification
		public RuleCall getDimensionsArrayDimensionSpecificationParserRuleCall_3_1_0() { return cDimensionsArrayDimensionSpecificationParserRuleCall_3_1_0; }

		//("," dimensions+=ArrayDimensionSpecification)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//dimensions+=ArrayDimensionSpecification
		public Assignment getDimensionsAssignment_3_2_1() { return cDimensionsAssignment_3_2_1; }

		//ArrayDimensionSpecification
		public RuleCall getDimensionsArrayDimensionSpecificationParserRuleCall_3_2_1_0() { return cDimensionsArrayDimensionSpecificationParserRuleCall_3_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_3() { return cRightSquareBracketKeyword_3_3; }
	}

	public class IntegerTypeSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerTypeSpecifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntegerTypeSpecifierAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIntKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cUnitAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cUnitUnitExpressionParserRuleCall_2_1_0 = (RuleCall)cUnitAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDimensionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDimensionsArrayDimensionSpecificationParserRuleCall_3_1_0 = (RuleCall)cDimensionsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cDimensionsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cDimensionsArrayDimensionSpecificationParserRuleCall_3_2_1_0 = (RuleCall)cDimensionsAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//IntegerTypeSpecifier:
		//	{IntegerTypeSpecifier} "int" ("(" unit=UnitExpression ")")? ("[" dimensions+=ArrayDimensionSpecification (","
		//	dimensions+=ArrayDimensionSpecification)* "]")?;
		public ParserRule getRule() { return rule; }

		//{IntegerTypeSpecifier} "int" ("(" unit=UnitExpression ")")? ("[" dimensions+=ArrayDimensionSpecification (","
		//dimensions+=ArrayDimensionSpecification)* "]")?
		public Group getGroup() { return cGroup; }

		//{IntegerTypeSpecifier}
		public Action getIntegerTypeSpecifierAction_0() { return cIntegerTypeSpecifierAction_0; }

		//"int"
		public Keyword getIntKeyword_1() { return cIntKeyword_1; }

		//("(" unit=UnitExpression ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//unit=UnitExpression
		public Assignment getUnitAssignment_2_1() { return cUnitAssignment_2_1; }

		//UnitExpression
		public RuleCall getUnitUnitExpressionParserRuleCall_2_1_0() { return cUnitUnitExpressionParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//("[" dimensions+=ArrayDimensionSpecification ("," dimensions+=ArrayDimensionSpecification)* "]")?
		public Group getGroup_3() { return cGroup_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }

		//dimensions+=ArrayDimensionSpecification
		public Assignment getDimensionsAssignment_3_1() { return cDimensionsAssignment_3_1; }

		//ArrayDimensionSpecification
		public RuleCall getDimensionsArrayDimensionSpecificationParserRuleCall_3_1_0() { return cDimensionsArrayDimensionSpecificationParserRuleCall_3_1_0; }

		//("," dimensions+=ArrayDimensionSpecification)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//dimensions+=ArrayDimensionSpecification
		public Assignment getDimensionsAssignment_3_2_1() { return cDimensionsAssignment_3_2_1; }

		//ArrayDimensionSpecification
		public RuleCall getDimensionsArrayDimensionSpecificationParserRuleCall_3_2_1_0() { return cDimensionsArrayDimensionSpecificationParserRuleCall_3_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_3() { return cRightSquareBracketKeyword_3_3; }
	}

	public class ComplexTypeSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComplexTypeSpecifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cComplexTypeSpecifierAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cComplexKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cUnitAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cUnitUnitExpressionParserRuleCall_2_1_0 = (RuleCall)cUnitAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDimensionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDimensionsArrayDimensionSpecificationParserRuleCall_3_1_0 = (RuleCall)cDimensionsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cDimensionsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cDimensionsArrayDimensionSpecificationParserRuleCall_3_2_1_0 = (RuleCall)cDimensionsAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//ComplexTypeSpecifier:
		//	{ComplexTypeSpecifier} "complex" ("(" unit=UnitExpression ")")? ("[" dimensions+=ArrayDimensionSpecification (","
		//	dimensions+=ArrayDimensionSpecification)* "]")?;
		public ParserRule getRule() { return rule; }

		//{ComplexTypeSpecifier} "complex" ("(" unit=UnitExpression ")")? ("[" dimensions+=ArrayDimensionSpecification (","
		//dimensions+=ArrayDimensionSpecification)* "]")?
		public Group getGroup() { return cGroup; }

		//{ComplexTypeSpecifier}
		public Action getComplexTypeSpecifierAction_0() { return cComplexTypeSpecifierAction_0; }

		//"complex"
		public Keyword getComplexKeyword_1() { return cComplexKeyword_1; }

		//("(" unit=UnitExpression ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//unit=UnitExpression
		public Assignment getUnitAssignment_2_1() { return cUnitAssignment_2_1; }

		//UnitExpression
		public RuleCall getUnitUnitExpressionParserRuleCall_2_1_0() { return cUnitUnitExpressionParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//("[" dimensions+=ArrayDimensionSpecification ("," dimensions+=ArrayDimensionSpecification)* "]")?
		public Group getGroup_3() { return cGroup_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }

		//dimensions+=ArrayDimensionSpecification
		public Assignment getDimensionsAssignment_3_1() { return cDimensionsAssignment_3_1; }

		//ArrayDimensionSpecification
		public RuleCall getDimensionsArrayDimensionSpecificationParserRuleCall_3_1_0() { return cDimensionsArrayDimensionSpecificationParserRuleCall_3_1_0; }

		//("," dimensions+=ArrayDimensionSpecification)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//dimensions+=ArrayDimensionSpecification
		public Assignment getDimensionsAssignment_3_2_1() { return cDimensionsAssignment_3_2_1; }

		//ArrayDimensionSpecification
		public RuleCall getDimensionsArrayDimensionSpecificationParserRuleCall_3_2_1_0() { return cDimensionsArrayDimensionSpecificationParserRuleCall_3_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_3() { return cRightSquareBracketKeyword_3_3; }
	}

	public class GaussianTypeSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GaussianTypeSpecifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGaussianTypeSpecifierAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGaussKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cUnitAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cUnitUnitExpressionParserRuleCall_2_1_0 = (RuleCall)cUnitAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDimensionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDimensionsArrayDimensionSpecificationParserRuleCall_3_1_0 = (RuleCall)cDimensionsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cDimensionsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cDimensionsArrayDimensionSpecificationParserRuleCall_3_2_1_0 = (RuleCall)cDimensionsAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//GaussianTypeSpecifier:
		//	{GaussianTypeSpecifier} "gauss" ("(" unit=UnitExpression ")")? ("[" dimensions+=ArrayDimensionSpecification (","
		//	dimensions+=ArrayDimensionSpecification)* "]")?;
		public ParserRule getRule() { return rule; }

		//{GaussianTypeSpecifier} "gauss" ("(" unit=UnitExpression ")")? ("[" dimensions+=ArrayDimensionSpecification (","
		//dimensions+=ArrayDimensionSpecification)* "]")?
		public Group getGroup() { return cGroup; }

		//{GaussianTypeSpecifier}
		public Action getGaussianTypeSpecifierAction_0() { return cGaussianTypeSpecifierAction_0; }

		//"gauss"
		public Keyword getGaussKeyword_1() { return cGaussKeyword_1; }

		//("(" unit=UnitExpression ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//unit=UnitExpression
		public Assignment getUnitAssignment_2_1() { return cUnitAssignment_2_1; }

		//UnitExpression
		public RuleCall getUnitUnitExpressionParserRuleCall_2_1_0() { return cUnitUnitExpressionParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//("[" dimensions+=ArrayDimensionSpecification ("," dimensions+=ArrayDimensionSpecification)* "]")?
		public Group getGroup_3() { return cGroup_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }

		//dimensions+=ArrayDimensionSpecification
		public Assignment getDimensionsAssignment_3_1() { return cDimensionsAssignment_3_1; }

		//ArrayDimensionSpecification
		public RuleCall getDimensionsArrayDimensionSpecificationParserRuleCall_3_1_0() { return cDimensionsArrayDimensionSpecificationParserRuleCall_3_1_0; }

		//("," dimensions+=ArrayDimensionSpecification)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//dimensions+=ArrayDimensionSpecification
		public Assignment getDimensionsAssignment_3_2_1() { return cDimensionsAssignment_3_2_1; }

		//ArrayDimensionSpecification
		public RuleCall getDimensionsArrayDimensionSpecificationParserRuleCall_3_2_1_0() { return cDimensionsArrayDimensionSpecificationParserRuleCall_3_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_3() { return cRightSquareBracketKeyword_3_3; }
	}

	public class BooleanTypeSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanTypeSpecifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanTypeSpecifierAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBoolKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDimensionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDimensionsArrayDimensionSpecificationParserRuleCall_2_1_0 = (RuleCall)cDimensionsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cDimensionsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cDimensionsArrayDimensionSpecificationParserRuleCall_2_2_1_0 = (RuleCall)cDimensionsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//BooleanTypeSpecifier:
		//	{BooleanTypeSpecifier} "bool" ("[" dimensions+=ArrayDimensionSpecification (","
		//	dimensions+=ArrayDimensionSpecification)* "]")?;
		public ParserRule getRule() { return rule; }

		//{BooleanTypeSpecifier} "bool" ("[" dimensions+=ArrayDimensionSpecification (","
		//dimensions+=ArrayDimensionSpecification)* "]")?
		public Group getGroup() { return cGroup; }

		//{BooleanTypeSpecifier}
		public Action getBooleanTypeSpecifierAction_0() { return cBooleanTypeSpecifierAction_0; }

		//"bool"
		public Keyword getBoolKeyword_1() { return cBoolKeyword_1; }

		//("[" dimensions+=ArrayDimensionSpecification ("," dimensions+=ArrayDimensionSpecification)* "]")?
		public Group getGroup_2() { return cGroup_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//dimensions+=ArrayDimensionSpecification
		public Assignment getDimensionsAssignment_2_1() { return cDimensionsAssignment_2_1; }

		//ArrayDimensionSpecification
		public RuleCall getDimensionsArrayDimensionSpecificationParserRuleCall_2_1_0() { return cDimensionsArrayDimensionSpecificationParserRuleCall_2_1_0; }

		//("," dimensions+=ArrayDimensionSpecification)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//dimensions+=ArrayDimensionSpecification
		public Assignment getDimensionsAssignment_2_2_1() { return cDimensionsAssignment_2_2_1; }

		//ArrayDimensionSpecification
		public RuleCall getDimensionsArrayDimensionSpecificationParserRuleCall_2_2_1_0() { return cDimensionsArrayDimensionSpecificationParserRuleCall_2_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_3() { return cRightSquareBracketKeyword_2_3; }
	}

	public class StringTypeSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringTypeSpecifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringTypeSpecifierAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStringKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDimensionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDimensionsArrayDimensionSpecificationParserRuleCall_2_1_0 = (RuleCall)cDimensionsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cDimensionsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cDimensionsArrayDimensionSpecificationParserRuleCall_2_2_1_0 = (RuleCall)cDimensionsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//StringTypeSpecifier:
		//	{StringTypeSpecifier} "string" ("[" dimensions+=ArrayDimensionSpecification (","
		//	dimensions+=ArrayDimensionSpecification)* "]")?;
		public ParserRule getRule() { return rule; }

		//{StringTypeSpecifier} "string" ("[" dimensions+=ArrayDimensionSpecification (","
		//dimensions+=ArrayDimensionSpecification)* "]")?
		public Group getGroup() { return cGroup; }

		//{StringTypeSpecifier}
		public Action getStringTypeSpecifierAction_0() { return cStringTypeSpecifierAction_0; }

		//"string"
		public Keyword getStringKeyword_1() { return cStringKeyword_1; }

		//("[" dimensions+=ArrayDimensionSpecification ("," dimensions+=ArrayDimensionSpecification)* "]")?
		public Group getGroup_2() { return cGroup_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//dimensions+=ArrayDimensionSpecification
		public Assignment getDimensionsAssignment_2_1() { return cDimensionsAssignment_2_1; }

		//ArrayDimensionSpecification
		public RuleCall getDimensionsArrayDimensionSpecificationParserRuleCall_2_1_0() { return cDimensionsArrayDimensionSpecificationParserRuleCall_2_1_0; }

		//("," dimensions+=ArrayDimensionSpecification)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//dimensions+=ArrayDimensionSpecification
		public Assignment getDimensionsAssignment_2_2_1() { return cDimensionsAssignment_2_2_1; }

		//ArrayDimensionSpecification
		public RuleCall getDimensionsArrayDimensionSpecificationParserRuleCall_2_2_1_0() { return cDimensionsArrayDimensionSpecificationParserRuleCall_2_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_3() { return cRightSquareBracketKeyword_2_3; }
	}

	public class NamedTypeSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamedTypeSpecifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeReferenceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeReferenceQualifiedNameParserRuleCall_0_0 = (RuleCall)cTypeReferenceAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDimensionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDimensionsArrayDimensionSpecificationParserRuleCall_1_1_0 = (RuleCall)cDimensionsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cDimensionsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cDimensionsArrayDimensionSpecificationParserRuleCall_1_2_1_0 = (RuleCall)cDimensionsAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//NamedTypeSpecifier:
		//	typeReference=QualifiedName ("[" dimensions+=ArrayDimensionSpecification (","
		//	dimensions+=ArrayDimensionSpecification)* "]")?;
		public ParserRule getRule() { return rule; }

		//typeReference=QualifiedName ("[" dimensions+=ArrayDimensionSpecification ("," dimensions+=ArrayDimensionSpecification)*
		//"]")?
		public Group getGroup() { return cGroup; }

		//typeReference=QualifiedName
		public Assignment getTypeReferenceAssignment_0() { return cTypeReferenceAssignment_0; }

		//QualifiedName
		public RuleCall getTypeReferenceQualifiedNameParserRuleCall_0_0() { return cTypeReferenceQualifiedNameParserRuleCall_0_0; }

		//("[" dimensions+=ArrayDimensionSpecification ("," dimensions+=ArrayDimensionSpecification)* "]")?
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//dimensions+=ArrayDimensionSpecification
		public Assignment getDimensionsAssignment_1_1() { return cDimensionsAssignment_1_1; }

		//ArrayDimensionSpecification
		public RuleCall getDimensionsArrayDimensionSpecificationParserRuleCall_1_1_0() { return cDimensionsArrayDimensionSpecificationParserRuleCall_1_1_0; }

		//("," dimensions+=ArrayDimensionSpecification)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//dimensions+=ArrayDimensionSpecification
		public Assignment getDimensionsAssignment_1_2_1() { return cDimensionsAssignment_1_2_1; }

		//ArrayDimensionSpecification
		public RuleCall getDimensionsArrayDimensionSpecificationParserRuleCall_1_2_1_0() { return cDimensionsArrayDimensionSpecificationParserRuleCall_1_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }
	}

	public class ArrayDimensionSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayDimensionSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArrayDimensionSpecificationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSizeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSizeExpressionParserRuleCall_1_0 = (RuleCall)cSizeAssignment_1.eContents().get(0);
		
		//ArrayDimensionSpecification:
		//	{ArrayDimensionSpecification} size=Expression?;
		public ParserRule getRule() { return rule; }

		//{ArrayDimensionSpecification} size=Expression?
		public Group getGroup() { return cGroup; }

		//{ArrayDimensionSpecification}
		public Action getArrayDimensionSpecificationAction_0() { return cArrayDimensionSpecificationAction_0; }

		//size=Expression?
		public Assignment getSizeAssignment_1() { return cSizeAssignment_1; }

		//Expression
		public RuleCall getSizeExpressionParserRuleCall_1_0() { return cSizeExpressionParserRuleCall_1_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLetExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIfExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSwitchExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRangeExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		/// *
		// * Expressions
		// * /Expression:
		//	LetExpression | IfExpression | SwitchExpression | RangeExpression;
		public ParserRule getRule() { return rule; }

		//LetExpression | IfExpression | SwitchExpression | RangeExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//LetExpression
		public RuleCall getLetExpressionParserRuleCall_0() { return cLetExpressionParserRuleCall_0; }

		//IfExpression
		public RuleCall getIfExpressionParserRuleCall_1() { return cIfExpressionParserRuleCall_1; }

		//SwitchExpression
		public RuleCall getSwitchExpressionParserRuleCall_2() { return cSwitchExpressionParserRuleCall_2; }

		//RangeExpression
		public RuleCall getRangeExpressionParserRuleCall_3() { return cRangeExpressionParserRuleCall_3; }
	}

	public class LetExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LetExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableDeclarationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableDeclarationsLetExpressionVariableDeclarationParserRuleCall_1_0 = (RuleCall)cVariableDeclarationsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariableDeclarationsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariableDeclarationsLetExpressionVariableDeclarationParserRuleCall_2_1_0 = (RuleCall)cVariableDeclarationsAssignment_2_1.eContents().get(0);
		private final Keyword cInKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTargetExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTargetExpressionExpressionParserRuleCall_4_0 = (RuleCall)cTargetExpressionAssignment_4.eContents().get(0);
		
		//LetExpression:
		//	"let" variableDeclarations+=LetExpressionVariableDeclaration (","
		//	variableDeclarations+=LetExpressionVariableDeclaration)* "in" targetExpression=Expression;
		public ParserRule getRule() { return rule; }

		//"let" variableDeclarations+=LetExpressionVariableDeclaration (","
		//variableDeclarations+=LetExpressionVariableDeclaration)* "in" targetExpression=Expression
		public Group getGroup() { return cGroup; }

		//"let"
		public Keyword getLetKeyword_0() { return cLetKeyword_0; }

		//variableDeclarations+=LetExpressionVariableDeclaration
		public Assignment getVariableDeclarationsAssignment_1() { return cVariableDeclarationsAssignment_1; }

		//LetExpressionVariableDeclaration
		public RuleCall getVariableDeclarationsLetExpressionVariableDeclarationParserRuleCall_1_0() { return cVariableDeclarationsLetExpressionVariableDeclarationParserRuleCall_1_0; }

		//("," variableDeclarations+=LetExpressionVariableDeclaration)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//variableDeclarations+=LetExpressionVariableDeclaration
		public Assignment getVariableDeclarationsAssignment_2_1() { return cVariableDeclarationsAssignment_2_1; }

		//LetExpressionVariableDeclaration
		public RuleCall getVariableDeclarationsLetExpressionVariableDeclarationParserRuleCall_2_1_0() { return cVariableDeclarationsLetExpressionVariableDeclarationParserRuleCall_2_1_0; }

		//"in"
		public Keyword getInKeyword_3() { return cInKeyword_3; }

		//targetExpression=Expression
		public Assignment getTargetExpressionAssignment_4() { return cTargetExpressionAssignment_4; }

		//Expression
		public RuleCall getTargetExpressionExpressionParserRuleCall_4_0() { return cTargetExpressionExpressionParserRuleCall_4_0; }
	}

	public class LetExpressionVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LetExpressionVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cNamesAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cNamesIDTerminalRuleCall_0_0_0 = (RuleCall)cNamesAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cNamesAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cNamesIDTerminalRuleCall_0_1_1_0 = (RuleCall)cNamesAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_0_1_2 = (Group)cGroup_0_1.eContents().get(2);
		private final Keyword cCommaKeyword_0_1_2_0 = (Keyword)cGroup_0_1_2.eContents().get(0);
		private final Assignment cNamesAssignment_0_1_2_1 = (Assignment)cGroup_0_1_2.eContents().get(1);
		private final RuleCall cNamesIDTerminalRuleCall_0_1_2_1_0 = (RuleCall)cNamesAssignment_0_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_1_3 = (Keyword)cGroup_0_1.eContents().get(3);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAssignedExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAssignedExpressionExpressionParserRuleCall_2_0 = (RuleCall)cAssignedExpressionAssignment_2.eContents().get(0);
		
		//LetExpressionVariableDeclaration:
		//	(names+=ID | "(" names+=ID ("," names+=ID)+ ")") "=" assignedExpression=Expression;
		public ParserRule getRule() { return rule; }

		//(names+=ID | "(" names+=ID ("," names+=ID)+ ")") "=" assignedExpression=Expression
		public Group getGroup() { return cGroup; }

		//names+=ID | "(" names+=ID ("," names+=ID)+ ")"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//names+=ID
		public Assignment getNamesAssignment_0_0() { return cNamesAssignment_0_0; }

		//ID
		public RuleCall getNamesIDTerminalRuleCall_0_0_0() { return cNamesIDTerminalRuleCall_0_0_0; }

		//"(" names+=ID ("," names+=ID)+ ")"
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_1_0() { return cLeftParenthesisKeyword_0_1_0; }

		//names+=ID
		public Assignment getNamesAssignment_0_1_1() { return cNamesAssignment_0_1_1; }

		//ID
		public RuleCall getNamesIDTerminalRuleCall_0_1_1_0() { return cNamesIDTerminalRuleCall_0_1_1_0; }

		//("," names+=ID)+
		public Group getGroup_0_1_2() { return cGroup_0_1_2; }

		//","
		public Keyword getCommaKeyword_0_1_2_0() { return cCommaKeyword_0_1_2_0; }

		//names+=ID
		public Assignment getNamesAssignment_0_1_2_1() { return cNamesAssignment_0_1_2_1; }

		//ID
		public RuleCall getNamesIDTerminalRuleCall_0_1_2_1_0() { return cNamesIDTerminalRuleCall_0_1_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_1_3() { return cRightParenthesisKeyword_0_1_3; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//assignedExpression=Expression
		public Assignment getAssignedExpressionAssignment_2() { return cAssignedExpressionAssignment_2; }

		//Expression
		public RuleCall getAssignedExpressionExpressionParserRuleCall_2_0() { return cAssignedExpressionExpressionParserRuleCall_2_0; }
	}

	public class IfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStaticAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cStaticStaticKeyword_0_0 = (Keyword)cStaticAssignment_0.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cThenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenExpressionExpressionParserRuleCall_4_0 = (RuleCall)cThenExpressionAssignment_4.eContents().get(0);
		private final Keyword cElseKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cElseExpressionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cElseExpressionExpressionParserRuleCall_6_0 = (RuleCall)cElseExpressionAssignment_6.eContents().get(0);
		
		//IfExpression:
		//	static?="static"? "if" condition=Expression "then" thenExpression=Expression "else" elseExpression=Expression;
		public ParserRule getRule() { return rule; }

		//static?="static"? "if" condition=Expression "then" thenExpression=Expression "else" elseExpression=Expression
		public Group getGroup() { return cGroup; }

		//static?="static"?
		public Assignment getStaticAssignment_0() { return cStaticAssignment_0; }

		//"static"
		public Keyword getStaticStaticKeyword_0_0() { return cStaticStaticKeyword_0_0; }

		//"if"
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }

		//condition=Expression
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }

		//Expression
		public RuleCall getConditionExpressionParserRuleCall_2_0() { return cConditionExpressionParserRuleCall_2_0; }

		//"then"
		public Keyword getThenKeyword_3() { return cThenKeyword_3; }

		//thenExpression=Expression
		public Assignment getThenExpressionAssignment_4() { return cThenExpressionAssignment_4; }

		//Expression
		public RuleCall getThenExpressionExpressionParserRuleCall_4_0() { return cThenExpressionExpressionParserRuleCall_4_0; }

		//"else"
		public Keyword getElseKeyword_5() { return cElseKeyword_5; }

		//elseExpression=Expression
		public Assignment getElseExpressionAssignment_6() { return cElseExpressionAssignment_6; }

		//Expression
		public RuleCall getElseExpressionExpressionParserRuleCall_6_0() { return cElseExpressionExpressionParserRuleCall_6_0; }
	}

	public class SwitchExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SwitchExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStaticAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cStaticStaticKeyword_0_0 = (Keyword)cStaticAssignment_0.eContents().get(0);
		private final Keyword cSwitchKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cControlExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cControlExpressionExpressionParserRuleCall_2_0 = (RuleCall)cControlExpressionAssignment_2.eContents().get(0);
		private final Assignment cCasesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCasesSwitchCaseParserRuleCall_3_0 = (RuleCall)cCasesAssignment_3.eContents().get(0);
		private final Keyword cDefaultKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDefaultExpressionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDefaultExpressionExpressionParserRuleCall_6_0 = (RuleCall)cDefaultExpressionAssignment_6.eContents().get(0);
		
		//SwitchExpression:
		//	static?="static"? "switch" controlExpression=Expression cases+=SwitchCase* "default" ":" defaultExpression=Expression;
		public ParserRule getRule() { return rule; }

		//static?="static"? "switch" controlExpression=Expression cases+=SwitchCase* "default" ":" defaultExpression=Expression
		public Group getGroup() { return cGroup; }

		//static?="static"?
		public Assignment getStaticAssignment_0() { return cStaticAssignment_0; }

		//"static"
		public Keyword getStaticStaticKeyword_0_0() { return cStaticStaticKeyword_0_0; }

		//"switch"
		public Keyword getSwitchKeyword_1() { return cSwitchKeyword_1; }

		//controlExpression=Expression
		public Assignment getControlExpressionAssignment_2() { return cControlExpressionAssignment_2; }

		//Expression
		public RuleCall getControlExpressionExpressionParserRuleCall_2_0() { return cControlExpressionExpressionParserRuleCall_2_0; }

		//cases+=SwitchCase*
		public Assignment getCasesAssignment_3() { return cCasesAssignment_3; }

		//SwitchCase
		public RuleCall getCasesSwitchCaseParserRuleCall_3_0() { return cCasesSwitchCaseParserRuleCall_3_0; }

		//"default"
		public Keyword getDefaultKeyword_4() { return cDefaultKeyword_4; }

		//":"
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }

		//defaultExpression=Expression
		public Assignment getDefaultExpressionAssignment_6() { return cDefaultExpressionAssignment_6; }

		//Expression
		public RuleCall getDefaultExpressionExpressionParserRuleCall_6_0() { return cDefaultExpressionExpressionParserRuleCall_6_0; }
	}

	public class SwitchCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SwitchCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCaseExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCaseExpressionImpliesExpressionParserRuleCall_1_0 = (RuleCall)cCaseExpressionAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cResultExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cResultExpressionExpressionParserRuleCall_3_0 = (RuleCall)cResultExpressionAssignment_3.eContents().get(0);
		
		//SwitchCase:
		//	"case" caseExpression=ImpliesExpression ":" resultExpression=Expression;
		public ParserRule getRule() { return rule; }

		//"case" caseExpression=ImpliesExpression ":" resultExpression=Expression
		public Group getGroup() { return cGroup; }

		//"case"
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }

		//caseExpression=ImpliesExpression
		public Assignment getCaseExpressionAssignment_1() { return cCaseExpressionAssignment_1; }

		//ImpliesExpression
		public RuleCall getCaseExpressionImpliesExpressionParserRuleCall_1_0() { return cCaseExpressionImpliesExpressionParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//resultExpression=Expression
		public Assignment getResultExpressionAssignment_3() { return cResultExpressionAssignment_3; }

		//Expression
		public RuleCall getResultExpressionExpressionParserRuleCall_3_0() { return cResultExpressionExpressionParserRuleCall_3_0; }
	}

	public class RangeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RangeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cImpliesExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cRangeExpressionOperandsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOperandsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperandsImpliesExpressionParserRuleCall_1_2_0 = (RuleCall)cOperandsAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cColonKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cOperandsAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cOperandsImpliesExpressionParserRuleCall_1_3_1_0 = (RuleCall)cOperandsAssignment_1_3_1.eContents().get(0);
		
		//RangeExpression returns Expression:
		//	ImpliesExpression ({RangeExpression.operands+=current} ":" operands+=ImpliesExpression (":"
		//	operands+=ImpliesExpression)?)?;
		public ParserRule getRule() { return rule; }

		//ImpliesExpression ({RangeExpression.operands+=current} ":" operands+=ImpliesExpression (":"
		//operands+=ImpliesExpression)?)?
		public Group getGroup() { return cGroup; }

		//ImpliesExpression
		public RuleCall getImpliesExpressionParserRuleCall_0() { return cImpliesExpressionParserRuleCall_0; }

		//({RangeExpression.operands+=current} ":" operands+=ImpliesExpression (":" operands+=ImpliesExpression)?)?
		public Group getGroup_1() { return cGroup_1; }

		//{RangeExpression.operands+=current}
		public Action getRangeExpressionOperandsAction_1_0() { return cRangeExpressionOperandsAction_1_0; }

		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }

		//operands+=ImpliesExpression
		public Assignment getOperandsAssignment_1_2() { return cOperandsAssignment_1_2; }

		//ImpliesExpression
		public RuleCall getOperandsImpliesExpressionParserRuleCall_1_2_0() { return cOperandsImpliesExpressionParserRuleCall_1_2_0; }

		//(":" operands+=ImpliesExpression)?
		public Group getGroup_1_3() { return cGroup_1_3; }

		//":"
		public Keyword getColonKeyword_1_3_0() { return cColonKeyword_1_3_0; }

		//operands+=ImpliesExpression
		public Assignment getOperandsAssignment_1_3_1() { return cOperandsAssignment_1_3_1; }

		//ImpliesExpression
		public RuleCall getOperandsImpliesExpressionParserRuleCall_1_3_1_0() { return cOperandsImpliesExpressionParserRuleCall_1_3_1_0; }
	}

	public class ImpliesExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImpliesExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cImpliesExpressionLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandLogicalOrExpressionParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//ImpliesExpression returns Expression:
		//	LogicalOrExpression ({ImpliesExpression.leftOperand=current} "=>" rightOperand=LogicalOrExpression)?;
		public ParserRule getRule() { return rule; }

		//LogicalOrExpression ({ImpliesExpression.leftOperand=current} "=>" rightOperand=LogicalOrExpression)?
		public Group getGroup() { return cGroup; }

		//LogicalOrExpression
		public RuleCall getLogicalOrExpressionParserRuleCall_0() { return cLogicalOrExpressionParserRuleCall_0; }

		//({ImpliesExpression.leftOperand=current} "=>" rightOperand=LogicalOrExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//{ImpliesExpression.leftOperand=current}
		public Action getImpliesExpressionLeftOperandAction_1_0() { return cImpliesExpressionLeftOperandAction_1_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_1_1() { return cEqualsSignGreaterThanSignKeyword_1_1; }

		//rightOperand=LogicalOrExpression
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//LogicalOrExpression
		public RuleCall getRightOperandLogicalOrExpressionParserRuleCall_1_2_0() { return cRightOperandLogicalOrExpressionParserRuleCall_1_2_0; }
	}

	public class LogicalOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicalOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicalOrExpressionOperandsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cOperandsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cOperandsLogicalAndExpressionParserRuleCall_1_1_1_0 = (RuleCall)cOperandsAssignment_1_1_1.eContents().get(0);
		
		//LogicalOrExpression returns Expression:
		//	LogicalAndExpression ({LogicalOrExpression.operands+=current} ("||" operands+=LogicalAndExpression)+)?;
		public ParserRule getRule() { return rule; }

		//LogicalAndExpression ({LogicalOrExpression.operands+=current} ("||" operands+=LogicalAndExpression)+)?
		public Group getGroup() { return cGroup; }

		//LogicalAndExpression
		public RuleCall getLogicalAndExpressionParserRuleCall_0() { return cLogicalAndExpressionParserRuleCall_0; }

		//({LogicalOrExpression.operands+=current} ("||" operands+=LogicalAndExpression)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{LogicalOrExpression.operands+=current}
		public Action getLogicalOrExpressionOperandsAction_1_0() { return cLogicalOrExpressionOperandsAction_1_0; }

		//("||" operands+=LogicalAndExpression)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_1_0() { return cVerticalLineVerticalLineKeyword_1_1_0; }

		//operands+=LogicalAndExpression
		public Assignment getOperandsAssignment_1_1_1() { return cOperandsAssignment_1_1_1; }

		//LogicalAndExpression
		public RuleCall getOperandsLogicalAndExpressionParserRuleCall_1_1_1_0() { return cOperandsLogicalAndExpressionParserRuleCall_1_1_1_0; }
	}

	public class LogicalAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicalAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicalAndExpressionOperandsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cAmpersandAmpersandKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cOperandsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cOperandsEqualityExpressionParserRuleCall_1_1_1_0 = (RuleCall)cOperandsAssignment_1_1_1.eContents().get(0);
		
		//LogicalAndExpression returns Expression:
		//	EqualityExpression ({LogicalAndExpression.operands+=current} ("&&" operands+=EqualityExpression)+)?;
		public ParserRule getRule() { return rule; }

		//EqualityExpression ({LogicalAndExpression.operands+=current} ("&&" operands+=EqualityExpression)+)?
		public Group getGroup() { return cGroup; }

		//EqualityExpression
		public RuleCall getEqualityExpressionParserRuleCall_0() { return cEqualityExpressionParserRuleCall_0; }

		//({LogicalAndExpression.operands+=current} ("&&" operands+=EqualityExpression)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{LogicalAndExpression.operands+=current}
		public Action getLogicalAndExpressionOperandsAction_1_0() { return cLogicalAndExpressionOperandsAction_1_0; }

		//("&&" operands+=EqualityExpression)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_1_0() { return cAmpersandAmpersandKeyword_1_1_0; }

		//operands+=EqualityExpression
		public Assignment getOperandsAssignment_1_1_1() { return cOperandsAssignment_1_1_1; }

		//EqualityExpression
		public RuleCall getOperandsEqualityExpressionParserRuleCall_1_1_1_0() { return cOperandsEqualityExpressionParserRuleCall_1_1_1_0; }
	}

	public class EqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelationalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualityExpressionLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorEqualityOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandRelationalExpressionParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//EqualityExpression returns Expression:
		//	RelationalExpression ({EqualityExpression.leftOperand=current} operator=EqualityOperator
		//	rightOperand=RelationalExpression)?;
		public ParserRule getRule() { return rule; }

		//RelationalExpression ({EqualityExpression.leftOperand=current} operator=EqualityOperator
		//rightOperand=RelationalExpression)?
		public Group getGroup() { return cGroup; }

		//RelationalExpression
		public RuleCall getRelationalExpressionParserRuleCall_0() { return cRelationalExpressionParserRuleCall_0; }

		//({EqualityExpression.leftOperand=current} operator=EqualityOperator rightOperand=RelationalExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//{EqualityExpression.leftOperand=current}
		public Action getEqualityExpressionLeftOperandAction_1_0() { return cEqualityExpressionLeftOperandAction_1_0; }

		//operator=EqualityOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//EqualityOperator
		public RuleCall getOperatorEqualityOperatorEnumRuleCall_1_1_0() { return cOperatorEqualityOperatorEnumRuleCall_1_1_0; }

		//rightOperand=RelationalExpression
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//RelationalExpression
		public RuleCall getRightOperandRelationalExpressionParserRuleCall_1_2_0() { return cRightOperandRelationalExpressionParserRuleCall_1_2_0; }
	}

	public class RelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditiveExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cRelationalExpressionLeftOperandAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cOperatorRelationalOperatorEnumRuleCall_1_0_1_0 = (RuleCall)cOperatorAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightOperandAdditiveExpressionParserRuleCall_1_0_2_0 = (RuleCall)cRightOperandAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cTypeTestExpressionExpressionAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cIsKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cTypeAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cTypeDataTypeSpecifierParserRuleCall_1_1_2_0 = (RuleCall)cTypeAssignment_1_1_2.eContents().get(0);
		
		//RelationalExpression returns Expression:
		//	AdditiveExpression ({RelationalExpression.leftOperand=current} operator=RelationalOperator
		//	rightOperand=AdditiveExpression | {TypeTestExpression.expression=current} "is" type=DataTypeSpecifier)?;
		public ParserRule getRule() { return rule; }

		//AdditiveExpression ({RelationalExpression.leftOperand=current} operator=RelationalOperator
		//rightOperand=AdditiveExpression | {TypeTestExpression.expression=current} "is" type=DataTypeSpecifier)?
		public Group getGroup() { return cGroup; }

		//AdditiveExpression
		public RuleCall getAdditiveExpressionParserRuleCall_0() { return cAdditiveExpressionParserRuleCall_0; }

		//({RelationalExpression.leftOperand=current} operator=RelationalOperator rightOperand=AdditiveExpression |
		//{TypeTestExpression.expression=current} "is" type=DataTypeSpecifier)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//{RelationalExpression.leftOperand=current} operator=RelationalOperator rightOperand=AdditiveExpression
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{RelationalExpression.leftOperand=current}
		public Action getRelationalExpressionLeftOperandAction_1_0_0() { return cRelationalExpressionLeftOperandAction_1_0_0; }

		//operator=RelationalOperator
		public Assignment getOperatorAssignment_1_0_1() { return cOperatorAssignment_1_0_1; }

		//RelationalOperator
		public RuleCall getOperatorRelationalOperatorEnumRuleCall_1_0_1_0() { return cOperatorRelationalOperatorEnumRuleCall_1_0_1_0; }

		//rightOperand=AdditiveExpression
		public Assignment getRightOperandAssignment_1_0_2() { return cRightOperandAssignment_1_0_2; }

		//AdditiveExpression
		public RuleCall getRightOperandAdditiveExpressionParserRuleCall_1_0_2_0() { return cRightOperandAdditiveExpressionParserRuleCall_1_0_2_0; }

		//{TypeTestExpression.expression=current} "is" type=DataTypeSpecifier
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{TypeTestExpression.expression=current}
		public Action getTypeTestExpressionExpressionAction_1_1_0() { return cTypeTestExpressionExpressionAction_1_1_0; }

		//"is"
		public Keyword getIsKeyword_1_1_1() { return cIsKeyword_1_1_1; }

		//type=DataTypeSpecifier
		public Assignment getTypeAssignment_1_1_2() { return cTypeAssignment_1_1_2; }

		//DataTypeSpecifier
		public RuleCall getTypeDataTypeSpecifierParserRuleCall_1_1_2_0() { return cTypeDataTypeSpecifierParserRuleCall_1_1_2_0; }
	}

	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAdditiveExpressionLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cRightPartsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPartsAdditiveExpressionPartParserRuleCall_1_1_0 = (RuleCall)cRightPartsAssignment_1_1.eContents().get(0);
		
		//AdditiveExpression returns Expression:
		//	MultiplicativeExpression ({AdditiveExpression.leftOperand=current} rightParts+=AdditiveExpressionPart+)?;
		public ParserRule getRule() { return rule; }

		//MultiplicativeExpression ({AdditiveExpression.leftOperand=current} rightParts+=AdditiveExpressionPart+)?
		public Group getGroup() { return cGroup; }

		//MultiplicativeExpression
		public RuleCall getMultiplicativeExpressionParserRuleCall_0() { return cMultiplicativeExpressionParserRuleCall_0; }

		//({AdditiveExpression.leftOperand=current} rightParts+=AdditiveExpressionPart+)?
		public Group getGroup_1() { return cGroup_1; }

		//{AdditiveExpression.leftOperand=current}
		public Action getAdditiveExpressionLeftOperandAction_1_0() { return cAdditiveExpressionLeftOperandAction_1_0; }

		//rightParts+=AdditiveExpressionPart+
		public Assignment getRightPartsAssignment_1_1() { return cRightPartsAssignment_1_1; }

		//AdditiveExpressionPart
		public RuleCall getRightPartsAdditiveExpressionPartParserRuleCall_1_1_0() { return cRightPartsAdditiveExpressionPartParserRuleCall_1_1_0; }
	}

	public class AdditiveExpressionPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdditiveExpressionPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorAdditiveOperatorEnumRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperandMultiplicativeExpressionParserRuleCall_1_0 = (RuleCall)cOperandAssignment_1.eContents().get(0);
		
		//AdditiveExpressionPart:
		//	operator=AdditiveOperator operand=MultiplicativeExpression;
		public ParserRule getRule() { return rule; }

		//operator=AdditiveOperator operand=MultiplicativeExpression
		public Group getGroup() { return cGroup; }

		//operator=AdditiveOperator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }

		//AdditiveOperator
		public RuleCall getOperatorAdditiveOperatorEnumRuleCall_0_0() { return cOperatorAdditiveOperatorEnumRuleCall_0_0; }

		//operand=MultiplicativeExpression
		public Assignment getOperandAssignment_1() { return cOperandAssignment_1; }

		//MultiplicativeExpression
		public RuleCall getOperandMultiplicativeExpressionParserRuleCall_1_0() { return cOperandMultiplicativeExpressionParserRuleCall_1_0; }
	}

	public class MultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPowerExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultiplicativeExpressionLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cRightPartsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPartsMultiplicativeExpressionPartParserRuleCall_1_1_0 = (RuleCall)cRightPartsAssignment_1_1.eContents().get(0);
		
		//MultiplicativeExpression returns Expression:
		//	PowerExpression ({MultiplicativeExpression.leftOperand=current} rightParts+=MultiplicativeExpressionPart+)?;
		public ParserRule getRule() { return rule; }

		//PowerExpression ({MultiplicativeExpression.leftOperand=current} rightParts+=MultiplicativeExpressionPart+)?
		public Group getGroup() { return cGroup; }

		//PowerExpression
		public RuleCall getPowerExpressionParserRuleCall_0() { return cPowerExpressionParserRuleCall_0; }

		//({MultiplicativeExpression.leftOperand=current} rightParts+=MultiplicativeExpressionPart+)?
		public Group getGroup_1() { return cGroup_1; }

		//{MultiplicativeExpression.leftOperand=current}
		public Action getMultiplicativeExpressionLeftOperandAction_1_0() { return cMultiplicativeExpressionLeftOperandAction_1_0; }

		//rightParts+=MultiplicativeExpressionPart+
		public Assignment getRightPartsAssignment_1_1() { return cRightPartsAssignment_1_1; }

		//MultiplicativeExpressionPart
		public RuleCall getRightPartsMultiplicativeExpressionPartParserRuleCall_1_1_0() { return cRightPartsMultiplicativeExpressionPartParserRuleCall_1_1_0; }
	}

	public class MultiplicativeExpressionPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicativeExpressionPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorMultiplicativeOperatorEnumRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperandPowerExpressionParserRuleCall_1_0 = (RuleCall)cOperandAssignment_1.eContents().get(0);
		
		//MultiplicativeExpressionPart:
		//	operator=MultiplicativeOperator operand=PowerExpression;
		public ParserRule getRule() { return rule; }

		//operator=MultiplicativeOperator operand=PowerExpression
		public Group getGroup() { return cGroup; }

		//operator=MultiplicativeOperator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }

		//MultiplicativeOperator
		public RuleCall getOperatorMultiplicativeOperatorEnumRuleCall_0_0() { return cOperatorMultiplicativeOperatorEnumRuleCall_0_0; }

		//operand=PowerExpression
		public Assignment getOperandAssignment_1() { return cOperandAssignment_1; }

		//PowerExpression
		public RuleCall getOperandPowerExpressionParserRuleCall_1_0() { return cOperandPowerExpressionParserRuleCall_1_0; }
	}

	public class PowerExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PowerExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPowerExpressionOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorPowerOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cExponentAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExponentUnaryExpressionParserRuleCall_1_2_0 = (RuleCall)cExponentAssignment_1_2.eContents().get(0);
		
		//PowerExpression returns Expression:
		//	UnaryExpression ({PowerExpression.operand=current} operator=PowerOperator exponent=UnaryExpression)?;
		public ParserRule getRule() { return rule; }

		//UnaryExpression ({PowerExpression.operand=current} operator=PowerOperator exponent=UnaryExpression)?
		public Group getGroup() { return cGroup; }

		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_0() { return cUnaryExpressionParserRuleCall_0; }

		//({PowerExpression.operand=current} operator=PowerOperator exponent=UnaryExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//{PowerExpression.operand=current}
		public Action getPowerExpressionOperandAction_1_0() { return cPowerExpressionOperandAction_1_0; }

		//operator=PowerOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//PowerOperator
		public RuleCall getOperatorPowerOperatorEnumRuleCall_1_1_0() { return cOperatorPowerOperatorEnumRuleCall_1_1_0; }

		//exponent=UnaryExpression
		public Assignment getExponentAssignment_1_2() { return cExponentAssignment_1_2; }

		//UnaryExpression
		public RuleCall getExponentUnaryExpressionParserRuleCall_1_2_0() { return cExponentUnaryExpressionParserRuleCall_1_2_0; }
	}

	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPostfixExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cUnaryExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorUnaryOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperandPostfixExpressionParserRuleCall_1_2_0 = (RuleCall)cOperandAssignment_1_2.eContents().get(0);
		
		//UnaryExpression returns Expression:
		//	PostfixExpression | {UnaryExpression} operator=UnaryOperator operand=PostfixExpression;
		public ParserRule getRule() { return rule; }

		//PostfixExpression | {UnaryExpression} operator=UnaryOperator operand=PostfixExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//PostfixExpression
		public RuleCall getPostfixExpressionParserRuleCall_0() { return cPostfixExpressionParserRuleCall_0; }

		//{UnaryExpression} operator=UnaryOperator operand=PostfixExpression
		public Group getGroup_1() { return cGroup_1; }

		//{UnaryExpression}
		public Action getUnaryExpressionAction_1_0() { return cUnaryExpressionAction_1_0; }

		//operator=UnaryOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//UnaryOperator
		public RuleCall getOperatorUnaryOperatorEnumRuleCall_1_1_0() { return cOperatorUnaryOperatorEnumRuleCall_1_1_0; }

		//operand=PostfixExpression
		public Assignment getOperandAssignment_1_2() { return cOperandAssignment_1_2; }

		//PostfixExpression
		public RuleCall getOperandPostfixExpressionParserRuleCall_1_2_0() { return cOperandPostfixExpressionParserRuleCall_1_2_0; }
	}

	public class PostfixExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PostfixExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPostfixExpressionOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorPostfixOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		
		//PostfixExpression returns Expression:
		//	PrimaryExpression ({PostfixExpression.operand=current} operator=PostfixOperator)?;
		public ParserRule getRule() { return rule; }

		//PrimaryExpression ({PostfixExpression.operand=current} operator=PostfixOperator)?
		public Group getGroup() { return cGroup; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }

		//({PostfixExpression.operand=current} operator=PostfixOperator)?
		public Group getGroup_1() { return cGroup_1; }

		//{PostfixExpression.operand=current}
		public Action getPostfixExpressionOperandAction_1_0() { return cPostfixExpressionOperandAction_1_0; }

		//operator=PostfixOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//PostfixOperator
		public RuleCall getOperatorPostfixOperatorEnumRuleCall_1_1_0() { return cOperatorPostfixOperatorEnumRuleCall_1_1_0; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFeatureCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUnitConstructionOperatorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBeginExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEndExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//PrimaryExpression returns Expression:
		//	Literal | FeatureCall | UnitConstructionOperator | BeginExpression | EndExpression;
		public ParserRule getRule() { return rule; }

		//Literal | FeatureCall | UnitConstructionOperator | BeginExpression | EndExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//Literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }

		//FeatureCall
		public RuleCall getFeatureCallParserRuleCall_1() { return cFeatureCallParserRuleCall_1; }

		//UnitConstructionOperator
		public RuleCall getUnitConstructionOperatorParserRuleCall_2() { return cUnitConstructionOperatorParserRuleCall_2; }

		//BeginExpression
		public RuleCall getBeginExpressionParserRuleCall_3() { return cBeginExpressionParserRuleCall_3; }

		//EndExpression
		public RuleCall getEndExpressionParserRuleCall_4() { return cEndExpressionParserRuleCall_4; }
	}

	public class CallablePrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CallablePrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cArrayConstructionOperatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArrayConcatenationOperatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cParenthesizedExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//CallablePrimaryExpression returns Expression:
		//	ArrayConstructionOperator | ArrayConcatenationOperator | ParenthesizedExpression;
		public ParserRule getRule() { return rule; }

		//ArrayConstructionOperator | ArrayConcatenationOperator | ParenthesizedExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//ArrayConstructionOperator
		public RuleCall getArrayConstructionOperatorParserRuleCall_0() { return cArrayConstructionOperatorParserRuleCall_0; }

		//ArrayConcatenationOperator
		public RuleCall getArrayConcatenationOperatorParserRuleCall_1() { return cArrayConcatenationOperatorParserRuleCall_1; }

		//ParenthesizedExpression
		public RuleCall getParenthesizedExpressionParserRuleCall_2() { return cParenthesizedExpressionParserRuleCall_2; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumericLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Literal:
		//	NumericLiteral | BooleanLiteral | StringLiteral;
		public ParserRule getRule() { return rule; }

		//NumericLiteral | BooleanLiteral | StringLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//NumericLiteral
		public RuleCall getNumericLiteralParserRuleCall_0() { return cNumericLiteralParserRuleCall_0; }

		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_1() { return cBooleanLiteralParserRuleCall_1; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_2() { return cStringLiteralParserRuleCall_2; }
	}

	public class NumericLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumericLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRealLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NumericLiteral:
		//	RealLiteral | IntegerLiteral;
		public ParserRule getRule() { return rule; }

		//RealLiteral | IntegerLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//RealLiteral
		public RuleCall getRealLiteralParserRuleCall_0() { return cRealLiteralParserRuleCall_0; }

		//IntegerLiteral
		public RuleCall getIntegerLiteralParserRuleCall_1() { return cIntegerLiteralParserRuleCall_1; }
	}

	public class RealLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RealLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueREALTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cModifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModifierIDTerminalRuleCall_1_0 = (RuleCall)cModifierAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cUnitAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cUnitUnitExpressionParserRuleCall_2_1_0 = (RuleCall)cUnitAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//RealLiteral:
		//	value=REAL modifier=ID? ("(" unit=UnitExpression ")")?;
		public ParserRule getRule() { return rule; }

		//value=REAL modifier=ID? ("(" unit=UnitExpression ")")?
		public Group getGroup() { return cGroup; }

		//value=REAL
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//REAL
		public RuleCall getValueREALTerminalRuleCall_0_0() { return cValueREALTerminalRuleCall_0_0; }

		//modifier=ID?
		public Assignment getModifierAssignment_1() { return cModifierAssignment_1; }

		//ID
		public RuleCall getModifierIDTerminalRuleCall_1_0() { return cModifierIDTerminalRuleCall_1_0; }

		//("(" unit=UnitExpression ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//unit=UnitExpression
		public Assignment getUnitAssignment_2_1() { return cUnitAssignment_2_1; }

		//UnitExpression
		public RuleCall getUnitUnitExpressionParserRuleCall_2_1_0() { return cUnitUnitExpressionParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class IntegerLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueINTEGERTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cModifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModifierIDTerminalRuleCall_1_0 = (RuleCall)cModifierAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cUnitAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cUnitUnitExpressionParserRuleCall_2_1_0 = (RuleCall)cUnitAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//IntegerLiteral:
		//	value=INTEGER modifier=ID? ("(" unit=UnitExpression ")")?;
		public ParserRule getRule() { return rule; }

		//value=INTEGER modifier=ID? ("(" unit=UnitExpression ")")?
		public Group getGroup() { return cGroup; }

		//value=INTEGER
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//INTEGER
		public RuleCall getValueINTEGERTerminalRuleCall_0_0() { return cValueINTEGERTerminalRuleCall_0_0; }

		//modifier=ID?
		public Assignment getModifierAssignment_1() { return cModifierAssignment_1; }

		//ID
		public RuleCall getModifierIDTerminalRuleCall_1_0() { return cModifierIDTerminalRuleCall_1_0; }

		//("(" unit=UnitExpression ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//unit=UnitExpression
		public Assignment getUnitAssignment_2_1() { return cUnitAssignment_2_1; }

		//UnitExpression
		public RuleCall getUnitUnitExpressionParserRuleCall_2_1_0() { return cUnitUnitExpressionParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBooleanKindEnumRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//BooleanLiteral:
		//	value=BooleanKind;
		public ParserRule getRule() { return rule; }

		//value=BooleanKind
		public Assignment getValueAssignment() { return cValueAssignment; }

		//BooleanKind
		public RuleCall getValueBooleanKindEnumRuleCall_0() { return cValueBooleanKindEnumRuleCall_0; }
	}

	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLiteral:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class SimpleNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSimpleNameAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIdentifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_1_0 = (RuleCall)cIdentifierAssignment_1.eContents().get(0);
		
		//SimpleName returns Expression:
		//	{SimpleName} identifier=ID;
		public ParserRule getRule() { return rule; }

		//{SimpleName} identifier=ID
		public Group getGroup() { return cGroup; }

		//{SimpleName}
		public Action getSimpleNameAction_0() { return cSimpleNameAction_0; }

		//identifier=ID
		public Assignment getIdentifierAssignment_1() { return cIdentifierAssignment_1; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_1_0() { return cIdentifierIDTerminalRuleCall_1_0; }
	}

	public class FeatureCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureCall");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cCallablePrimaryExpressionParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Action cFeatureCallTargetAction_0_1_0 = (Action)cGroup_0_1.eContents().get(0);
		private final Assignment cPartsAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cPartsFeatureCallPartParserRuleCall_0_1_1_0 = (RuleCall)cPartsAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cFeatureCallAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cTargetAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTargetSimpleNameParserRuleCall_1_1_0 = (RuleCall)cTargetAssignment_1_1.eContents().get(0);
		private final Assignment cPartsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cPartsFeatureCallPartParserRuleCall_1_2_0 = (RuleCall)cPartsAssignment_1_2.eContents().get(0);
		
		//FeatureCall returns Expression:
		//	CallablePrimaryExpression ({FeatureCall.target=current} parts+=FeatureCallPart+)? | {FeatureCall} target=SimpleName
		//	parts+=FeatureCallPart*;
		public ParserRule getRule() { return rule; }

		//CallablePrimaryExpression ({FeatureCall.target=current} parts+=FeatureCallPart+)? | {FeatureCall} target=SimpleName
		//parts+=FeatureCallPart*
		public Alternatives getAlternatives() { return cAlternatives; }

		//CallablePrimaryExpression ({FeatureCall.target=current} parts+=FeatureCallPart+)?
		public Group getGroup_0() { return cGroup_0; }

		//CallablePrimaryExpression
		public RuleCall getCallablePrimaryExpressionParserRuleCall_0_0() { return cCallablePrimaryExpressionParserRuleCall_0_0; }

		//({FeatureCall.target=current} parts+=FeatureCallPart+)?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//{FeatureCall.target=current}
		public Action getFeatureCallTargetAction_0_1_0() { return cFeatureCallTargetAction_0_1_0; }

		//parts+=FeatureCallPart+
		public Assignment getPartsAssignment_0_1_1() { return cPartsAssignment_0_1_1; }

		//FeatureCallPart
		public RuleCall getPartsFeatureCallPartParserRuleCall_0_1_1_0() { return cPartsFeatureCallPartParserRuleCall_0_1_1_0; }

		//{FeatureCall} target=SimpleName parts+=FeatureCallPart*
		public Group getGroup_1() { return cGroup_1; }

		//{FeatureCall}
		public Action getFeatureCallAction_1_0() { return cFeatureCallAction_1_0; }

		//target=SimpleName
		public Assignment getTargetAssignment_1_1() { return cTargetAssignment_1_1; }

		//SimpleName
		public RuleCall getTargetSimpleNameParserRuleCall_1_1_0() { return cTargetSimpleNameParserRuleCall_1_1_0; }

		//parts+=FeatureCallPart*
		public Assignment getPartsAssignment_1_2() { return cPartsAssignment_1_2; }

		//FeatureCallPart
		public RuleCall getPartsFeatureCallPartParserRuleCall_1_2_0() { return cPartsFeatureCallPartParserRuleCall_1_2_0; }
	}

	public class FeatureCallPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureCallPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNameComponentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArrayElementAccessParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOperationArgumentListParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIterationCallParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//FeatureCallPart:
		//	NameComponent | ArrayElementAccess | OperationArgumentList | IterationCall;
		public ParserRule getRule() { return rule; }

		//NameComponent | ArrayElementAccess | OperationArgumentList | IterationCall
		public Alternatives getAlternatives() { return cAlternatives; }

		//NameComponent
		public RuleCall getNameComponentParserRuleCall_0() { return cNameComponentParserRuleCall_0; }

		//ArrayElementAccess
		public RuleCall getArrayElementAccessParserRuleCall_1() { return cArrayElementAccessParserRuleCall_1; }

		//OperationArgumentList
		public RuleCall getOperationArgumentListParserRuleCall_2() { return cOperationArgumentListParserRuleCall_2; }

		//IterationCall
		public RuleCall getIterationCallParserRuleCall_3() { return cIterationCallParserRuleCall_3; }
	}

	public class NameComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NameComponent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdentifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_1_0 = (RuleCall)cIdentifierAssignment_1.eContents().get(0);
		
		//NameComponent:
		//	"." identifier=ID;
		public ParserRule getRule() { return rule; }

		//"." identifier=ID
		public Group getGroup() { return cGroup; }

		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }

		//identifier=ID
		public Assignment getIdentifierAssignment_1() { return cIdentifierAssignment_1; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_1_0() { return cIdentifierIDTerminalRuleCall_1_0; }
	}

	public class ArrayElementAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayElementAccess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSubscriptsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubscriptsArraySubscriptParserRuleCall_1_0 = (RuleCall)cSubscriptsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSubscriptsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSubscriptsArraySubscriptParserRuleCall_2_1_0 = (RuleCall)cSubscriptsAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ArrayElementAccess:
		//	"[" subscripts+=ArraySubscript ("," subscripts+=ArraySubscript)* "]";
		public ParserRule getRule() { return rule; }

		//"[" subscripts+=ArraySubscript ("," subscripts+=ArraySubscript)* "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//subscripts+=ArraySubscript
		public Assignment getSubscriptsAssignment_1() { return cSubscriptsAssignment_1; }

		//ArraySubscript
		public RuleCall getSubscriptsArraySubscriptParserRuleCall_1_0() { return cSubscriptsArraySubscriptParserRuleCall_1_0; }

		//("," subscripts+=ArraySubscript)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//subscripts+=ArraySubscript
		public Assignment getSubscriptsAssignment_2_1() { return cSubscriptsAssignment_2_1; }

		//ArraySubscript
		public RuleCall getSubscriptsArraySubscriptParserRuleCall_2_1_0() { return cSubscriptsArraySubscriptParserRuleCall_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class ArraySubscriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArraySubscript");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSliceAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cSliceColonKeyword_0_0 = (Keyword)cSliceAssignment_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//ArraySubscript:
		//	slice?=":" | expression=Expression;
		public ParserRule getRule() { return rule; }

		//slice?=":" | expression=Expression
		public Alternatives getAlternatives() { return cAlternatives; }

		//slice?=":"
		public Assignment getSliceAssignment_0() { return cSliceAssignment_0; }

		//":"
		public Keyword getSliceColonKeyword_0_0() { return cSliceColonKeyword_0_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}

	public class OperationArgumentListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperationArgumentList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOperationArgumentListAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgumentsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgumentsExpressionParserRuleCall_2_0_0 = (RuleCall)cArgumentsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgumentsExpressionParserRuleCall_2_1_1_0 = (RuleCall)cArgumentsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//OperationArgumentList:
		//	{OperationArgumentList} "(" (arguments+=Expression ("," arguments+=Expression)*)? ")";
		public ParserRule getRule() { return rule; }

		//{OperationArgumentList} "(" (arguments+=Expression ("," arguments+=Expression)*)? ")"
		public Group getGroup() { return cGroup; }

		//{OperationArgumentList}
		public Action getOperationArgumentListAction_0() { return cOperationArgumentListAction_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(arguments+=Expression ("," arguments+=Expression)*)?
		public Group getGroup_2() { return cGroup_2; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_2_0() { return cArgumentsAssignment_2_0; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_2_0_0() { return cArgumentsExpressionParserRuleCall_2_0_0; }

		//("," arguments+=Expression)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_2_1_1() { return cArgumentsAssignment_2_1_1; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_2_1_1_0() { return cArgumentsExpressionParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class IterationCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IterationCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariablesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariablesIterationVariableParserRuleCall_3_0 = (RuleCall)cVariablesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cVariablesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cVariablesIterationVariableParserRuleCall_4_1_0 = (RuleCall)cVariablesAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cAccumulatorAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cAccumulatorIterationAccumulatorParserRuleCall_5_1_0 = (RuleCall)cAccumulatorAssignment_5_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cExpressionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cExpressionExpressionParserRuleCall_7_0 = (RuleCall)cExpressionAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//IterationCall:
		//	"." name=ID "(" variables+=IterationVariable ("," variables+=IterationVariable)* (";"
		//	accumulator=IterationAccumulator)? "|" expression=Expression ")";
		public ParserRule getRule() { return rule; }

		//"." name=ID "(" variables+=IterationVariable ("," variables+=IterationVariable)* (";" accumulator=IterationAccumulator)?
		//"|" expression=Expression ")"
		public Group getGroup() { return cGroup; }

		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//variables+=IterationVariable
		public Assignment getVariablesAssignment_3() { return cVariablesAssignment_3; }

		//IterationVariable
		public RuleCall getVariablesIterationVariableParserRuleCall_3_0() { return cVariablesIterationVariableParserRuleCall_3_0; }

		//("," variables+=IterationVariable)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//variables+=IterationVariable
		public Assignment getVariablesAssignment_4_1() { return cVariablesAssignment_4_1; }

		//IterationVariable
		public RuleCall getVariablesIterationVariableParserRuleCall_4_1_0() { return cVariablesIterationVariableParserRuleCall_4_1_0; }

		//(";" accumulator=IterationAccumulator)?
		public Group getGroup_5() { return cGroup_5; }

		//";"
		public Keyword getSemicolonKeyword_5_0() { return cSemicolonKeyword_5_0; }

		//accumulator=IterationAccumulator
		public Assignment getAccumulatorAssignment_5_1() { return cAccumulatorAssignment_5_1; }

		//IterationAccumulator
		public RuleCall getAccumulatorIterationAccumulatorParserRuleCall_5_1_0() { return cAccumulatorIterationAccumulatorParserRuleCall_5_1_0; }

		//"|"
		public Keyword getVerticalLineKeyword_6() { return cVerticalLineKeyword_6; }

		//expression=Expression
		public Assignment getExpressionAssignment_7() { return cExpressionAssignment_7; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_7_0() { return cExpressionExpressionParserRuleCall_7_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}

	public class IterationVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IterationVariable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//IterationVariable:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class IterationAccumulatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IterationAccumulator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInitializerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInitializerExpressionParserRuleCall_2_0 = (RuleCall)cInitializerAssignment_2.eContents().get(0);
		
		//IterationAccumulator:
		//	name=ID "=" initializer=Expression;
		public ParserRule getRule() { return rule; }

		//name=ID "=" initializer=Expression
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//initializer=Expression
		public Assignment getInitializerAssignment_2() { return cInitializerAssignment_2; }

		//Expression
		public RuleCall getInitializerExpressionParserRuleCall_2_0() { return cInitializerExpressionParserRuleCall_2_0; }
	}

	public class ArrayConstructionOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayConstructionOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionsExpressionParserRuleCall_1_0 = (RuleCall)cExpressionsAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cCommaKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cExpressionsAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cExpressionsExpressionParserRuleCall_2_0_1_0 = (RuleCall)cExpressionsAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cForKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cIterationClausesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cIterationClausesArrayConstructionIterationClauseParserRuleCall_2_1_1_0 = (RuleCall)cIterationClausesAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cGroup_2_1.eContents().get(2);
		private final Keyword cCommaKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Assignment cIterationClausesAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final RuleCall cIterationClausesArrayConstructionIterationClauseParserRuleCall_2_1_2_1_0 = (RuleCall)cIterationClausesAssignment_2_1_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ArrayConstructionOperator:
		//	"{" expressions+=Expression (("," expressions+=Expression)* | "for" iterationClauses+=ArrayConstructionIterationClause
		//	("," iterationClauses+=ArrayConstructionIterationClause)*) "}";
		public ParserRule getRule() { return rule; }

		//"{" expressions+=Expression (("," expressions+=Expression)* | "for" iterationClauses+=ArrayConstructionIterationClause
		//("," iterationClauses+=ArrayConstructionIterationClause)*) "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//expressions+=Expression
		public Assignment getExpressionsAssignment_1() { return cExpressionsAssignment_1; }

		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_1_0() { return cExpressionsExpressionParserRuleCall_1_0; }

		//("," expressions+=Expression)* | "for" iterationClauses+=ArrayConstructionIterationClause (","
		//iterationClauses+=ArrayConstructionIterationClause)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//("," expressions+=Expression)*
		public Group getGroup_2_0() { return cGroup_2_0; }

		//","
		public Keyword getCommaKeyword_2_0_0() { return cCommaKeyword_2_0_0; }

		//expressions+=Expression
		public Assignment getExpressionsAssignment_2_0_1() { return cExpressionsAssignment_2_0_1; }

		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_2_0_1_0() { return cExpressionsExpressionParserRuleCall_2_0_1_0; }

		//"for" iterationClauses+=ArrayConstructionIterationClause ("," iterationClauses+=ArrayConstructionIterationClause)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"for"
		public Keyword getForKeyword_2_1_0() { return cForKeyword_2_1_0; }

		//iterationClauses+=ArrayConstructionIterationClause
		public Assignment getIterationClausesAssignment_2_1_1() { return cIterationClausesAssignment_2_1_1; }

		//ArrayConstructionIterationClause
		public RuleCall getIterationClausesArrayConstructionIterationClauseParserRuleCall_2_1_1_0() { return cIterationClausesArrayConstructionIterationClauseParserRuleCall_2_1_1_0; }

		//("," iterationClauses+=ArrayConstructionIterationClause)*
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }

		//","
		public Keyword getCommaKeyword_2_1_2_0() { return cCommaKeyword_2_1_2_0; }

		//iterationClauses+=ArrayConstructionIterationClause
		public Assignment getIterationClausesAssignment_2_1_2_1() { return cIterationClausesAssignment_2_1_2_1; }

		//ArrayConstructionIterationClause
		public RuleCall getIterationClausesArrayConstructionIterationClauseParserRuleCall_2_1_2_1_0() { return cIterationClausesArrayConstructionIterationClauseParserRuleCall_2_1_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ArrayConstructionIterationClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayConstructionIterationClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableNameIDTerminalRuleCall_0_0 = (RuleCall)cVariableNameAssignment_0.eContents().get(0);
		private final Keyword cInKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCollectionExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCollectionExpressionExpressionParserRuleCall_2_0 = (RuleCall)cCollectionExpressionAssignment_2.eContents().get(0);
		
		//ArrayConstructionIterationClause:
		//	variableName=ID "in" collectionExpression=Expression;
		public ParserRule getRule() { return rule; }

		//variableName=ID "in" collectionExpression=Expression
		public Group getGroup() { return cGroup; }

		//variableName=ID
		public Assignment getVariableNameAssignment_0() { return cVariableNameAssignment_0; }

		//ID
		public RuleCall getVariableNameIDTerminalRuleCall_0_0() { return cVariableNameIDTerminalRuleCall_0_0; }

		//"in"
		public Keyword getInKeyword_1() { return cInKeyword_1; }

		//collectionExpression=Expression
		public Assignment getCollectionExpressionAssignment_2() { return cCollectionExpressionAssignment_2; }

		//Expression
		public RuleCall getCollectionExpressionExpressionParserRuleCall_2_0() { return cCollectionExpressionExpressionParserRuleCall_2_0; }
	}

	public class ArrayConcatenationOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayConcatenationOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRowsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRowsExpressionListParserRuleCall_1_0 = (RuleCall)cRowsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRowsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRowsExpressionListParserRuleCall_2_1_0 = (RuleCall)cRowsAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ArrayConcatenationOperator:
		//	"[" rows+=ExpressionList (";" rows+=ExpressionList)* "]";
		public ParserRule getRule() { return rule; }

		//"[" rows+=ExpressionList (";" rows+=ExpressionList)* "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//rows+=ExpressionList
		public Assignment getRowsAssignment_1() { return cRowsAssignment_1; }

		//ExpressionList
		public RuleCall getRowsExpressionListParserRuleCall_1_0() { return cRowsExpressionListParserRuleCall_1_0; }

		//(";" rows+=ExpressionList)*
		public Group getGroup_2() { return cGroup_2; }

		//";"
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }

		//rows+=ExpressionList
		public Assignment getRowsAssignment_2_1() { return cRowsAssignment_2_1; }

		//ExpressionList
		public RuleCall getRowsExpressionListParserRuleCall_2_1_0() { return cRowsExpressionListParserRuleCall_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class ExpressionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionsExpressionParserRuleCall_0_0 = (RuleCall)cExpressionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpressionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionsExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionsAssignment_1_1.eContents().get(0);
		
		//ExpressionList:
		//	expressions+=Expression ("," expressions+=Expression)*;
		public ParserRule getRule() { return rule; }

		//expressions+=Expression ("," expressions+=Expression)*
		public Group getGroup() { return cGroup; }

		//expressions+=Expression
		public Assignment getExpressionsAssignment_0() { return cExpressionsAssignment_0; }

		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_0_0() { return cExpressionsExpressionParserRuleCall_0_0; }

		//("," expressions+=Expression)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//expressions+=Expression
		public Assignment getExpressionsAssignment_1_1() { return cExpressionsAssignment_1_1; }

		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_1_1_0() { return cExpressionsExpressionParserRuleCall_1_1_0; }
	}

	public class UnitConstructionOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnitConstructionOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDollarSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUnitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUnitUnitExpressionParserRuleCall_2_0 = (RuleCall)cUnitAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//UnitConstructionOperator:
		//	"$" "(" unit=UnitExpression ")";
		public ParserRule getRule() { return rule; }

		//"$" "(" unit=UnitExpression ")"
		public Group getGroup() { return cGroup; }

		//"$"
		public Keyword getDollarSignKeyword_0() { return cDollarSignKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//unit=UnitExpression
		public Assignment getUnitAssignment_2() { return cUnitAssignment_2; }

		//UnitExpression
		public RuleCall getUnitUnitExpressionParserRuleCall_2_0() { return cUnitUnitExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ParenthesizedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParenthesizedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionsExpressionParserRuleCall_1_0 = (RuleCall)cExpressionsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExpressionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionsExpressionParserRuleCall_2_1_0 = (RuleCall)cExpressionsAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ParenthesizedExpression:
		//	"(" expressions+=Expression ("," expressions+=Expression)* ")";
		public ParserRule getRule() { return rule; }

		//"(" expressions+=Expression ("," expressions+=Expression)* ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//expressions+=Expression
		public Assignment getExpressionsAssignment_1() { return cExpressionsAssignment_1; }

		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_1_0() { return cExpressionsExpressionParserRuleCall_1_0; }

		//("," expressions+=Expression)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//expressions+=Expression
		public Assignment getExpressionsAssignment_2_1() { return cExpressionsAssignment_2_1; }

		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_2_1_0() { return cExpressionsExpressionParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class BeginExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BeginExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBeginExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBeginKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//BeginExpression:
		//	{BeginExpression} "begin";
		public ParserRule getRule() { return rule; }

		//{BeginExpression} "begin"
		public Group getGroup() { return cGroup; }

		//{BeginExpression}
		public Action getBeginExpressionAction_0() { return cBeginExpressionAction_0; }

		//"begin"
		public Keyword getBeginKeyword_1() { return cBeginKeyword_1; }
	}

	public class EndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEndExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEndKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//EndExpression:
		//	{EndExpression} "end";
		public ParserRule getRule() { return rule; }

		//{EndExpression} "end"
		public Group getGroup() { return cGroup; }

		//{EndExpression}
		public Action getEndExpressionAction_0() { return cEndExpressionAction_0; }

		//"end"
		public Keyword getEndKeyword_1() { return cEndKeyword_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifiersIDTerminalRuleCall_0_0 = (RuleCall)cIdentifiersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIdentifiersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIdentifiersIDTerminalRuleCall_1_1_0 = (RuleCall)cIdentifiersAssignment_1_1.eContents().get(0);
		
		//QualifiedName:
		//	identifiers+=ID ("." identifiers+=ID)*;
		public ParserRule getRule() { return rule; }

		//identifiers+=ID ("." identifiers+=ID)*
		public Group getGroup() { return cGroup; }

		//identifiers+=ID
		public Assignment getIdentifiersAssignment_0() { return cIdentifiersAssignment_0; }

		//ID
		public RuleCall getIdentifiersIDTerminalRuleCall_0_0() { return cIdentifiersIDTerminalRuleCall_0_0; }

		//("." identifiers+=ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//identifiers+=ID
		public Assignment getIdentifiersAssignment_1_1() { return cIdentifiersAssignment_1_1; }

		//ID
		public RuleCall getIdentifiersIDTerminalRuleCall_1_1_0() { return cIdentifiersIDTerminalRuleCall_1_1_0; }
	}

	public class UnitExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnitExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnitExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cNumeratorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNumeratorUnitExpressionNumeratorParserRuleCall_1_0_0 = (RuleCall)cNumeratorAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cSolidusKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cDenominatorAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cDenominatorUnitExpressionDenominatorParserRuleCall_1_1_1_0 = (RuleCall)cDenominatorAssignment_1_1_1.eContents().get(0);
		
		/// *
		// * Unit expressions
		// * /UnitExpression:
		//	{UnitExpression} (numerator=UnitExpressionNumerator ("/" denominator=UnitExpressionDenominator)?)?;
		public ParserRule getRule() { return rule; }

		//{UnitExpression} (numerator=UnitExpressionNumerator ("/" denominator=UnitExpressionDenominator)?)?
		public Group getGroup() { return cGroup; }

		//{UnitExpression}
		public Action getUnitExpressionAction_0() { return cUnitExpressionAction_0; }

		//(numerator=UnitExpressionNumerator ("/" denominator=UnitExpressionDenominator)?)?
		public Group getGroup_1() { return cGroup_1; }

		//numerator=UnitExpressionNumerator
		public Assignment getNumeratorAssignment_1_0() { return cNumeratorAssignment_1_0; }

		//UnitExpressionNumerator
		public RuleCall getNumeratorUnitExpressionNumeratorParserRuleCall_1_0_0() { return cNumeratorUnitExpressionNumeratorParserRuleCall_1_0_0; }

		//("/" denominator=UnitExpressionDenominator)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"/"
		public Keyword getSolidusKeyword_1_1_0() { return cSolidusKeyword_1_1_0; }

		//denominator=UnitExpressionDenominator
		public Assignment getDenominatorAssignment_1_1_1() { return cDenominatorAssignment_1_1_1; }

		//UnitExpressionDenominator
		public RuleCall getDenominatorUnitExpressionDenominatorParserRuleCall_1_1_1_0() { return cDenominatorUnitExpressionDenominatorParserRuleCall_1_1_1_0; }
	}

	public class UnitExpressionNumeratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnitExpressionNumerator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOneAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cOneINTEGERTerminalRuleCall_0_0 = (RuleCall)cOneAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cFactorsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cFactorsUnitExpressionFactorParserRuleCall_1_0_0 = (RuleCall)cFactorsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cAsteriskKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cFactorsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cFactorsUnitExpressionFactorParserRuleCall_1_1_1_0 = (RuleCall)cFactorsAssignment_1_1_1.eContents().get(0);
		
		//UnitExpressionNumerator:
		//	one=INTEGER / * must be '1' * / | factors+=UnitExpressionFactor ("*" factors+=UnitExpressionFactor)*;
		public ParserRule getRule() { return rule; }

		//one=INTEGER / * must be '1' * / | factors+=UnitExpressionFactor ("*" factors+=UnitExpressionFactor)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//one=INTEGER
		public Assignment getOneAssignment_0() { return cOneAssignment_0; }

		//INTEGER
		public RuleCall getOneINTEGERTerminalRuleCall_0_0() { return cOneINTEGERTerminalRuleCall_0_0; }

		//factors+=UnitExpressionFactor ("*" factors+=UnitExpressionFactor)*
		public Group getGroup_1() { return cGroup_1; }

		//factors+=UnitExpressionFactor
		public Assignment getFactorsAssignment_1_0() { return cFactorsAssignment_1_0; }

		//UnitExpressionFactor
		public RuleCall getFactorsUnitExpressionFactorParserRuleCall_1_0_0() { return cFactorsUnitExpressionFactorParserRuleCall_1_0_0; }

		//("*" factors+=UnitExpressionFactor)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"*"
		public Keyword getAsteriskKeyword_1_1_0() { return cAsteriskKeyword_1_1_0; }

		//factors+=UnitExpressionFactor
		public Assignment getFactorsAssignment_1_1_1() { return cFactorsAssignment_1_1_1; }

		//UnitExpressionFactor
		public RuleCall getFactorsUnitExpressionFactorParserRuleCall_1_1_1_0() { return cFactorsUnitExpressionFactorParserRuleCall_1_1_1_0; }
	}

	public class UnitExpressionDenominatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnitExpressionDenominator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cFactorsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cFactorsUnitExpressionFactorParserRuleCall_0_0 = (RuleCall)cFactorsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFactorsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFactorsUnitExpressionFactorParserRuleCall_1_1_0 = (RuleCall)cFactorsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cAsteriskKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cFactorsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cFactorsUnitExpressionFactorParserRuleCall_1_2_1_0 = (RuleCall)cFactorsAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//UnitExpressionDenominator:
		//	factors+=UnitExpressionFactor | "(" factors+=UnitExpressionFactor ("*" factors+=UnitExpressionFactor)* ")";
		public ParserRule getRule() { return rule; }

		//factors+=UnitExpressionFactor | "(" factors+=UnitExpressionFactor ("*" factors+=UnitExpressionFactor)* ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//factors+=UnitExpressionFactor
		public Assignment getFactorsAssignment_0() { return cFactorsAssignment_0; }

		//UnitExpressionFactor
		public RuleCall getFactorsUnitExpressionFactorParserRuleCall_0_0() { return cFactorsUnitExpressionFactorParserRuleCall_0_0; }

		//"(" factors+=UnitExpressionFactor ("*" factors+=UnitExpressionFactor)* ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//factors+=UnitExpressionFactor
		public Assignment getFactorsAssignment_1_1() { return cFactorsAssignment_1_1; }

		//UnitExpressionFactor
		public RuleCall getFactorsUnitExpressionFactorParserRuleCall_1_1_0() { return cFactorsUnitExpressionFactorParserRuleCall_1_1_0; }

		//("*" factors+=UnitExpressionFactor)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"*"
		public Keyword getAsteriskKeyword_1_2_0() { return cAsteriskKeyword_1_2_0; }

		//factors+=UnitExpressionFactor
		public Assignment getFactorsAssignment_1_2_1() { return cFactorsAssignment_1_2_1; }

		//UnitExpressionFactor
		public RuleCall getFactorsUnitExpressionFactorParserRuleCall_1_2_1_0() { return cFactorsUnitExpressionFactorParserRuleCall_1_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}

	public class UnitExpressionFactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnitExpressionFactor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperandAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperandIDTerminalRuleCall_0_0 = (RuleCall)cOperandAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCircumflexAccentKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExponentAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExponentUnitExpressionExponentParserRuleCall_1_1_0 = (RuleCall)cExponentAssignment_1_1.eContents().get(0);
		
		//UnitExpressionFactor:
		//	operand=ID ("^" exponent=UnitExpressionExponent)?;
		public ParserRule getRule() { return rule; }

		//operand=ID ("^" exponent=UnitExpressionExponent)?
		public Group getGroup() { return cGroup; }

		//operand=ID
		public Assignment getOperandAssignment_0() { return cOperandAssignment_0; }

		//ID
		public RuleCall getOperandIDTerminalRuleCall_0_0() { return cOperandIDTerminalRuleCall_0_0; }

		//("^" exponent=UnitExpressionExponent)?
		public Group getGroup_1() { return cGroup_1; }

		//"^"
		public Keyword getCircumflexAccentKeyword_1_0() { return cCircumflexAccentKeyword_1_0; }

		//exponent=UnitExpressionExponent
		public Assignment getExponentAssignment_1_1() { return cExponentAssignment_1_1; }

		//UnitExpressionExponent
		public RuleCall getExponentUnitExpressionExponentParserRuleCall_1_1_0() { return cExponentUnitExpressionExponentParserRuleCall_1_1_0; }
	}

	public class UnitExpressionExponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnitExpressionExponent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNegativeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNegativeHyphenMinusKeyword_0_0 = (Keyword)cNegativeAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTEGERTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//UnitExpressionExponent:
		//	negative?="-"? value=INTEGER;
		public ParserRule getRule() { return rule; }

		//negative?="-"? value=INTEGER
		public Group getGroup() { return cGroup; }

		//negative?="-"?
		public Assignment getNegativeAssignment_0() { return cNegativeAssignment_0; }

		//"-"
		public Keyword getNegativeHyphenMinusKeyword_0_0() { return cNegativeHyphenMinusKeyword_0_0; }

		//value=INTEGER
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//INTEGER
		public RuleCall getValueINTEGERTerminalRuleCall_1_0() { return cValueINTEGERTerminalRuleCall_1_0; }
	}
	
	
	public class AssertionStatusKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "AssertionStatusKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cInfoEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cInfoInfoKeyword_0_0 = (Keyword)cInfoEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cWarningEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cWarningWarningKeyword_1_0 = (Keyword)cWarningEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cErrorEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cErrorErrorKeyword_2_0 = (Keyword)cErrorEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFatalEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFatalFatalKeyword_3_0 = (Keyword)cFatalEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum AssertionStatusKind:
		//	Info="info" | Warning="warning" | Error="error" | Fatal="fatal";
		public EnumRule getRule() { return rule; }

		//Info="info" | Warning="warning" | Error="error" | Fatal="fatal"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Info="info"
		public EnumLiteralDeclaration getInfoEnumLiteralDeclaration_0() { return cInfoEnumLiteralDeclaration_0; }

		//"info"
		public Keyword getInfoInfoKeyword_0_0() { return cInfoInfoKeyword_0_0; }

		//Warning="warning"
		public EnumLiteralDeclaration getWarningEnumLiteralDeclaration_1() { return cWarningEnumLiteralDeclaration_1; }

		//"warning"
		public Keyword getWarningWarningKeyword_1_0() { return cWarningWarningKeyword_1_0; }

		//Error="error"
		public EnumLiteralDeclaration getErrorEnumLiteralDeclaration_2() { return cErrorEnumLiteralDeclaration_2; }

		//"error"
		public Keyword getErrorErrorKeyword_2_0() { return cErrorErrorKeyword_2_0; }

		//Fatal="fatal"
		public EnumLiteralDeclaration getFatalEnumLiteralDeclaration_3() { return cFatalEnumLiteralDeclaration_3; }

		//"fatal"
		public Keyword getFatalFatalKeyword_3_0() { return cFatalFatalKeyword_3_0; }
	}

	public class EqualityOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "EqualityOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEqualToEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEqualToEqualsSignEqualsSignKeyword_0_0 = (Keyword)cEqualToEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNotEqualToEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNotEqualToExclamationMarkEqualsSignKeyword_1_0 = (Keyword)cNotEqualToEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum EqualityOperator:
		//	EqualTo="==" | NotEqualTo="!=";
		public EnumRule getRule() { return rule; }

		//EqualTo="==" | NotEqualTo="!="
		public Alternatives getAlternatives() { return cAlternatives; }

		//EqualTo="=="
		public EnumLiteralDeclaration getEqualToEnumLiteralDeclaration_0() { return cEqualToEnumLiteralDeclaration_0; }

		//"=="
		public Keyword getEqualToEqualsSignEqualsSignKeyword_0_0() { return cEqualToEqualsSignEqualsSignKeyword_0_0; }

		//NotEqualTo="!="
		public EnumLiteralDeclaration getNotEqualToEnumLiteralDeclaration_1() { return cNotEqualToEnumLiteralDeclaration_1; }

		//"!="
		public Keyword getNotEqualToExclamationMarkEqualsSignKeyword_1_0() { return cNotEqualToExclamationMarkEqualsSignKeyword_1_0; }
	}

	public class RelationalOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "RelationalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLessThanEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLessThanLessThanSignKeyword_0_0 = (Keyword)cLessThanEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLessThanOrEqualToEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLessThanOrEqualToLessThanSignEqualsSignKeyword_1_0 = (Keyword)cLessThanOrEqualToEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterThanEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanGreaterThanSignKeyword_2_0 = (Keyword)cGreaterThanEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterThanOrEqualToEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanOrEqualToGreaterThanSignEqualsSignKeyword_3_0 = (Keyword)cGreaterThanOrEqualToEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum RelationalOperator:
		//	LessThan="<" | LessThanOrEqualTo="<=" | GreaterThan=">" | GreaterThanOrEqualTo=">=";
		public EnumRule getRule() { return rule; }

		//LessThan="<" | LessThanOrEqualTo="<=" | GreaterThan=">" | GreaterThanOrEqualTo=">="
		public Alternatives getAlternatives() { return cAlternatives; }

		//LessThan="<"
		public EnumLiteralDeclaration getLessThanEnumLiteralDeclaration_0() { return cLessThanEnumLiteralDeclaration_0; }

		//"<"
		public Keyword getLessThanLessThanSignKeyword_0_0() { return cLessThanLessThanSignKeyword_0_0; }

		//LessThanOrEqualTo="<="
		public EnumLiteralDeclaration getLessThanOrEqualToEnumLiteralDeclaration_1() { return cLessThanOrEqualToEnumLiteralDeclaration_1; }

		//"<="
		public Keyword getLessThanOrEqualToLessThanSignEqualsSignKeyword_1_0() { return cLessThanOrEqualToLessThanSignEqualsSignKeyword_1_0; }

		//GreaterThan=">"
		public EnumLiteralDeclaration getGreaterThanEnumLiteralDeclaration_2() { return cGreaterThanEnumLiteralDeclaration_2; }

		//">"
		public Keyword getGreaterThanGreaterThanSignKeyword_2_0() { return cGreaterThanGreaterThanSignKeyword_2_0; }

		//GreaterThanOrEqualTo=">="
		public EnumLiteralDeclaration getGreaterThanOrEqualToEnumLiteralDeclaration_3() { return cGreaterThanOrEqualToEnumLiteralDeclaration_3; }

		//">="
		public Keyword getGreaterThanOrEqualToGreaterThanSignEqualsSignKeyword_3_0() { return cGreaterThanOrEqualToGreaterThanSignEqualsSignKeyword_3_0; }
	}

	public class AdditiveOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "AdditiveOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAdditionEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAdditionPlusSignKeyword_0_0 = (Keyword)cAdditionEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSubtractionEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSubtractionHyphenMinusKeyword_1_0 = (Keyword)cSubtractionEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum AdditiveOperator:
		//	Addition="+" | Subtraction="-";
		public EnumRule getRule() { return rule; }

		//Addition="+" | Subtraction="-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Addition="+"
		public EnumLiteralDeclaration getAdditionEnumLiteralDeclaration_0() { return cAdditionEnumLiteralDeclaration_0; }

		//"+"
		public Keyword getAdditionPlusSignKeyword_0_0() { return cAdditionPlusSignKeyword_0_0; }

		//Subtraction="-"
		public EnumLiteralDeclaration getSubtractionEnumLiteralDeclaration_1() { return cSubtractionEnumLiteralDeclaration_1; }

		//"-"
		public Keyword getSubtractionHyphenMinusKeyword_1_0() { return cSubtractionHyphenMinusKeyword_1_0; }
	}

	public class MultiplicativeOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicativeOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMultiplicationEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMultiplicationAsteriskKeyword_0_0 = (Keyword)cMultiplicationEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDivisionEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDivisionSolidusKeyword_1_0 = (Keyword)cDivisionEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cElementWiseMultiplicationEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cElementWiseMultiplicationFullStopAsteriskKeyword_2_0 = (Keyword)cElementWiseMultiplicationEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cElementWiseDivisionEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cElementWiseDivisionFullStopSolidusKeyword_3_0 = (Keyword)cElementWiseDivisionEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum MultiplicativeOperator:
		//	Multiplication="*" | Division="/" | ElementWiseMultiplication=".*" | ElementWiseDivision="./";
		public EnumRule getRule() { return rule; }

		//Multiplication="*" | Division="/" | ElementWiseMultiplication=".*" | ElementWiseDivision="./"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Multiplication="*"
		public EnumLiteralDeclaration getMultiplicationEnumLiteralDeclaration_0() { return cMultiplicationEnumLiteralDeclaration_0; }

		//"*"
		public Keyword getMultiplicationAsteriskKeyword_0_0() { return cMultiplicationAsteriskKeyword_0_0; }

		//Division="/"
		public EnumLiteralDeclaration getDivisionEnumLiteralDeclaration_1() { return cDivisionEnumLiteralDeclaration_1; }

		//"/"
		public Keyword getDivisionSolidusKeyword_1_0() { return cDivisionSolidusKeyword_1_0; }

		//ElementWiseMultiplication=".*"
		public EnumLiteralDeclaration getElementWiseMultiplicationEnumLiteralDeclaration_2() { return cElementWiseMultiplicationEnumLiteralDeclaration_2; }

		//".*"
		public Keyword getElementWiseMultiplicationFullStopAsteriskKeyword_2_0() { return cElementWiseMultiplicationFullStopAsteriskKeyword_2_0; }

		//ElementWiseDivision="./"
		public EnumLiteralDeclaration getElementWiseDivisionEnumLiteralDeclaration_3() { return cElementWiseDivisionEnumLiteralDeclaration_3; }

		//"./"
		public Keyword getElementWiseDivisionFullStopSolidusKeyword_3_0() { return cElementWiseDivisionFullStopSolidusKeyword_3_0; }
	}

	public class PowerOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "PowerOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPowerEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPowerCircumflexAccentKeyword_0_0 = (Keyword)cPowerEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cElementWisePowerEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cElementWisePowerFullStopCircumflexAccentKeyword_1_0 = (Keyword)cElementWisePowerEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum PowerOperator:
		//	Power="^" | ElementWisePower=".^";
		public EnumRule getRule() { return rule; }

		//Power="^" | ElementWisePower=".^"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Power="^"
		public EnumLiteralDeclaration getPowerEnumLiteralDeclaration_0() { return cPowerEnumLiteralDeclaration_0; }

		//"^"
		public Keyword getPowerCircumflexAccentKeyword_0_0() { return cPowerCircumflexAccentKeyword_0_0; }

		//ElementWisePower=".^"
		public EnumLiteralDeclaration getElementWisePowerEnumLiteralDeclaration_1() { return cElementWisePowerEnumLiteralDeclaration_1; }

		//".^"
		public Keyword getElementWisePowerFullStopCircumflexAccentKeyword_1_0() { return cElementWisePowerFullStopCircumflexAccentKeyword_1_0; }
	}

	public class UnaryOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMinusEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMinusHyphenMinusKeyword_0_0 = (Keyword)cMinusEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLogicalNotEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLogicalNotExclamationMarkKeyword_1_0 = (Keyword)cLogicalNotEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum UnaryOperator:
		//	Minus="-" | LogicalNot="!";
		public EnumRule getRule() { return rule; }

		//Minus="-" | LogicalNot="!"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Minus="-"
		public EnumLiteralDeclaration getMinusEnumLiteralDeclaration_0() { return cMinusEnumLiteralDeclaration_0; }

		//"-"
		public Keyword getMinusHyphenMinusKeyword_0_0() { return cMinusHyphenMinusKeyword_0_0; }

		//LogicalNot="!"
		public EnumLiteralDeclaration getLogicalNotEnumLiteralDeclaration_1() { return cLogicalNotEnumLiteralDeclaration_1; }

		//"!"
		public Keyword getLogicalNotExclamationMarkKeyword_1_0() { return cLogicalNotExclamationMarkKeyword_1_0; }
	}

	public class PostfixOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "PostfixOperator");
		private final EnumLiteralDeclaration cTransposeEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cTransposeApostropheKeyword_0 = (Keyword)cTransposeEnumLiteralDeclaration.eContents().get(0);
		
		//enum PostfixOperator:
		//	Transpose="\'";
		public EnumRule getRule() { return rule; }

		//Transpose="\'"
		public EnumLiteralDeclaration getTransposeEnumLiteralDeclaration() { return cTransposeEnumLiteralDeclaration; }

		//"\'"
		public Keyword getTransposeApostropheKeyword_0() { return cTransposeApostropheKeyword_0; }
	}

	public class BooleanKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFalseEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFalseFalseKeyword_0_0 = (Keyword)cFalseEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTrueEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTrueTrueKeyword_1_0 = (Keyword)cTrueEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum BooleanKind:
		//	False="false" | True="true";
		public EnumRule getRule() { return rule; }

		//False="false" | True="true"
		public Alternatives getAlternatives() { return cAlternatives; }

		//False="false"
		public EnumLiteralDeclaration getFalseEnumLiteralDeclaration_0() { return cFalseEnumLiteralDeclaration_0; }

		//"false"
		public Keyword getFalseFalseKeyword_0_0() { return cFalseFalseKeyword_0_0; }

		//True="true"
		public EnumLiteralDeclaration getTrueEnumLiteralDeclaration_1() { return cTrueEnumLiteralDeclaration_1; }

		//"true"
		public Keyword getTrueTrueKeyword_1_0() { return cTrueTrueKeyword_1_0; }
	}
	
	private ModuleElements pModule;
	private DefinitionElements pDefinition;
	private DataTypeDefinitionElements pDataTypeDefinition;
	private EnumerationDefinitionElements pEnumerationDefinition;
	private EnumerationLiteralDeclarationElements pEnumerationLiteralDeclaration;
	private TypeAliasDefinitionElements pTypeAliasDefinition;
	private RecordDefinitionElements pRecordDefinition;
	private RecordFieldDeclarationElements pRecordFieldDeclaration;
	private FunctionDefinitionElements pFunctionDefinition;
	private ParameterDeclarationElements pParameterDeclaration;
	private AssertionStatusKindElements unknownRuleAssertionStatusKind;
	private AssertionElements pAssertion;
	private StateVariableDeclarationElements pStateVariableDeclaration;
	private FunctorDeclarationElements pFunctorDeclaration;
	private EquationElements pEquation;
	private DataTypeSpecifierElements pDataTypeSpecifier;
	private PrimitiveTypeSpecifierElements pPrimitiveTypeSpecifier;
	private NumericTypeSpecifierElements pNumericTypeSpecifier;
	private RealTypeSpecifierElements pRealTypeSpecifier;
	private IntegerTypeSpecifierElements pIntegerTypeSpecifier;
	private ComplexTypeSpecifierElements pComplexTypeSpecifier;
	private GaussianTypeSpecifierElements pGaussianTypeSpecifier;
	private BooleanTypeSpecifierElements pBooleanTypeSpecifier;
	private StringTypeSpecifierElements pStringTypeSpecifier;
	private NamedTypeSpecifierElements pNamedTypeSpecifier;
	private ArrayDimensionSpecificationElements pArrayDimensionSpecification;
	private ExpressionElements pExpression;
	private LetExpressionElements pLetExpression;
	private LetExpressionVariableDeclarationElements pLetExpressionVariableDeclaration;
	private IfExpressionElements pIfExpression;
	private SwitchExpressionElements pSwitchExpression;
	private SwitchCaseElements pSwitchCase;
	private RangeExpressionElements pRangeExpression;
	private ImpliesExpressionElements pImpliesExpression;
	private LogicalOrExpressionElements pLogicalOrExpression;
	private LogicalAndExpressionElements pLogicalAndExpression;
	private EqualityExpressionElements pEqualityExpression;
	private EqualityOperatorElements unknownRuleEqualityOperator;
	private RelationalExpressionElements pRelationalExpression;
	private RelationalOperatorElements unknownRuleRelationalOperator;
	private AdditiveExpressionElements pAdditiveExpression;
	private AdditiveExpressionPartElements pAdditiveExpressionPart;
	private AdditiveOperatorElements unknownRuleAdditiveOperator;
	private MultiplicativeExpressionElements pMultiplicativeExpression;
	private MultiplicativeExpressionPartElements pMultiplicativeExpressionPart;
	private MultiplicativeOperatorElements unknownRuleMultiplicativeOperator;
	private PowerExpressionElements pPowerExpression;
	private PowerOperatorElements unknownRulePowerOperator;
	private UnaryExpressionElements pUnaryExpression;
	private UnaryOperatorElements unknownRuleUnaryOperator;
	private PostfixExpressionElements pPostfixExpression;
	private PostfixOperatorElements unknownRulePostfixOperator;
	private PrimaryExpressionElements pPrimaryExpression;
	private CallablePrimaryExpressionElements pCallablePrimaryExpression;
	private LiteralElements pLiteral;
	private NumericLiteralElements pNumericLiteral;
	private RealLiteralElements pRealLiteral;
	private IntegerLiteralElements pIntegerLiteral;
	private BooleanLiteralElements pBooleanLiteral;
	private BooleanKindElements unknownRuleBooleanKind;
	private StringLiteralElements pStringLiteral;
	private SimpleNameElements pSimpleName;
	private FeatureCallElements pFeatureCall;
	private FeatureCallPartElements pFeatureCallPart;
	private NameComponentElements pNameComponent;
	private ArrayElementAccessElements pArrayElementAccess;
	private ArraySubscriptElements pArraySubscript;
	private OperationArgumentListElements pOperationArgumentList;
	private IterationCallElements pIterationCall;
	private IterationVariableElements pIterationVariable;
	private IterationAccumulatorElements pIterationAccumulator;
	private ArrayConstructionOperatorElements pArrayConstructionOperator;
	private ArrayConstructionIterationClauseElements pArrayConstructionIterationClause;
	private ArrayConcatenationOperatorElements pArrayConcatenationOperator;
	private ExpressionListElements pExpressionList;
	private UnitConstructionOperatorElements pUnitConstructionOperator;
	private ParenthesizedExpressionElements pParenthesizedExpression;
	private BeginExpressionElements pBeginExpression;
	private EndExpressionElements pEndExpression;
	private QualifiedNameElements pQualifiedName;
	private UnitExpressionElements pUnitExpression;
	private UnitExpressionNumeratorElements pUnitExpressionNumerator;
	private UnitExpressionDenominatorElements pUnitExpressionDenominator;
	private UnitExpressionFactorElements pUnitExpressionFactor;
	private UnitExpressionExponentElements pUnitExpressionExponent;
	private TerminalRule tID;
	private TerminalRule tSTRING;
	private TerminalRule tREAL;
	private TerminalRule tINTEGER;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tANY_OTHER;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public MscriptGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	//Module:
	//	definitions+=Definition*;
	public ModuleElements getModuleAccess() {
		return (pModule != null) ? pModule : (pModule = new ModuleElements());
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}

	//Definition:
	//	DataTypeDefinition | FunctionDefinition;
	public DefinitionElements getDefinitionAccess() {
		return (pDefinition != null) ? pDefinition : (pDefinition = new DefinitionElements());
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}

	/// *
	// * DataTypeDefinition
	// * /DataTypeDefinition:
	//	EnumerationDefinition | RecordDefinition | TypeAliasDefinition;
	public DataTypeDefinitionElements getDataTypeDefinitionAccess() {
		return (pDataTypeDefinition != null) ? pDataTypeDefinition : (pDataTypeDefinition = new DataTypeDefinitionElements());
	}
	
	public ParserRule getDataTypeDefinitionRule() {
		return getDataTypeDefinitionAccess().getRule();
	}

	/// *
	// * Enumeration
	// * /EnumerationDefinition:
	//	"enum" name=ID "{" (literalDeclarations+=EnumerationLiteralDeclaration (","
	//	literalDeclarations+=EnumerationLiteralDeclaration)*)? "}";
	public EnumerationDefinitionElements getEnumerationDefinitionAccess() {
		return (pEnumerationDefinition != null) ? pEnumerationDefinition : (pEnumerationDefinition = new EnumerationDefinitionElements());
	}
	
	public ParserRule getEnumerationDefinitionRule() {
		return getEnumerationDefinitionAccess().getRule();
	}

	//EnumerationLiteralDeclaration:
	//	name=ID;
	public EnumerationLiteralDeclarationElements getEnumerationLiteralDeclarationAccess() {
		return (pEnumerationLiteralDeclaration != null) ? pEnumerationLiteralDeclaration : (pEnumerationLiteralDeclaration = new EnumerationLiteralDeclarationElements());
	}
	
	public ParserRule getEnumerationLiteralDeclarationRule() {
		return getEnumerationLiteralDeclarationAccess().getRule();
	}

	/// *
	// * TypeAlias
	// * /TypeAliasDefinition:
	//	"type" name=ID "=" type=PrimitiveTypeSpecifier ";";
	public TypeAliasDefinitionElements getTypeAliasDefinitionAccess() {
		return (pTypeAliasDefinition != null) ? pTypeAliasDefinition : (pTypeAliasDefinition = new TypeAliasDefinitionElements());
	}
	
	public ParserRule getTypeAliasDefinitionRule() {
		return getTypeAliasDefinitionAccess().getRule();
	}

	/// *
	// * Record
	// * /RecordDefinition:
	//	"record" name=ID "{" fieldDeclarations+=RecordFieldDeclaration* "}";
	public RecordDefinitionElements getRecordDefinitionAccess() {
		return (pRecordDefinition != null) ? pRecordDefinition : (pRecordDefinition = new RecordDefinitionElements());
	}
	
	public ParserRule getRecordDefinitionRule() {
		return getRecordDefinitionAccess().getRule();
	}

	//RecordFieldDeclaration:
	//	name=ID ":" type=DataTypeSpecifier ";";
	public RecordFieldDeclarationElements getRecordFieldDeclarationAccess() {
		return (pRecordFieldDeclaration != null) ? pRecordFieldDeclaration : (pRecordFieldDeclaration = new RecordFieldDeclarationElements());
	}
	
	public ParserRule getRecordFieldDeclarationRule() {
		return getRecordFieldDeclarationAccess().getRule();
	}

	/// *
	// * Function
	// * /FunctionDefinition:
	//	stateful?="stateful"? "func" name=ID ("<" templateParameterDeclarations+=ParameterDeclaration (","
	//	templateParameterDeclarations+=ParameterDeclaration)* ">")? "(" (inputParameterDeclarations+=ParameterDeclaration (","
	//	inputParameterDeclarations+=ParameterDeclaration)*)? ")" "->" outputParameterDeclarations+=ParameterDeclaration (","
	//	outputParameterDeclarations+=ParameterDeclaration)* "{" (assertions+=Assertion |
	//	functorDeclarations+=FunctorDeclaration | stateVariableDeclarations+=StateVariableDeclaration | equations+=Equation)*
	//	"}";
	public FunctionDefinitionElements getFunctionDefinitionAccess() {
		return (pFunctionDefinition != null) ? pFunctionDefinition : (pFunctionDefinition = new FunctionDefinitionElements());
	}
	
	public ParserRule getFunctionDefinitionRule() {
		return getFunctionDefinitionAccess().getRule();
	}

	//ParameterDeclaration:
	//	name=ID;
	public ParameterDeclarationElements getParameterDeclarationAccess() {
		return (pParameterDeclaration != null) ? pParameterDeclaration : (pParameterDeclaration = new ParameterDeclarationElements());
	}
	
	public ParserRule getParameterDeclarationRule() {
		return getParameterDeclarationAccess().getRule();
	}

	//enum AssertionStatusKind:
	//	Info="info" | Warning="warning" | Error="error" | Fatal="fatal";
	public AssertionStatusKindElements getAssertionStatusKindAccess() {
		return (unknownRuleAssertionStatusKind != null) ? unknownRuleAssertionStatusKind : (unknownRuleAssertionStatusKind = new AssertionStatusKindElements());
	}
	
	public EnumRule getAssertionStatusKindRule() {
		return getAssertionStatusKindAccess().getRule();
	}

	//Assertion:
	//	static?="static"? "assert" condition=Expression ":" statusKind=AssertionStatusKind message=Expression ";";
	public AssertionElements getAssertionAccess() {
		return (pAssertion != null) ? pAssertion : (pAssertion = new AssertionElements());
	}
	
	public ParserRule getAssertionRule() {
		return getAssertionAccess().getRule();
	}

	//StateVariableDeclaration:
	//	"var" name=ID ";";
	public StateVariableDeclarationElements getStateVariableDeclarationAccess() {
		return (pStateVariableDeclaration != null) ? pStateVariableDeclaration : (pStateVariableDeclaration = new StateVariableDeclarationElements());
	}
	
	public ParserRule getStateVariableDeclarationRule() {
		return getStateVariableDeclarationAccess().getRule();
	}

	//FunctorDeclaration:
	//	"functor" name=ID ":" functionName=QualifiedName ("<" templateArguments+=Expression (","
	//	templateArguments+=Expression)* ">")? ";";
	public FunctorDeclarationElements getFunctorDeclarationAccess() {
		return (pFunctorDeclaration != null) ? pFunctorDeclaration : (pFunctorDeclaration = new FunctorDeclarationElements());
	}
	
	public ParserRule getFunctorDeclarationRule() {
		return getFunctorDeclarationAccess().getRule();
	}

	//Equation:
	//	leftHandSide=Expression "=" rightHandSide=Expression ";";
	public EquationElements getEquationAccess() {
		return (pEquation != null) ? pEquation : (pEquation = new EquationElements());
	}
	
	public ParserRule getEquationRule() {
		return getEquationAccess().getRule();
	}

	/// *
	// * Data type specifier
	// * /DataTypeSpecifier:
	//	PrimitiveTypeSpecifier | NamedTypeSpecifier;
	public DataTypeSpecifierElements getDataTypeSpecifierAccess() {
		return (pDataTypeSpecifier != null) ? pDataTypeSpecifier : (pDataTypeSpecifier = new DataTypeSpecifierElements());
	}
	
	public ParserRule getDataTypeSpecifierRule() {
		return getDataTypeSpecifierAccess().getRule();
	}

	//PrimitiveTypeSpecifier:
	//	NumericTypeSpecifier | BooleanTypeSpecifier | StringTypeSpecifier;
	public PrimitiveTypeSpecifierElements getPrimitiveTypeSpecifierAccess() {
		return (pPrimitiveTypeSpecifier != null) ? pPrimitiveTypeSpecifier : (pPrimitiveTypeSpecifier = new PrimitiveTypeSpecifierElements());
	}
	
	public ParserRule getPrimitiveTypeSpecifierRule() {
		return getPrimitiveTypeSpecifierAccess().getRule();
	}

	//NumericTypeSpecifier:
	//	RealTypeSpecifier | IntegerTypeSpecifier | ComplexTypeSpecifier | GaussianTypeSpecifier;
	public NumericTypeSpecifierElements getNumericTypeSpecifierAccess() {
		return (pNumericTypeSpecifier != null) ? pNumericTypeSpecifier : (pNumericTypeSpecifier = new NumericTypeSpecifierElements());
	}
	
	public ParserRule getNumericTypeSpecifierRule() {
		return getNumericTypeSpecifierAccess().getRule();
	}

	//RealTypeSpecifier:
	//	{RealTypeSpecifier} "real" ("(" unit=UnitExpression ")")? ("[" dimensions+=ArrayDimensionSpecification (","
	//	dimensions+=ArrayDimensionSpecification)* "]")?;
	public RealTypeSpecifierElements getRealTypeSpecifierAccess() {
		return (pRealTypeSpecifier != null) ? pRealTypeSpecifier : (pRealTypeSpecifier = new RealTypeSpecifierElements());
	}
	
	public ParserRule getRealTypeSpecifierRule() {
		return getRealTypeSpecifierAccess().getRule();
	}

	//IntegerTypeSpecifier:
	//	{IntegerTypeSpecifier} "int" ("(" unit=UnitExpression ")")? ("[" dimensions+=ArrayDimensionSpecification (","
	//	dimensions+=ArrayDimensionSpecification)* "]")?;
	public IntegerTypeSpecifierElements getIntegerTypeSpecifierAccess() {
		return (pIntegerTypeSpecifier != null) ? pIntegerTypeSpecifier : (pIntegerTypeSpecifier = new IntegerTypeSpecifierElements());
	}
	
	public ParserRule getIntegerTypeSpecifierRule() {
		return getIntegerTypeSpecifierAccess().getRule();
	}

	//ComplexTypeSpecifier:
	//	{ComplexTypeSpecifier} "complex" ("(" unit=UnitExpression ")")? ("[" dimensions+=ArrayDimensionSpecification (","
	//	dimensions+=ArrayDimensionSpecification)* "]")?;
	public ComplexTypeSpecifierElements getComplexTypeSpecifierAccess() {
		return (pComplexTypeSpecifier != null) ? pComplexTypeSpecifier : (pComplexTypeSpecifier = new ComplexTypeSpecifierElements());
	}
	
	public ParserRule getComplexTypeSpecifierRule() {
		return getComplexTypeSpecifierAccess().getRule();
	}

	//GaussianTypeSpecifier:
	//	{GaussianTypeSpecifier} "gauss" ("(" unit=UnitExpression ")")? ("[" dimensions+=ArrayDimensionSpecification (","
	//	dimensions+=ArrayDimensionSpecification)* "]")?;
	public GaussianTypeSpecifierElements getGaussianTypeSpecifierAccess() {
		return (pGaussianTypeSpecifier != null) ? pGaussianTypeSpecifier : (pGaussianTypeSpecifier = new GaussianTypeSpecifierElements());
	}
	
	public ParserRule getGaussianTypeSpecifierRule() {
		return getGaussianTypeSpecifierAccess().getRule();
	}

	//BooleanTypeSpecifier:
	//	{BooleanTypeSpecifier} "bool" ("[" dimensions+=ArrayDimensionSpecification (","
	//	dimensions+=ArrayDimensionSpecification)* "]")?;
	public BooleanTypeSpecifierElements getBooleanTypeSpecifierAccess() {
		return (pBooleanTypeSpecifier != null) ? pBooleanTypeSpecifier : (pBooleanTypeSpecifier = new BooleanTypeSpecifierElements());
	}
	
	public ParserRule getBooleanTypeSpecifierRule() {
		return getBooleanTypeSpecifierAccess().getRule();
	}

	//StringTypeSpecifier:
	//	{StringTypeSpecifier} "string" ("[" dimensions+=ArrayDimensionSpecification (","
	//	dimensions+=ArrayDimensionSpecification)* "]")?;
	public StringTypeSpecifierElements getStringTypeSpecifierAccess() {
		return (pStringTypeSpecifier != null) ? pStringTypeSpecifier : (pStringTypeSpecifier = new StringTypeSpecifierElements());
	}
	
	public ParserRule getStringTypeSpecifierRule() {
		return getStringTypeSpecifierAccess().getRule();
	}

	//NamedTypeSpecifier:
	//	typeReference=QualifiedName ("[" dimensions+=ArrayDimensionSpecification (","
	//	dimensions+=ArrayDimensionSpecification)* "]")?;
	public NamedTypeSpecifierElements getNamedTypeSpecifierAccess() {
		return (pNamedTypeSpecifier != null) ? pNamedTypeSpecifier : (pNamedTypeSpecifier = new NamedTypeSpecifierElements());
	}
	
	public ParserRule getNamedTypeSpecifierRule() {
		return getNamedTypeSpecifierAccess().getRule();
	}

	//ArrayDimensionSpecification:
	//	{ArrayDimensionSpecification} size=Expression?;
	public ArrayDimensionSpecificationElements getArrayDimensionSpecificationAccess() {
		return (pArrayDimensionSpecification != null) ? pArrayDimensionSpecification : (pArrayDimensionSpecification = new ArrayDimensionSpecificationElements());
	}
	
	public ParserRule getArrayDimensionSpecificationRule() {
		return getArrayDimensionSpecificationAccess().getRule();
	}

	/// *
	// * Expressions
	// * /Expression:
	//	LetExpression | IfExpression | SwitchExpression | RangeExpression;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//LetExpression:
	//	"let" variableDeclarations+=LetExpressionVariableDeclaration (","
	//	variableDeclarations+=LetExpressionVariableDeclaration)* "in" targetExpression=Expression;
	public LetExpressionElements getLetExpressionAccess() {
		return (pLetExpression != null) ? pLetExpression : (pLetExpression = new LetExpressionElements());
	}
	
	public ParserRule getLetExpressionRule() {
		return getLetExpressionAccess().getRule();
	}

	//LetExpressionVariableDeclaration:
	//	(names+=ID | "(" names+=ID ("," names+=ID)+ ")") "=" assignedExpression=Expression;
	public LetExpressionVariableDeclarationElements getLetExpressionVariableDeclarationAccess() {
		return (pLetExpressionVariableDeclaration != null) ? pLetExpressionVariableDeclaration : (pLetExpressionVariableDeclaration = new LetExpressionVariableDeclarationElements());
	}
	
	public ParserRule getLetExpressionVariableDeclarationRule() {
		return getLetExpressionVariableDeclarationAccess().getRule();
	}

	//IfExpression:
	//	static?="static"? "if" condition=Expression "then" thenExpression=Expression "else" elseExpression=Expression;
	public IfExpressionElements getIfExpressionAccess() {
		return (pIfExpression != null) ? pIfExpression : (pIfExpression = new IfExpressionElements());
	}
	
	public ParserRule getIfExpressionRule() {
		return getIfExpressionAccess().getRule();
	}

	//SwitchExpression:
	//	static?="static"? "switch" controlExpression=Expression cases+=SwitchCase* "default" ":" defaultExpression=Expression;
	public SwitchExpressionElements getSwitchExpressionAccess() {
		return (pSwitchExpression != null) ? pSwitchExpression : (pSwitchExpression = new SwitchExpressionElements());
	}
	
	public ParserRule getSwitchExpressionRule() {
		return getSwitchExpressionAccess().getRule();
	}

	//SwitchCase:
	//	"case" caseExpression=ImpliesExpression ":" resultExpression=Expression;
	public SwitchCaseElements getSwitchCaseAccess() {
		return (pSwitchCase != null) ? pSwitchCase : (pSwitchCase = new SwitchCaseElements());
	}
	
	public ParserRule getSwitchCaseRule() {
		return getSwitchCaseAccess().getRule();
	}

	//RangeExpression returns Expression:
	//	ImpliesExpression ({RangeExpression.operands+=current} ":" operands+=ImpliesExpression (":"
	//	operands+=ImpliesExpression)?)?;
	public RangeExpressionElements getRangeExpressionAccess() {
		return (pRangeExpression != null) ? pRangeExpression : (pRangeExpression = new RangeExpressionElements());
	}
	
	public ParserRule getRangeExpressionRule() {
		return getRangeExpressionAccess().getRule();
	}

	//ImpliesExpression returns Expression:
	//	LogicalOrExpression ({ImpliesExpression.leftOperand=current} "=>" rightOperand=LogicalOrExpression)?;
	public ImpliesExpressionElements getImpliesExpressionAccess() {
		return (pImpliesExpression != null) ? pImpliesExpression : (pImpliesExpression = new ImpliesExpressionElements());
	}
	
	public ParserRule getImpliesExpressionRule() {
		return getImpliesExpressionAccess().getRule();
	}

	//LogicalOrExpression returns Expression:
	//	LogicalAndExpression ({LogicalOrExpression.operands+=current} ("||" operands+=LogicalAndExpression)+)?;
	public LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return (pLogicalOrExpression != null) ? pLogicalOrExpression : (pLogicalOrExpression = new LogicalOrExpressionElements());
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}

	//LogicalAndExpression returns Expression:
	//	EqualityExpression ({LogicalAndExpression.operands+=current} ("&&" operands+=EqualityExpression)+)?;
	public LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return (pLogicalAndExpression != null) ? pLogicalAndExpression : (pLogicalAndExpression = new LogicalAndExpressionElements());
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}

	//EqualityExpression returns Expression:
	//	RelationalExpression ({EqualityExpression.leftOperand=current} operator=EqualityOperator
	//	rightOperand=RelationalExpression)?;
	public EqualityExpressionElements getEqualityExpressionAccess() {
		return (pEqualityExpression != null) ? pEqualityExpression : (pEqualityExpression = new EqualityExpressionElements());
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}

	//enum EqualityOperator:
	//	EqualTo="==" | NotEqualTo="!=";
	public EqualityOperatorElements getEqualityOperatorAccess() {
		return (unknownRuleEqualityOperator != null) ? unknownRuleEqualityOperator : (unknownRuleEqualityOperator = new EqualityOperatorElements());
	}
	
	public EnumRule getEqualityOperatorRule() {
		return getEqualityOperatorAccess().getRule();
	}

	//RelationalExpression returns Expression:
	//	AdditiveExpression ({RelationalExpression.leftOperand=current} operator=RelationalOperator
	//	rightOperand=AdditiveExpression | {TypeTestExpression.expression=current} "is" type=DataTypeSpecifier)?;
	public RelationalExpressionElements getRelationalExpressionAccess() {
		return (pRelationalExpression != null) ? pRelationalExpression : (pRelationalExpression = new RelationalExpressionElements());
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}

	//enum RelationalOperator:
	//	LessThan="<" | LessThanOrEqualTo="<=" | GreaterThan=">" | GreaterThanOrEqualTo=">=";
	public RelationalOperatorElements getRelationalOperatorAccess() {
		return (unknownRuleRelationalOperator != null) ? unknownRuleRelationalOperator : (unknownRuleRelationalOperator = new RelationalOperatorElements());
	}
	
	public EnumRule getRelationalOperatorRule() {
		return getRelationalOperatorAccess().getRule();
	}

	//AdditiveExpression returns Expression:
	//	MultiplicativeExpression ({AdditiveExpression.leftOperand=current} rightParts+=AdditiveExpressionPart+)?;
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return (pAdditiveExpression != null) ? pAdditiveExpression : (pAdditiveExpression = new AdditiveExpressionElements());
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	//AdditiveExpressionPart:
	//	operator=AdditiveOperator operand=MultiplicativeExpression;
	public AdditiveExpressionPartElements getAdditiveExpressionPartAccess() {
		return (pAdditiveExpressionPart != null) ? pAdditiveExpressionPart : (pAdditiveExpressionPart = new AdditiveExpressionPartElements());
	}
	
	public ParserRule getAdditiveExpressionPartRule() {
		return getAdditiveExpressionPartAccess().getRule();
	}

	//enum AdditiveOperator:
	//	Addition="+" | Subtraction="-";
	public AdditiveOperatorElements getAdditiveOperatorAccess() {
		return (unknownRuleAdditiveOperator != null) ? unknownRuleAdditiveOperator : (unknownRuleAdditiveOperator = new AdditiveOperatorElements());
	}
	
	public EnumRule getAdditiveOperatorRule() {
		return getAdditiveOperatorAccess().getRule();
	}

	//MultiplicativeExpression returns Expression:
	//	PowerExpression ({MultiplicativeExpression.leftOperand=current} rightParts+=MultiplicativeExpressionPart+)?;
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return (pMultiplicativeExpression != null) ? pMultiplicativeExpression : (pMultiplicativeExpression = new MultiplicativeExpressionElements());
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}

	//MultiplicativeExpressionPart:
	//	operator=MultiplicativeOperator operand=PowerExpression;
	public MultiplicativeExpressionPartElements getMultiplicativeExpressionPartAccess() {
		return (pMultiplicativeExpressionPart != null) ? pMultiplicativeExpressionPart : (pMultiplicativeExpressionPart = new MultiplicativeExpressionPartElements());
	}
	
	public ParserRule getMultiplicativeExpressionPartRule() {
		return getMultiplicativeExpressionPartAccess().getRule();
	}

	//enum MultiplicativeOperator:
	//	Multiplication="*" | Division="/" | ElementWiseMultiplication=".*" | ElementWiseDivision="./";
	public MultiplicativeOperatorElements getMultiplicativeOperatorAccess() {
		return (unknownRuleMultiplicativeOperator != null) ? unknownRuleMultiplicativeOperator : (unknownRuleMultiplicativeOperator = new MultiplicativeOperatorElements());
	}
	
	public EnumRule getMultiplicativeOperatorRule() {
		return getMultiplicativeOperatorAccess().getRule();
	}

	//PowerExpression returns Expression:
	//	UnaryExpression ({PowerExpression.operand=current} operator=PowerOperator exponent=UnaryExpression)?;
	public PowerExpressionElements getPowerExpressionAccess() {
		return (pPowerExpression != null) ? pPowerExpression : (pPowerExpression = new PowerExpressionElements());
	}
	
	public ParserRule getPowerExpressionRule() {
		return getPowerExpressionAccess().getRule();
	}

	//enum PowerOperator:
	//	Power="^" | ElementWisePower=".^";
	public PowerOperatorElements getPowerOperatorAccess() {
		return (unknownRulePowerOperator != null) ? unknownRulePowerOperator : (unknownRulePowerOperator = new PowerOperatorElements());
	}
	
	public EnumRule getPowerOperatorRule() {
		return getPowerOperatorAccess().getRule();
	}

	//UnaryExpression returns Expression:
	//	PostfixExpression | {UnaryExpression} operator=UnaryOperator operand=PostfixExpression;
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return (pUnaryExpression != null) ? pUnaryExpression : (pUnaryExpression = new UnaryExpressionElements());
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}

	//enum UnaryOperator:
	//	Minus="-" | LogicalNot="!";
	public UnaryOperatorElements getUnaryOperatorAccess() {
		return (unknownRuleUnaryOperator != null) ? unknownRuleUnaryOperator : (unknownRuleUnaryOperator = new UnaryOperatorElements());
	}
	
	public EnumRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}

	//PostfixExpression returns Expression:
	//	PrimaryExpression ({PostfixExpression.operand=current} operator=PostfixOperator)?;
	public PostfixExpressionElements getPostfixExpressionAccess() {
		return (pPostfixExpression != null) ? pPostfixExpression : (pPostfixExpression = new PostfixExpressionElements());
	}
	
	public ParserRule getPostfixExpressionRule() {
		return getPostfixExpressionAccess().getRule();
	}

	//enum PostfixOperator:
	//	Transpose="\'";
	public PostfixOperatorElements getPostfixOperatorAccess() {
		return (unknownRulePostfixOperator != null) ? unknownRulePostfixOperator : (unknownRulePostfixOperator = new PostfixOperatorElements());
	}
	
	public EnumRule getPostfixOperatorRule() {
		return getPostfixOperatorAccess().getRule();
	}

	//PrimaryExpression returns Expression:
	//	Literal | FeatureCall | UnitConstructionOperator | BeginExpression | EndExpression;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return (pPrimaryExpression != null) ? pPrimaryExpression : (pPrimaryExpression = new PrimaryExpressionElements());
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//CallablePrimaryExpression returns Expression:
	//	ArrayConstructionOperator | ArrayConcatenationOperator | ParenthesizedExpression;
	public CallablePrimaryExpressionElements getCallablePrimaryExpressionAccess() {
		return (pCallablePrimaryExpression != null) ? pCallablePrimaryExpression : (pCallablePrimaryExpression = new CallablePrimaryExpressionElements());
	}
	
	public ParserRule getCallablePrimaryExpressionRule() {
		return getCallablePrimaryExpressionAccess().getRule();
	}

	//Literal:
	//	NumericLiteral | BooleanLiteral | StringLiteral;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//NumericLiteral:
	//	RealLiteral | IntegerLiteral;
	public NumericLiteralElements getNumericLiteralAccess() {
		return (pNumericLiteral != null) ? pNumericLiteral : (pNumericLiteral = new NumericLiteralElements());
	}
	
	public ParserRule getNumericLiteralRule() {
		return getNumericLiteralAccess().getRule();
	}

	//RealLiteral:
	//	value=REAL modifier=ID? ("(" unit=UnitExpression ")")?;
	public RealLiteralElements getRealLiteralAccess() {
		return (pRealLiteral != null) ? pRealLiteral : (pRealLiteral = new RealLiteralElements());
	}
	
	public ParserRule getRealLiteralRule() {
		return getRealLiteralAccess().getRule();
	}

	//IntegerLiteral:
	//	value=INTEGER modifier=ID? ("(" unit=UnitExpression ")")?;
	public IntegerLiteralElements getIntegerLiteralAccess() {
		return (pIntegerLiteral != null) ? pIntegerLiteral : (pIntegerLiteral = new IntegerLiteralElements());
	}
	
	public ParserRule getIntegerLiteralRule() {
		return getIntegerLiteralAccess().getRule();
	}

	//BooleanLiteral:
	//	value=BooleanKind;
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return (pBooleanLiteral != null) ? pBooleanLiteral : (pBooleanLiteral = new BooleanLiteralElements());
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//enum BooleanKind:
	//	False="false" | True="true";
	public BooleanKindElements getBooleanKindAccess() {
		return (unknownRuleBooleanKind != null) ? unknownRuleBooleanKind : (unknownRuleBooleanKind = new BooleanKindElements());
	}
	
	public EnumRule getBooleanKindRule() {
		return getBooleanKindAccess().getRule();
	}

	//StringLiteral:
	//	value=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return (pStringLiteral != null) ? pStringLiteral : (pStringLiteral = new StringLiteralElements());
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//SimpleName returns Expression:
	//	{SimpleName} identifier=ID;
	public SimpleNameElements getSimpleNameAccess() {
		return (pSimpleName != null) ? pSimpleName : (pSimpleName = new SimpleNameElements());
	}
	
	public ParserRule getSimpleNameRule() {
		return getSimpleNameAccess().getRule();
	}

	//FeatureCall returns Expression:
	//	CallablePrimaryExpression ({FeatureCall.target=current} parts+=FeatureCallPart+)? | {FeatureCall} target=SimpleName
	//	parts+=FeatureCallPart*;
	public FeatureCallElements getFeatureCallAccess() {
		return (pFeatureCall != null) ? pFeatureCall : (pFeatureCall = new FeatureCallElements());
	}
	
	public ParserRule getFeatureCallRule() {
		return getFeatureCallAccess().getRule();
	}

	//FeatureCallPart:
	//	NameComponent | ArrayElementAccess | OperationArgumentList | IterationCall;
	public FeatureCallPartElements getFeatureCallPartAccess() {
		return (pFeatureCallPart != null) ? pFeatureCallPart : (pFeatureCallPart = new FeatureCallPartElements());
	}
	
	public ParserRule getFeatureCallPartRule() {
		return getFeatureCallPartAccess().getRule();
	}

	//NameComponent:
	//	"." identifier=ID;
	public NameComponentElements getNameComponentAccess() {
		return (pNameComponent != null) ? pNameComponent : (pNameComponent = new NameComponentElements());
	}
	
	public ParserRule getNameComponentRule() {
		return getNameComponentAccess().getRule();
	}

	//ArrayElementAccess:
	//	"[" subscripts+=ArraySubscript ("," subscripts+=ArraySubscript)* "]";
	public ArrayElementAccessElements getArrayElementAccessAccess() {
		return (pArrayElementAccess != null) ? pArrayElementAccess : (pArrayElementAccess = new ArrayElementAccessElements());
	}
	
	public ParserRule getArrayElementAccessRule() {
		return getArrayElementAccessAccess().getRule();
	}

	//ArraySubscript:
	//	slice?=":" | expression=Expression;
	public ArraySubscriptElements getArraySubscriptAccess() {
		return (pArraySubscript != null) ? pArraySubscript : (pArraySubscript = new ArraySubscriptElements());
	}
	
	public ParserRule getArraySubscriptRule() {
		return getArraySubscriptAccess().getRule();
	}

	//OperationArgumentList:
	//	{OperationArgumentList} "(" (arguments+=Expression ("," arguments+=Expression)*)? ")";
	public OperationArgumentListElements getOperationArgumentListAccess() {
		return (pOperationArgumentList != null) ? pOperationArgumentList : (pOperationArgumentList = new OperationArgumentListElements());
	}
	
	public ParserRule getOperationArgumentListRule() {
		return getOperationArgumentListAccess().getRule();
	}

	//IterationCall:
	//	"." name=ID "(" variables+=IterationVariable ("," variables+=IterationVariable)* (";"
	//	accumulator=IterationAccumulator)? "|" expression=Expression ")";
	public IterationCallElements getIterationCallAccess() {
		return (pIterationCall != null) ? pIterationCall : (pIterationCall = new IterationCallElements());
	}
	
	public ParserRule getIterationCallRule() {
		return getIterationCallAccess().getRule();
	}

	//IterationVariable:
	//	name=ID;
	public IterationVariableElements getIterationVariableAccess() {
		return (pIterationVariable != null) ? pIterationVariable : (pIterationVariable = new IterationVariableElements());
	}
	
	public ParserRule getIterationVariableRule() {
		return getIterationVariableAccess().getRule();
	}

	//IterationAccumulator:
	//	name=ID "=" initializer=Expression;
	public IterationAccumulatorElements getIterationAccumulatorAccess() {
		return (pIterationAccumulator != null) ? pIterationAccumulator : (pIterationAccumulator = new IterationAccumulatorElements());
	}
	
	public ParserRule getIterationAccumulatorRule() {
		return getIterationAccumulatorAccess().getRule();
	}

	//ArrayConstructionOperator:
	//	"{" expressions+=Expression (("," expressions+=Expression)* | "for" iterationClauses+=ArrayConstructionIterationClause
	//	("," iterationClauses+=ArrayConstructionIterationClause)*) "}";
	public ArrayConstructionOperatorElements getArrayConstructionOperatorAccess() {
		return (pArrayConstructionOperator != null) ? pArrayConstructionOperator : (pArrayConstructionOperator = new ArrayConstructionOperatorElements());
	}
	
	public ParserRule getArrayConstructionOperatorRule() {
		return getArrayConstructionOperatorAccess().getRule();
	}

	//ArrayConstructionIterationClause:
	//	variableName=ID "in" collectionExpression=Expression;
	public ArrayConstructionIterationClauseElements getArrayConstructionIterationClauseAccess() {
		return (pArrayConstructionIterationClause != null) ? pArrayConstructionIterationClause : (pArrayConstructionIterationClause = new ArrayConstructionIterationClauseElements());
	}
	
	public ParserRule getArrayConstructionIterationClauseRule() {
		return getArrayConstructionIterationClauseAccess().getRule();
	}

	//ArrayConcatenationOperator:
	//	"[" rows+=ExpressionList (";" rows+=ExpressionList)* "]";
	public ArrayConcatenationOperatorElements getArrayConcatenationOperatorAccess() {
		return (pArrayConcatenationOperator != null) ? pArrayConcatenationOperator : (pArrayConcatenationOperator = new ArrayConcatenationOperatorElements());
	}
	
	public ParserRule getArrayConcatenationOperatorRule() {
		return getArrayConcatenationOperatorAccess().getRule();
	}

	//ExpressionList:
	//	expressions+=Expression ("," expressions+=Expression)*;
	public ExpressionListElements getExpressionListAccess() {
		return (pExpressionList != null) ? pExpressionList : (pExpressionList = new ExpressionListElements());
	}
	
	public ParserRule getExpressionListRule() {
		return getExpressionListAccess().getRule();
	}

	//UnitConstructionOperator:
	//	"$" "(" unit=UnitExpression ")";
	public UnitConstructionOperatorElements getUnitConstructionOperatorAccess() {
		return (pUnitConstructionOperator != null) ? pUnitConstructionOperator : (pUnitConstructionOperator = new UnitConstructionOperatorElements());
	}
	
	public ParserRule getUnitConstructionOperatorRule() {
		return getUnitConstructionOperatorAccess().getRule();
	}

	//ParenthesizedExpression:
	//	"(" expressions+=Expression ("," expressions+=Expression)* ")";
	public ParenthesizedExpressionElements getParenthesizedExpressionAccess() {
		return (pParenthesizedExpression != null) ? pParenthesizedExpression : (pParenthesizedExpression = new ParenthesizedExpressionElements());
	}
	
	public ParserRule getParenthesizedExpressionRule() {
		return getParenthesizedExpressionAccess().getRule();
	}

	//BeginExpression:
	//	{BeginExpression} "begin";
	public BeginExpressionElements getBeginExpressionAccess() {
		return (pBeginExpression != null) ? pBeginExpression : (pBeginExpression = new BeginExpressionElements());
	}
	
	public ParserRule getBeginExpressionRule() {
		return getBeginExpressionAccess().getRule();
	}

	//EndExpression:
	//	{EndExpression} "end";
	public EndExpressionElements getEndExpressionAccess() {
		return (pEndExpression != null) ? pEndExpression : (pEndExpression = new EndExpressionElements());
	}
	
	public ParserRule getEndExpressionRule() {
		return getEndExpressionAccess().getRule();
	}

	//QualifiedName:
	//	identifiers+=ID ("." identifiers+=ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	/// *
	// * Unit expressions
	// * /UnitExpression:
	//	{UnitExpression} (numerator=UnitExpressionNumerator ("/" denominator=UnitExpressionDenominator)?)?;
	public UnitExpressionElements getUnitExpressionAccess() {
		return (pUnitExpression != null) ? pUnitExpression : (pUnitExpression = new UnitExpressionElements());
	}
	
	public ParserRule getUnitExpressionRule() {
		return getUnitExpressionAccess().getRule();
	}

	//UnitExpressionNumerator:
	//	one=INTEGER / * must be '1' * / | factors+=UnitExpressionFactor ("*" factors+=UnitExpressionFactor)*;
	public UnitExpressionNumeratorElements getUnitExpressionNumeratorAccess() {
		return (pUnitExpressionNumerator != null) ? pUnitExpressionNumerator : (pUnitExpressionNumerator = new UnitExpressionNumeratorElements());
	}
	
	public ParserRule getUnitExpressionNumeratorRule() {
		return getUnitExpressionNumeratorAccess().getRule();
	}

	//UnitExpressionDenominator:
	//	factors+=UnitExpressionFactor | "(" factors+=UnitExpressionFactor ("*" factors+=UnitExpressionFactor)* ")";
	public UnitExpressionDenominatorElements getUnitExpressionDenominatorAccess() {
		return (pUnitExpressionDenominator != null) ? pUnitExpressionDenominator : (pUnitExpressionDenominator = new UnitExpressionDenominatorElements());
	}
	
	public ParserRule getUnitExpressionDenominatorRule() {
		return getUnitExpressionDenominatorAccess().getRule();
	}

	//UnitExpressionFactor:
	//	operand=ID ("^" exponent=UnitExpressionExponent)?;
	public UnitExpressionFactorElements getUnitExpressionFactorAccess() {
		return (pUnitExpressionFactor != null) ? pUnitExpressionFactor : (pUnitExpressionFactor = new UnitExpressionFactorElements());
	}
	
	public ParserRule getUnitExpressionFactorRule() {
		return getUnitExpressionFactorAccess().getRule();
	}

	//UnitExpressionExponent:
	//	negative?="-"? value=INTEGER;
	public UnitExpressionExponentElements getUnitExpressionExponentAccess() {
		return (pUnitExpressionExponent != null) ? pUnitExpressionExponent : (pUnitExpressionExponent = new UnitExpressionExponentElements());
	}
	
	public ParserRule getUnitExpressionExponentRule() {
		return getUnitExpressionExponentAccess().getRule();
	}

	/// *
	// * Terminals
	// * /terminal ID:
	//	("_" | "a".."z" | "A".."Z") ("0".."9" | "_" | "a".."z" | "A".."Z")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal STRING:
	//	"\"" (!("\\" | "\"") | "\\" ("\'" | "\"" | "?" | "\\" | "a" | "b" | "f" | "n" | "r" | "t" | "v"))* "\"";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal REAL returns ecore::EDouble:
	//	"0".."9"+ "." "0".."9"* (("e" | "E") ("+" | "-")? "0".."9"+)?;
	public TerminalRule getREALRule() {
		return (tREAL != null) ? tREAL : (tREAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "REAL"));
	} 

	//terminal INTEGER returns ecore::ELong:
	//	"0".."9"+;
	public TerminalRule getINTEGERRule() {
		return (tINTEGER != null) ? tINTEGER : (tINTEGER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INTEGER"));
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
