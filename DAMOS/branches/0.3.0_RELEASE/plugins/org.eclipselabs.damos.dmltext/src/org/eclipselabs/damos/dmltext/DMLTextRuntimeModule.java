/*
 * generated by Xtext
 */
package org.eclipselabs.damos.dmltext;

import org.eclipse.xtext.conversion.IValueConverterService;
import org.eclipse.xtext.conversion.impl.AbstractIDValueConverter;
import org.eclipse.xtext.conversion.impl.QualifiedNameValueConverter;
import org.eclipse.xtext.linking.ILinker;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.scoping.IGlobalScopeProvider;
import org.eclipselabs.damos.dmltext.conversion.DMLTextTerminalConverters;
import org.eclipselabs.damos.dmltext.naming.DMLTextQualifiedNameProvider;
import org.eclipselabs.damos.mscript.conversion.MscriptIDValueConverter;
import org.eclipselabs.damos.mscript.conversion.MscriptQualifiedNameValueConverter;
import org.eclipselabs.damos.mscript.linking.MscriptLinker;
import org.eclipselabs.damos.mscript.scoping.MscriptGlobalScopeProvider;

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
public class DMLTextRuntimeModule extends org.eclipselabs.damos.dmltext.AbstractDMLTextRuntimeModule {

	public Class<? extends ILinker> bindILinker() {
		return MscriptLinker.class;
	}
	
	public Class<? extends AbstractIDValueConverter> bindAbstractIDValueConverter() {
		return MscriptIDValueConverter.class;
	}

	@Override
	public Class<? extends IValueConverterService> bindIValueConverterService() {
		return DMLTextTerminalConverters.class;
	}
	
	/* (non-Javadoc)
	 * @see org.eclipselabs.mscript.language.AbstractMscriptRuntimeModule#bindIGlobalScopeProvider()
	 */
	@Override
	public Class<? extends IGlobalScopeProvider> bindIGlobalScopeProvider() {
		return MscriptGlobalScopeProvider.class;
	}
	
	public Class<? extends QualifiedNameValueConverter> bindQualifiedNameValueConverter() {
		return MscriptQualifiedNameValueConverter.class;
	}

	/* (non-Javadoc)
	 * @see org.eclipselabs.mscript.language.AbstractMscriptRuntimeModule#bindIQualifiedNameProvider()
	 */
	@Override
	public Class<? extends IQualifiedNameProvider> bindIQualifiedNameProvider() {
		return DMLTextQualifiedNameProvider.class;
	}
	
}
