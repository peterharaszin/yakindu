package damos.library.base.logic

blockType Compare {

	input a
	input b
	output y
	
	parameter operator = 0 predefined {
		0 as "==",
		1 as "!=",
		2 as "<",
		3 as "<=",
		4 as ">=",
		5 as ">"
	}

	function main<operator>(a, b) -> y {
		check<3>(real, real) -> boolean
		check<1>(boolean, boolean) -> boolean

		static assert operator < 2 => a is real() || a is boolean :
			error "Input value A must be numeric or boolean"
			
		static assert operator < 2 => b is real() || b is boolean :
			error "Input value B must be numeric or boolean"
	
		static assert operator >= 2 => a is real() :
			error "Input value A must be numeric"
			
		static assert operator >= 2 => b is real() :
			error "Input value B must be numeric"
			
		static assert a is real() && b is real() => unit(a) == unit(b) :
			error "Input values must have same unit"
			
		static assert operator is real && operator >=0 && operator <= 5 :
			error "Invalid operator specified"

		// TODO: Use static switch expression
		eq y =
			static if operator == 0 then
				a == b
			else static if operator == 1 then
				a != b
			else static if operator == 2 then
				a < b
			else static if operator == 3 then
				a <= b
			else static if operator == 4 then
				a >= b
			else
				a > b
	}
	
}
