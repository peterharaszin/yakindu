package damos.blocks

synchronous blockType Debounce {

	input u
	output y

	parameter initialOutput = false predefined { true, false }
	parameter delay = 0.05(s)

	behavior {
		check(boolean) -> boolean

		static assert initialOutput is boolean :
			error "Initial output must be boolean value"

		static assert delay is real(s) :
			error "Delay must be real value in seconds"

		static assert u is boolean :
			error "Input must be boolean value"

		var counter
		
		eq counter{0} = 0
		eq counter{n+1} =
			if y != y{n-1} then
				round(delay * 10000(1/s))
			else
				let c = counter - round(Ts * 10000(1/s)) in
					if c > 0 then
						c
					else
						0
				
		eq y{-1} = initialOutput	
		eq y = 
			if u != y{n-1} && counter == 0 then
				u
			else
				y{n-1}
	}

}
