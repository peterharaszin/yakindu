/*
* generated by Xtext
*/

package org.eclipselabs.damos.dconfig.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipselabs.damos.mscript.services.MscriptGrammarAccess;

@Singleton
public class DconfigGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Configuration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPackageNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPackageNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cPackageNameAssignment_1.eContents().get(0);
		private final Assignment cImportDeclarationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportDeclarationsImportDeclarationParserRuleCall_2_0 = (RuleCall)cImportDeclarationsAssignment_2.eContents().get(0);
		private final Keyword cConfigurationKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameValidIDParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cExtendsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cBaseConfigurationAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cBaseConfigurationConfigurationCrossReference_5_1_0 = (CrossReference)cBaseConfigurationAssignment_5_1.eContents().get(0);
		private final RuleCall cBaseConfigurationConfigurationQualifiedNameParserRuleCall_5_1_0_1 = (RuleCall)cBaseConfigurationConfigurationCrossReference_5_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cPropertiesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cPropertiesDeclaredPropertyParserRuleCall_7_0 = (RuleCall)cPropertiesAssignment_7.eContents().get(0);
		private final Assignment cRootSystemConfigurationAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cRootSystemConfigurationRootSystemConfigurationParserRuleCall_8_0 = (RuleCall)cRootSystemConfigurationAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Configuration:
		//	"package" packageName=QualifiedName importDeclarations+=ImportDeclaration* "configuration" name=ValidID ("extends"
		//	baseConfiguration=[Configuration|QualifiedName])? "{" properties+=DeclaredProperty*
		//	rootSystemConfiguration=RootSystemConfiguration? "}";
		public ParserRule getRule() { return rule; }

		//"package" packageName=QualifiedName importDeclarations+=ImportDeclaration* "configuration" name=ValidID ("extends"
		//baseConfiguration=[Configuration|QualifiedName])? "{" properties+=DeclaredProperty*
		//rootSystemConfiguration=RootSystemConfiguration? "}"
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//packageName=QualifiedName
		public Assignment getPackageNameAssignment_1() { return cPackageNameAssignment_1; }

		//QualifiedName
		public RuleCall getPackageNameQualifiedNameParserRuleCall_1_0() { return cPackageNameQualifiedNameParserRuleCall_1_0; }

		//importDeclarations+=ImportDeclaration*
		public Assignment getImportDeclarationsAssignment_2() { return cImportDeclarationsAssignment_2; }

		//ImportDeclaration
		public RuleCall getImportDeclarationsImportDeclarationParserRuleCall_2_0() { return cImportDeclarationsImportDeclarationParserRuleCall_2_0; }

		//"configuration"
		public Keyword getConfigurationKeyword_3() { return cConfigurationKeyword_3; }

		//name=ValidID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_4_0() { return cNameValidIDParserRuleCall_4_0; }

		//("extends" baseConfiguration=[Configuration|QualifiedName])?
		public Group getGroup_5() { return cGroup_5; }

		//"extends"
		public Keyword getExtendsKeyword_5_0() { return cExtendsKeyword_5_0; }

		//baseConfiguration=[Configuration|QualifiedName]
		public Assignment getBaseConfigurationAssignment_5_1() { return cBaseConfigurationAssignment_5_1; }

		//[Configuration|QualifiedName]
		public CrossReference getBaseConfigurationConfigurationCrossReference_5_1_0() { return cBaseConfigurationConfigurationCrossReference_5_1_0; }

		//QualifiedName
		public RuleCall getBaseConfigurationConfigurationQualifiedNameParserRuleCall_5_1_0_1() { return cBaseConfigurationConfigurationQualifiedNameParserRuleCall_5_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//properties+=DeclaredProperty*
		public Assignment getPropertiesAssignment_7() { return cPropertiesAssignment_7; }

		//DeclaredProperty
		public RuleCall getPropertiesDeclaredPropertyParserRuleCall_7_0() { return cPropertiesDeclaredPropertyParserRuleCall_7_0; }

		//rootSystemConfiguration=RootSystemConfiguration?
		public Assignment getRootSystemConfigurationAssignment_8() { return cRootSystemConfigurationAssignment_8; }

		//RootSystemConfiguration
		public RuleCall getRootSystemConfigurationRootSystemConfigurationParserRuleCall_8_0() { return cRootSystemConfigurationRootSystemConfigurationParserRuleCall_8_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDeclaredPropertyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComputationPropertyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Property:
		//	DeclaredProperty | ComputationProperty;
		public ParserRule getRule() { return rule; }

		//DeclaredProperty | ComputationProperty
		public Alternatives getAlternatives() { return cAlternatives; }

		//DeclaredProperty
		public RuleCall getDeclaredPropertyParserRuleCall_0() { return cDeclaredPropertyParserRuleCall_0; }

		//ComputationProperty
		public RuleCall getComputationPropertyParserRuleCall_1() { return cComputationPropertyParserRuleCall_1; }
	}

	public class DeclaredPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeclaredProperty");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimplePropertyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSelectionPropertyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DeclaredProperty:
		//	SimpleProperty | SelectionProperty;
		public ParserRule getRule() { return rule; }

		//SimpleProperty | SelectionProperty
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleProperty
		public RuleCall getSimplePropertyParserRuleCall_0() { return cSimplePropertyParserRuleCall_0; }

		//SelectionProperty
		public RuleCall getSelectionPropertyParserRuleCall_1() { return cSelectionPropertyParserRuleCall_1; }
	}

	public class SimplePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropagateAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPropagatePropagateKeyword_0_0 = (Keyword)cPropagateAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cDeclarationAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final CrossReference cDeclarationSimplePropertyDeclarationCrossReference_1_0_0_0 = (CrossReference)cDeclarationAssignment_1_0_0.eContents().get(0);
		private final RuleCall cDeclarationSimplePropertyDeclarationQualifiedNameWithoutIJParserRuleCall_1_0_0_0_1 = (RuleCall)cDeclarationSimplePropertyDeclarationCrossReference_1_0_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cValueAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_1_0_2_0 = (RuleCall)cValueAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cUnsetKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cDeclarationAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final CrossReference cDeclarationSimplePropertyDeclarationCrossReference_1_1_1_0 = (CrossReference)cDeclarationAssignment_1_1_1.eContents().get(0);
		private final RuleCall cDeclarationSimplePropertyDeclarationQualifiedNameParserRuleCall_1_1_1_0_1 = (RuleCall)cDeclarationSimplePropertyDeclarationCrossReference_1_1_1_0.eContents().get(1);
		
		//SimpleProperty:
		//	propagate?="propagate"? (declaration=[SimplePropertyDeclaration|QualifiedNameWithoutIJ] "=" value=Expression | "unset"
		//	declaration=[SimplePropertyDeclaration|QualifiedName]);
		public ParserRule getRule() { return rule; }

		//propagate?="propagate"? (declaration=[SimplePropertyDeclaration|QualifiedNameWithoutIJ] "=" value=Expression | "unset"
		//declaration=[SimplePropertyDeclaration|QualifiedName])
		public Group getGroup() { return cGroup; }

		//propagate?="propagate"?
		public Assignment getPropagateAssignment_0() { return cPropagateAssignment_0; }

		//"propagate"
		public Keyword getPropagatePropagateKeyword_0_0() { return cPropagatePropagateKeyword_0_0; }

		//declaration=[SimplePropertyDeclaration|QualifiedNameWithoutIJ] "=" value=Expression | "unset"
		//declaration=[SimplePropertyDeclaration|QualifiedName]
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//declaration=[SimplePropertyDeclaration|QualifiedNameWithoutIJ] "=" value=Expression
		public Group getGroup_1_0() { return cGroup_1_0; }

		//declaration=[SimplePropertyDeclaration|QualifiedNameWithoutIJ]
		public Assignment getDeclarationAssignment_1_0_0() { return cDeclarationAssignment_1_0_0; }

		//[SimplePropertyDeclaration|QualifiedNameWithoutIJ]
		public CrossReference getDeclarationSimplePropertyDeclarationCrossReference_1_0_0_0() { return cDeclarationSimplePropertyDeclarationCrossReference_1_0_0_0; }

		//QualifiedNameWithoutIJ
		public RuleCall getDeclarationSimplePropertyDeclarationQualifiedNameWithoutIJParserRuleCall_1_0_0_0_1() { return cDeclarationSimplePropertyDeclarationQualifiedNameWithoutIJParserRuleCall_1_0_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_1_0_1() { return cEqualsSignKeyword_1_0_1; }

		//value=Expression
		public Assignment getValueAssignment_1_0_2() { return cValueAssignment_1_0_2; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_1_0_2_0() { return cValueExpressionParserRuleCall_1_0_2_0; }

		//"unset" declaration=[SimplePropertyDeclaration|QualifiedName]
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"unset"
		public Keyword getUnsetKeyword_1_1_0() { return cUnsetKeyword_1_1_0; }

		//declaration=[SimplePropertyDeclaration|QualifiedName]
		public Assignment getDeclarationAssignment_1_1_1() { return cDeclarationAssignment_1_1_1; }

		//[SimplePropertyDeclaration|QualifiedName]
		public CrossReference getDeclarationSimplePropertyDeclarationCrossReference_1_1_1_0() { return cDeclarationSimplePropertyDeclarationCrossReference_1_1_1_0; }

		//QualifiedName
		public RuleCall getDeclarationSimplePropertyDeclarationQualifiedNameParserRuleCall_1_1_1_0_1() { return cDeclarationSimplePropertyDeclarationQualifiedNameParserRuleCall_1_1_1_0_1; }
	}

	public class SelectionPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectionProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropagateAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPropagatePropagateKeyword_0_0 = (Keyword)cPropagateAssignment_0.eContents().get(0);
		private final Keyword cSelectKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDeclarationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cDeclarationSelectionPropertyDeclarationCrossReference_2_0 = (CrossReference)cDeclarationAssignment_2.eContents().get(0);
		private final RuleCall cDeclarationSelectionPropertyDeclarationQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cDeclarationSelectionPropertyDeclarationCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cIndexAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cIndexValidIntParserRuleCall_3_1_0 = (RuleCall)cIndexAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cSelectionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cSelectionSelectionPropertyOptionCrossReference_4_0 = (CrossReference)cSelectionAssignment_4.eContents().get(0);
		private final RuleCall cSelectionSelectionPropertyOptionQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cSelectionSelectionPropertyOptionCrossReference_4_0.eContents().get(1);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodySelectionPropertyBodyParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		
		//SelectionProperty:
		//	propagate?="propagate"? "select" declaration=[SelectionPropertyDeclaration|QualifiedName] ("[" index=ValidInt "]")?
		//	selection=[SelectionPropertyOption|QualifiedName] body=SelectionPropertyBody?;
		public ParserRule getRule() { return rule; }

		//propagate?="propagate"? "select" declaration=[SelectionPropertyDeclaration|QualifiedName] ("[" index=ValidInt "]")?
		//selection=[SelectionPropertyOption|QualifiedName] body=SelectionPropertyBody?
		public Group getGroup() { return cGroup; }

		//propagate?="propagate"?
		public Assignment getPropagateAssignment_0() { return cPropagateAssignment_0; }

		//"propagate"
		public Keyword getPropagatePropagateKeyword_0_0() { return cPropagatePropagateKeyword_0_0; }

		//"select"
		public Keyword getSelectKeyword_1() { return cSelectKeyword_1; }

		//declaration=[SelectionPropertyDeclaration|QualifiedName]
		public Assignment getDeclarationAssignment_2() { return cDeclarationAssignment_2; }

		//[SelectionPropertyDeclaration|QualifiedName]
		public CrossReference getDeclarationSelectionPropertyDeclarationCrossReference_2_0() { return cDeclarationSelectionPropertyDeclarationCrossReference_2_0; }

		//QualifiedName
		public RuleCall getDeclarationSelectionPropertyDeclarationQualifiedNameParserRuleCall_2_0_1() { return cDeclarationSelectionPropertyDeclarationQualifiedNameParserRuleCall_2_0_1; }

		//("[" index=ValidInt "]")?
		public Group getGroup_3() { return cGroup_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }

		//index=ValidInt
		public Assignment getIndexAssignment_3_1() { return cIndexAssignment_3_1; }

		//ValidInt
		public RuleCall getIndexValidIntParserRuleCall_3_1_0() { return cIndexValidIntParserRuleCall_3_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_2() { return cRightSquareBracketKeyword_3_2; }

		//selection=[SelectionPropertyOption|QualifiedName]
		public Assignment getSelectionAssignment_4() { return cSelectionAssignment_4; }

		//[SelectionPropertyOption|QualifiedName]
		public CrossReference getSelectionSelectionPropertyOptionCrossReference_4_0() { return cSelectionSelectionPropertyOptionCrossReference_4_0; }

		//QualifiedName
		public RuleCall getSelectionSelectionPropertyOptionQualifiedNameParserRuleCall_4_0_1() { return cSelectionSelectionPropertyOptionQualifiedNameParserRuleCall_4_0_1; }

		//body=SelectionPropertyBody?
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }

		//SelectionPropertyBody
		public RuleCall getBodySelectionPropertyBodyParserRuleCall_5_0() { return cBodySelectionPropertyBodyParserRuleCall_5_0; }
	}

	public class SelectionPropertyBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectionPropertyBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSelectionPropertyBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cPropertiesAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cPropertiesDeclaredPropertyParserRuleCall_2_0_0 = (RuleCall)cPropertiesAssignment_2_0.eContents().get(0);
		private final Assignment cBindingsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cBindingsBindingParserRuleCall_2_1_0 = (RuleCall)cBindingsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SelectionPropertyBody:
		//	{SelectionPropertyBody} "{" (properties+=DeclaredProperty | bindings+=Binding)* "}";
		public ParserRule getRule() { return rule; }

		//{SelectionPropertyBody} "{" (properties+=DeclaredProperty | bindings+=Binding)* "}"
		public Group getGroup() { return cGroup; }

		//{SelectionPropertyBody}
		public Action getSelectionPropertyBodyAction_0() { return cSelectionPropertyBodyAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(properties+=DeclaredProperty | bindings+=Binding)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//properties+=DeclaredProperty
		public Assignment getPropertiesAssignment_2_0() { return cPropertiesAssignment_2_0; }

		//DeclaredProperty
		public RuleCall getPropertiesDeclaredPropertyParserRuleCall_2_0_0() { return cPropertiesDeclaredPropertyParserRuleCall_2_0_0; }

		//bindings+=Binding
		public Assignment getBindingsAssignment_2_1() { return cBindingsAssignment_2_1; }

		//Binding
		public RuleCall getBindingsBindingParserRuleCall_2_1_0() { return cBindingsBindingParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class RootSystemConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RootSystemConfiguration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContextFragmentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cContextFragmentFragmentCrossReference_1_0 = (CrossReference)cContextFragmentAssignment_1.eContents().get(0);
		private final RuleCall cContextFragmentFragmentQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cContextFragmentFragmentCrossReference_1_0.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodySystemConfigurationBodyParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//RootSystemConfiguration:
		//	"system" contextFragment=[Fragment|QualifiedName] body=SystemConfigurationBody?;
		public ParserRule getRule() { return rule; }

		//"system" contextFragment=[Fragment|QualifiedName] body=SystemConfigurationBody?
		public Group getGroup() { return cGroup; }

		//"system"
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }

		//contextFragment=[Fragment|QualifiedName]
		public Assignment getContextFragmentAssignment_1() { return cContextFragmentAssignment_1; }

		//[Fragment|QualifiedName]
		public CrossReference getContextFragmentFragmentCrossReference_1_0() { return cContextFragmentFragmentCrossReference_1_0; }

		//QualifiedName
		public RuleCall getContextFragmentFragmentQualifiedNameParserRuleCall_1_0_1() { return cContextFragmentFragmentQualifiedNameParserRuleCall_1_0_1; }

		//body=SystemConfigurationBody?
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }

		//SystemConfigurationBody
		public RuleCall getBodySystemConfigurationBodyParserRuleCall_2_0() { return cBodySystemConfigurationBodyParserRuleCall_2_0; }
	}

	public class SubsystemConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubsystemConfiguration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSubsystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSubsystemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSubsystemSubsystemCrossReference_1_0 = (CrossReference)cSubsystemAssignment_1.eContents().get(0);
		private final RuleCall cSubsystemSubsystemValidIDParserRuleCall_1_0_1 = (RuleCall)cSubsystemSubsystemCrossReference_1_0.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodySystemConfigurationBodyParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//SubsystemConfiguration:
		//	"subsystem" subsystem=[Subsystem|ValidID] body=SystemConfigurationBody;
		public ParserRule getRule() { return rule; }

		//"subsystem" subsystem=[Subsystem|ValidID] body=SystemConfigurationBody
		public Group getGroup() { return cGroup; }

		//"subsystem"
		public Keyword getSubsystemKeyword_0() { return cSubsystemKeyword_0; }

		//subsystem=[Subsystem|ValidID]
		public Assignment getSubsystemAssignment_1() { return cSubsystemAssignment_1; }

		//[Subsystem|ValidID]
		public CrossReference getSubsystemSubsystemCrossReference_1_0() { return cSubsystemSubsystemCrossReference_1_0; }

		//ValidID
		public RuleCall getSubsystemSubsystemValidIDParserRuleCall_1_0_1() { return cSubsystemSubsystemValidIDParserRuleCall_1_0_1; }

		//body=SystemConfigurationBody
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }

		//SystemConfigurationBody
		public RuleCall getBodySystemConfigurationBodyParserRuleCall_2_0() { return cBodySystemConfigurationBodyParserRuleCall_2_0; }
	}

	public class SystemConfigurationBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SystemConfigurationBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSystemConfigurationBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cPropertiesAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cPropertiesPropertyParserRuleCall_2_0_0 = (RuleCall)cPropertiesAssignment_2_0.eContents().get(0);
		private final Assignment cComponentConfigurationsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cComponentConfigurationsComponentConfigurationParserRuleCall_2_1_0 = (RuleCall)cComponentConfigurationsAssignment_2_1.eContents().get(0);
		private final Assignment cFragmentConfigurationsAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cFragmentConfigurationsFragmentConfigurationParserRuleCall_2_2_0 = (RuleCall)cFragmentConfigurationsAssignment_2_2.eContents().get(0);
		private final Assignment cSubsystemConfigurationsAssignment_2_3 = (Assignment)cAlternatives_2.eContents().get(3);
		private final RuleCall cSubsystemConfigurationsSubsystemConfigurationParserRuleCall_2_3_0 = (RuleCall)cSubsystemConfigurationsAssignment_2_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SystemConfigurationBody:
		//	{SystemConfigurationBody} "{" (properties+=Property | componentConfigurations+=ComponentConfiguration |
		//	fragmentConfigurations+=FragmentConfiguration | subsystemConfigurations+=SubsystemConfiguration)* "}";
		public ParserRule getRule() { return rule; }

		//{SystemConfigurationBody} "{" (properties+=Property | componentConfigurations+=ComponentConfiguration |
		//fragmentConfigurations+=FragmentConfiguration | subsystemConfigurations+=SubsystemConfiguration)* "}"
		public Group getGroup() { return cGroup; }

		//{SystemConfigurationBody}
		public Action getSystemConfigurationBodyAction_0() { return cSystemConfigurationBodyAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(properties+=Property | componentConfigurations+=ComponentConfiguration | fragmentConfigurations+=FragmentConfiguration
		//| subsystemConfigurations+=SubsystemConfiguration)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//properties+=Property
		public Assignment getPropertiesAssignment_2_0() { return cPropertiesAssignment_2_0; }

		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_2_0_0() { return cPropertiesPropertyParserRuleCall_2_0_0; }

		//componentConfigurations+=ComponentConfiguration
		public Assignment getComponentConfigurationsAssignment_2_1() { return cComponentConfigurationsAssignment_2_1; }

		//ComponentConfiguration
		public RuleCall getComponentConfigurationsComponentConfigurationParserRuleCall_2_1_0() { return cComponentConfigurationsComponentConfigurationParserRuleCall_2_1_0; }

		//fragmentConfigurations+=FragmentConfiguration
		public Assignment getFragmentConfigurationsAssignment_2_2() { return cFragmentConfigurationsAssignment_2_2; }

		//FragmentConfiguration
		public RuleCall getFragmentConfigurationsFragmentConfigurationParserRuleCall_2_2_0() { return cFragmentConfigurationsFragmentConfigurationParserRuleCall_2_2_0; }

		//subsystemConfigurations+=SubsystemConfiguration
		public Assignment getSubsystemConfigurationsAssignment_2_3() { return cSubsystemConfigurationsAssignment_2_3; }

		//SubsystemConfiguration
		public RuleCall getSubsystemConfigurationsSubsystemConfigurationParserRuleCall_2_3_0() { return cSubsystemConfigurationsSubsystemConfigurationParserRuleCall_2_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class FragmentConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FragmentConfiguration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFragmentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cStartFragmentAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final CrossReference cStartFragmentFragmentCrossReference_1_0_0_0 = (CrossReference)cStartFragmentAssignment_1_0_0.eContents().get(0);
		private final RuleCall cStartFragmentFragmentQualifiedNameParserRuleCall_1_0_0_0_1 = (RuleCall)cStartFragmentFragmentCrossReference_1_0_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Assignment cRangeAssignment_1_0_1_0 = (Assignment)cGroup_1_0_1.eContents().get(0);
		private final Keyword cRangeFullStopFullStopKeyword_1_0_1_0_0 = (Keyword)cRangeAssignment_1_0_1_0.eContents().get(0);
		private final Assignment cEndFragmentAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final CrossReference cEndFragmentFragmentCrossReference_1_0_1_1_0 = (CrossReference)cEndFragmentAssignment_1_0_1_1.eContents().get(0);
		private final RuleCall cEndFragmentFragmentQualifiedNameParserRuleCall_1_0_1_1_0_1 = (RuleCall)cEndFragmentFragmentCrossReference_1_0_1_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cRangeAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final Keyword cRangeFullStopFullStopKeyword_1_1_0_0 = (Keyword)cRangeAssignment_1_1_0.eContents().get(0);
		private final Assignment cEndFragmentAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final CrossReference cEndFragmentFragmentCrossReference_1_1_1_0 = (CrossReference)cEndFragmentAssignment_1_1_1.eContents().get(0);
		private final RuleCall cEndFragmentFragmentQualifiedNameParserRuleCall_1_1_1_0_1 = (RuleCall)cEndFragmentFragmentCrossReference_1_1_1_0.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyFragmentConfigurationBodyParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//FragmentConfiguration:
		//	"fragment" (startFragment=[Fragment|QualifiedName] (range?=".." endFragment=[Fragment|QualifiedName]?)? | range?=".."
		//	endFragment=[Fragment|QualifiedName]) body=FragmentConfigurationBody;
		public ParserRule getRule() { return rule; }

		//"fragment" (startFragment=[Fragment|QualifiedName] (range?=".." endFragment=[Fragment|QualifiedName]?)? | range?=".."
		//endFragment=[Fragment|QualifiedName]) body=FragmentConfigurationBody
		public Group getGroup() { return cGroup; }

		//"fragment"
		public Keyword getFragmentKeyword_0() { return cFragmentKeyword_0; }

		//startFragment=[Fragment|QualifiedName] (range?=".." endFragment=[Fragment|QualifiedName]?)? | range?=".."
		//endFragment=[Fragment|QualifiedName]
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//startFragment=[Fragment|QualifiedName] (range?=".." endFragment=[Fragment|QualifiedName]?)?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//startFragment=[Fragment|QualifiedName]
		public Assignment getStartFragmentAssignment_1_0_0() { return cStartFragmentAssignment_1_0_0; }

		//[Fragment|QualifiedName]
		public CrossReference getStartFragmentFragmentCrossReference_1_0_0_0() { return cStartFragmentFragmentCrossReference_1_0_0_0; }

		//QualifiedName
		public RuleCall getStartFragmentFragmentQualifiedNameParserRuleCall_1_0_0_0_1() { return cStartFragmentFragmentQualifiedNameParserRuleCall_1_0_0_0_1; }

		//(range?=".." endFragment=[Fragment|QualifiedName]?)?
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//range?=".."
		public Assignment getRangeAssignment_1_0_1_0() { return cRangeAssignment_1_0_1_0; }

		//".."
		public Keyword getRangeFullStopFullStopKeyword_1_0_1_0_0() { return cRangeFullStopFullStopKeyword_1_0_1_0_0; }

		//endFragment=[Fragment|QualifiedName]?
		public Assignment getEndFragmentAssignment_1_0_1_1() { return cEndFragmentAssignment_1_0_1_1; }

		//[Fragment|QualifiedName]
		public CrossReference getEndFragmentFragmentCrossReference_1_0_1_1_0() { return cEndFragmentFragmentCrossReference_1_0_1_1_0; }

		//QualifiedName
		public RuleCall getEndFragmentFragmentQualifiedNameParserRuleCall_1_0_1_1_0_1() { return cEndFragmentFragmentQualifiedNameParserRuleCall_1_0_1_1_0_1; }

		//range?=".." endFragment=[Fragment|QualifiedName]
		public Group getGroup_1_1() { return cGroup_1_1; }

		//range?=".."
		public Assignment getRangeAssignment_1_1_0() { return cRangeAssignment_1_1_0; }

		//".."
		public Keyword getRangeFullStopFullStopKeyword_1_1_0_0() { return cRangeFullStopFullStopKeyword_1_1_0_0; }

		//endFragment=[Fragment|QualifiedName]
		public Assignment getEndFragmentAssignment_1_1_1() { return cEndFragmentAssignment_1_1_1; }

		//[Fragment|QualifiedName]
		public CrossReference getEndFragmentFragmentCrossReference_1_1_1_0() { return cEndFragmentFragmentCrossReference_1_1_1_0; }

		//QualifiedName
		public RuleCall getEndFragmentFragmentQualifiedNameParserRuleCall_1_1_1_0_1() { return cEndFragmentFragmentQualifiedNameParserRuleCall_1_1_1_0_1; }

		//body=FragmentConfigurationBody
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }

		//FragmentConfigurationBody
		public RuleCall getBodyFragmentConfigurationBodyParserRuleCall_2_0() { return cBodyFragmentConfigurationBodyParserRuleCall_2_0; }
	}

	public class FragmentConfigurationBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FragmentConfigurationBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFragmentConfigurationBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropertiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertiesPropertyParserRuleCall_2_0 = (RuleCall)cPropertiesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FragmentConfigurationBody:
		//	{FragmentConfigurationBody} "{" properties+=Property* "}";
		public ParserRule getRule() { return rule; }

		//{FragmentConfigurationBody} "{" properties+=Property* "}"
		public Group getGroup() { return cGroup; }

		//{FragmentConfigurationBody}
		public Action getFragmentConfigurationBodyAction_0() { return cFragmentConfigurationBodyAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//properties+=Property*
		public Assignment getPropertiesAssignment_2() { return cPropertiesAssignment_2; }

		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_2_0() { return cPropertiesPropertyParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ComponentConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComponentConfiguration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cComponentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cComponentComponentCrossReference_1_0 = (CrossReference)cComponentAssignment_1.eContents().get(0);
		private final RuleCall cComponentComponentValidIDParserRuleCall_1_0_1 = (RuleCall)cComponentComponentCrossReference_1_0.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyComponentConfigurationBodyParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//ComponentConfiguration:
		//	"component" component=[Component|ValidID] body=ComponentConfigurationBody;
		public ParserRule getRule() { return rule; }

		//"component" component=[Component|ValidID] body=ComponentConfigurationBody
		public Group getGroup() { return cGroup; }

		//"component"
		public Keyword getComponentKeyword_0() { return cComponentKeyword_0; }

		//component=[Component|ValidID]
		public Assignment getComponentAssignment_1() { return cComponentAssignment_1; }

		//[Component|ValidID]
		public CrossReference getComponentComponentCrossReference_1_0() { return cComponentComponentCrossReference_1_0; }

		//ValidID
		public RuleCall getComponentComponentValidIDParserRuleCall_1_0_1() { return cComponentComponentValidIDParserRuleCall_1_0_1; }

		//body=ComponentConfigurationBody
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }

		//ComponentConfigurationBody
		public RuleCall getBodyComponentConfigurationBodyParserRuleCall_2_0() { return cBodyComponentConfigurationBodyParserRuleCall_2_0; }
	}

	public class ComponentConfigurationBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComponentConfigurationBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cComponentConfigurationBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropertiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertiesPropertyParserRuleCall_2_0 = (RuleCall)cPropertiesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ComponentConfigurationBody:
		//	{ComponentConfigurationBody} "{" properties+=Property* "}";
		public ParserRule getRule() { return rule; }

		//{ComponentConfigurationBody} "{" properties+=Property* "}"
		public Group getGroup() { return cGroup; }

		//{ComponentConfigurationBody}
		public Action getComponentConfigurationBodyAction_0() { return cComponentConfigurationBodyAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//properties+=Property*
		public Assignment getPropertiesAssignment_2() { return cPropertiesAssignment_2; }

		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_2_0() { return cPropertiesPropertyParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ComputationPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComputationProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropagateAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPropagatePropagateKeyword_0_0 = (Keyword)cPropagateAssignment_0.eContents().get(0);
		private final Keyword cComputationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cComputationModelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cComputationModelComputationModelParserRuleCall_3_0 = (RuleCall)cComputationModelAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ComputationProperty:
		//	propagate?="propagate"? "computation" "{" computationModel=ComputationModel "}";
		public ParserRule getRule() { return rule; }

		//propagate?="propagate"? "computation" "{" computationModel=ComputationModel "}"
		public Group getGroup() { return cGroup; }

		//propagate?="propagate"?
		public Assignment getPropagateAssignment_0() { return cPropagateAssignment_0; }

		//"propagate"
		public Keyword getPropagatePropagateKeyword_0_0() { return cPropagatePropagateKeyword_0_0; }

		//"computation"
		public Keyword getComputationKeyword_1() { return cComputationKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//computationModel=ComputationModel
		public Assignment getComputationModelAssignment_3() { return cComputationModelAssignment_3; }

		//ComputationModel
		public RuleCall getComputationModelComputationModelParserRuleCall_3_0() { return cComputationModelComputationModelParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ComponentPathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComponentPath");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReferencesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReferencesComponentReferenceParserRuleCall_0_0 = (RuleCall)cReferencesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cReferencesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cReferencesComponentReferenceParserRuleCall_1_1_0 = (RuleCall)cReferencesAssignment_1_1.eContents().get(0);
		
		//ComponentPath:
		//	references+=ComponentReference ("." references+=ComponentReference)*;
		public ParserRule getRule() { return rule; }

		//references+=ComponentReference ("." references+=ComponentReference)*
		public Group getGroup() { return cGroup; }

		//references+=ComponentReference
		public Assignment getReferencesAssignment_0() { return cReferencesAssignment_0; }

		//ComponentReference
		public RuleCall getReferencesComponentReferenceParserRuleCall_0_0() { return cReferencesComponentReferenceParserRuleCall_0_0; }

		//("." references+=ComponentReference)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//references+=ComponentReference
		public Assignment getReferencesAssignment_1_1() { return cReferencesAssignment_1_1; }

		//ComponentReference
		public RuleCall getReferencesComponentReferenceParserRuleCall_1_1_0() { return cReferencesComponentReferenceParserRuleCall_1_1_0; }
	}

	public class ComponentReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComponentReference");
		private final Assignment cComponentAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cComponentComponentCrossReference_0 = (CrossReference)cComponentAssignment.eContents().get(0);
		private final RuleCall cComponentComponentValidIDParserRuleCall_0_1 = (RuleCall)cComponentComponentCrossReference_0.eContents().get(1);
		
		//ComponentReference:
		//	component=[Component|ValidID];
		public ParserRule getRule() { return rule; }

		//component=[Component|ValidID]
		public Assignment getComponentAssignment() { return cComponentAssignment; }

		//[Component|ValidID]
		public CrossReference getComponentComponentCrossReference_0() { return cComponentComponentCrossReference_0; }

		//ValidID
		public RuleCall getComponentComponentValidIDParserRuleCall_0_1() { return cComponentComponentValidIDParserRuleCall_0_1; }
	}

	public class BindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Binding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBindKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTargetBindingResourceReferenceParserRuleCall_1_0 = (RuleCall)cTargetAssignment_1.eContents().get(0);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSourceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSourceComponentPathParserRuleCall_3_0 = (RuleCall)cSourceAssignment_3.eContents().get(0);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyBindingBodyParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		//Binding:
		//	"bind" target=BindingResourceReference "to" source=ComponentPath body=BindingBody?;
		public ParserRule getRule() { return rule; }

		//"bind" target=BindingResourceReference "to" source=ComponentPath body=BindingBody?
		public Group getGroup() { return cGroup; }

		//"bind"
		public Keyword getBindKeyword_0() { return cBindKeyword_0; }

		//target=BindingResourceReference
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }

		//BindingResourceReference
		public RuleCall getTargetBindingResourceReferenceParserRuleCall_1_0() { return cTargetBindingResourceReferenceParserRuleCall_1_0; }

		//"to"
		public Keyword getToKeyword_2() { return cToKeyword_2; }

		//source=ComponentPath
		public Assignment getSourceAssignment_3() { return cSourceAssignment_3; }

		//ComponentPath
		public RuleCall getSourceComponentPathParserRuleCall_3_0() { return cSourceComponentPathParserRuleCall_3_0; }

		//body=BindingBody?
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }

		//BindingBody
		public RuleCall getBodyBindingBodyParserRuleCall_4_0() { return cBodyBindingBodyParserRuleCall_4_0; }
	}

	public class BindingResourceReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BindingResourceReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cResourceDeclarationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cResourceDeclarationResourceDeclarationCrossReference_0_0 = (CrossReference)cResourceDeclarationAssignment_0.eContents().get(0);
		private final RuleCall cResourceDeclarationResourceDeclarationValidIDParserRuleCall_0_0_1 = (RuleCall)cResourceDeclarationResourceDeclarationCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSubscriptAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSubscriptBindingResourceSubscriptParserRuleCall_1_1_0 = (RuleCall)cSubscriptAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//BindingResourceReference:
		//	resourceDeclaration=[ResourceDeclaration|ValidID] ("[" subscript=BindingResourceSubscript "]")?;
		public ParserRule getRule() { return rule; }

		//resourceDeclaration=[ResourceDeclaration|ValidID] ("[" subscript=BindingResourceSubscript "]")?
		public Group getGroup() { return cGroup; }

		//resourceDeclaration=[ResourceDeclaration|ValidID]
		public Assignment getResourceDeclarationAssignment_0() { return cResourceDeclarationAssignment_0; }

		//[ResourceDeclaration|ValidID]
		public CrossReference getResourceDeclarationResourceDeclarationCrossReference_0_0() { return cResourceDeclarationResourceDeclarationCrossReference_0_0; }

		//ValidID
		public RuleCall getResourceDeclarationResourceDeclarationValidIDParserRuleCall_0_0_1() { return cResourceDeclarationResourceDeclarationValidIDParserRuleCall_0_0_1; }

		//("[" subscript=BindingResourceSubscript "]")?
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//subscript=BindingResourceSubscript
		public Assignment getSubscriptAssignment_1_1() { return cSubscriptAssignment_1_1; }

		//BindingResourceSubscript
		public RuleCall getSubscriptBindingResourceSubscriptParserRuleCall_1_1_0() { return cSubscriptBindingResourceSubscriptParserRuleCall_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}

	public class BindingBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BindingBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBindingBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropertiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertiesDeclaredPropertyParserRuleCall_2_0 = (RuleCall)cPropertiesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BindingBody:
		//	{BindingBody} "{" properties+=DeclaredProperty* "}";
		public ParserRule getRule() { return rule; }

		//{BindingBody} "{" properties+=DeclaredProperty* "}"
		public Group getGroup() { return cGroup; }

		//{BindingBody}
		public Action getBindingBodyAction_0() { return cBindingBodyAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//properties+=DeclaredProperty*
		public Assignment getPropertiesAssignment_2() { return cPropertiesAssignment_2; }

		//DeclaredProperty
		public RuleCall getPropertiesDeclaredPropertyParserRuleCall_2_0() { return cPropertiesDeclaredPropertyParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class BindingResourceSubscriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BindingResourceSubscript");
		private final Assignment cIndexAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIndexValidIntParserRuleCall_0 = (RuleCall)cIndexAssignment.eContents().get(0);
		
		//BindingResourceSubscript:
		//	index=ValidInt;
		public ParserRule getRule() { return rule; }

		//index=ValidInt
		public Assignment getIndexAssignment() { return cIndexAssignment; }

		//ValidInt
		public RuleCall getIndexValidIntParserRuleCall_0() { return cIndexValidIntParserRuleCall_0; }
	}

	public class ComputationModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComputationModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cComputationModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNumberFormatMappingsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNumberFormatMappingsNumberFormatMappingParserRuleCall_1_0 = (RuleCall)cNumberFormatMappingsAssignment_1.eContents().get(0);
		
		//ComputationModel:
		//	{ComputationModel} numberFormatMappings+=NumberFormatMapping*;
		public ParserRule getRule() { return rule; }

		//{ComputationModel} numberFormatMappings+=NumberFormatMapping*
		public Group getGroup() { return cGroup; }

		//{ComputationModel}
		public Action getComputationModelAction_0() { return cComputationModelAction_0; }

		//numberFormatMappings+=NumberFormatMapping*
		public Assignment getNumberFormatMappingsAssignment_1() { return cNumberFormatMappingsAssignment_1; }

		//NumberFormatMapping
		public RuleCall getNumberFormatMappingsNumberFormatMappingParserRuleCall_1_0() { return cNumberFormatMappingsNumberFormatMappingParserRuleCall_1_0; }
	}

	public class NumberFormatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberFormat");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFloatingPointFormatParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFixedPointFormatParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NumberFormat:
		//	FloatingPointFormat | FixedPointFormat;
		public ParserRule getRule() { return rule; }

		//FloatingPointFormat | FixedPointFormat
		public Alternatives getAlternatives() { return cAlternatives; }

		//FloatingPointFormat
		public RuleCall getFloatingPointFormatParserRuleCall_0() { return cFloatingPointFormatParserRuleCall_0; }

		//FixedPointFormat
		public RuleCall getFixedPointFormatParserRuleCall_1() { return cFixedPointFormatParserRuleCall_1; }
	}

	public class FloatingPointFormatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FloatingPointFormat");
		private final Assignment cKindAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cKindPredefinedFloatingPointFormatKindEnumRuleCall_0 = (RuleCall)cKindAssignment.eContents().get(0);
		
		//FloatingPointFormat:
		//	kind=PredefinedFloatingPointFormatKind;
		public ParserRule getRule() { return rule; }

		//kind=PredefinedFloatingPointFormatKind
		public Assignment getKindAssignment() { return cKindAssignment; }

		//PredefinedFloatingPointFormatKind
		public RuleCall getKindPredefinedFloatingPointFormatKindEnumRuleCall_0() { return cKindPredefinedFloatingPointFormatKindEnumRuleCall_0; }
	}

	public class FixedPointFormatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FixedPointFormat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Alternatives cAlternatives_0_0_0 = (Alternatives)cGroup_0_0.eContents().get(0);
		private final Keyword cFixKeyword_0_0_0_0 = (Keyword)cAlternatives_0_0_0.eContents().get(0);
		private final Assignment cUnsignedAssignment_0_0_0_1 = (Assignment)cAlternatives_0_0_0.eContents().get(1);
		private final Keyword cUnsignedUfixKeyword_0_0_0_1_0 = (Keyword)cUnsignedAssignment_0_0_0_1.eContents().get(0);
		private final Assignment cIntegerLengthAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cIntegerLengthValidIntParserRuleCall_0_0_1_0 = (RuleCall)cIntegerLengthAssignment_0_0_1.eContents().get(0);
		private final Alternatives cAlternatives_0_0_2 = (Alternatives)cGroup_0_0.eContents().get(2);
		private final Group cGroup_0_0_2_0 = (Group)cAlternatives_0_0_2.eContents().get(0);
		private final Keyword cFullStopKeyword_0_0_2_0_0 = (Keyword)cGroup_0_0_2_0.eContents().get(0);
		private final Assignment cFractionLengthAssignment_0_0_2_0_1 = (Assignment)cGroup_0_0_2_0.eContents().get(1);
		private final RuleCall cFractionLengthValidIntParserRuleCall_0_0_2_0_1_0 = (RuleCall)cFractionLengthAssignment_0_0_2_0_1.eContents().get(0);
		private final Group cGroup_0_0_2_1 = (Group)cAlternatives_0_0_2.eContents().get(1);
		private final Group cGroup_0_0_2_1_0 = (Group)cGroup_0_0_2_1.eContents().get(0);
		private final Keyword cSlopeKeyword_0_0_2_1_0_0 = (Keyword)cGroup_0_0_2_1_0.eContents().get(0);
		private final Assignment cSlopeAssignment_0_0_2_1_0_1 = (Assignment)cGroup_0_0_2_1_0.eContents().get(1);
		private final RuleCall cSlopeValidDoubleParserRuleCall_0_0_2_1_0_1_0 = (RuleCall)cSlopeAssignment_0_0_2_1_0_1.eContents().get(0);
		private final Group cGroup_0_0_2_1_1 = (Group)cGroup_0_0_2_1.eContents().get(1);
		private final Keyword cBiasKeyword_0_0_2_1_1_0 = (Keyword)cGroup_0_0_2_1_1.eContents().get(0);
		private final Assignment cBiasAssignment_0_0_2_1_1_1 = (Assignment)cGroup_0_0_2_1_1.eContents().get(1);
		private final RuleCall cBiasValidDoubleParserRuleCall_0_0_2_1_1_1_0 = (RuleCall)cBiasAssignment_0_0_2_1_1_1.eContents().get(0);
		private final Assignment cPredefinedKindAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cPredefinedKindPredefinedFixedPointFormatKindEnumRuleCall_0_1_0 = (RuleCall)cPredefinedKindAssignment_0_1.eContents().get(0);
		private final Assignment cSaturateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cSaturateSaturateKeyword_1_0 = (Keyword)cSaturateAssignment_1.eContents().get(0);
		
		//FixedPointFormat:
		//	(("fix" | unsigned?="ufix") integerLength=ValidInt ("." fractionLength=ValidInt | ("slope" slope=ValidDouble)? ("bias"
		//	bias=ValidDouble)?) | predefinedKind=PredefinedFixedPointFormatKind) saturate?="saturate"?;
		public ParserRule getRule() { return rule; }

		//(("fix" | unsigned?="ufix") integerLength=ValidInt ("." fractionLength=ValidInt | ("slope" slope=ValidDouble)? ("bias"
		//bias=ValidDouble)?) | predefinedKind=PredefinedFixedPointFormatKind) saturate?="saturate"?
		public Group getGroup() { return cGroup; }

		//("fix" | unsigned?="ufix") integerLength=ValidInt ("." fractionLength=ValidInt | ("slope" slope=ValidDouble)? ("bias"
		//bias=ValidDouble)?) | predefinedKind=PredefinedFixedPointFormatKind
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//("fix" | unsigned?="ufix") integerLength=ValidInt ("." fractionLength=ValidInt | ("slope" slope=ValidDouble)? ("bias"
		//bias=ValidDouble)?)
		public Group getGroup_0_0() { return cGroup_0_0; }

		//"fix" | unsigned?="ufix"
		public Alternatives getAlternatives_0_0_0() { return cAlternatives_0_0_0; }

		//"fix"
		public Keyword getFixKeyword_0_0_0_0() { return cFixKeyword_0_0_0_0; }

		//unsigned?="ufix"
		public Assignment getUnsignedAssignment_0_0_0_1() { return cUnsignedAssignment_0_0_0_1; }

		//"ufix"
		public Keyword getUnsignedUfixKeyword_0_0_0_1_0() { return cUnsignedUfixKeyword_0_0_0_1_0; }

		//integerLength=ValidInt
		public Assignment getIntegerLengthAssignment_0_0_1() { return cIntegerLengthAssignment_0_0_1; }

		//ValidInt
		public RuleCall getIntegerLengthValidIntParserRuleCall_0_0_1_0() { return cIntegerLengthValidIntParserRuleCall_0_0_1_0; }

		//"." fractionLength=ValidInt | ("slope" slope=ValidDouble)? ("bias" bias=ValidDouble)?
		public Alternatives getAlternatives_0_0_2() { return cAlternatives_0_0_2; }

		//"." fractionLength=ValidInt
		public Group getGroup_0_0_2_0() { return cGroup_0_0_2_0; }

		//"."
		public Keyword getFullStopKeyword_0_0_2_0_0() { return cFullStopKeyword_0_0_2_0_0; }

		//fractionLength=ValidInt
		public Assignment getFractionLengthAssignment_0_0_2_0_1() { return cFractionLengthAssignment_0_0_2_0_1; }

		//ValidInt
		public RuleCall getFractionLengthValidIntParserRuleCall_0_0_2_0_1_0() { return cFractionLengthValidIntParserRuleCall_0_0_2_0_1_0; }

		//("slope" slope=ValidDouble)? ("bias" bias=ValidDouble)?
		public Group getGroup_0_0_2_1() { return cGroup_0_0_2_1; }

		//("slope" slope=ValidDouble)?
		public Group getGroup_0_0_2_1_0() { return cGroup_0_0_2_1_0; }

		//"slope"
		public Keyword getSlopeKeyword_0_0_2_1_0_0() { return cSlopeKeyword_0_0_2_1_0_0; }

		//slope=ValidDouble
		public Assignment getSlopeAssignment_0_0_2_1_0_1() { return cSlopeAssignment_0_0_2_1_0_1; }

		//ValidDouble
		public RuleCall getSlopeValidDoubleParserRuleCall_0_0_2_1_0_1_0() { return cSlopeValidDoubleParserRuleCall_0_0_2_1_0_1_0; }

		//("bias" bias=ValidDouble)?
		public Group getGroup_0_0_2_1_1() { return cGroup_0_0_2_1_1; }

		//"bias"
		public Keyword getBiasKeyword_0_0_2_1_1_0() { return cBiasKeyword_0_0_2_1_1_0; }

		//bias=ValidDouble
		public Assignment getBiasAssignment_0_0_2_1_1_1() { return cBiasAssignment_0_0_2_1_1_1; }

		//ValidDouble
		public RuleCall getBiasValidDoubleParserRuleCall_0_0_2_1_1_1_0() { return cBiasValidDoubleParserRuleCall_0_0_2_1_1_1_0; }

		//predefinedKind=PredefinedFixedPointFormatKind
		public Assignment getPredefinedKindAssignment_0_1() { return cPredefinedKindAssignment_0_1; }

		//PredefinedFixedPointFormatKind
		public RuleCall getPredefinedKindPredefinedFixedPointFormatKindEnumRuleCall_0_1_0() { return cPredefinedKindPredefinedFixedPointFormatKindEnumRuleCall_0_1_0; }

		//saturate?="saturate"?
		public Assignment getSaturateAssignment_1() { return cSaturateAssignment_1; }

		//"saturate"
		public Keyword getSaturateSaturateKeyword_1_0() { return cSaturateSaturateKeyword_1_0; }
	}

	public class NumberFormatMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberFormatMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeSpecifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeSpecifierTypeSpecifierParserRuleCall_1_0 = (RuleCall)cTypeSpecifierAssignment_1.eContents().get(0);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNumberFormatAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNumberFormatNumberFormatParserRuleCall_3_0 = (RuleCall)cNumberFormatAssignment_3.eContents().get(0);
		
		//NumberFormatMapping:
		//	"map" typeSpecifier=TypeSpecifier "to" numberFormat=NumberFormat;
		public ParserRule getRule() { return rule; }

		//"map" typeSpecifier=TypeSpecifier "to" numberFormat=NumberFormat
		public Group getGroup() { return cGroup; }

		//"map"
		public Keyword getMapKeyword_0() { return cMapKeyword_0; }

		//typeSpecifier=TypeSpecifier
		public Assignment getTypeSpecifierAssignment_1() { return cTypeSpecifierAssignment_1; }

		//TypeSpecifier
		public RuleCall getTypeSpecifierTypeSpecifierParserRuleCall_1_0() { return cTypeSpecifierTypeSpecifierParserRuleCall_1_0; }

		//"to"
		public Keyword getToKeyword_2() { return cToKeyword_2; }

		//numberFormat=NumberFormat
		public Assignment getNumberFormatAssignment_3() { return cNumberFormatAssignment_3; }

		//NumberFormat
		public RuleCall getNumberFormatNumberFormatParserRuleCall_3_0() { return cNumberFormatNumberFormatParserRuleCall_3_0; }
	}

	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cFullStopAsteriskKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName (".*" | "." "*")?;
		public ParserRule getRule() { return rule; }

		//QualifiedName (".*" | "." "*")?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//(".*" | "." "*")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//".*"
		public Keyword getFullStopAsteriskKeyword_1_0() { return cFullStopAsteriskKeyword_1_0; }

		//"." "*"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"."
		public Keyword getFullStopKeyword_1_1_0() { return cFullStopKeyword_1_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_1_1() { return cAsteriskKeyword_1_1_1; }
	}

	public class QualifiedNameWithoutIJElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithoutIJ");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cValidIDWithoutIJParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cValidIDWithoutIJParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedNameWithoutIJ:
		//	ValidIDWithoutIJ ("." ValidIDWithoutIJ)*;
		public ParserRule getRule() { return rule; }

		//ValidIDWithoutIJ ("." ValidIDWithoutIJ)*
		public Group getGroup() { return cGroup; }

		//ValidIDWithoutIJ
		public RuleCall getValidIDWithoutIJParserRuleCall_0() { return cValidIDWithoutIJParserRuleCall_0; }

		//("." ValidIDWithoutIJ)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ValidIDWithoutIJ
		public RuleCall getValidIDWithoutIJParserRuleCall_1_1() { return cValidIDWithoutIJParserRuleCall_1_1; }
	}

	public class ValidIDWithoutIJElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValidIDWithoutIJ");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEXPTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ValidIDWithoutIJ:
		//	N | E | EXP | ID;
		public ParserRule getRule() { return rule; }

		//N | E | EXP | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//N
		public RuleCall getNTerminalRuleCall_0() { return cNTerminalRuleCall_0; }

		//E
		public RuleCall getETerminalRuleCall_1() { return cETerminalRuleCall_1; }

		//EXP
		public RuleCall getEXPTerminalRuleCall_2() { return cEXPTerminalRuleCall_2; }

		//ID
		public RuleCall getIDTerminalRuleCall_3() { return cIDTerminalRuleCall_3; }
	}

	public class ValidDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValidDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cValidIntParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cFullStopKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final RuleCall cValidIntParserRuleCall_2_0_1 = (RuleCall)cGroup_2_0.eContents().get(1);
		private final Alternatives cAlternatives_2_0_2 = (Alternatives)cGroup_2_0.eContents().get(2);
		private final RuleCall cEXPTerminalRuleCall_2_0_2_0 = (RuleCall)cAlternatives_2_0_2.eContents().get(0);
		private final Group cGroup_2_0_2_1 = (Group)cAlternatives_2_0_2.eContents().get(1);
		private final RuleCall cETerminalRuleCall_2_0_2_1_0 = (RuleCall)cGroup_2_0_2_1.eContents().get(0);
		private final Alternatives cAlternatives_2_0_2_1_1 = (Alternatives)cGroup_2_0_2_1.eContents().get(1);
		private final Keyword cPlusSignKeyword_2_0_2_1_1_0 = (Keyword)cAlternatives_2_0_2_1_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_2_0_2_1_1_1 = (Keyword)cAlternatives_2_0_2_1_1.eContents().get(1);
		private final RuleCall cValidIntParserRuleCall_2_0_2_1_2 = (RuleCall)cGroup_2_0_2_1.eContents().get(2);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cAlternatives_2.eContents().get(1);
		private final RuleCall cEXPTerminalRuleCall_2_1_0 = (RuleCall)cAlternatives_2_1.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cAlternatives_2_1.eContents().get(1);
		private final RuleCall cETerminalRuleCall_2_1_1_0 = (RuleCall)cGroup_2_1_1.eContents().get(0);
		private final Alternatives cAlternatives_2_1_1_1 = (Alternatives)cGroup_2_1_1.eContents().get(1);
		private final Keyword cPlusSignKeyword_2_1_1_1_0 = (Keyword)cAlternatives_2_1_1_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_2_1_1_1_1 = (Keyword)cAlternatives_2_1_1_1.eContents().get(1);
		private final RuleCall cValidIntParserRuleCall_2_1_1_2 = (RuleCall)cGroup_2_1_1.eContents().get(2);
		
		//ValidDouble returns ecore::EDouble hidden():
		//	"-"? ValidInt ("." ValidInt (EXP | E ("+" | "-") ValidInt)? | (EXP | E ("+" | "-") ValidInt))?;
		public ParserRule getRule() { return rule; }

		//"-"? ValidInt ("." ValidInt (EXP | E ("+" | "-") ValidInt)? | (EXP | E ("+" | "-") ValidInt))?
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//ValidInt
		public RuleCall getValidIntParserRuleCall_1() { return cValidIntParserRuleCall_1; }

		//("." ValidInt (EXP | E ("+" | "-") ValidInt)? | (EXP | E ("+" | "-") ValidInt))?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"." ValidInt (EXP | E ("+" | "-") ValidInt)?
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"."
		public Keyword getFullStopKeyword_2_0_0() { return cFullStopKeyword_2_0_0; }

		//ValidInt
		public RuleCall getValidIntParserRuleCall_2_0_1() { return cValidIntParserRuleCall_2_0_1; }

		//(EXP | E ("+" | "-") ValidInt)?
		public Alternatives getAlternatives_2_0_2() { return cAlternatives_2_0_2; }

		//EXP
		public RuleCall getEXPTerminalRuleCall_2_0_2_0() { return cEXPTerminalRuleCall_2_0_2_0; }

		//E ("+" | "-") ValidInt
		public Group getGroup_2_0_2_1() { return cGroup_2_0_2_1; }

		//E
		public RuleCall getETerminalRuleCall_2_0_2_1_0() { return cETerminalRuleCall_2_0_2_1_0; }

		//"+" | "-"
		public Alternatives getAlternatives_2_0_2_1_1() { return cAlternatives_2_0_2_1_1; }

		//"+"
		public Keyword getPlusSignKeyword_2_0_2_1_1_0() { return cPlusSignKeyword_2_0_2_1_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_2_0_2_1_1_1() { return cHyphenMinusKeyword_2_0_2_1_1_1; }

		//ValidInt
		public RuleCall getValidIntParserRuleCall_2_0_2_1_2() { return cValidIntParserRuleCall_2_0_2_1_2; }

		//EXP | E ("+" | "-") ValidInt
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//EXP
		public RuleCall getEXPTerminalRuleCall_2_1_0() { return cEXPTerminalRuleCall_2_1_0; }

		//E ("+" | "-") ValidInt
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//E
		public RuleCall getETerminalRuleCall_2_1_1_0() { return cETerminalRuleCall_2_1_1_0; }

		//"+" | "-"
		public Alternatives getAlternatives_2_1_1_1() { return cAlternatives_2_1_1_1; }

		//"+"
		public Keyword getPlusSignKeyword_2_1_1_1_0() { return cPlusSignKeyword_2_1_1_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_2_1_1_1_1() { return cHyphenMinusKeyword_2_1_1_1_1; }

		//ValidInt
		public RuleCall getValidIntParserRuleCall_2_1_1_2() { return cValidIntParserRuleCall_2_1_1_2; }
	}
	
	
	public class PredefinedFloatingPointFormatKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "PredefinedFloatingPointFormatKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBinary32EnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBinary32Float32Keyword_0_0 = (Keyword)cBinary32EnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBinary64EnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBinary64Float64Keyword_1_0 = (Keyword)cBinary64EnumLiteralDeclaration_1.eContents().get(0);
		
		//enum PredefinedFloatingPointFormatKind returns FloatingPointFormatKind:
		//	Binary32="float32" | Binary64="float64";
		public EnumRule getRule() { return rule; }

		//Binary32="float32" | Binary64="float64"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Binary32="float32"
		public EnumLiteralDeclaration getBinary32EnumLiteralDeclaration_0() { return cBinary32EnumLiteralDeclaration_0; }

		//"float32"
		public Keyword getBinary32Float32Keyword_0_0() { return cBinary32Float32Keyword_0_0; }

		//Binary64="float64"
		public EnumLiteralDeclaration getBinary64EnumLiteralDeclaration_1() { return cBinary64EnumLiteralDeclaration_1; }

		//"float64"
		public Keyword getBinary64Float64Keyword_1_0() { return cBinary64Float64Keyword_1_0; }
	}

	public class PredefinedFixedPointFormatKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "PredefinedFixedPointFormatKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cInt8EnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cInt8Int8Keyword_0_0 = (Keyword)cInt8EnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cInt16EnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cInt16Int16Keyword_1_0 = (Keyword)cInt16EnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cInt32EnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cInt32Int32Keyword_2_0 = (Keyword)cInt32EnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cInt64EnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cInt64Int64Keyword_3_0 = (Keyword)cInt64EnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cInt128EnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cInt128Int128Keyword_4_0 = (Keyword)cInt128EnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cUInt8EnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cUInt8Uint8Keyword_5_0 = (Keyword)cUInt8EnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cUInt16EnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cUInt16Uint16Keyword_6_0 = (Keyword)cUInt16EnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cUInt32EnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cUInt32Uint32Keyword_7_0 = (Keyword)cUInt32EnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cUInt64EnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cUInt64Uint64Keyword_8_0 = (Keyword)cUInt64EnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cUInt128EnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cUInt128Uint128Keyword_9_0 = (Keyword)cUInt128EnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cFract8EnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cFract8Fract8Keyword_10_0 = (Keyword)cFract8EnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cFract16EnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cFract16Fract16Keyword_11_0 = (Keyword)cFract16EnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cFract32EnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cFract32Fract32Keyword_12_0 = (Keyword)cFract32EnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cFract64EnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cFract64Fract64Keyword_13_0 = (Keyword)cFract64EnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cFract128EnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cFract128Fract128Keyword_14_0 = (Keyword)cFract128EnumLiteralDeclaration_14.eContents().get(0);
		
		//enum PredefinedFixedPointFormatKind:
		//	Int8="int8" | Int16="int16" | Int32="int32" | Int64="int64" | Int128="int128" | UInt8="uint8" | UInt16="uint16" |
		//	UInt32="uint32" | UInt64="uint64" | UInt128="uint128" | Fract8="fract8" | Fract16="fract16" | Fract32="fract32" |
		//	Fract64="fract64" | Fract128="fract128";
		public EnumRule getRule() { return rule; }

		//Int8="int8" | Int16="int16" | Int32="int32" | Int64="int64" | Int128="int128" | UInt8="uint8" | UInt16="uint16" |
		//UInt32="uint32" | UInt64="uint64" | UInt128="uint128" | Fract8="fract8" | Fract16="fract16" | Fract32="fract32" |
		//Fract64="fract64" | Fract128="fract128"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Int8="int8"
		public EnumLiteralDeclaration getInt8EnumLiteralDeclaration_0() { return cInt8EnumLiteralDeclaration_0; }

		//"int8"
		public Keyword getInt8Int8Keyword_0_0() { return cInt8Int8Keyword_0_0; }

		//Int16="int16"
		public EnumLiteralDeclaration getInt16EnumLiteralDeclaration_1() { return cInt16EnumLiteralDeclaration_1; }

		//"int16"
		public Keyword getInt16Int16Keyword_1_0() { return cInt16Int16Keyword_1_0; }

		//Int32="int32"
		public EnumLiteralDeclaration getInt32EnumLiteralDeclaration_2() { return cInt32EnumLiteralDeclaration_2; }

		//"int32"
		public Keyword getInt32Int32Keyword_2_0() { return cInt32Int32Keyword_2_0; }

		//Int64="int64"
		public EnumLiteralDeclaration getInt64EnumLiteralDeclaration_3() { return cInt64EnumLiteralDeclaration_3; }

		//"int64"
		public Keyword getInt64Int64Keyword_3_0() { return cInt64Int64Keyword_3_0; }

		//Int128="int128"
		public EnumLiteralDeclaration getInt128EnumLiteralDeclaration_4() { return cInt128EnumLiteralDeclaration_4; }

		//"int128"
		public Keyword getInt128Int128Keyword_4_0() { return cInt128Int128Keyword_4_0; }

		//UInt8="uint8"
		public EnumLiteralDeclaration getUInt8EnumLiteralDeclaration_5() { return cUInt8EnumLiteralDeclaration_5; }

		//"uint8"
		public Keyword getUInt8Uint8Keyword_5_0() { return cUInt8Uint8Keyword_5_0; }

		//UInt16="uint16"
		public EnumLiteralDeclaration getUInt16EnumLiteralDeclaration_6() { return cUInt16EnumLiteralDeclaration_6; }

		//"uint16"
		public Keyword getUInt16Uint16Keyword_6_0() { return cUInt16Uint16Keyword_6_0; }

		//UInt32="uint32"
		public EnumLiteralDeclaration getUInt32EnumLiteralDeclaration_7() { return cUInt32EnumLiteralDeclaration_7; }

		//"uint32"
		public Keyword getUInt32Uint32Keyword_7_0() { return cUInt32Uint32Keyword_7_0; }

		//UInt64="uint64"
		public EnumLiteralDeclaration getUInt64EnumLiteralDeclaration_8() { return cUInt64EnumLiteralDeclaration_8; }

		//"uint64"
		public Keyword getUInt64Uint64Keyword_8_0() { return cUInt64Uint64Keyword_8_0; }

		//UInt128="uint128"
		public EnumLiteralDeclaration getUInt128EnumLiteralDeclaration_9() { return cUInt128EnumLiteralDeclaration_9; }

		//"uint128"
		public Keyword getUInt128Uint128Keyword_9_0() { return cUInt128Uint128Keyword_9_0; }

		//Fract8="fract8"
		public EnumLiteralDeclaration getFract8EnumLiteralDeclaration_10() { return cFract8EnumLiteralDeclaration_10; }

		//"fract8"
		public Keyword getFract8Fract8Keyword_10_0() { return cFract8Fract8Keyword_10_0; }

		//Fract16="fract16"
		public EnumLiteralDeclaration getFract16EnumLiteralDeclaration_11() { return cFract16EnumLiteralDeclaration_11; }

		//"fract16"
		public Keyword getFract16Fract16Keyword_11_0() { return cFract16Fract16Keyword_11_0; }

		//Fract32="fract32"
		public EnumLiteralDeclaration getFract32EnumLiteralDeclaration_12() { return cFract32EnumLiteralDeclaration_12; }

		//"fract32"
		public Keyword getFract32Fract32Keyword_12_0() { return cFract32Fract32Keyword_12_0; }

		//Fract64="fract64"
		public EnumLiteralDeclaration getFract64EnumLiteralDeclaration_13() { return cFract64EnumLiteralDeclaration_13; }

		//"fract64"
		public Keyword getFract64Fract64Keyword_13_0() { return cFract64Fract64Keyword_13_0; }

		//Fract128="fract128"
		public EnumLiteralDeclaration getFract128EnumLiteralDeclaration_14() { return cFract128EnumLiteralDeclaration_14; }

		//"fract128"
		public Keyword getFract128Fract128Keyword_14_0() { return cFract128Fract128Keyword_14_0; }
	}
	
	private ConfigurationElements pConfiguration;
	private PropertyElements pProperty;
	private DeclaredPropertyElements pDeclaredProperty;
	private SimplePropertyElements pSimpleProperty;
	private SelectionPropertyElements pSelectionProperty;
	private SelectionPropertyBodyElements pSelectionPropertyBody;
	private RootSystemConfigurationElements pRootSystemConfiguration;
	private SubsystemConfigurationElements pSubsystemConfiguration;
	private SystemConfigurationBodyElements pSystemConfigurationBody;
	private FragmentConfigurationElements pFragmentConfiguration;
	private FragmentConfigurationBodyElements pFragmentConfigurationBody;
	private ComponentConfigurationElements pComponentConfiguration;
	private ComponentConfigurationBodyElements pComponentConfigurationBody;
	private ComputationPropertyElements pComputationProperty;
	private ComponentPathElements pComponentPath;
	private ComponentReferenceElements pComponentReference;
	private BindingElements pBinding;
	private BindingResourceReferenceElements pBindingResourceReference;
	private BindingBodyElements pBindingBody;
	private BindingResourceSubscriptElements pBindingResourceSubscript;
	private ComputationModelElements pComputationModel;
	private NumberFormatElements pNumberFormat;
	private FloatingPointFormatElements pFloatingPointFormat;
	private PredefinedFloatingPointFormatKindElements unknownRulePredefinedFloatingPointFormatKind;
	private PredefinedFixedPointFormatKindElements unknownRulePredefinedFixedPointFormatKind;
	private FixedPointFormatElements pFixedPointFormat;
	private NumberFormatMappingElements pNumberFormatMapping;
	private QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private QualifiedNameWithoutIJElements pQualifiedNameWithoutIJ;
	private ValidIDWithoutIJElements pValidIDWithoutIJ;
	private ValidDoubleElements pValidDouble;
	
	private final Grammar grammar;

	private MscriptGrammarAccess gaMscript;

	@Inject
	public DconfigGrammarAccess(GrammarProvider grammarProvider,
		MscriptGrammarAccess gaMscript) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaMscript = gaMscript;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipselabs.damos.dconfig.Dconfig".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public MscriptGrammarAccess getMscriptGrammarAccess() {
		return gaMscript;
	}

	
	//Configuration:
	//	"package" packageName=QualifiedName importDeclarations+=ImportDeclaration* "configuration" name=ValidID ("extends"
	//	baseConfiguration=[Configuration|QualifiedName])? "{" properties+=DeclaredProperty*
	//	rootSystemConfiguration=RootSystemConfiguration? "}";
	public ConfigurationElements getConfigurationAccess() {
		return (pConfiguration != null) ? pConfiguration : (pConfiguration = new ConfigurationElements());
	}
	
	public ParserRule getConfigurationRule() {
		return getConfigurationAccess().getRule();
	}

	//Property:
	//	DeclaredProperty | ComputationProperty;
	public PropertyElements getPropertyAccess() {
		return (pProperty != null) ? pProperty : (pProperty = new PropertyElements());
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//DeclaredProperty:
	//	SimpleProperty | SelectionProperty;
	public DeclaredPropertyElements getDeclaredPropertyAccess() {
		return (pDeclaredProperty != null) ? pDeclaredProperty : (pDeclaredProperty = new DeclaredPropertyElements());
	}
	
	public ParserRule getDeclaredPropertyRule() {
		return getDeclaredPropertyAccess().getRule();
	}

	//SimpleProperty:
	//	propagate?="propagate"? (declaration=[SimplePropertyDeclaration|QualifiedNameWithoutIJ] "=" value=Expression | "unset"
	//	declaration=[SimplePropertyDeclaration|QualifiedName]);
	public SimplePropertyElements getSimplePropertyAccess() {
		return (pSimpleProperty != null) ? pSimpleProperty : (pSimpleProperty = new SimplePropertyElements());
	}
	
	public ParserRule getSimplePropertyRule() {
		return getSimplePropertyAccess().getRule();
	}

	//SelectionProperty:
	//	propagate?="propagate"? "select" declaration=[SelectionPropertyDeclaration|QualifiedName] ("[" index=ValidInt "]")?
	//	selection=[SelectionPropertyOption|QualifiedName] body=SelectionPropertyBody?;
	public SelectionPropertyElements getSelectionPropertyAccess() {
		return (pSelectionProperty != null) ? pSelectionProperty : (pSelectionProperty = new SelectionPropertyElements());
	}
	
	public ParserRule getSelectionPropertyRule() {
		return getSelectionPropertyAccess().getRule();
	}

	//SelectionPropertyBody:
	//	{SelectionPropertyBody} "{" (properties+=DeclaredProperty | bindings+=Binding)* "}";
	public SelectionPropertyBodyElements getSelectionPropertyBodyAccess() {
		return (pSelectionPropertyBody != null) ? pSelectionPropertyBody : (pSelectionPropertyBody = new SelectionPropertyBodyElements());
	}
	
	public ParserRule getSelectionPropertyBodyRule() {
		return getSelectionPropertyBodyAccess().getRule();
	}

	//RootSystemConfiguration:
	//	"system" contextFragment=[Fragment|QualifiedName] body=SystemConfigurationBody?;
	public RootSystemConfigurationElements getRootSystemConfigurationAccess() {
		return (pRootSystemConfiguration != null) ? pRootSystemConfiguration : (pRootSystemConfiguration = new RootSystemConfigurationElements());
	}
	
	public ParserRule getRootSystemConfigurationRule() {
		return getRootSystemConfigurationAccess().getRule();
	}

	//SubsystemConfiguration:
	//	"subsystem" subsystem=[Subsystem|ValidID] body=SystemConfigurationBody;
	public SubsystemConfigurationElements getSubsystemConfigurationAccess() {
		return (pSubsystemConfiguration != null) ? pSubsystemConfiguration : (pSubsystemConfiguration = new SubsystemConfigurationElements());
	}
	
	public ParserRule getSubsystemConfigurationRule() {
		return getSubsystemConfigurationAccess().getRule();
	}

	//SystemConfigurationBody:
	//	{SystemConfigurationBody} "{" (properties+=Property | componentConfigurations+=ComponentConfiguration |
	//	fragmentConfigurations+=FragmentConfiguration | subsystemConfigurations+=SubsystemConfiguration)* "}";
	public SystemConfigurationBodyElements getSystemConfigurationBodyAccess() {
		return (pSystemConfigurationBody != null) ? pSystemConfigurationBody : (pSystemConfigurationBody = new SystemConfigurationBodyElements());
	}
	
	public ParserRule getSystemConfigurationBodyRule() {
		return getSystemConfigurationBodyAccess().getRule();
	}

	//FragmentConfiguration:
	//	"fragment" (startFragment=[Fragment|QualifiedName] (range?=".." endFragment=[Fragment|QualifiedName]?)? | range?=".."
	//	endFragment=[Fragment|QualifiedName]) body=FragmentConfigurationBody;
	public FragmentConfigurationElements getFragmentConfigurationAccess() {
		return (pFragmentConfiguration != null) ? pFragmentConfiguration : (pFragmentConfiguration = new FragmentConfigurationElements());
	}
	
	public ParserRule getFragmentConfigurationRule() {
		return getFragmentConfigurationAccess().getRule();
	}

	//FragmentConfigurationBody:
	//	{FragmentConfigurationBody} "{" properties+=Property* "}";
	public FragmentConfigurationBodyElements getFragmentConfigurationBodyAccess() {
		return (pFragmentConfigurationBody != null) ? pFragmentConfigurationBody : (pFragmentConfigurationBody = new FragmentConfigurationBodyElements());
	}
	
	public ParserRule getFragmentConfigurationBodyRule() {
		return getFragmentConfigurationBodyAccess().getRule();
	}

	//ComponentConfiguration:
	//	"component" component=[Component|ValidID] body=ComponentConfigurationBody;
	public ComponentConfigurationElements getComponentConfigurationAccess() {
		return (pComponentConfiguration != null) ? pComponentConfiguration : (pComponentConfiguration = new ComponentConfigurationElements());
	}
	
	public ParserRule getComponentConfigurationRule() {
		return getComponentConfigurationAccess().getRule();
	}

	//ComponentConfigurationBody:
	//	{ComponentConfigurationBody} "{" properties+=Property* "}";
	public ComponentConfigurationBodyElements getComponentConfigurationBodyAccess() {
		return (pComponentConfigurationBody != null) ? pComponentConfigurationBody : (pComponentConfigurationBody = new ComponentConfigurationBodyElements());
	}
	
	public ParserRule getComponentConfigurationBodyRule() {
		return getComponentConfigurationBodyAccess().getRule();
	}

	//ComputationProperty:
	//	propagate?="propagate"? "computation" "{" computationModel=ComputationModel "}";
	public ComputationPropertyElements getComputationPropertyAccess() {
		return (pComputationProperty != null) ? pComputationProperty : (pComputationProperty = new ComputationPropertyElements());
	}
	
	public ParserRule getComputationPropertyRule() {
		return getComputationPropertyAccess().getRule();
	}

	//ComponentPath:
	//	references+=ComponentReference ("." references+=ComponentReference)*;
	public ComponentPathElements getComponentPathAccess() {
		return (pComponentPath != null) ? pComponentPath : (pComponentPath = new ComponentPathElements());
	}
	
	public ParserRule getComponentPathRule() {
		return getComponentPathAccess().getRule();
	}

	//ComponentReference:
	//	component=[Component|ValidID];
	public ComponentReferenceElements getComponentReferenceAccess() {
		return (pComponentReference != null) ? pComponentReference : (pComponentReference = new ComponentReferenceElements());
	}
	
	public ParserRule getComponentReferenceRule() {
		return getComponentReferenceAccess().getRule();
	}

	//Binding:
	//	"bind" target=BindingResourceReference "to" source=ComponentPath body=BindingBody?;
	public BindingElements getBindingAccess() {
		return (pBinding != null) ? pBinding : (pBinding = new BindingElements());
	}
	
	public ParserRule getBindingRule() {
		return getBindingAccess().getRule();
	}

	//BindingResourceReference:
	//	resourceDeclaration=[ResourceDeclaration|ValidID] ("[" subscript=BindingResourceSubscript "]")?;
	public BindingResourceReferenceElements getBindingResourceReferenceAccess() {
		return (pBindingResourceReference != null) ? pBindingResourceReference : (pBindingResourceReference = new BindingResourceReferenceElements());
	}
	
	public ParserRule getBindingResourceReferenceRule() {
		return getBindingResourceReferenceAccess().getRule();
	}

	//BindingBody:
	//	{BindingBody} "{" properties+=DeclaredProperty* "}";
	public BindingBodyElements getBindingBodyAccess() {
		return (pBindingBody != null) ? pBindingBody : (pBindingBody = new BindingBodyElements());
	}
	
	public ParserRule getBindingBodyRule() {
		return getBindingBodyAccess().getRule();
	}

	//BindingResourceSubscript:
	//	index=ValidInt;
	public BindingResourceSubscriptElements getBindingResourceSubscriptAccess() {
		return (pBindingResourceSubscript != null) ? pBindingResourceSubscript : (pBindingResourceSubscript = new BindingResourceSubscriptElements());
	}
	
	public ParserRule getBindingResourceSubscriptRule() {
		return getBindingResourceSubscriptAccess().getRule();
	}

	//ComputationModel:
	//	{ComputationModel} numberFormatMappings+=NumberFormatMapping*;
	public ComputationModelElements getComputationModelAccess() {
		return (pComputationModel != null) ? pComputationModel : (pComputationModel = new ComputationModelElements());
	}
	
	public ParserRule getComputationModelRule() {
		return getComputationModelAccess().getRule();
	}

	//NumberFormat:
	//	FloatingPointFormat | FixedPointFormat;
	public NumberFormatElements getNumberFormatAccess() {
		return (pNumberFormat != null) ? pNumberFormat : (pNumberFormat = new NumberFormatElements());
	}
	
	public ParserRule getNumberFormatRule() {
		return getNumberFormatAccess().getRule();
	}

	//FloatingPointFormat:
	//	kind=PredefinedFloatingPointFormatKind;
	public FloatingPointFormatElements getFloatingPointFormatAccess() {
		return (pFloatingPointFormat != null) ? pFloatingPointFormat : (pFloatingPointFormat = new FloatingPointFormatElements());
	}
	
	public ParserRule getFloatingPointFormatRule() {
		return getFloatingPointFormatAccess().getRule();
	}

	//enum PredefinedFloatingPointFormatKind returns FloatingPointFormatKind:
	//	Binary32="float32" | Binary64="float64";
	public PredefinedFloatingPointFormatKindElements getPredefinedFloatingPointFormatKindAccess() {
		return (unknownRulePredefinedFloatingPointFormatKind != null) ? unknownRulePredefinedFloatingPointFormatKind : (unknownRulePredefinedFloatingPointFormatKind = new PredefinedFloatingPointFormatKindElements());
	}
	
	public EnumRule getPredefinedFloatingPointFormatKindRule() {
		return getPredefinedFloatingPointFormatKindAccess().getRule();
	}

	//enum PredefinedFixedPointFormatKind:
	//	Int8="int8" | Int16="int16" | Int32="int32" | Int64="int64" | Int128="int128" | UInt8="uint8" | UInt16="uint16" |
	//	UInt32="uint32" | UInt64="uint64" | UInt128="uint128" | Fract8="fract8" | Fract16="fract16" | Fract32="fract32" |
	//	Fract64="fract64" | Fract128="fract128";
	public PredefinedFixedPointFormatKindElements getPredefinedFixedPointFormatKindAccess() {
		return (unknownRulePredefinedFixedPointFormatKind != null) ? unknownRulePredefinedFixedPointFormatKind : (unknownRulePredefinedFixedPointFormatKind = new PredefinedFixedPointFormatKindElements());
	}
	
	public EnumRule getPredefinedFixedPointFormatKindRule() {
		return getPredefinedFixedPointFormatKindAccess().getRule();
	}

	//FixedPointFormat:
	//	(("fix" | unsigned?="ufix") integerLength=ValidInt ("." fractionLength=ValidInt | ("slope" slope=ValidDouble)? ("bias"
	//	bias=ValidDouble)?) | predefinedKind=PredefinedFixedPointFormatKind) saturate?="saturate"?;
	public FixedPointFormatElements getFixedPointFormatAccess() {
		return (pFixedPointFormat != null) ? pFixedPointFormat : (pFixedPointFormat = new FixedPointFormatElements());
	}
	
	public ParserRule getFixedPointFormatRule() {
		return getFixedPointFormatAccess().getRule();
	}

	//NumberFormatMapping:
	//	"map" typeSpecifier=TypeSpecifier "to" numberFormat=NumberFormat;
	public NumberFormatMappingElements getNumberFormatMappingAccess() {
		return (pNumberFormatMapping != null) ? pNumberFormatMapping : (pNumberFormatMapping = new NumberFormatMappingElements());
	}
	
	public ParserRule getNumberFormatMappingRule() {
		return getNumberFormatMappingAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName (".*" | "." "*")?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return (pQualifiedNameWithWildcard != null) ? pQualifiedNameWithWildcard : (pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements());
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//QualifiedNameWithoutIJ:
	//	ValidIDWithoutIJ ("." ValidIDWithoutIJ)*;
	public QualifiedNameWithoutIJElements getQualifiedNameWithoutIJAccess() {
		return (pQualifiedNameWithoutIJ != null) ? pQualifiedNameWithoutIJ : (pQualifiedNameWithoutIJ = new QualifiedNameWithoutIJElements());
	}
	
	public ParserRule getQualifiedNameWithoutIJRule() {
		return getQualifiedNameWithoutIJAccess().getRule();
	}

	//ValidIDWithoutIJ:
	//	N | E | EXP | ID;
	public ValidIDWithoutIJElements getValidIDWithoutIJAccess() {
		return (pValidIDWithoutIJ != null) ? pValidIDWithoutIJ : (pValidIDWithoutIJ = new ValidIDWithoutIJElements());
	}
	
	public ParserRule getValidIDWithoutIJRule() {
		return getValidIDWithoutIJAccess().getRule();
	}

	//ValidDouble returns ecore::EDouble hidden():
	//	"-"? ValidInt ("." ValidInt (EXP | E ("+" | "-") ValidInt)? | (EXP | E ("+" | "-") ValidInt))?;
	public ValidDoubleElements getValidDoubleAccess() {
		return (pValidDouble != null) ? pValidDouble : (pValidDouble = new ValidDoubleElements());
	}
	
	public ParserRule getValidDoubleRule() {
		return getValidDoubleAccess().getRule();
	}

	//Module:
	//	"package" packageName=QualifiedName importDeclarations+=ImportDeclaration* declarations+=Declaration*;
	public MscriptGrammarAccess.ModuleElements getModuleAccess() {
		return gaMscript.getModuleAccess();
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}

	//ImportDeclaration:
	//	"import" importedNamespace=QualifiedNameWithWildcard;
	public MscriptGrammarAccess.ImportDeclarationElements getImportDeclarationAccess() {
		return gaMscript.getImportDeclarationAccess();
	}
	
	public ParserRule getImportDeclarationRule() {
		return getImportDeclarationAccess().getRule();
	}

	//Declaration:
	//	TypeDeclaration | EnumerationDeclaration | FunctionDeclaration;
	public MscriptGrammarAccess.DeclarationElements getDeclarationAccess() {
		return gaMscript.getDeclarationAccess();
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	/// *
	// * TypeDeclaration
	// * / TypeDeclaration:
	//	"type" name=ValidID "=" typeSpecifier=TypeSpecifier;
	public MscriptGrammarAccess.TypeDeclarationElements getTypeDeclarationAccess() {
		return gaMscript.getTypeDeclarationAccess();
	}
	
	public ParserRule getTypeDeclarationRule() {
		return getTypeDeclarationAccess().getRule();
	}

	/// *
	// * Enumeration
	// * / EnumerationDeclaration:
	//	"enum" name=ValidID "{" (literalDeclarations+=EnumerationLiteralDeclaration (","
	//	literalDeclarations+=EnumerationLiteralDeclaration)* ","?)? "}";
	public MscriptGrammarAccess.EnumerationDeclarationElements getEnumerationDeclarationAccess() {
		return gaMscript.getEnumerationDeclarationAccess();
	}
	
	public ParserRule getEnumerationDeclarationRule() {
		return getEnumerationDeclarationAccess().getRule();
	}

	//EnumerationLiteralDeclaration:
	//	name=ValidID;
	public MscriptGrammarAccess.EnumerationLiteralDeclarationElements getEnumerationLiteralDeclarationAccess() {
		return gaMscript.getEnumerationLiteralDeclarationAccess();
	}
	
	public ParserRule getEnumerationLiteralDeclarationRule() {
		return getEnumerationLiteralDeclarationAccess().getRule();
	}

	/// *
	// * Function
	// * / FunctionDeclaration:
	//	kind=FunctionKind? "function" name=ValidID ("<" staticParameterDeclarations+=StaticParameterDeclaration (","
	//	staticParameterDeclarations+=StaticParameterDeclaration)* ">")? "("
	//	(inputParameterDeclarations+=InputParameterDeclaration ("," inputParameterDeclarations+=InputParameterDeclaration)*)?
	//	")" "->" outputParameterDeclarations+=OutputParameterDeclaration (","
	//	outputParameterDeclarations+=OutputParameterDeclaration)* "{" (checks+=Check | assertions+=Assertion |
	//	functionAliasDeclarations+=FunctionAliasDeclaration | stateVariableDeclarations+=StateVariableDeclaration |
	//	constantDeclarations+=ConstantDeclaration | equations+=Equation)* "}";
	public MscriptGrammarAccess.FunctionDeclarationElements getFunctionDeclarationAccess() {
		return gaMscript.getFunctionDeclarationAccess();
	}
	
	public ParserRule getFunctionDeclarationRule() {
		return getFunctionDeclarationAccess().getRule();
	}

	//enum FunctionKind:
	//	Stateful="stateful" | Continuous="continuous";
	public MscriptGrammarAccess.FunctionKindElements getFunctionKindAccess() {
		return gaMscript.getFunctionKindAccess();
	}
	
	public EnumRule getFunctionKindRule() {
		return getFunctionKindAccess().getRule();
	}

	//StaticParameterDeclaration:
	//	name=ValidID;
	public MscriptGrammarAccess.StaticParameterDeclarationElements getStaticParameterDeclarationAccess() {
		return gaMscript.getStaticParameterDeclarationAccess();
	}
	
	public ParserRule getStaticParameterDeclarationRule() {
		return getStaticParameterDeclarationAccess().getRule();
	}

	//InputParameterDeclaration:
	//	name=ValidID;
	public MscriptGrammarAccess.InputParameterDeclarationElements getInputParameterDeclarationAccess() {
		return gaMscript.getInputParameterDeclarationAccess();
	}
	
	public ParserRule getInputParameterDeclarationRule() {
		return getInputParameterDeclarationAccess().getRule();
	}

	//OutputParameterDeclaration:
	//	name=ValidID;
	public MscriptGrammarAccess.OutputParameterDeclarationElements getOutputParameterDeclarationAccess() {
		return gaMscript.getOutputParameterDeclarationAccess();
	}
	
	public ParserRule getOutputParameterDeclarationRule() {
		return getOutputParameterDeclarationAccess().getRule();
	}

	//Check:
	//	"check" ("<" staticArguments+=Expression ("," staticArguments+=Expression)* ">")? "("
	//	(inputParameterTypes+=TypeSpecifier ("," inputParameterTypes+=TypeSpecifier)*)? ")" "->"
	//	outputParameterTypes+=TypeSpecifier ("," outputParameterTypes+=TypeSpecifier)*;
	public MscriptGrammarAccess.CheckElements getCheckAccess() {
		return gaMscript.getCheckAccess();
	}
	
	public ParserRule getCheckRule() {
		return getCheckAccess().getRule();
	}

	//enum AssertionStatusKind:
	//	Info="info" | Warning="warning" | Error="error" | Fatal="fatal";
	public MscriptGrammarAccess.AssertionStatusKindElements getAssertionStatusKindAccess() {
		return gaMscript.getAssertionStatusKindAccess();
	}
	
	public EnumRule getAssertionStatusKindRule() {
		return getAssertionStatusKindAccess().getRule();
	}

	//Assertion:
	//	static?="static"? "assert" condition=Expression ":" statusKind=AssertionStatusKind message=Expression;
	public MscriptGrammarAccess.AssertionElements getAssertionAccess() {
		return gaMscript.getAssertionAccess();
	}
	
	public ParserRule getAssertionRule() {
		return getAssertionAccess().getRule();
	}

	//StateVariableDeclaration:
	//	"var" name=ValidID;
	public MscriptGrammarAccess.StateVariableDeclarationElements getStateVariableDeclarationAccess() {
		return gaMscript.getStateVariableDeclarationAccess();
	}
	
	public ParserRule getStateVariableDeclarationRule() {
		return getStateVariableDeclarationAccess().getRule();
	}

	//ConstantDeclaration:
	//	"const" name=ValidID "=" initializer=Expression;
	public MscriptGrammarAccess.ConstantDeclarationElements getConstantDeclarationAccess() {
		return gaMscript.getConstantDeclarationAccess();
	}
	
	public ParserRule getConstantDeclarationRule() {
		return getConstantDeclarationAccess().getRule();
	}

	//FunctionAliasDeclaration:
	//	"function" name=ValidID "=" functionDeclaration=[FunctionDeclaration|QualifiedName] ("<" staticArguments+=Expression
	//	("," staticArguments+=Expression)* ">")?;
	public MscriptGrammarAccess.FunctionAliasDeclarationElements getFunctionAliasDeclarationAccess() {
		return gaMscript.getFunctionAliasDeclarationAccess();
	}
	
	public ParserRule getFunctionAliasDeclarationRule() {
		return getFunctionAliasDeclarationAccess().getRule();
	}

	//Equation:
	//	initial?="initial"? "eq" leftHandSide=Expression "=" rightHandSide=Expression;
	public MscriptGrammarAccess.EquationElements getEquationAccess() {
		return gaMscript.getEquationAccess();
	}
	
	public ParserRule getEquationRule() {
		return getEquationAccess().getRule();
	}

	/// *
	// * Data type specifier
	// * / TypeSpecifier:
	//	AnonymousTypeSpecifier | DeclaredTypeSpecifier;
	public MscriptGrammarAccess.TypeSpecifierElements getTypeSpecifierAccess() {
		return gaMscript.getTypeSpecifierAccess();
	}
	
	public ParserRule getTypeSpecifierRule() {
		return getTypeSpecifierAccess().getRule();
	}

	//AnonymousTypeSpecifier:
	//	type=(AnonymousArrayType | DeclaredArrayType);
	public MscriptGrammarAccess.AnonymousTypeSpecifierElements getAnonymousTypeSpecifierAccess() {
		return gaMscript.getAnonymousTypeSpecifierAccess();
	}
	
	public ParserRule getAnonymousTypeSpecifierRule() {
		return getAnonymousTypeSpecifierAccess().getRule();
	}

	//DeclaredTypeSpecifier:
	//	typeDeclaration=[TypeDeclaration|QualifiedName];
	public MscriptGrammarAccess.DeclaredTypeSpecifierElements getDeclaredTypeSpecifierAccess() {
		return gaMscript.getDeclaredTypeSpecifierAccess();
	}
	
	public ParserRule getDeclaredTypeSpecifierRule() {
		return getDeclaredTypeSpecifierAccess().getRule();
	}

	//PrimitiveType:
	//	NumericType | BooleanType | StringType;
	public MscriptGrammarAccess.PrimitiveTypeElements getPrimitiveTypeAccess() {
		return gaMscript.getPrimitiveTypeAccess();
	}
	
	public ParserRule getPrimitiveTypeRule() {
		return getPrimitiveTypeAccess().getRule();
	}

	//NumericType:
	//	RealType | IntegerType | ComplexType | GaussianType;
	public MscriptGrammarAccess.NumericTypeElements getNumericTypeAccess() {
		return gaMscript.getNumericTypeAccess();
	}
	
	public ParserRule getNumericTypeRule() {
		return getNumericTypeAccess().getRule();
	}

	//RealType:
	//	{RealType} "real" unit=Unit;
	public MscriptGrammarAccess.RealTypeElements getRealTypeAccess() {
		return gaMscript.getRealTypeAccess();
	}
	
	public ParserRule getRealTypeRule() {
		return getRealTypeAccess().getRule();
	}

	//IntegerType:
	//	{IntegerType} "int" unit=Unit;
	public MscriptGrammarAccess.IntegerTypeElements getIntegerTypeAccess() {
		return gaMscript.getIntegerTypeAccess();
	}
	
	public ParserRule getIntegerTypeRule() {
		return getIntegerTypeAccess().getRule();
	}

	//ComplexType:
	//	{ComplexType} "complex" unit=Unit;
	public MscriptGrammarAccess.ComplexTypeElements getComplexTypeAccess() {
		return gaMscript.getComplexTypeAccess();
	}
	
	public ParserRule getComplexTypeRule() {
		return getComplexTypeAccess().getRule();
	}

	//GaussianType:
	//	{GaussianType} "gaussian" unit=Unit;
	public MscriptGrammarAccess.GaussianTypeElements getGaussianTypeAccess() {
		return gaMscript.getGaussianTypeAccess();
	}
	
	public ParserRule getGaussianTypeRule() {
		return getGaussianTypeAccess().getRule();
	}

	//BooleanType:
	//	{BooleanType} "boolean";
	public MscriptGrammarAccess.BooleanTypeElements getBooleanTypeAccess() {
		return gaMscript.getBooleanTypeAccess();
	}
	
	public ParserRule getBooleanTypeRule() {
		return getBooleanTypeAccess().getRule();
	}

	//StringType:
	//	{StringType} "string";
	public MscriptGrammarAccess.StringTypeElements getStringTypeAccess() {
		return gaMscript.getStringTypeAccess();
	}
	
	public ParserRule getStringTypeRule() {
		return getStringTypeAccess().getRule();
	}

	//AnonymousArrayType returns DataType:
	//	(PrimitiveType | CompositeType) ({AnonymousArrayType.elementType=current} "[" dimensions+=ArrayDimension (","
	//	dimensions+=ArrayDimension)* "]")?;
	public MscriptGrammarAccess.AnonymousArrayTypeElements getAnonymousArrayTypeAccess() {
		return gaMscript.getAnonymousArrayTypeAccess();
	}
	
	public ParserRule getAnonymousArrayTypeRule() {
		return getAnonymousArrayTypeAccess().getRule();
	}

	//DeclaredArrayType:
	//	elementTypeDeclaration=[TypeDeclaration|QualifiedName] "[" dimensions+=ArrayDimension (","
	//	dimensions+=ArrayDimension)* "]";
	public MscriptGrammarAccess.DeclaredArrayTypeElements getDeclaredArrayTypeAccess() {
		return gaMscript.getDeclaredArrayTypeAccess();
	}
	
	public ParserRule getDeclaredArrayTypeRule() {
		return getDeclaredArrayTypeAccess().getRule();
	}

	//ArrayDimension:
	//	{ArrayDimension} size=Expression?;
	public MscriptGrammarAccess.ArrayDimensionElements getArrayDimensionAccess() {
		return gaMscript.getArrayDimensionAccess();
	}
	
	public ParserRule getArrayDimensionRule() {
		return getArrayDimensionAccess().getRule();
	}

	//CompositeType:
	//	StructType | UnionType;
	public MscriptGrammarAccess.CompositeTypeElements getCompositeTypeAccess() {
		return gaMscript.getCompositeTypeAccess();
	}
	
	public ParserRule getCompositeTypeRule() {
		return getCompositeTypeAccess().getRule();
	}

	//StructType:
	//	(label=ValidID | anyLabel?="?")? "{" memberLists+=CompositeTypeMemberList (";" memberLists+=CompositeTypeMemberList)*
	//	";"? "}";
	public MscriptGrammarAccess.StructTypeElements getStructTypeAccess() {
		return gaMscript.getStructTypeAccess();
	}
	
	public ParserRule getStructTypeRule() {
		return getStructTypeAccess().getRule();
	}

	//UnionType:
	//	"union" (label=ValidID | anyLabel?="?")? "{" memberLists+=CompositeTypeMemberList (";"
	//	memberLists+=CompositeTypeMemberList)* ";"? "}";
	public MscriptGrammarAccess.UnionTypeElements getUnionTypeAccess() {
		return gaMscript.getUnionTypeAccess();
	}
	
	public ParserRule getUnionTypeRule() {
		return getUnionTypeAccess().getRule();
	}

	//CompositeTypeMemberList:
	//	typeSpecifier=TypeSpecifier members+=CompositeTypeMember ("," members+=CompositeTypeMember)*;
	public MscriptGrammarAccess.CompositeTypeMemberListElements getCompositeTypeMemberListAccess() {
		return gaMscript.getCompositeTypeMemberListAccess();
	}
	
	public ParserRule getCompositeTypeMemberListRule() {
		return getCompositeTypeMemberListAccess().getRule();
	}

	//CompositeTypeMember:
	//	name=ValidID;
	public MscriptGrammarAccess.CompositeTypeMemberElements getCompositeTypeMemberAccess() {
		return gaMscript.getCompositeTypeMemberAccess();
	}
	
	public ParserRule getCompositeTypeMemberRule() {
		return getCompositeTypeMemberAccess().getRule();
	}

	/// *
	// * Expressions
	// * / Expression:
	//	LambdaExpression | LetExpression | IfExpression | SwitchExpression | InspectExpression | UnionConstructionOperator |
	//	RangeExpression;
	public MscriptGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaMscript.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//LambdaExpression:
	//	(parameters+=LambdaExpressionParameter | "(" (parameters+=LambdaExpressionParameter (","
	//	parameters+=LambdaExpressionParameter)*)? ")") "->" expression=Expression;
	public MscriptGrammarAccess.LambdaExpressionElements getLambdaExpressionAccess() {
		return gaMscript.getLambdaExpressionAccess();
	}
	
	public ParserRule getLambdaExpressionRule() {
		return getLambdaExpressionAccess().getRule();
	}

	//LambdaExpressionParameter:
	//	name=ValidID;
	public MscriptGrammarAccess.LambdaExpressionParameterElements getLambdaExpressionParameterAccess() {
		return gaMscript.getLambdaExpressionParameterAccess();
	}
	
	public ParserRule getLambdaExpressionParameterRule() {
		return getLambdaExpressionParameterAccess().getRule();
	}

	//LetExpression:
	//	"let" assignments+=LetExpressionAssignment ("," assignments+=LetExpressionAssignment)* "in" target=Expression;
	public MscriptGrammarAccess.LetExpressionElements getLetExpressionAccess() {
		return gaMscript.getLetExpressionAccess();
	}
	
	public ParserRule getLetExpressionRule() {
		return getLetExpressionAccess().getRule();
	}

	//LetExpressionAssignment:
	//	(variables+=LetExpressionVariableDeclaration | "(" variables+=LetExpressionVariableDeclaration (","
	//	variables+=LetExpressionVariableDeclaration)+ ")") "=" assignedExpression=Expression;
	public MscriptGrammarAccess.LetExpressionAssignmentElements getLetExpressionAssignmentAccess() {
		return gaMscript.getLetExpressionAssignmentAccess();
	}
	
	public ParserRule getLetExpressionAssignmentRule() {
		return getLetExpressionAssignmentAccess().getRule();
	}

	//LetExpressionVariableDeclaration:
	//	name=ValidID;
	public MscriptGrammarAccess.LetExpressionVariableDeclarationElements getLetExpressionVariableDeclarationAccess() {
		return gaMscript.getLetExpressionVariableDeclarationAccess();
	}
	
	public ParserRule getLetExpressionVariableDeclarationRule() {
		return getLetExpressionVariableDeclarationAccess().getRule();
	}

	//IfExpression:
	//	static?="static"? "if" condition=Expression "then" thenExpression=Expression "else" elseExpression=Expression;
	public MscriptGrammarAccess.IfExpressionElements getIfExpressionAccess() {
		return gaMscript.getIfExpressionAccess();
	}
	
	public ParserRule getIfExpressionRule() {
		return getIfExpressionAccess().getRule();
	}

	//SwitchExpression:
	//	static?="static"? "switch" controlExpression=Expression cases+=SwitchCase* "default" ":" defaultExpression=Expression;
	public MscriptGrammarAccess.SwitchExpressionElements getSwitchExpressionAccess() {
		return gaMscript.getSwitchExpressionAccess();
	}
	
	public ParserRule getSwitchExpressionRule() {
		return getSwitchExpressionAccess().getRule();
	}

	//SwitchCase:
	//	"case" caseExpression=ImpliesExpression ":" resultExpression=Expression;
	public MscriptGrammarAccess.SwitchCaseElements getSwitchCaseAccess() {
		return gaMscript.getSwitchCaseAccess();
	}
	
	public ParserRule getSwitchCaseRule() {
		return getSwitchCaseAccess().getRule();
	}

	//InspectExpression:
	//	"inspect" unionExpression=Expression whenClauses+=InspectWhenClause*;
	public MscriptGrammarAccess.InspectExpressionElements getInspectExpressionAccess() {
		return gaMscript.getInspectExpressionAccess();
	}
	
	public ParserRule getInspectExpressionRule() {
		return getInspectExpressionAccess().getRule();
	}

	//InspectWhenClause:
	//	"when" name=ValidID ":" expression=Expression;
	public MscriptGrammarAccess.InspectWhenClauseElements getInspectWhenClauseAccess() {
		return gaMscript.getInspectWhenClauseAccess();
	}
	
	public ParserRule getInspectWhenClauseRule() {
		return getInspectWhenClauseAccess().getRule();
	}

	//RangeExpression returns Expression:
	//	ImpliesExpression ({RangeExpression.operands+=current} ":" operands+=ImpliesExpression (":"
	//	operands+=ImpliesExpression)?)?;
	public MscriptGrammarAccess.RangeExpressionElements getRangeExpressionAccess() {
		return gaMscript.getRangeExpressionAccess();
	}
	
	public ParserRule getRangeExpressionRule() {
		return getRangeExpressionAccess().getRule();
	}

	//ImpliesExpression returns Expression:
	//	LogicalOrExpression ({ImpliesExpression.leftOperand=current} operator=ImpliesOperator
	//	rightOperand=LogicalOrExpression)?;
	public MscriptGrammarAccess.ImpliesExpressionElements getImpliesExpressionAccess() {
		return gaMscript.getImpliesExpressionAccess();
	}
	
	public ParserRule getImpliesExpressionRule() {
		return getImpliesExpressionAccess().getRule();
	}

	//enum ImpliesOperator returns OperatorKind:
	//	Implies="=>";
	public MscriptGrammarAccess.ImpliesOperatorElements getImpliesOperatorAccess() {
		return gaMscript.getImpliesOperatorAccess();
	}
	
	public EnumRule getImpliesOperatorRule() {
		return getImpliesOperatorAccess().getRule();
	}

	//LogicalOrExpression returns Expression:
	//	LogicalAndExpression ({LogicalOrExpression.leftOperand=current} operator=LogicalOrOperator
	//	rightOperand=LogicalAndExpression)*;
	public MscriptGrammarAccess.LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return gaMscript.getLogicalOrExpressionAccess();
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}

	//enum LogicalOrOperator returns OperatorKind:
	//	LogicalOr="||";
	public MscriptGrammarAccess.LogicalOrOperatorElements getLogicalOrOperatorAccess() {
		return gaMscript.getLogicalOrOperatorAccess();
	}
	
	public EnumRule getLogicalOrOperatorRule() {
		return getLogicalOrOperatorAccess().getRule();
	}

	//LogicalAndExpression returns Expression:
	//	EqualityExpression ({LogicalAndExpression.leftOperand=current} operator=LogicalAndOperator
	//	rightOperand=EqualityExpression)*;
	public MscriptGrammarAccess.LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return gaMscript.getLogicalAndExpressionAccess();
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}

	//enum LogicalAndOperator returns OperatorKind:
	//	LogicalAnd="&&";
	public MscriptGrammarAccess.LogicalAndOperatorElements getLogicalAndOperatorAccess() {
		return gaMscript.getLogicalAndOperatorAccess();
	}
	
	public EnumRule getLogicalAndOperatorRule() {
		return getLogicalAndOperatorAccess().getRule();
	}

	//EqualityExpression returns Expression:
	//	RelationalExpression ({EqualityExpression.leftOperand=current} operator=EqualityOperator
	//	rightOperand=RelationalExpression)*;
	public MscriptGrammarAccess.EqualityExpressionElements getEqualityExpressionAccess() {
		return gaMscript.getEqualityExpressionAccess();
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}

	//enum EqualityOperator returns OperatorKind:
	//	EqualTo="==" | NotEqualTo="!=";
	public MscriptGrammarAccess.EqualityOperatorElements getEqualityOperatorAccess() {
		return gaMscript.getEqualityOperatorAccess();
	}
	
	public EnumRule getEqualityOperatorRule() {
		return getEqualityOperatorAccess().getRule();
	}

	//RelationalExpression returns Expression:
	//	AdditiveExpression => ({RelationalExpression.leftOperand=current} operator=RelationalOperator
	//	rightOperand=AdditiveExpression | {TypeTestExpression.expression=current} "is" typeSpecifier=TypeSpecifier)?;
	public MscriptGrammarAccess.RelationalExpressionElements getRelationalExpressionAccess() {
		return gaMscript.getRelationalExpressionAccess();
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}

	//enum RelationalOperator returns OperatorKind:
	//	LessThan="<" | LessThanOrEqualTo="<=" | GreaterThan=">" | GreaterThanOrEqualTo=">=";
	public MscriptGrammarAccess.RelationalOperatorElements getRelationalOperatorAccess() {
		return gaMscript.getRelationalOperatorAccess();
	}
	
	public EnumRule getRelationalOperatorRule() {
		return getRelationalOperatorAccess().getRule();
	}

	//AdditiveExpression returns Expression:
	//	MultiplicativeExpression ({AdditiveExpression.leftOperand=current} operator=AdditiveOperator
	//	rightOperand=MultiplicativeExpression)*;
	public MscriptGrammarAccess.AdditiveExpressionElements getAdditiveExpressionAccess() {
		return gaMscript.getAdditiveExpressionAccess();
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	//enum AdditiveOperator returns OperatorKind:
	//	Add="+" | Subtract="-" | ElementWiseAdd=".+" | ElementWiseSubtract=".-";
	public MscriptGrammarAccess.AdditiveOperatorElements getAdditiveOperatorAccess() {
		return gaMscript.getAdditiveOperatorAccess();
	}
	
	public EnumRule getAdditiveOperatorRule() {
		return getAdditiveOperatorAccess().getRule();
	}

	//MultiplicativeExpression returns Expression:
	//	PowerExpression ({MultiplicativeExpression.leftOperand=current} operator=MultiplicativeOperator
	//	rightOperand=PowerExpression)*;
	public MscriptGrammarAccess.MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return gaMscript.getMultiplicativeExpressionAccess();
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}

	//enum MultiplicativeOperator returns OperatorKind:
	//	Multiply="*" | Divide="/" | Modulo="%" | ElementWiseMultiply=".*" | ElementWiseDivide="./" | ElementWiseModulo=".%";
	public MscriptGrammarAccess.MultiplicativeOperatorElements getMultiplicativeOperatorAccess() {
		return gaMscript.getMultiplicativeOperatorAccess();
	}
	
	public EnumRule getMultiplicativeOperatorRule() {
		return getMultiplicativeOperatorAccess().getRule();
	}

	//PowerExpression returns Expression:
	//	PrefixUnaryExpression ({PowerExpression.leftOperand=current} operator=PowerOperator
	//	rightOperand=PrefixUnaryExpression)?;
	public MscriptGrammarAccess.PowerExpressionElements getPowerExpressionAccess() {
		return gaMscript.getPowerExpressionAccess();
	}
	
	public ParserRule getPowerExpressionRule() {
		return getPowerExpressionAccess().getRule();
	}

	//enum PowerOperator returns OperatorKind:
	//	Power="^" | ElementWisePower=".^";
	public MscriptGrammarAccess.PowerOperatorElements getPowerOperatorAccess() {
		return gaMscript.getPowerOperatorAccess();
	}
	
	public EnumRule getPowerOperatorRule() {
		return getPowerOperatorAccess().getRule();
	}

	//PrefixUnaryExpression returns Expression:
	//	PostfixUnaryExpression | {UnaryExpression} operator=PrefixUnaryOperator operand=PostfixUnaryExpression;
	public MscriptGrammarAccess.PrefixUnaryExpressionElements getPrefixUnaryExpressionAccess() {
		return gaMscript.getPrefixUnaryExpressionAccess();
	}
	
	public ParserRule getPrefixUnaryExpressionRule() {
		return getPrefixUnaryExpressionAccess().getRule();
	}

	//enum PrefixUnaryOperator returns OperatorKind:
	//	Negate="-" | LogicalNot="!";
	public MscriptGrammarAccess.PrefixUnaryOperatorElements getPrefixUnaryOperatorAccess() {
		return gaMscript.getPrefixUnaryOperatorAccess();
	}
	
	public EnumRule getPrefixUnaryOperatorRule() {
		return getPrefixUnaryOperatorAccess().getRule();
	}

	//PostfixUnaryExpression returns Expression:
	//	(QualifiedFeatureCall | MemberFeatureCall) ({UnaryExpression.operand=current} operator=PostfixUnaryOperator)?;
	public MscriptGrammarAccess.PostfixUnaryExpressionElements getPostfixUnaryExpressionAccess() {
		return gaMscript.getPostfixUnaryExpressionAccess();
	}
	
	public ParserRule getPostfixUnaryExpressionRule() {
		return getPostfixUnaryExpressionAccess().getRule();
	}

	//enum PostfixUnaryOperator returns OperatorKind:
	//	Derivative="\'";
	public MscriptGrammarAccess.PostfixUnaryOperatorElements getPostfixUnaryOperatorAccess() {
		return gaMscript.getPostfixUnaryOperatorAccess();
	}
	
	public EnumRule getPostfixUnaryOperatorRule() {
		return getPostfixUnaryOperatorAccess().getRule();
	}

	//MemberFeatureCall returns Expression:
	//	PrimaryExpression ({ArrayElementAccess.array=current} "[" subscripts+=ArraySubscript ("," subscripts+=ArraySubscript)*
	//	"]" | {MemberVariableAccess.target=current} "." memberVariable=ValidID | {FunctionCall.arguments+=current} "."
	//	feature=[CallableElement|ValidID] "(" (arguments+=Expression ("," arguments+=Expression)*)? ")")*;
	public MscriptGrammarAccess.MemberFeatureCallElements getMemberFeatureCallAccess() {
		return gaMscript.getMemberFeatureCallAccess();
	}
	
	public ParserRule getMemberFeatureCallRule() {
		return getMemberFeatureCallAccess().getRule();
	}

	//IterationVariableDeclaration:
	//	name=ValidID;
	public MscriptGrammarAccess.IterationVariableDeclarationElements getIterationVariableDeclarationAccess() {
		return gaMscript.getIterationVariableDeclarationAccess();
	}
	
	public ParserRule getIterationVariableDeclarationRule() {
		return getIterationVariableDeclarationAccess().getRule();
	}

	//ArraySubscript:
	//	slice?=":" | expression=Expression;
	public MscriptGrammarAccess.ArraySubscriptElements getArraySubscriptAccess() {
		return gaMscript.getArraySubscriptAccess();
	}
	
	public ParserRule getArraySubscriptRule() {
		return getArraySubscriptAccess().getRule();
	}

	//PrimaryExpression returns Expression:
	//	Literal | TemplateExpression | FeatureCall | UnitConstructionOperator | ArrayConstructionOperator |
	//	ArrayConcatenationOperator | StructConstructionOperator | ParenthesizedExpression | EndExpression |
	//	AlgorithmExpression;
	public MscriptGrammarAccess.PrimaryExpressionElements getPrimaryExpressionAccess() {
		return gaMscript.getPrimaryExpressionAccess();
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//Literal:
	//	NumericLiteral | BooleanLiteral | StringLiteral;
	public MscriptGrammarAccess.LiteralElements getLiteralAccess() {
		return gaMscript.getLiteralAccess();
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//NumericLiteral:
	//	IntegerLiteral | RealLiteral;
	public MscriptGrammarAccess.NumericLiteralElements getNumericLiteralAccess() {
		return gaMscript.getNumericLiteralAccess();
	}
	
	public ParserRule getNumericLiteralRule() {
		return getNumericLiteralAccess().getRule();
	}

	//RealLiteral:
	//	data=RealData unit=Unit;
	public MscriptGrammarAccess.RealLiteralElements getRealLiteralAccess() {
		return gaMscript.getRealLiteralAccess();
	}
	
	public ParserRule getRealLiteralRule() {
		return getRealLiteralAccess().getRule();
	}

	//RealData hidden():
	//	ValidInt ("." ValidInt (IJ | EXPIJ | E ("+" | "-") ValidInt IJ?)? | (EXPIJ | E ("+" | "-") ValidInt IJ?));
	public MscriptGrammarAccess.RealDataElements getRealDataAccess() {
		return gaMscript.getRealDataAccess();
	}
	
	public ParserRule getRealDataRule() {
		return getRealDataAccess().getRule();
	}

	//IntegerLiteral:
	//	data=IntegerData unit=Unit;
	public MscriptGrammarAccess.IntegerLiteralElements getIntegerLiteralAccess() {
		return gaMscript.getIntegerLiteralAccess();
	}
	
	public ParserRule getIntegerLiteralRule() {
		return getIntegerLiteralAccess().getRule();
	}

	//IntegerData hidden():
	//	ValidInt IJ?;
	public MscriptGrammarAccess.IntegerDataElements getIntegerDataAccess() {
		return gaMscript.getIntegerDataAccess();
	}
	
	public ParserRule getIntegerDataRule() {
		return getIntegerDataAccess().getRule();
	}

	//BooleanLiteral:
	//	{BooleanLiteral} (true?="true" | "false");
	public MscriptGrammarAccess.BooleanLiteralElements getBooleanLiteralAccess() {
		return gaMscript.getBooleanLiteralAccess();
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//StringLiteral:
	//	text=STRING;
	public MscriptGrammarAccess.StringLiteralElements getStringLiteralAccess() {
		return gaMscript.getStringLiteralAccess();
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//TemplateExpression hidden():
	//	{TemplateExpression} "\"\"\"" segments+=ConstantTemplateSegment? (segments+=ExpressionTemplateSegment
	//	segments+=ConstantTemplateSegment?)* "\"\"\"";
	public MscriptGrammarAccess.TemplateExpressionElements getTemplateExpressionAccess() {
		return gaMscript.getTemplateExpressionAccess();
	}
	
	public ParserRule getTemplateExpressionRule() {
		return getTemplateExpressionAccess().getRule();
	}

	//ConstantTemplateSegment:
	//	text=ConstantString;
	public MscriptGrammarAccess.ConstantTemplateSegmentElements getConstantTemplateSegmentAccess() {
		return gaMscript.getConstantTemplateSegmentAccess();
	}
	
	public ParserRule getConstantTemplateSegmentRule() {
		return getConstantTemplateSegmentAccess().getRule();
	}

	//ConstantString:
	//	(CONSTANT_STRING | ID | ANY_OTHER)+;
	public MscriptGrammarAccess.ConstantStringElements getConstantStringAccess() {
		return gaMscript.getConstantStringAccess();
	}
	
	public ParserRule getConstantStringRule() {
		return getConstantStringAccess().getRule();
	}

	//ExpressionTemplateSegment hidden(WS, ML_COMMENT):
	//	"«" expression=Expression "»";
	public MscriptGrammarAccess.ExpressionTemplateSegmentElements getExpressionTemplateSegmentAccess() {
		return gaMscript.getExpressionTemplateSegmentAccess();
	}
	
	public ParserRule getExpressionTemplateSegmentRule() {
		return getExpressionTemplateSegmentAccess().getRule();
	}

	//FeatureCall returns Expression:
	//	VariableReference | FunctionCall;
	public MscriptGrammarAccess.FeatureCallElements getFeatureCallAccess() {
		return gaMscript.getFeatureCallAccess();
	}
	
	public ParserRule getFeatureCallRule() {
		return getFeatureCallAccess().getRule();
	}

	//VariableReference returns Expression:
	//	{VariableReference} feature=[CallableElement|ValidID] ("{" stepExpression=StepExpression "}")?;
	public MscriptGrammarAccess.VariableReferenceElements getVariableReferenceAccess() {
		return gaMscript.getVariableReferenceAccess();
	}
	
	public ParserRule getVariableReferenceRule() {
		return getVariableReferenceAccess().getRule();
	}

	//FunctionCall returns Expression:
	//	{FunctionCall} feature=[CallableElement|ValidID] "(" (arguments+=Expression ("," arguments+=Expression)*)? ")";
	public MscriptGrammarAccess.FunctionCallElements getFunctionCallAccess() {
		return gaMscript.getFunctionCallAccess();
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}

	//QualifiedFeatureCall returns Expression:
	//	QualifiedVariableReference | QualifiedFunctionCall;
	public MscriptGrammarAccess.QualifiedFeatureCallElements getQualifiedFeatureCallAccess() {
		return gaMscript.getQualifiedFeatureCallAccess();
	}
	
	public ParserRule getQualifiedFeatureCallRule() {
		return getQualifiedFeatureCallAccess().getRule();
	}

	//QualifiedVariableReference returns Expression:
	//	{VariableReference} "." feature=[CallableElement|QualifiedName];
	public MscriptGrammarAccess.QualifiedVariableReferenceElements getQualifiedVariableReferenceAccess() {
		return gaMscript.getQualifiedVariableReferenceAccess();
	}
	
	public ParserRule getQualifiedVariableReferenceRule() {
		return getQualifiedVariableReferenceAccess().getRule();
	}

	//QualifiedFunctionCall returns Expression:
	//	{FunctionCall} "." feature=[CallableElement|QualifiedName] "(" (arguments+=Expression ("," arguments+=Expression)*)?
	//	")";
	public MscriptGrammarAccess.QualifiedFunctionCallElements getQualifiedFunctionCallAccess() {
		return gaMscript.getQualifiedFunctionCallAccess();
	}
	
	public ParserRule getQualifiedFunctionCallRule() {
		return getQualifiedFunctionCallAccess().getRule();
	}

	//StepExpression:
	//	RangeStepExpression;
	public MscriptGrammarAccess.StepExpressionElements getStepExpressionAccess() {
		return gaMscript.getStepExpressionAccess();
	}
	
	public ParserRule getStepExpressionRule() {
		return getStepExpressionAccess().getRule();
	}

	//RangeStepExpression returns StepExpression:
	//	AdditiveStepExpression ({RangeStepExpression.start=current} ".." end=AdditiveStepExpression)?;
	public MscriptGrammarAccess.RangeStepExpressionElements getRangeStepExpressionAccess() {
		return gaMscript.getRangeStepExpressionAccess();
	}
	
	public ParserRule getRangeStepExpressionRule() {
		return getRangeStepExpressionAccess().getRule();
	}

	//AdditiveStepExpression returns StepExpression:
	//	NegateStepExpression ({AdditiveStepExpression.leftOperand=current} operator=AdditiveOperator
	//	rightOperand=NegateStepExpression)*;
	public MscriptGrammarAccess.AdditiveStepExpressionElements getAdditiveStepExpressionAccess() {
		return gaMscript.getAdditiveStepExpressionAccess();
	}
	
	public ParserRule getAdditiveStepExpressionRule() {
		return getAdditiveStepExpressionAccess().getRule();
	}

	//NegateStepExpression returns StepExpression:
	//	PrimitiveStepExpression | {NegateStepExpression} "-" operand=PrimitiveStepExpression;
	public MscriptGrammarAccess.NegateStepExpressionElements getNegateStepExpressionAccess() {
		return gaMscript.getNegateStepExpressionAccess();
	}
	
	public ParserRule getNegateStepExpressionRule() {
		return getNegateStepExpressionAccess().getRule();
	}

	//PrimitiveStepExpression returns StepExpression:
	//	StepLiteral | StepN;
	public MscriptGrammarAccess.PrimitiveStepExpressionElements getPrimitiveStepExpressionAccess() {
		return gaMscript.getPrimitiveStepExpressionAccess();
	}
	
	public ParserRule getPrimitiveStepExpressionRule() {
		return getPrimitiveStepExpressionAccess().getRule();
	}

	//StepLiteral:
	//	value=ValidInt;
	public MscriptGrammarAccess.StepLiteralElements getStepLiteralAccess() {
		return gaMscript.getStepLiteralAccess();
	}
	
	public ParserRule getStepLiteralRule() {
		return getStepLiteralAccess().getRule();
	}

	//StepN:
	//	{StepN} N;
	public MscriptGrammarAccess.StepNElements getStepNAccess() {
		return gaMscript.getStepNAccess();
	}
	
	public ParserRule getStepNRule() {
		return getStepNAccess().getRule();
	}

	//ArrayConstructionOperator:
	//	"{" expressions+=Expression ("," expressions+=Expression)* "}";
	public MscriptGrammarAccess.ArrayConstructionOperatorElements getArrayConstructionOperatorAccess() {
		return gaMscript.getArrayConstructionOperatorAccess();
	}
	
	public ParserRule getArrayConstructionOperatorRule() {
		return getArrayConstructionOperatorAccess().getRule();
	}

	//ArrayConcatenationOperator:
	//	"[" rows+=ExpressionList (";" rows+=ExpressionList)* "]";
	public MscriptGrammarAccess.ArrayConcatenationOperatorElements getArrayConcatenationOperatorAccess() {
		return gaMscript.getArrayConcatenationOperatorAccess();
	}
	
	public ParserRule getArrayConcatenationOperatorRule() {
		return getArrayConcatenationOperatorAccess().getRule();
	}

	//ExpressionList:
	//	expressions+=Expression ("," expressions+=Expression)*;
	public MscriptGrammarAccess.ExpressionListElements getExpressionListAccess() {
		return gaMscript.getExpressionListAccess();
	}
	
	public ParserRule getExpressionListRule() {
		return getExpressionListAccess().getRule();
	}

	//StructConstructionOperator:
	//	label=ValidID? "{" members+=StructConstructionMember ("," members+=StructConstructionMember)* "}";
	public MscriptGrammarAccess.StructConstructionOperatorElements getStructConstructionOperatorAccess() {
		return gaMscript.getStructConstructionOperatorAccess();
	}
	
	public ParserRule getStructConstructionOperatorRule() {
		return getStructConstructionOperatorAccess().getRule();
	}

	//StructConstructionMember:
	//	name=ValidID "=" value=Expression;
	public MscriptGrammarAccess.StructConstructionMemberElements getStructConstructionMemberAccess() {
		return gaMscript.getStructConstructionMemberAccess();
	}
	
	public ParserRule getStructConstructionMemberRule() {
		return getStructConstructionMemberAccess().getRule();
	}

	//UnionConstructionOperator:
	//	"new" typeSpecifier=UnionTypeSpecifier "with" member=[CompositeTypeMember|ValidID] "=" value=Expression;
	public MscriptGrammarAccess.UnionConstructionOperatorElements getUnionConstructionOperatorAccess() {
		return gaMscript.getUnionConstructionOperatorAccess();
	}
	
	public ParserRule getUnionConstructionOperatorRule() {
		return getUnionConstructionOperatorAccess().getRule();
	}

	//UnionTypeSpecifier returns TypeSpecifier:
	//	AnonymousUnionTypeSpecifier | DeclaredTypeSpecifier;
	public MscriptGrammarAccess.UnionTypeSpecifierElements getUnionTypeSpecifierAccess() {
		return gaMscript.getUnionTypeSpecifierAccess();
	}
	
	public ParserRule getUnionTypeSpecifierRule() {
		return getUnionTypeSpecifierAccess().getRule();
	}

	//AnonymousUnionTypeSpecifier returns AnonymousTypeSpecifier:
	//	type=UnionType;
	public MscriptGrammarAccess.AnonymousUnionTypeSpecifierElements getAnonymousUnionTypeSpecifierAccess() {
		return gaMscript.getAnonymousUnionTypeSpecifierAccess();
	}
	
	public ParserRule getAnonymousUnionTypeSpecifierRule() {
		return getAnonymousUnionTypeSpecifierAccess().getRule();
	}

	//UnitConstructionOperator:
	//	"unitlit" unit=ExplicitUnit;
	public MscriptGrammarAccess.UnitConstructionOperatorElements getUnitConstructionOperatorAccess() {
		return gaMscript.getUnitConstructionOperatorAccess();
	}
	
	public ParserRule getUnitConstructionOperatorRule() {
		return getUnitConstructionOperatorAccess().getRule();
	}

	//ParenthesizedExpression:
	//	"(" expressions+=Expression ("," expressions+=Expression)* ")";
	public MscriptGrammarAccess.ParenthesizedExpressionElements getParenthesizedExpressionAccess() {
		return gaMscript.getParenthesizedExpressionAccess();
	}
	
	public ParserRule getParenthesizedExpressionRule() {
		return getParenthesizedExpressionAccess().getRule();
	}

	//EndExpression:
	//	{EndExpression} "end";
	public MscriptGrammarAccess.EndExpressionElements getEndExpressionAccess() {
		return gaMscript.getEndExpressionAccess();
	}
	
	public ParserRule getEndExpressionRule() {
		return getEndExpressionAccess().getRule();
	}

	//AlgorithmExpression returns Expression:
	//	{AlgorithmExpression} "algorithm" body=CompoundStatement;
	public MscriptGrammarAccess.AlgorithmExpressionElements getAlgorithmExpressionAccess() {
		return gaMscript.getAlgorithmExpressionAccess();
	}
	
	public ParserRule getAlgorithmExpressionRule() {
		return getAlgorithmExpressionAccess().getRule();
	}

	//CompoundStatement:
	//	{CompoundStatement} "{" statements+=Statement* "}";
	public MscriptGrammarAccess.CompoundStatementElements getCompoundStatementAccess() {
		return gaMscript.getCompoundStatementAccess();
	}
	
	public ParserRule getCompoundStatementRule() {
		return getCompoundStatementAccess().getRule();
	}

	//Statement:
	//	CompoundStatement | Assignment | LocalVariableDeclaration | IfStatement | WhileStatement | DoWhileStatement |
	//	ForStatement | ContinueStatement | BreakStatement | ReturnStatement;
	public MscriptGrammarAccess.StatementElements getStatementAccess() {
		return gaMscript.getStatementAccess();
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//Assignment:
	//	target=AssignableMemberFeatureCall "=" assignedExpression=Expression ";";
	public MscriptGrammarAccess.AssignmentElements getAssignmentAccess() {
		return gaMscript.getAssignmentAccess();
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//AssignableMemberFeatureCall returns Expression:
	//	AssignablePrimaryExpression ({ArrayElementAccess.array=current} "[" subscripts+=ArraySubscript (","
	//	subscripts+=ArraySubscript)* "]" | {MemberVariableAccess.target=current} "." memberVariable=ValidID)*;
	public MscriptGrammarAccess.AssignableMemberFeatureCallElements getAssignableMemberFeatureCallAccess() {
		return gaMscript.getAssignableMemberFeatureCallAccess();
	}
	
	public ParserRule getAssignableMemberFeatureCallRule() {
		return getAssignableMemberFeatureCallAccess().getRule();
	}

	//AssignablePrimaryExpression returns Expression:
	//	VariableReference | ParenthesizedExpression;
	public MscriptGrammarAccess.AssignablePrimaryExpressionElements getAssignablePrimaryExpressionAccess() {
		return gaMscript.getAssignablePrimaryExpressionAccess();
	}
	
	public ParserRule getAssignablePrimaryExpressionRule() {
		return getAssignablePrimaryExpressionAccess().getRule();
	}

	//LocalVariableDeclaration:
	//	"var" name=ValidID "=" initializer=Expression ";";
	public MscriptGrammarAccess.LocalVariableDeclarationElements getLocalVariableDeclarationAccess() {
		return gaMscript.getLocalVariableDeclarationAccess();
	}
	
	public ParserRule getLocalVariableDeclarationRule() {
		return getLocalVariableDeclarationAccess().getRule();
	}

	//IfStatement:
	//	"if" "(" condition=Expression ")" thenStatement=Statement ("else" elseStatement=Statement)?;
	public MscriptGrammarAccess.IfStatementElements getIfStatementAccess() {
		return gaMscript.getIfStatementAccess();
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}

	//WhileStatement:
	//	"while" "(" condition=Expression ")" body=Statement;
	public MscriptGrammarAccess.WhileStatementElements getWhileStatementAccess() {
		return gaMscript.getWhileStatementAccess();
	}
	
	public ParserRule getWhileStatementRule() {
		return getWhileStatementAccess().getRule();
	}

	//ForStatement:
	//	"for" "(" iterationVariable=IterationVariableDeclaration "in" collectionExpression=Expression ")" body=Statement;
	public MscriptGrammarAccess.ForStatementElements getForStatementAccess() {
		return gaMscript.getForStatementAccess();
	}
	
	public ParserRule getForStatementRule() {
		return getForStatementAccess().getRule();
	}

	//DoWhileStatement:
	//	"do" body=Statement "while" "(" condition=Expression ")" ";";
	public MscriptGrammarAccess.DoWhileStatementElements getDoWhileStatementAccess() {
		return gaMscript.getDoWhileStatementAccess();
	}
	
	public ParserRule getDoWhileStatementRule() {
		return getDoWhileStatementAccess().getRule();
	}

	//ContinueStatement:
	//	{ContinueStatement} "continue" ";";
	public MscriptGrammarAccess.ContinueStatementElements getContinueStatementAccess() {
		return gaMscript.getContinueStatementAccess();
	}
	
	public ParserRule getContinueStatementRule() {
		return getContinueStatementAccess().getRule();
	}

	//BreakStatement:
	//	{BreakStatement} "break" ";";
	public MscriptGrammarAccess.BreakStatementElements getBreakStatementAccess() {
		return gaMscript.getBreakStatementAccess();
	}
	
	public ParserRule getBreakStatementRule() {
		return getBreakStatementAccess().getRule();
	}

	//ReturnStatement:
	//	"return" expression=Expression ";";
	public MscriptGrammarAccess.ReturnStatementElements getReturnStatementAccess() {
		return gaMscript.getReturnStatementAccess();
	}
	
	public ParserRule getReturnStatementRule() {
		return getReturnStatementAccess().getRule();
	}

	/// *
	// * Unit expressions
	// * / Unit:
	//	{Unit} ("(" ")" | "(" numerator=UnitNumerator ("/" denominator=UnitDenominator)? ")" |
	//	numerator=ImplicitUnitNumerator);
	public MscriptGrammarAccess.UnitElements getUnitAccess() {
		return gaMscript.getUnitAccess();
	}
	
	public ParserRule getUnitRule() {
		return getUnitAccess().getRule();
	}

	//ExplicitUnit returns Unit:
	//	"(" numerator=UnitNumerator ("/" denominator=UnitDenominator)? ")";
	public MscriptGrammarAccess.ExplicitUnitElements getExplicitUnitAccess() {
		return gaMscript.getExplicitUnitAccess();
	}
	
	public ParserRule getExplicitUnitRule() {
		return getExplicitUnitAccess().getRule();
	}

	//UnitNumerator:
	//	{UnitNumerator} ONE | factors+=UnitFactor ("*" factors+=UnitFactor)*;
	public MscriptGrammarAccess.UnitNumeratorElements getUnitNumeratorAccess() {
		return gaMscript.getUnitNumeratorAccess();
	}
	
	public ParserRule getUnitNumeratorRule() {
		return getUnitNumeratorAccess().getRule();
	}

	//ImplicitUnitNumerator returns UnitNumerator:
	//	{UnitNumerator};
	public MscriptGrammarAccess.ImplicitUnitNumeratorElements getImplicitUnitNumeratorAccess() {
		return gaMscript.getImplicitUnitNumeratorAccess();
	}
	
	public ParserRule getImplicitUnitNumeratorRule() {
		return getImplicitUnitNumeratorAccess().getRule();
	}

	//UnitDenominator:
	//	factors+=UnitFactor | "(" factors+=UnitFactor ("*" factors+=UnitFactor)* ")";
	public MscriptGrammarAccess.UnitDenominatorElements getUnitDenominatorAccess() {
		return gaMscript.getUnitDenominatorAccess();
	}
	
	public ParserRule getUnitDenominatorRule() {
		return getUnitDenominatorAccess().getRule();
	}

	//UnitFactor:
	//	symbol=ValidID ("^" exponent=UnitExponent)?;
	public MscriptGrammarAccess.UnitFactorElements getUnitFactorAccess() {
		return gaMscript.getUnitFactorAccess();
	}
	
	public ParserRule getUnitFactorRule() {
		return getUnitFactorAccess().getRule();
	}

	//UnitExponent returns ecore::EInt:
	//	"-"? ValidInt;
	public MscriptGrammarAccess.UnitExponentElements getUnitExponentAccess() {
		return gaMscript.getUnitExponentAccess();
	}
	
	public ParserRule getUnitExponentRule() {
		return getUnitExponentAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public MscriptGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaMscript.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//ValidInt returns ecore::EInt:
	//	ONE | INT;
	public MscriptGrammarAccess.ValidIntElements getValidIntAccess() {
		return gaMscript.getValidIntAccess();
	}
	
	public ParserRule getValidIntRule() {
		return getValidIntAccess().getRule();
	}

	//ValidID:
	//	N | IJ | E | EXP | EXPIJ | ID;
	public MscriptGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaMscript.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	/// *
	// * Terminals
	// * / terminal N:
	//	"n";
	public TerminalRule getNRule() {
		return gaMscript.getNRule();
	} 

	//terminal IJ:
	//	"i" | "j";
	public TerminalRule getIJRule() {
		return gaMscript.getIJRule();
	} 

	//terminal E:
	//	"e" | "E";
	public TerminalRule getERule() {
		return gaMscript.getERule();
	} 

	//terminal EXP:
	//	E "0".."9"+;
	public TerminalRule getEXPRule() {
		return gaMscript.getEXPRule();
	} 

	//terminal EXPIJ:
	//	EXP IJ;
	public TerminalRule getEXPIJRule() {
		return gaMscript.getEXPIJRule();
	} 

	//terminal ONE:
	//	"1";
	public TerminalRule getONERule() {
		return gaMscript.getONERule();
	} 

	//terminal INT:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaMscript.getINTRule();
	} 

	//terminal ID:
	//	"_"? ("a".."z" | "A".."Z") ("0".."9" | "_" | "a".."z" | "A".."Z")*;
	public TerminalRule getIDRule() {
		return gaMscript.getIDRule();
	} 

	//terminal STRING:
	//	"\"" (!("\\" | "\"") | "\\" ("\'" | "\"" | "?" | "\\" | "a" | "b" | "f" | "n" | "r" | "t" | "v"))* "\"";
	public TerminalRule getSTRINGRule() {
		return gaMscript.getSTRINGRule();
	} 

	//terminal CONSTANT_STRING:
	//	"­";
	public TerminalRule getCONSTANT_STRINGRule() {
		return gaMscript.getCONSTANT_STRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaMscript.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaMscript.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaMscript.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaMscript.getANY_OTHERRule();
	} 
}
