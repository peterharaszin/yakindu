/*
* generated by Xtext
*/

package org.eclipselabs.damos.dconfig.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipselabs.damos.mscript.services.MscriptGrammarAccess;

@Singleton
public class DconfigGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Configuration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPackageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPackageQualifiedNameParserRuleCall_1_0 = (RuleCall)cPackageAssignment_1.eContents().get(0);
		private final Assignment cImportDeclarationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportDeclarationsImportDeclarationParserRuleCall_2_0 = (RuleCall)cImportDeclarationsAssignment_2.eContents().get(0);
		private final Keyword cConfigurationKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameValidIDParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cExtendsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cBaseConfigurationAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cBaseConfigurationConfigurationCrossReference_5_1_0 = (CrossReference)cBaseConfigurationAssignment_5_1.eContents().get(0);
		private final RuleCall cBaseConfigurationConfigurationQualifiedNameParserRuleCall_5_1_0_1 = (RuleCall)cBaseConfigurationConfigurationCrossReference_5_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cRunnerSpecifierAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cRunnerSpecifierRunnerSpecifierParserRuleCall_7_0 = (RuleCall)cRunnerSpecifierAssignment_7.eContents().get(0);
		private final Alternatives cAlternatives_8 = (Alternatives)cGroup.eContents().get(8);
		private final Group cGroup_8_0 = (Group)cAlternatives_8.eContents().get(0);
		private final Assignment cPropertiesAssignment_8_0_0 = (Assignment)cGroup_8_0.eContents().get(0);
		private final RuleCall cPropertiesDeclaredPropertyParserRuleCall_8_0_0_0 = (RuleCall)cPropertiesAssignment_8_0_0.eContents().get(0);
		private final Assignment cRootSystemConfigurationAssignment_8_0_1 = (Assignment)cGroup_8_0.eContents().get(1);
		private final RuleCall cRootSystemConfigurationRootSystemConfigurationParserRuleCall_8_0_1_0 = (RuleCall)cRootSystemConfigurationAssignment_8_0_1.eContents().get(0);
		private final Group cGroup_8_1 = (Group)cAlternatives_8.eContents().get(1);
		private final Assignment cRootSystemConfigurationAssignment_8_1_0 = (Assignment)cGroup_8_1.eContents().get(0);
		private final RuleCall cRootSystemConfigurationRootSystemConfigurationParserRuleCall_8_1_0_0 = (RuleCall)cRootSystemConfigurationAssignment_8_1_0.eContents().get(0);
		private final Assignment cPropertiesAssignment_8_1_1 = (Assignment)cGroup_8_1.eContents().get(1);
		private final RuleCall cPropertiesDeclaredPropertyParserRuleCall_8_1_1_0 = (RuleCall)cPropertiesAssignment_8_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Configuration:
		//	"package" package=QualifiedName importDeclarations+=ImportDeclaration* "configuration" name=ValidID ("extends"
		//	baseConfiguration=[Configuration|QualifiedName])? "{" runnerSpecifier=RunnerSpecifier? (properties+=DeclaredProperty+
		//	rootSystemConfiguration=RootSystemConfiguration? | rootSystemConfiguration=RootSystemConfiguration
		//	properties+=DeclaredProperty*)? "}";
		public ParserRule getRule() { return rule; }

		//"package" package=QualifiedName importDeclarations+=ImportDeclaration* "configuration" name=ValidID ("extends"
		//baseConfiguration=[Configuration|QualifiedName])? "{" runnerSpecifier=RunnerSpecifier? (properties+=DeclaredProperty+
		//rootSystemConfiguration=RootSystemConfiguration? | rootSystemConfiguration=RootSystemConfiguration
		//properties+=DeclaredProperty*)? "}"
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//package=QualifiedName
		public Assignment getPackageAssignment_1() { return cPackageAssignment_1; }

		//QualifiedName
		public RuleCall getPackageQualifiedNameParserRuleCall_1_0() { return cPackageQualifiedNameParserRuleCall_1_0; }

		//importDeclarations+=ImportDeclaration*
		public Assignment getImportDeclarationsAssignment_2() { return cImportDeclarationsAssignment_2; }

		//ImportDeclaration
		public RuleCall getImportDeclarationsImportDeclarationParserRuleCall_2_0() { return cImportDeclarationsImportDeclarationParserRuleCall_2_0; }

		//"configuration"
		public Keyword getConfigurationKeyword_3() { return cConfigurationKeyword_3; }

		//name=ValidID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_4_0() { return cNameValidIDParserRuleCall_4_0; }

		//("extends" baseConfiguration=[Configuration|QualifiedName])?
		public Group getGroup_5() { return cGroup_5; }

		//"extends"
		public Keyword getExtendsKeyword_5_0() { return cExtendsKeyword_5_0; }

		//baseConfiguration=[Configuration|QualifiedName]
		public Assignment getBaseConfigurationAssignment_5_1() { return cBaseConfigurationAssignment_5_1; }

		//[Configuration|QualifiedName]
		public CrossReference getBaseConfigurationConfigurationCrossReference_5_1_0() { return cBaseConfigurationConfigurationCrossReference_5_1_0; }

		//QualifiedName
		public RuleCall getBaseConfigurationConfigurationQualifiedNameParserRuleCall_5_1_0_1() { return cBaseConfigurationConfigurationQualifiedNameParserRuleCall_5_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//runnerSpecifier=RunnerSpecifier?
		public Assignment getRunnerSpecifierAssignment_7() { return cRunnerSpecifierAssignment_7; }

		//RunnerSpecifier
		public RuleCall getRunnerSpecifierRunnerSpecifierParserRuleCall_7_0() { return cRunnerSpecifierRunnerSpecifierParserRuleCall_7_0; }

		//(properties+=DeclaredProperty+ rootSystemConfiguration=RootSystemConfiguration? |
		//rootSystemConfiguration=RootSystemConfiguration properties+=DeclaredProperty*)?
		public Alternatives getAlternatives_8() { return cAlternatives_8; }

		//properties+=DeclaredProperty+ rootSystemConfiguration=RootSystemConfiguration?
		public Group getGroup_8_0() { return cGroup_8_0; }

		//properties+=DeclaredProperty+
		public Assignment getPropertiesAssignment_8_0_0() { return cPropertiesAssignment_8_0_0; }

		//DeclaredProperty
		public RuleCall getPropertiesDeclaredPropertyParserRuleCall_8_0_0_0() { return cPropertiesDeclaredPropertyParserRuleCall_8_0_0_0; }

		//rootSystemConfiguration=RootSystemConfiguration?
		public Assignment getRootSystemConfigurationAssignment_8_0_1() { return cRootSystemConfigurationAssignment_8_0_1; }

		//RootSystemConfiguration
		public RuleCall getRootSystemConfigurationRootSystemConfigurationParserRuleCall_8_0_1_0() { return cRootSystemConfigurationRootSystemConfigurationParserRuleCall_8_0_1_0; }

		//rootSystemConfiguration=RootSystemConfiguration properties+=DeclaredProperty*
		public Group getGroup_8_1() { return cGroup_8_1; }

		//rootSystemConfiguration=RootSystemConfiguration
		public Assignment getRootSystemConfigurationAssignment_8_1_0() { return cRootSystemConfigurationAssignment_8_1_0; }

		//RootSystemConfiguration
		public RuleCall getRootSystemConfigurationRootSystemConfigurationParserRuleCall_8_1_0_0() { return cRootSystemConfigurationRootSystemConfigurationParserRuleCall_8_1_0_0; }

		//properties+=DeclaredProperty*
		public Assignment getPropertiesAssignment_8_1_1() { return cPropertiesAssignment_8_1_1; }

		//DeclaredProperty
		public RuleCall getPropertiesDeclaredPropertyParserRuleCall_8_1_1_0() { return cPropertiesDeclaredPropertyParserRuleCall_8_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class ImportDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//ImportDeclaration:
		//	"import" importedNamespace=QualifiedNameWithWildcard;
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}

	public class RunnerSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RunnerSpecifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAutoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAutoAutoKeyword_0_0 = (Keyword)cAutoAssignment_0.eContents().get(0);
		private final Keyword cRunKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRunnerDeclarationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRunnerDeclarationRunnerDeclarationCrossReference_2_0 = (CrossReference)cRunnerDeclarationAssignment_2.eContents().get(0);
		private final RuleCall cRunnerDeclarationRunnerDeclarationQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cRunnerDeclarationRunnerDeclarationCrossReference_2_0.eContents().get(1);
		
		//RunnerSpecifier:
		//	auto?="auto"? "run" runnerDeclaration=[RunnerDeclaration|QualifiedName];
		public ParserRule getRule() { return rule; }

		//auto?="auto"? "run" runnerDeclaration=[RunnerDeclaration|QualifiedName]
		public Group getGroup() { return cGroup; }

		//auto?="auto"?
		public Assignment getAutoAssignment_0() { return cAutoAssignment_0; }

		//"auto"
		public Keyword getAutoAutoKeyword_0_0() { return cAutoAutoKeyword_0_0; }

		//"run"
		public Keyword getRunKeyword_1() { return cRunKeyword_1; }

		//runnerDeclaration=[RunnerDeclaration|QualifiedName]
		public Assignment getRunnerDeclarationAssignment_2() { return cRunnerDeclarationAssignment_2; }

		//[RunnerDeclaration|QualifiedName]
		public CrossReference getRunnerDeclarationRunnerDeclarationCrossReference_2_0() { return cRunnerDeclarationRunnerDeclarationCrossReference_2_0; }

		//QualifiedName
		public RuleCall getRunnerDeclarationRunnerDeclarationQualifiedNameParserRuleCall_2_0_1() { return cRunnerDeclarationRunnerDeclarationQualifiedNameParserRuleCall_2_0_1; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDeclaredPropertyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComputationPropertyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Property:
		//	DeclaredProperty | ComputationProperty;
		public ParserRule getRule() { return rule; }

		//DeclaredProperty | ComputationProperty
		public Alternatives getAlternatives() { return cAlternatives; }

		//DeclaredProperty
		public RuleCall getDeclaredPropertyParserRuleCall_0() { return cDeclaredPropertyParserRuleCall_0; }

		//ComputationProperty
		public RuleCall getComputationPropertyParserRuleCall_1() { return cComputationPropertyParserRuleCall_1; }
	}

	public class DeclaredPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeclaredProperty");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimplePropertyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSelectionPropertyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DeclaredProperty:
		//	SimpleProperty | SelectionProperty;
		public ParserRule getRule() { return rule; }

		//SimpleProperty | SelectionProperty
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleProperty
		public RuleCall getSimplePropertyParserRuleCall_0() { return cSimplePropertyParserRuleCall_0; }

		//SelectionProperty
		public RuleCall getSelectionPropertyParserRuleCall_1() { return cSelectionPropertyParserRuleCall_1; }
	}

	public class SimplePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Assignment cDeclarationAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final CrossReference cDeclarationSimplePropertyDeclarationCrossReference_0_0_0_0 = (CrossReference)cDeclarationAssignment_0_0_0.eContents().get(0);
		private final RuleCall cDeclarationSimplePropertyDeclarationQualifiedNameWithoutIJParserRuleCall_0_0_0_0_1 = (RuleCall)cDeclarationSimplePropertyDeclarationCrossReference_0_0_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Assignment cValueAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_0_0_2_0 = (RuleCall)cValueAssignment_0_0_2.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cUnsetKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cDeclarationAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final CrossReference cDeclarationSimplePropertyDeclarationCrossReference_0_1_1_0 = (CrossReference)cDeclarationAssignment_0_1_1.eContents().get(0);
		private final RuleCall cDeclarationSimplePropertyDeclarationQualifiedNameParserRuleCall_0_1_1_0_1 = (RuleCall)cDeclarationSimplePropertyDeclarationCrossReference_0_1_1_0.eContents().get(1);
		private final Assignment cPropagateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cPropagateTildeGreaterThanSignKeyword_1_0 = (Keyword)cPropagateAssignment_1.eContents().get(0);
		
		//SimpleProperty:
		//	(declaration=[SimplePropertyDeclaration|QualifiedNameWithoutIJ] "=" value=Expression | "unset"
		//	declaration=[SimplePropertyDeclaration|QualifiedName]) propagate?="~>"?;
		public ParserRule getRule() { return rule; }

		//(declaration=[SimplePropertyDeclaration|QualifiedNameWithoutIJ] "=" value=Expression | "unset"
		//declaration=[SimplePropertyDeclaration|QualifiedName]) propagate?="~>"?
		public Group getGroup() { return cGroup; }

		//declaration=[SimplePropertyDeclaration|QualifiedNameWithoutIJ] "=" value=Expression | "unset"
		//declaration=[SimplePropertyDeclaration|QualifiedName]
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//declaration=[SimplePropertyDeclaration|QualifiedNameWithoutIJ] "=" value=Expression
		public Group getGroup_0_0() { return cGroup_0_0; }

		//declaration=[SimplePropertyDeclaration|QualifiedNameWithoutIJ]
		public Assignment getDeclarationAssignment_0_0_0() { return cDeclarationAssignment_0_0_0; }

		//[SimplePropertyDeclaration|QualifiedNameWithoutIJ]
		public CrossReference getDeclarationSimplePropertyDeclarationCrossReference_0_0_0_0() { return cDeclarationSimplePropertyDeclarationCrossReference_0_0_0_0; }

		//QualifiedNameWithoutIJ
		public RuleCall getDeclarationSimplePropertyDeclarationQualifiedNameWithoutIJParserRuleCall_0_0_0_0_1() { return cDeclarationSimplePropertyDeclarationQualifiedNameWithoutIJParserRuleCall_0_0_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_0_0_1() { return cEqualsSignKeyword_0_0_1; }

		//value=Expression
		public Assignment getValueAssignment_0_0_2() { return cValueAssignment_0_0_2; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_0_0_2_0() { return cValueExpressionParserRuleCall_0_0_2_0; }

		//"unset" declaration=[SimplePropertyDeclaration|QualifiedName]
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"unset"
		public Keyword getUnsetKeyword_0_1_0() { return cUnsetKeyword_0_1_0; }

		//declaration=[SimplePropertyDeclaration|QualifiedName]
		public Assignment getDeclarationAssignment_0_1_1() { return cDeclarationAssignment_0_1_1; }

		//[SimplePropertyDeclaration|QualifiedName]
		public CrossReference getDeclarationSimplePropertyDeclarationCrossReference_0_1_1_0() { return cDeclarationSimplePropertyDeclarationCrossReference_0_1_1_0; }

		//QualifiedName
		public RuleCall getDeclarationSimplePropertyDeclarationQualifiedNameParserRuleCall_0_1_1_0_1() { return cDeclarationSimplePropertyDeclarationQualifiedNameParserRuleCall_0_1_1_0_1; }

		//propagate?="~>"?
		public Assignment getPropagateAssignment_1() { return cPropagateAssignment_1; }

		//"~>"
		public Keyword getPropagateTildeGreaterThanSignKeyword_1_0() { return cPropagateTildeGreaterThanSignKeyword_1_0; }
	}

	public class SelectionPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectionProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDeclarationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDeclarationSelectionPropertyDeclarationCrossReference_1_0 = (CrossReference)cDeclarationAssignment_1.eContents().get(0);
		private final RuleCall cDeclarationSelectionPropertyDeclarationQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cDeclarationSelectionPropertyDeclarationCrossReference_1_0.eContents().get(1);
		private final Assignment cSelectionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSelectionSelectionPropertyOptionCrossReference_2_0 = (CrossReference)cSelectionAssignment_2.eContents().get(0);
		private final RuleCall cSelectionSelectionPropertyOptionQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cSelectionSelectionPropertyOptionCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_3_1_0 = (RuleCall)cNameAssignment_3_1.eContents().get(0);
		private final Assignment cPropagateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cPropagateTildeGreaterThanSignKeyword_4_0 = (Keyword)cPropagateAssignment_4.eContents().get(0);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodySelectionPropertyBodyParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		
		//SelectionProperty:
		//	"select" declaration=[SelectionPropertyDeclaration|QualifiedName] selection=[SelectionPropertyOption|QualifiedName]
		//	("as" name=ValidID)? propagate?="~>"? body=SelectionPropertyBody?;
		public ParserRule getRule() { return rule; }

		//"select" declaration=[SelectionPropertyDeclaration|QualifiedName] selection=[SelectionPropertyOption|QualifiedName]
		//("as" name=ValidID)? propagate?="~>"? body=SelectionPropertyBody?
		public Group getGroup() { return cGroup; }

		//"select"
		public Keyword getSelectKeyword_0() { return cSelectKeyword_0; }

		//declaration=[SelectionPropertyDeclaration|QualifiedName]
		public Assignment getDeclarationAssignment_1() { return cDeclarationAssignment_1; }

		//[SelectionPropertyDeclaration|QualifiedName]
		public CrossReference getDeclarationSelectionPropertyDeclarationCrossReference_1_0() { return cDeclarationSelectionPropertyDeclarationCrossReference_1_0; }

		//QualifiedName
		public RuleCall getDeclarationSelectionPropertyDeclarationQualifiedNameParserRuleCall_1_0_1() { return cDeclarationSelectionPropertyDeclarationQualifiedNameParserRuleCall_1_0_1; }

		//selection=[SelectionPropertyOption|QualifiedName]
		public Assignment getSelectionAssignment_2() { return cSelectionAssignment_2; }

		//[SelectionPropertyOption|QualifiedName]
		public CrossReference getSelectionSelectionPropertyOptionCrossReference_2_0() { return cSelectionSelectionPropertyOptionCrossReference_2_0; }

		//QualifiedName
		public RuleCall getSelectionSelectionPropertyOptionQualifiedNameParserRuleCall_2_0_1() { return cSelectionSelectionPropertyOptionQualifiedNameParserRuleCall_2_0_1; }

		//("as" name=ValidID)?
		public Group getGroup_3() { return cGroup_3; }

		//"as"
		public Keyword getAsKeyword_3_0() { return cAsKeyword_3_0; }

		//name=ValidID
		public Assignment getNameAssignment_3_1() { return cNameAssignment_3_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_3_1_0() { return cNameValidIDParserRuleCall_3_1_0; }

		//propagate?="~>"?
		public Assignment getPropagateAssignment_4() { return cPropagateAssignment_4; }

		//"~>"
		public Keyword getPropagateTildeGreaterThanSignKeyword_4_0() { return cPropagateTildeGreaterThanSignKeyword_4_0; }

		//body=SelectionPropertyBody?
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }

		//SelectionPropertyBody
		public RuleCall getBodySelectionPropertyBodyParserRuleCall_5_0() { return cBodySelectionPropertyBodyParserRuleCall_5_0; }
	}

	public class SelectionPropertyBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectionPropertyBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSelectionPropertyBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropertiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertiesDeclaredPropertyParserRuleCall_2_0 = (RuleCall)cPropertiesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SelectionPropertyBody:
		//	{SelectionPropertyBody} "{" properties+=DeclaredProperty* "}";
		public ParserRule getRule() { return rule; }

		//{SelectionPropertyBody} "{" properties+=DeclaredProperty* "}"
		public Group getGroup() { return cGroup; }

		//{SelectionPropertyBody}
		public Action getSelectionPropertyBodyAction_0() { return cSelectionPropertyBodyAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//properties+=DeclaredProperty*
		public Assignment getPropertiesAssignment_2() { return cPropertiesAssignment_2; }

		//DeclaredProperty
		public RuleCall getPropertiesDeclaredPropertyParserRuleCall_2_0() { return cPropertiesDeclaredPropertyParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class RootSystemConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RootSystemConfiguration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContextFragmentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cContextFragmentFragmentCrossReference_1_0 = (CrossReference)cContextFragmentAssignment_1.eContents().get(0);
		private final RuleCall cContextFragmentFragmentQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cContextFragmentFragmentCrossReference_1_0.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodySystemConfigurationBodyParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//RootSystemConfiguration:
		//	"system" contextFragment=[Fragment|QualifiedName] body=SystemConfigurationBody?;
		public ParserRule getRule() { return rule; }

		//"system" contextFragment=[Fragment|QualifiedName] body=SystemConfigurationBody?
		public Group getGroup() { return cGroup; }

		//"system"
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }

		//contextFragment=[Fragment|QualifiedName]
		public Assignment getContextFragmentAssignment_1() { return cContextFragmentAssignment_1; }

		//[Fragment|QualifiedName]
		public CrossReference getContextFragmentFragmentCrossReference_1_0() { return cContextFragmentFragmentCrossReference_1_0; }

		//QualifiedName
		public RuleCall getContextFragmentFragmentQualifiedNameParserRuleCall_1_0_1() { return cContextFragmentFragmentQualifiedNameParserRuleCall_1_0_1; }

		//body=SystemConfigurationBody?
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }

		//SystemConfigurationBody
		public RuleCall getBodySystemConfigurationBodyParserRuleCall_2_0() { return cBodySystemConfigurationBodyParserRuleCall_2_0; }
	}

	public class SubsystemConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubsystemConfiguration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSubsystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSubsystemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSubsystemSubsystemCrossReference_1_0 = (CrossReference)cSubsystemAssignment_1.eContents().get(0);
		private final RuleCall cSubsystemSubsystemValidIDParserRuleCall_1_0_1 = (RuleCall)cSubsystemSubsystemCrossReference_1_0.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodySystemConfigurationBodyParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//SubsystemConfiguration:
		//	"subsystem" subsystem=[Subsystem|ValidID] body=SystemConfigurationBody;
		public ParserRule getRule() { return rule; }

		//"subsystem" subsystem=[Subsystem|ValidID] body=SystemConfigurationBody
		public Group getGroup() { return cGroup; }

		//"subsystem"
		public Keyword getSubsystemKeyword_0() { return cSubsystemKeyword_0; }

		//subsystem=[Subsystem|ValidID]
		public Assignment getSubsystemAssignment_1() { return cSubsystemAssignment_1; }

		//[Subsystem|ValidID]
		public CrossReference getSubsystemSubsystemCrossReference_1_0() { return cSubsystemSubsystemCrossReference_1_0; }

		//ValidID
		public RuleCall getSubsystemSubsystemValidIDParserRuleCall_1_0_1() { return cSubsystemSubsystemValidIDParserRuleCall_1_0_1; }

		//body=SystemConfigurationBody
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }

		//SystemConfigurationBody
		public RuleCall getBodySystemConfigurationBodyParserRuleCall_2_0() { return cBodySystemConfigurationBodyParserRuleCall_2_0; }
	}

	public class SystemConfigurationBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SystemConfigurationBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSystemConfigurationBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cPropertiesAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cPropertiesPropertyParserRuleCall_2_0_0 = (RuleCall)cPropertiesAssignment_2_0.eContents().get(0);
		private final Assignment cMappingsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cMappingsMappingParserRuleCall_2_1_0 = (RuleCall)cMappingsAssignment_2_1.eContents().get(0);
		private final Assignment cComponentConfigurationsAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cComponentConfigurationsComponentConfigurationParserRuleCall_2_2_0 = (RuleCall)cComponentConfigurationsAssignment_2_2.eContents().get(0);
		private final Assignment cFragmentConfigurationsAssignment_2_3 = (Assignment)cAlternatives_2.eContents().get(3);
		private final RuleCall cFragmentConfigurationsFragmentConfigurationParserRuleCall_2_3_0 = (RuleCall)cFragmentConfigurationsAssignment_2_3.eContents().get(0);
		private final Assignment cSubsystemConfigurationsAssignment_2_4 = (Assignment)cAlternatives_2.eContents().get(4);
		private final RuleCall cSubsystemConfigurationsSubsystemConfigurationParserRuleCall_2_4_0 = (RuleCall)cSubsystemConfigurationsAssignment_2_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SystemConfigurationBody:
		//	{SystemConfigurationBody} "{" (properties+=Property | mappings+=Mapping |
		//	componentConfigurations+=ComponentConfiguration | fragmentConfigurations+=FragmentConfiguration |
		//	subsystemConfigurations+=SubsystemConfiguration)* "}";
		public ParserRule getRule() { return rule; }

		//{SystemConfigurationBody} "{" (properties+=Property | mappings+=Mapping |
		//componentConfigurations+=ComponentConfiguration | fragmentConfigurations+=FragmentConfiguration |
		//subsystemConfigurations+=SubsystemConfiguration)* "}"
		public Group getGroup() { return cGroup; }

		//{SystemConfigurationBody}
		public Action getSystemConfigurationBodyAction_0() { return cSystemConfigurationBodyAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(properties+=Property | mappings+=Mapping | componentConfigurations+=ComponentConfiguration |
		//fragmentConfigurations+=FragmentConfiguration | subsystemConfigurations+=SubsystemConfiguration)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//properties+=Property
		public Assignment getPropertiesAssignment_2_0() { return cPropertiesAssignment_2_0; }

		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_2_0_0() { return cPropertiesPropertyParserRuleCall_2_0_0; }

		//mappings+=Mapping
		public Assignment getMappingsAssignment_2_1() { return cMappingsAssignment_2_1; }

		//Mapping
		public RuleCall getMappingsMappingParserRuleCall_2_1_0() { return cMappingsMappingParserRuleCall_2_1_0; }

		//componentConfigurations+=ComponentConfiguration
		public Assignment getComponentConfigurationsAssignment_2_2() { return cComponentConfigurationsAssignment_2_2; }

		//ComponentConfiguration
		public RuleCall getComponentConfigurationsComponentConfigurationParserRuleCall_2_2_0() { return cComponentConfigurationsComponentConfigurationParserRuleCall_2_2_0; }

		//fragmentConfigurations+=FragmentConfiguration
		public Assignment getFragmentConfigurationsAssignment_2_3() { return cFragmentConfigurationsAssignment_2_3; }

		//FragmentConfiguration
		public RuleCall getFragmentConfigurationsFragmentConfigurationParserRuleCall_2_3_0() { return cFragmentConfigurationsFragmentConfigurationParserRuleCall_2_3_0; }

		//subsystemConfigurations+=SubsystemConfiguration
		public Assignment getSubsystemConfigurationsAssignment_2_4() { return cSubsystemConfigurationsAssignment_2_4; }

		//SubsystemConfiguration
		public RuleCall getSubsystemConfigurationsSubsystemConfigurationParserRuleCall_2_4_0() { return cSubsystemConfigurationsSubsystemConfigurationParserRuleCall_2_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class FragmentConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FragmentConfiguration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFragmentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cStartFragmentAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final CrossReference cStartFragmentFragmentCrossReference_1_0_0_0 = (CrossReference)cStartFragmentAssignment_1_0_0.eContents().get(0);
		private final RuleCall cStartFragmentFragmentQualifiedNameParserRuleCall_1_0_0_0_1 = (RuleCall)cStartFragmentFragmentCrossReference_1_0_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Assignment cRangeAssignment_1_0_1_0 = (Assignment)cGroup_1_0_1.eContents().get(0);
		private final Keyword cRangeFullStopFullStopKeyword_1_0_1_0_0 = (Keyword)cRangeAssignment_1_0_1_0.eContents().get(0);
		private final Assignment cEndFragmentAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final CrossReference cEndFragmentFragmentCrossReference_1_0_1_1_0 = (CrossReference)cEndFragmentAssignment_1_0_1_1.eContents().get(0);
		private final RuleCall cEndFragmentFragmentQualifiedNameParserRuleCall_1_0_1_1_0_1 = (RuleCall)cEndFragmentFragmentCrossReference_1_0_1_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cRangeAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final Keyword cRangeFullStopFullStopKeyword_1_1_0_0 = (Keyword)cRangeAssignment_1_1_0.eContents().get(0);
		private final Assignment cEndFragmentAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final CrossReference cEndFragmentFragmentCrossReference_1_1_1_0 = (CrossReference)cEndFragmentAssignment_1_1_1.eContents().get(0);
		private final RuleCall cEndFragmentFragmentQualifiedNameParserRuleCall_1_1_1_0_1 = (RuleCall)cEndFragmentFragmentCrossReference_1_1_1_0.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyFragmentConfigurationBodyParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//FragmentConfiguration:
		//	"fragment" (startFragment=[Fragment|QualifiedName] (range?=".." endFragment=[Fragment|QualifiedName]?)? | range?=".."
		//	endFragment=[Fragment|QualifiedName]) body=FragmentConfigurationBody;
		public ParserRule getRule() { return rule; }

		//"fragment" (startFragment=[Fragment|QualifiedName] (range?=".." endFragment=[Fragment|QualifiedName]?)? | range?=".."
		//endFragment=[Fragment|QualifiedName]) body=FragmentConfigurationBody
		public Group getGroup() { return cGroup; }

		//"fragment"
		public Keyword getFragmentKeyword_0() { return cFragmentKeyword_0; }

		//startFragment=[Fragment|QualifiedName] (range?=".." endFragment=[Fragment|QualifiedName]?)? | range?=".."
		//endFragment=[Fragment|QualifiedName]
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//startFragment=[Fragment|QualifiedName] (range?=".." endFragment=[Fragment|QualifiedName]?)?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//startFragment=[Fragment|QualifiedName]
		public Assignment getStartFragmentAssignment_1_0_0() { return cStartFragmentAssignment_1_0_0; }

		//[Fragment|QualifiedName]
		public CrossReference getStartFragmentFragmentCrossReference_1_0_0_0() { return cStartFragmentFragmentCrossReference_1_0_0_0; }

		//QualifiedName
		public RuleCall getStartFragmentFragmentQualifiedNameParserRuleCall_1_0_0_0_1() { return cStartFragmentFragmentQualifiedNameParserRuleCall_1_0_0_0_1; }

		//(range?=".." endFragment=[Fragment|QualifiedName]?)?
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//range?=".."
		public Assignment getRangeAssignment_1_0_1_0() { return cRangeAssignment_1_0_1_0; }

		//".."
		public Keyword getRangeFullStopFullStopKeyword_1_0_1_0_0() { return cRangeFullStopFullStopKeyword_1_0_1_0_0; }

		//endFragment=[Fragment|QualifiedName]?
		public Assignment getEndFragmentAssignment_1_0_1_1() { return cEndFragmentAssignment_1_0_1_1; }

		//[Fragment|QualifiedName]
		public CrossReference getEndFragmentFragmentCrossReference_1_0_1_1_0() { return cEndFragmentFragmentCrossReference_1_0_1_1_0; }

		//QualifiedName
		public RuleCall getEndFragmentFragmentQualifiedNameParserRuleCall_1_0_1_1_0_1() { return cEndFragmentFragmentQualifiedNameParserRuleCall_1_0_1_1_0_1; }

		//range?=".." endFragment=[Fragment|QualifiedName]
		public Group getGroup_1_1() { return cGroup_1_1; }

		//range?=".."
		public Assignment getRangeAssignment_1_1_0() { return cRangeAssignment_1_1_0; }

		//".."
		public Keyword getRangeFullStopFullStopKeyword_1_1_0_0() { return cRangeFullStopFullStopKeyword_1_1_0_0; }

		//endFragment=[Fragment|QualifiedName]
		public Assignment getEndFragmentAssignment_1_1_1() { return cEndFragmentAssignment_1_1_1; }

		//[Fragment|QualifiedName]
		public CrossReference getEndFragmentFragmentCrossReference_1_1_1_0() { return cEndFragmentFragmentCrossReference_1_1_1_0; }

		//QualifiedName
		public RuleCall getEndFragmentFragmentQualifiedNameParserRuleCall_1_1_1_0_1() { return cEndFragmentFragmentQualifiedNameParserRuleCall_1_1_1_0_1; }

		//body=FragmentConfigurationBody
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }

		//FragmentConfigurationBody
		public RuleCall getBodyFragmentConfigurationBodyParserRuleCall_2_0() { return cBodyFragmentConfigurationBodyParserRuleCall_2_0; }
	}

	public class FragmentConfigurationBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FragmentConfigurationBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFragmentConfigurationBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropertiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertiesPropertyParserRuleCall_2_0 = (RuleCall)cPropertiesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FragmentConfigurationBody:
		//	{FragmentConfigurationBody} "{" properties+=Property* "}";
		public ParserRule getRule() { return rule; }

		//{FragmentConfigurationBody} "{" properties+=Property* "}"
		public Group getGroup() { return cGroup; }

		//{FragmentConfigurationBody}
		public Action getFragmentConfigurationBodyAction_0() { return cFragmentConfigurationBodyAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//properties+=Property*
		public Assignment getPropertiesAssignment_2() { return cPropertiesAssignment_2; }

		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_2_0() { return cPropertiesPropertyParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ComponentConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComponentConfiguration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cComponentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cComponentComponentCrossReference_1_0 = (CrossReference)cComponentAssignment_1.eContents().get(0);
		private final RuleCall cComponentComponentValidIDParserRuleCall_1_0_1 = (RuleCall)cComponentComponentCrossReference_1_0.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyComponentConfigurationBodyParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//ComponentConfiguration:
		//	"component" component=[Component|ValidID] body=ComponentConfigurationBody;
		public ParserRule getRule() { return rule; }

		//"component" component=[Component|ValidID] body=ComponentConfigurationBody
		public Group getGroup() { return cGroup; }

		//"component"
		public Keyword getComponentKeyword_0() { return cComponentKeyword_0; }

		//component=[Component|ValidID]
		public Assignment getComponentAssignment_1() { return cComponentAssignment_1; }

		//[Component|ValidID]
		public CrossReference getComponentComponentCrossReference_1_0() { return cComponentComponentCrossReference_1_0; }

		//ValidID
		public RuleCall getComponentComponentValidIDParserRuleCall_1_0_1() { return cComponentComponentValidIDParserRuleCall_1_0_1; }

		//body=ComponentConfigurationBody
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }

		//ComponentConfigurationBody
		public RuleCall getBodyComponentConfigurationBodyParserRuleCall_2_0() { return cBodyComponentConfigurationBodyParserRuleCall_2_0; }
	}

	public class ComponentConfigurationBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComponentConfigurationBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cComponentConfigurationBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropertiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertiesPropertyParserRuleCall_2_0 = (RuleCall)cPropertiesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ComponentConfigurationBody:
		//	{ComponentConfigurationBody} "{" properties+=Property* "}";
		public ParserRule getRule() { return rule; }

		//{ComponentConfigurationBody} "{" properties+=Property* "}"
		public Group getGroup() { return cGroup; }

		//{ComponentConfigurationBody}
		public Action getComponentConfigurationBodyAction_0() { return cComponentConfigurationBodyAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//properties+=Property*
		public Assignment getPropertiesAssignment_2() { return cPropertiesAssignment_2; }

		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_2_0() { return cPropertiesPropertyParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ComputationPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComputationProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComputationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cComputationModelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cComputationModelComputationModelCrossReference_1_0 = (CrossReference)cComputationModelAssignment_1.eContents().get(0);
		private final RuleCall cComputationModelComputationModelQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cComputationModelComputationModelCrossReference_1_0.eContents().get(1);
		private final Assignment cPropagateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cPropagateTildeGreaterThanSignKeyword_2_0 = (Keyword)cPropagateAssignment_2.eContents().get(0);
		
		//ComputationProperty:
		//	"computation" computationModel=[ComputationModel|QualifiedName] propagate?="~>"?;
		public ParserRule getRule() { return rule; }

		//"computation" computationModel=[ComputationModel|QualifiedName] propagate?="~>"?
		public Group getGroup() { return cGroup; }

		//"computation"
		public Keyword getComputationKeyword_0() { return cComputationKeyword_0; }

		//computationModel=[ComputationModel|QualifiedName]
		public Assignment getComputationModelAssignment_1() { return cComputationModelAssignment_1; }

		//[ComputationModel|QualifiedName]
		public CrossReference getComputationModelComputationModelCrossReference_1_0() { return cComputationModelComputationModelCrossReference_1_0; }

		//QualifiedName
		public RuleCall getComputationModelComputationModelQualifiedNameParserRuleCall_1_0_1() { return cComputationModelComputationModelQualifiedNameParserRuleCall_1_0_1; }

		//propagate?="~>"?
		public Assignment getPropagateAssignment_2() { return cPropagateAssignment_2; }

		//"~>"
		public Keyword getPropagateTildeGreaterThanSignKeyword_2_0() { return cPropagateTildeGreaterThanSignKeyword_2_0; }
	}

	public class MappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSourceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSourceComponentCrossReference_1_0 = (CrossReference)cSourceAssignment_1.eContents().get(0);
		private final RuleCall cSourceComponentValidIDParserRuleCall_1_0_1 = (RuleCall)cSourceComponentCrossReference_1_0.eContents().get(1);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetPropertyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTargetPropertySelectionPropertyCrossReference_3_0 = (CrossReference)cTargetPropertyAssignment_3.eContents().get(0);
		private final RuleCall cTargetPropertySelectionPropertyValidIDParserRuleCall_3_0_1 = (RuleCall)cTargetPropertySelectionPropertyCrossReference_3_0.eContents().get(1);
		private final Keyword cFullStopKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTargetResourceAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cTargetResourceResourceDeclarationCrossReference_5_0 = (CrossReference)cTargetResourceAssignment_5.eContents().get(0);
		private final RuleCall cTargetResourceResourceDeclarationValidIDParserRuleCall_5_0_1 = (RuleCall)cTargetResourceResourceDeclarationCrossReference_5_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLeftSquareBracketKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cSubscriptAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cSubscriptMappingSubscriptParserRuleCall_6_1_0 = (RuleCall)cSubscriptAssignment_6_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Assignment cBodyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBodyMappingBodyParserRuleCall_7_0 = (RuleCall)cBodyAssignment_7.eContents().get(0);
		
		//Mapping:
		//	"map" source=[Component|ValidID] "to" targetProperty=[SelectionProperty|ValidID] "."
		//	targetResource=[ResourceDeclaration|ValidID] ("[" subscript=MappingSubscript "]")? body=MappingBody?;
		public ParserRule getRule() { return rule; }

		//"map" source=[Component|ValidID] "to" targetProperty=[SelectionProperty|ValidID] "."
		//targetResource=[ResourceDeclaration|ValidID] ("[" subscript=MappingSubscript "]")? body=MappingBody?
		public Group getGroup() { return cGroup; }

		//"map"
		public Keyword getMapKeyword_0() { return cMapKeyword_0; }

		//source=[Component|ValidID]
		public Assignment getSourceAssignment_1() { return cSourceAssignment_1; }

		//[Component|ValidID]
		public CrossReference getSourceComponentCrossReference_1_0() { return cSourceComponentCrossReference_1_0; }

		//ValidID
		public RuleCall getSourceComponentValidIDParserRuleCall_1_0_1() { return cSourceComponentValidIDParserRuleCall_1_0_1; }

		//"to"
		public Keyword getToKeyword_2() { return cToKeyword_2; }

		//targetProperty=[SelectionProperty|ValidID]
		public Assignment getTargetPropertyAssignment_3() { return cTargetPropertyAssignment_3; }

		//[SelectionProperty|ValidID]
		public CrossReference getTargetPropertySelectionPropertyCrossReference_3_0() { return cTargetPropertySelectionPropertyCrossReference_3_0; }

		//ValidID
		public RuleCall getTargetPropertySelectionPropertyValidIDParserRuleCall_3_0_1() { return cTargetPropertySelectionPropertyValidIDParserRuleCall_3_0_1; }

		//"."
		public Keyword getFullStopKeyword_4() { return cFullStopKeyword_4; }

		//targetResource=[ResourceDeclaration|ValidID]
		public Assignment getTargetResourceAssignment_5() { return cTargetResourceAssignment_5; }

		//[ResourceDeclaration|ValidID]
		public CrossReference getTargetResourceResourceDeclarationCrossReference_5_0() { return cTargetResourceResourceDeclarationCrossReference_5_0; }

		//ValidID
		public RuleCall getTargetResourceResourceDeclarationValidIDParserRuleCall_5_0_1() { return cTargetResourceResourceDeclarationValidIDParserRuleCall_5_0_1; }

		//("[" subscript=MappingSubscript "]")?
		public Group getGroup_6() { return cGroup_6; }

		//"["
		public Keyword getLeftSquareBracketKeyword_6_0() { return cLeftSquareBracketKeyword_6_0; }

		//subscript=MappingSubscript
		public Assignment getSubscriptAssignment_6_1() { return cSubscriptAssignment_6_1; }

		//MappingSubscript
		public RuleCall getSubscriptMappingSubscriptParserRuleCall_6_1_0() { return cSubscriptMappingSubscriptParserRuleCall_6_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_6_2() { return cRightSquareBracketKeyword_6_2; }

		//body=MappingBody?
		public Assignment getBodyAssignment_7() { return cBodyAssignment_7; }

		//MappingBody
		public RuleCall getBodyMappingBodyParserRuleCall_7_0() { return cBodyMappingBodyParserRuleCall_7_0; }
	}

	public class MappingBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MappingBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMappingBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropertiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertiesDeclaredPropertyParserRuleCall_2_0 = (RuleCall)cPropertiesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MappingBody:
		//	{MappingBody} "{" properties+=DeclaredProperty* "}";
		public ParserRule getRule() { return rule; }

		//{MappingBody} "{" properties+=DeclaredProperty* "}"
		public Group getGroup() { return cGroup; }

		//{MappingBody}
		public Action getMappingBodyAction_0() { return cMappingBodyAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//properties+=DeclaredProperty*
		public Assignment getPropertiesAssignment_2() { return cPropertiesAssignment_2; }

		//DeclaredProperty
		public RuleCall getPropertiesDeclaredPropertyParserRuleCall_2_0() { return cPropertiesDeclaredPropertyParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class MappingSubscriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MappingSubscript");
		private final Assignment cIndexAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIndexValidIntParserRuleCall_0 = (RuleCall)cIndexAssignment.eContents().get(0);
		
		//MappingSubscript:
		//	index=ValidInt;
		public ParserRule getRule() { return rule; }

		//index=ValidInt
		public Assignment getIndexAssignment() { return cIndexAssignment; }

		//ValidInt
		public RuleCall getIndexValidIntParserRuleCall_0() { return cIndexValidIntParserRuleCall_0; }
	}

	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cFullStopAsteriskKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName (".*" | "." "*")?;
		public ParserRule getRule() { return rule; }

		//QualifiedName (".*" | "." "*")?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//(".*" | "." "*")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//".*"
		public Keyword getFullStopAsteriskKeyword_1_0() { return cFullStopAsteriskKeyword_1_0; }

		//"." "*"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"."
		public Keyword getFullStopKeyword_1_1_0() { return cFullStopKeyword_1_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_1_1() { return cAsteriskKeyword_1_1_1; }
	}

	public class QualifiedNameWithoutIJElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithoutIJ");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cValidIDWithoutIJParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cValidIDWithoutIJParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedNameWithoutIJ:
		//	ValidIDWithoutIJ ("." ValidIDWithoutIJ)*;
		public ParserRule getRule() { return rule; }

		//ValidIDWithoutIJ ("." ValidIDWithoutIJ)*
		public Group getGroup() { return cGroup; }

		//ValidIDWithoutIJ
		public RuleCall getValidIDWithoutIJParserRuleCall_0() { return cValidIDWithoutIJParserRuleCall_0; }

		//("." ValidIDWithoutIJ)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ValidIDWithoutIJ
		public RuleCall getValidIDWithoutIJParserRuleCall_1_1() { return cValidIDWithoutIJParserRuleCall_1_1; }
	}

	public class ValidIDWithoutIJElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValidIDWithoutIJ");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ValidIDWithoutIJ:
		//	N | E | ID;
		public ParserRule getRule() { return rule; }

		//N | E | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//N
		public RuleCall getNTerminalRuleCall_0() { return cNTerminalRuleCall_0; }

		//E
		public RuleCall getETerminalRuleCall_1() { return cETerminalRuleCall_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }
	}
	
	
	private ConfigurationElements pConfiguration;
	private ImportDeclarationElements pImportDeclaration;
	private RunnerSpecifierElements pRunnerSpecifier;
	private PropertyElements pProperty;
	private DeclaredPropertyElements pDeclaredProperty;
	private SimplePropertyElements pSimpleProperty;
	private SelectionPropertyElements pSelectionProperty;
	private SelectionPropertyBodyElements pSelectionPropertyBody;
	private RootSystemConfigurationElements pRootSystemConfiguration;
	private SubsystemConfigurationElements pSubsystemConfiguration;
	private SystemConfigurationBodyElements pSystemConfigurationBody;
	private FragmentConfigurationElements pFragmentConfiguration;
	private FragmentConfigurationBodyElements pFragmentConfigurationBody;
	private ComponentConfigurationElements pComponentConfiguration;
	private ComponentConfigurationBodyElements pComponentConfigurationBody;
	private ComputationPropertyElements pComputationProperty;
	private MappingElements pMapping;
	private MappingBodyElements pMappingBody;
	private MappingSubscriptElements pMappingSubscript;
	private QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private QualifiedNameWithoutIJElements pQualifiedNameWithoutIJ;
	private ValidIDWithoutIJElements pValidIDWithoutIJ;
	
	private final GrammarProvider grammarProvider;

	private MscriptGrammarAccess gaMscript;

	@Inject
	public DconfigGrammarAccess(GrammarProvider grammarProvider,
		MscriptGrammarAccess gaMscript) {
		this.grammarProvider = grammarProvider;
		this.gaMscript = gaMscript;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public MscriptGrammarAccess getMscriptGrammarAccess() {
		return gaMscript;
	}

	
	//Configuration:
	//	"package" package=QualifiedName importDeclarations+=ImportDeclaration* "configuration" name=ValidID ("extends"
	//	baseConfiguration=[Configuration|QualifiedName])? "{" runnerSpecifier=RunnerSpecifier? (properties+=DeclaredProperty+
	//	rootSystemConfiguration=RootSystemConfiguration? | rootSystemConfiguration=RootSystemConfiguration
	//	properties+=DeclaredProperty*)? "}";
	public ConfigurationElements getConfigurationAccess() {
		return (pConfiguration != null) ? pConfiguration : (pConfiguration = new ConfigurationElements());
	}
	
	public ParserRule getConfigurationRule() {
		return getConfigurationAccess().getRule();
	}

	//ImportDeclaration:
	//	"import" importedNamespace=QualifiedNameWithWildcard;
	public ImportDeclarationElements getImportDeclarationAccess() {
		return (pImportDeclaration != null) ? pImportDeclaration : (pImportDeclaration = new ImportDeclarationElements());
	}
	
	public ParserRule getImportDeclarationRule() {
		return getImportDeclarationAccess().getRule();
	}

	//RunnerSpecifier:
	//	auto?="auto"? "run" runnerDeclaration=[RunnerDeclaration|QualifiedName];
	public RunnerSpecifierElements getRunnerSpecifierAccess() {
		return (pRunnerSpecifier != null) ? pRunnerSpecifier : (pRunnerSpecifier = new RunnerSpecifierElements());
	}
	
	public ParserRule getRunnerSpecifierRule() {
		return getRunnerSpecifierAccess().getRule();
	}

	//Property:
	//	DeclaredProperty | ComputationProperty;
	public PropertyElements getPropertyAccess() {
		return (pProperty != null) ? pProperty : (pProperty = new PropertyElements());
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//DeclaredProperty:
	//	SimpleProperty | SelectionProperty;
	public DeclaredPropertyElements getDeclaredPropertyAccess() {
		return (pDeclaredProperty != null) ? pDeclaredProperty : (pDeclaredProperty = new DeclaredPropertyElements());
	}
	
	public ParserRule getDeclaredPropertyRule() {
		return getDeclaredPropertyAccess().getRule();
	}

	//SimpleProperty:
	//	(declaration=[SimplePropertyDeclaration|QualifiedNameWithoutIJ] "=" value=Expression | "unset"
	//	declaration=[SimplePropertyDeclaration|QualifiedName]) propagate?="~>"?;
	public SimplePropertyElements getSimplePropertyAccess() {
		return (pSimpleProperty != null) ? pSimpleProperty : (pSimpleProperty = new SimplePropertyElements());
	}
	
	public ParserRule getSimplePropertyRule() {
		return getSimplePropertyAccess().getRule();
	}

	//SelectionProperty:
	//	"select" declaration=[SelectionPropertyDeclaration|QualifiedName] selection=[SelectionPropertyOption|QualifiedName]
	//	("as" name=ValidID)? propagate?="~>"? body=SelectionPropertyBody?;
	public SelectionPropertyElements getSelectionPropertyAccess() {
		return (pSelectionProperty != null) ? pSelectionProperty : (pSelectionProperty = new SelectionPropertyElements());
	}
	
	public ParserRule getSelectionPropertyRule() {
		return getSelectionPropertyAccess().getRule();
	}

	//SelectionPropertyBody:
	//	{SelectionPropertyBody} "{" properties+=DeclaredProperty* "}";
	public SelectionPropertyBodyElements getSelectionPropertyBodyAccess() {
		return (pSelectionPropertyBody != null) ? pSelectionPropertyBody : (pSelectionPropertyBody = new SelectionPropertyBodyElements());
	}
	
	public ParserRule getSelectionPropertyBodyRule() {
		return getSelectionPropertyBodyAccess().getRule();
	}

	//RootSystemConfiguration:
	//	"system" contextFragment=[Fragment|QualifiedName] body=SystemConfigurationBody?;
	public RootSystemConfigurationElements getRootSystemConfigurationAccess() {
		return (pRootSystemConfiguration != null) ? pRootSystemConfiguration : (pRootSystemConfiguration = new RootSystemConfigurationElements());
	}
	
	public ParserRule getRootSystemConfigurationRule() {
		return getRootSystemConfigurationAccess().getRule();
	}

	//SubsystemConfiguration:
	//	"subsystem" subsystem=[Subsystem|ValidID] body=SystemConfigurationBody;
	public SubsystemConfigurationElements getSubsystemConfigurationAccess() {
		return (pSubsystemConfiguration != null) ? pSubsystemConfiguration : (pSubsystemConfiguration = new SubsystemConfigurationElements());
	}
	
	public ParserRule getSubsystemConfigurationRule() {
		return getSubsystemConfigurationAccess().getRule();
	}

	//SystemConfigurationBody:
	//	{SystemConfigurationBody} "{" (properties+=Property | mappings+=Mapping |
	//	componentConfigurations+=ComponentConfiguration | fragmentConfigurations+=FragmentConfiguration |
	//	subsystemConfigurations+=SubsystemConfiguration)* "}";
	public SystemConfigurationBodyElements getSystemConfigurationBodyAccess() {
		return (pSystemConfigurationBody != null) ? pSystemConfigurationBody : (pSystemConfigurationBody = new SystemConfigurationBodyElements());
	}
	
	public ParserRule getSystemConfigurationBodyRule() {
		return getSystemConfigurationBodyAccess().getRule();
	}

	//FragmentConfiguration:
	//	"fragment" (startFragment=[Fragment|QualifiedName] (range?=".." endFragment=[Fragment|QualifiedName]?)? | range?=".."
	//	endFragment=[Fragment|QualifiedName]) body=FragmentConfigurationBody;
	public FragmentConfigurationElements getFragmentConfigurationAccess() {
		return (pFragmentConfiguration != null) ? pFragmentConfiguration : (pFragmentConfiguration = new FragmentConfigurationElements());
	}
	
	public ParserRule getFragmentConfigurationRule() {
		return getFragmentConfigurationAccess().getRule();
	}

	//FragmentConfigurationBody:
	//	{FragmentConfigurationBody} "{" properties+=Property* "}";
	public FragmentConfigurationBodyElements getFragmentConfigurationBodyAccess() {
		return (pFragmentConfigurationBody != null) ? pFragmentConfigurationBody : (pFragmentConfigurationBody = new FragmentConfigurationBodyElements());
	}
	
	public ParserRule getFragmentConfigurationBodyRule() {
		return getFragmentConfigurationBodyAccess().getRule();
	}

	//ComponentConfiguration:
	//	"component" component=[Component|ValidID] body=ComponentConfigurationBody;
	public ComponentConfigurationElements getComponentConfigurationAccess() {
		return (pComponentConfiguration != null) ? pComponentConfiguration : (pComponentConfiguration = new ComponentConfigurationElements());
	}
	
	public ParserRule getComponentConfigurationRule() {
		return getComponentConfigurationAccess().getRule();
	}

	//ComponentConfigurationBody:
	//	{ComponentConfigurationBody} "{" properties+=Property* "}";
	public ComponentConfigurationBodyElements getComponentConfigurationBodyAccess() {
		return (pComponentConfigurationBody != null) ? pComponentConfigurationBody : (pComponentConfigurationBody = new ComponentConfigurationBodyElements());
	}
	
	public ParserRule getComponentConfigurationBodyRule() {
		return getComponentConfigurationBodyAccess().getRule();
	}

	//ComputationProperty:
	//	"computation" computationModel=[ComputationModel|QualifiedName] propagate?="~>"?;
	public ComputationPropertyElements getComputationPropertyAccess() {
		return (pComputationProperty != null) ? pComputationProperty : (pComputationProperty = new ComputationPropertyElements());
	}
	
	public ParserRule getComputationPropertyRule() {
		return getComputationPropertyAccess().getRule();
	}

	//Mapping:
	//	"map" source=[Component|ValidID] "to" targetProperty=[SelectionProperty|ValidID] "."
	//	targetResource=[ResourceDeclaration|ValidID] ("[" subscript=MappingSubscript "]")? body=MappingBody?;
	public MappingElements getMappingAccess() {
		return (pMapping != null) ? pMapping : (pMapping = new MappingElements());
	}
	
	public ParserRule getMappingRule() {
		return getMappingAccess().getRule();
	}

	//MappingBody:
	//	{MappingBody} "{" properties+=DeclaredProperty* "}";
	public MappingBodyElements getMappingBodyAccess() {
		return (pMappingBody != null) ? pMappingBody : (pMappingBody = new MappingBodyElements());
	}
	
	public ParserRule getMappingBodyRule() {
		return getMappingBodyAccess().getRule();
	}

	//MappingSubscript:
	//	index=ValidInt;
	public MappingSubscriptElements getMappingSubscriptAccess() {
		return (pMappingSubscript != null) ? pMappingSubscript : (pMappingSubscript = new MappingSubscriptElements());
	}
	
	public ParserRule getMappingSubscriptRule() {
		return getMappingSubscriptAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName (".*" | "." "*")?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return (pQualifiedNameWithWildcard != null) ? pQualifiedNameWithWildcard : (pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements());
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//QualifiedNameWithoutIJ:
	//	ValidIDWithoutIJ ("." ValidIDWithoutIJ)*;
	public QualifiedNameWithoutIJElements getQualifiedNameWithoutIJAccess() {
		return (pQualifiedNameWithoutIJ != null) ? pQualifiedNameWithoutIJ : (pQualifiedNameWithoutIJ = new QualifiedNameWithoutIJElements());
	}
	
	public ParserRule getQualifiedNameWithoutIJRule() {
		return getQualifiedNameWithoutIJAccess().getRule();
	}

	//ValidIDWithoutIJ:
	//	N | E | ID;
	public ValidIDWithoutIJElements getValidIDWithoutIJAccess() {
		return (pValidIDWithoutIJ != null) ? pValidIDWithoutIJ : (pValidIDWithoutIJ = new ValidIDWithoutIJElements());
	}
	
	public ParserRule getValidIDWithoutIJRule() {
		return getValidIDWithoutIJAccess().getRule();
	}

	//Module:
	//	declarations+=Declaration*;
	public MscriptGrammarAccess.ModuleElements getModuleAccess() {
		return gaMscript.getModuleAccess();
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}

	//Declaration:
	//	DataTypeDeclaration | FunctionDeclaration;
	public MscriptGrammarAccess.DeclarationElements getDeclarationAccess() {
		return gaMscript.getDeclarationAccess();
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	/// *
	// * DataTypeDeclaration
	// * / DataTypeDeclaration:
	//	EnumerationDeclaration | StructDeclaration | TypedefDeclaration;
	public MscriptGrammarAccess.DataTypeDeclarationElements getDataTypeDeclarationAccess() {
		return gaMscript.getDataTypeDeclarationAccess();
	}
	
	public ParserRule getDataTypeDeclarationRule() {
		return getDataTypeDeclarationAccess().getRule();
	}

	/// *
	// * Enumeration
	// * / EnumerationDeclaration:
	//	"enum" name=ValidID "{" (literalDeclarations+=EnumerationLiteralDeclaration (","
	//	literalDeclarations+=EnumerationLiteralDeclaration)*)? "}";
	public MscriptGrammarAccess.EnumerationDeclarationElements getEnumerationDeclarationAccess() {
		return gaMscript.getEnumerationDeclarationAccess();
	}
	
	public ParserRule getEnumerationDeclarationRule() {
		return getEnumerationDeclarationAccess().getRule();
	}

	//EnumerationLiteralDeclaration:
	//	name=ValidID;
	public MscriptGrammarAccess.EnumerationLiteralDeclarationElements getEnumerationLiteralDeclarationAccess() {
		return gaMscript.getEnumerationLiteralDeclarationAccess();
	}
	
	public ParserRule getEnumerationLiteralDeclarationRule() {
		return getEnumerationLiteralDeclarationAccess().getRule();
	}

	/// *
	// * Typedef
	// * / TypedefDeclaration:
	//	"typedef" typeSpecifier=DataTypeSpecifier name=ValidID;
	public MscriptGrammarAccess.TypedefDeclarationElements getTypedefDeclarationAccess() {
		return gaMscript.getTypedefDeclarationAccess();
	}
	
	public ParserRule getTypedefDeclarationRule() {
		return getTypedefDeclarationAccess().getRule();
	}

	/// *
	// * Struct
	// * / StructDeclaration:
	//	"struct" name=ValidID "{" memberDeclarations+=StructMemberDeclaration* "}";
	public MscriptGrammarAccess.StructDeclarationElements getStructDeclarationAccess() {
		return gaMscript.getStructDeclarationAccess();
	}
	
	public ParserRule getStructDeclarationRule() {
		return getStructDeclarationAccess().getRule();
	}

	//StructMemberDeclaration:
	//	typeSpecifier=DataTypeSpecifier name=ValidID;
	public MscriptGrammarAccess.StructMemberDeclarationElements getStructMemberDeclarationAccess() {
		return gaMscript.getStructMemberDeclarationAccess();
	}
	
	public ParserRule getStructMemberDeclarationRule() {
		return getStructMemberDeclarationAccess().getRule();
	}

	/// *
	// * Function
	// * / FunctionDeclaration:
	//	kind=FunctionKind? "func" name=ValidID ("<" templateParameterDeclarations+=TemplateParameterDeclaration (","
	//	templateParameterDeclarations+=TemplateParameterDeclaration)* ">")? "("
	//	(inputParameterDeclarations+=InputParameterDeclaration ("," inputParameterDeclarations+=InputParameterDeclaration)*)?
	//	")" "->" outputParameterDeclarations+=OutputParameterDeclaration (","
	//	outputParameterDeclarations+=OutputParameterDeclaration)* "{" (checks+=Check | assertions+=Assertion |
	//	functionObjectDeclarations+=FunctionObjectDeclaration | stateVariableDeclarations+=StateVariableDeclaration |
	//	constantDeclarations+=ConstantDeclaration | equations+=Equation)* "}";
	public MscriptGrammarAccess.FunctionDeclarationElements getFunctionDeclarationAccess() {
		return gaMscript.getFunctionDeclarationAccess();
	}
	
	public ParserRule getFunctionDeclarationRule() {
		return getFunctionDeclarationAccess().getRule();
	}

	//enum FunctionKind:
	//	Stateful="stateful" | Continuous="continuous";
	public MscriptGrammarAccess.FunctionKindElements getFunctionKindAccess() {
		return gaMscript.getFunctionKindAccess();
	}
	
	public EnumRule getFunctionKindRule() {
		return getFunctionKindAccess().getRule();
	}

	//TemplateParameterDeclaration:
	//	name=ValidID;
	public MscriptGrammarAccess.TemplateParameterDeclarationElements getTemplateParameterDeclarationAccess() {
		return gaMscript.getTemplateParameterDeclarationAccess();
	}
	
	public ParserRule getTemplateParameterDeclarationRule() {
		return getTemplateParameterDeclarationAccess().getRule();
	}

	//InputParameterDeclaration:
	//	name=ValidID;
	public MscriptGrammarAccess.InputParameterDeclarationElements getInputParameterDeclarationAccess() {
		return gaMscript.getInputParameterDeclarationAccess();
	}
	
	public ParserRule getInputParameterDeclarationRule() {
		return getInputParameterDeclarationAccess().getRule();
	}

	//OutputParameterDeclaration:
	//	name=ValidID;
	public MscriptGrammarAccess.OutputParameterDeclarationElements getOutputParameterDeclarationAccess() {
		return gaMscript.getOutputParameterDeclarationAccess();
	}
	
	public ParserRule getOutputParameterDeclarationRule() {
		return getOutputParameterDeclarationAccess().getRule();
	}

	//Check:
	//	"check" ("<" templateArguments+=Expression ("," templateArguments+=Expression)* ">")? "("
	//	(inputParameterTypes+=DataTypeSpecifier ("," inputParameterTypes+=DataTypeSpecifier)*)? ")" "->"
	//	outputParameterTypes+=DataTypeSpecifier ("," outputParameterTypes+=DataTypeSpecifier)*;
	public MscriptGrammarAccess.CheckElements getCheckAccess() {
		return gaMscript.getCheckAccess();
	}
	
	public ParserRule getCheckRule() {
		return getCheckAccess().getRule();
	}

	//enum AssertionStatusKind:
	//	Info="info" | Warning="warning" | Error="error" | Fatal="fatal";
	public MscriptGrammarAccess.AssertionStatusKindElements getAssertionStatusKindAccess() {
		return gaMscript.getAssertionStatusKindAccess();
	}
	
	public EnumRule getAssertionStatusKindRule() {
		return getAssertionStatusKindAccess().getRule();
	}

	//Assertion:
	//	static?="static"? "assert" condition=Expression ":" statusKind=AssertionStatusKind message=Expression;
	public MscriptGrammarAccess.AssertionElements getAssertionAccess() {
		return gaMscript.getAssertionAccess();
	}
	
	public ParserRule getAssertionRule() {
		return getAssertionAccess().getRule();
	}

	//StateVariableDeclaration:
	//	"var" name=ValidID;
	public MscriptGrammarAccess.StateVariableDeclarationElements getStateVariableDeclarationAccess() {
		return gaMscript.getStateVariableDeclarationAccess();
	}
	
	public ParserRule getStateVariableDeclarationRule() {
		return getStateVariableDeclarationAccess().getRule();
	}

	//ConstantDeclaration:
	//	"const" name=ValidID "=" initializer=Expression;
	public MscriptGrammarAccess.ConstantDeclarationElements getConstantDeclarationAccess() {
		return gaMscript.getConstantDeclarationAccess();
	}
	
	public ParserRule getConstantDeclarationRule() {
		return getConstantDeclarationAccess().getRule();
	}

	//FunctionObjectDeclaration:
	//	"fob" functionName=[FunctionDeclaration|QualifiedName] ("<" templateArguments+=Expression (","
	//	templateArguments+=Expression)* ">")? name=ValidID;
	public MscriptGrammarAccess.FunctionObjectDeclarationElements getFunctionObjectDeclarationAccess() {
		return gaMscript.getFunctionObjectDeclarationAccess();
	}
	
	public ParserRule getFunctionObjectDeclarationRule() {
		return getFunctionObjectDeclarationAccess().getRule();
	}

	//Equation:
	//	initial?="initial"? "eq" leftHandSide=Expression "=" rightHandSide=Expression;
	public MscriptGrammarAccess.EquationElements getEquationAccess() {
		return gaMscript.getEquationAccess();
	}
	
	public ParserRule getEquationRule() {
		return getEquationAccess().getRule();
	}

	/// *
	// * Data type specifier
	// * / DataTypeSpecifier:
	//	definedType=(PrimitiveType | ArrayType) | type=[DataType|QualifiedName];
	public MscriptGrammarAccess.DataTypeSpecifierElements getDataTypeSpecifierAccess() {
		return gaMscript.getDataTypeSpecifierAccess();
	}
	
	public ParserRule getDataTypeSpecifierRule() {
		return getDataTypeSpecifierAccess().getRule();
	}

	//PrimitiveType:
	//	NumericType | BooleanType | StringType;
	public MscriptGrammarAccess.PrimitiveTypeElements getPrimitiveTypeAccess() {
		return gaMscript.getPrimitiveTypeAccess();
	}
	
	public ParserRule getPrimitiveTypeRule() {
		return getPrimitiveTypeAccess().getRule();
	}

	//NumericType:
	//	RealType | IntegerType | ComplexType | GaussianType;
	public MscriptGrammarAccess.NumericTypeElements getNumericTypeAccess() {
		return gaMscript.getNumericTypeAccess();
	}
	
	public ParserRule getNumericTypeRule() {
		return getNumericTypeAccess().getRule();
	}

	//RealType:
	//	{RealType} "real" unit=Unit;
	public MscriptGrammarAccess.RealTypeElements getRealTypeAccess() {
		return gaMscript.getRealTypeAccess();
	}
	
	public ParserRule getRealTypeRule() {
		return getRealTypeAccess().getRule();
	}

	//IntegerType:
	//	{IntegerType} "int" unit=Unit;
	public MscriptGrammarAccess.IntegerTypeElements getIntegerTypeAccess() {
		return gaMscript.getIntegerTypeAccess();
	}
	
	public ParserRule getIntegerTypeRule() {
		return getIntegerTypeAccess().getRule();
	}

	//ComplexType:
	//	{ComplexType} "complex" unit=Unit;
	public MscriptGrammarAccess.ComplexTypeElements getComplexTypeAccess() {
		return gaMscript.getComplexTypeAccess();
	}
	
	public ParserRule getComplexTypeRule() {
		return getComplexTypeAccess().getRule();
	}

	//GaussianType:
	//	{GaussianType} "gauss" unit=Unit;
	public MscriptGrammarAccess.GaussianTypeElements getGaussianTypeAccess() {
		return gaMscript.getGaussianTypeAccess();
	}
	
	public ParserRule getGaussianTypeRule() {
		return getGaussianTypeAccess().getRule();
	}

	//BooleanType:
	//	{BooleanType} "bool";
	public MscriptGrammarAccess.BooleanTypeElements getBooleanTypeAccess() {
		return gaMscript.getBooleanTypeAccess();
	}
	
	public ParserRule getBooleanTypeRule() {
		return getBooleanTypeAccess().getRule();
	}

	//StringType:
	//	{StringType} "string";
	public MscriptGrammarAccess.StringTypeElements getStringTypeAccess() {
		return gaMscript.getStringTypeAccess();
	}
	
	public ParserRule getStringTypeRule() {
		return getStringTypeAccess().getRule();
	}

	//ArrayType:
	//	TensorType | => (definedElementType=(BooleanType | StringType) | elementType=[DataType]) "["
	//	dimensions+=ArrayDimension ("," dimensions+=ArrayDimension)* "]";
	public MscriptGrammarAccess.ArrayTypeElements getArrayTypeAccess() {
		return gaMscript.getArrayTypeAccess();
	}
	
	public ParserRule getArrayTypeRule() {
		return getArrayTypeAccess().getRule();
	}

	//TensorType:
	//	definedElementType=NumericType "[" dimensions+=ArrayDimension ("," dimensions+=ArrayDimension)* "]";
	public MscriptGrammarAccess.TensorTypeElements getTensorTypeAccess() {
		return gaMscript.getTensorTypeAccess();
	}
	
	public ParserRule getTensorTypeRule() {
		return getTensorTypeAccess().getRule();
	}

	//ArrayDimension:
	//	{ArrayDimension} size=Expression?;
	public MscriptGrammarAccess.ArrayDimensionElements getArrayDimensionAccess() {
		return gaMscript.getArrayDimensionAccess();
	}
	
	public ParserRule getArrayDimensionRule() {
		return getArrayDimensionAccess().getRule();
	}

	/// *
	// * Expressions
	// * / Expression:
	//	LetExpression | IfExpression | SwitchExpression | RangeExpression;
	public MscriptGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaMscript.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//LetExpression:
	//	"let" assignments+=LetExpressionAssignment ("," assignments+=LetExpressionAssignment)* "in" target=Expression;
	public MscriptGrammarAccess.LetExpressionElements getLetExpressionAccess() {
		return gaMscript.getLetExpressionAccess();
	}
	
	public ParserRule getLetExpressionRule() {
		return getLetExpressionAccess().getRule();
	}

	//LetExpressionAssignment:
	//	(variables+=LetExpressionVariableDeclaration | "(" variables+=LetExpressionVariableDeclaration (","
	//	variables+=LetExpressionVariableDeclaration)+ ")") "=" assignedExpression=Expression;
	public MscriptGrammarAccess.LetExpressionAssignmentElements getLetExpressionAssignmentAccess() {
		return gaMscript.getLetExpressionAssignmentAccess();
	}
	
	public ParserRule getLetExpressionAssignmentRule() {
		return getLetExpressionAssignmentAccess().getRule();
	}

	//LetExpressionVariableDeclaration:
	//	name=ValidID;
	public MscriptGrammarAccess.LetExpressionVariableDeclarationElements getLetExpressionVariableDeclarationAccess() {
		return gaMscript.getLetExpressionVariableDeclarationAccess();
	}
	
	public ParserRule getLetExpressionVariableDeclarationRule() {
		return getLetExpressionVariableDeclarationAccess().getRule();
	}

	//IfExpression:
	//	static?="static"? "if" condition=Expression "then" thenExpression=Expression "else" elseExpression=Expression;
	public MscriptGrammarAccess.IfExpressionElements getIfExpressionAccess() {
		return gaMscript.getIfExpressionAccess();
	}
	
	public ParserRule getIfExpressionRule() {
		return getIfExpressionAccess().getRule();
	}

	//SwitchExpression:
	//	static?="static"? "switch" controlExpression=Expression cases+=SwitchCase* "default" ":" defaultExpression=Expression;
	public MscriptGrammarAccess.SwitchExpressionElements getSwitchExpressionAccess() {
		return gaMscript.getSwitchExpressionAccess();
	}
	
	public ParserRule getSwitchExpressionRule() {
		return getSwitchExpressionAccess().getRule();
	}

	//SwitchCase:
	//	"case" caseExpression=ImpliesExpression ":" resultExpression=Expression;
	public MscriptGrammarAccess.SwitchCaseElements getSwitchCaseAccess() {
		return gaMscript.getSwitchCaseAccess();
	}
	
	public ParserRule getSwitchCaseRule() {
		return getSwitchCaseAccess().getRule();
	}

	//RangeExpression returns Expression:
	//	ImpliesExpression ({RangeExpression.operands+=current} ":" operands+=ImpliesExpression (":"
	//	operands+=ImpliesExpression)?)?;
	public MscriptGrammarAccess.RangeExpressionElements getRangeExpressionAccess() {
		return gaMscript.getRangeExpressionAccess();
	}
	
	public ParserRule getRangeExpressionRule() {
		return getRangeExpressionAccess().getRule();
	}

	//ImpliesExpression returns Expression:
	//	LogicalOrExpression ({ImpliesExpression.leftOperand=current} "=>" rightOperand=LogicalOrExpression)?;
	public MscriptGrammarAccess.ImpliesExpressionElements getImpliesExpressionAccess() {
		return gaMscript.getImpliesExpressionAccess();
	}
	
	public ParserRule getImpliesExpressionRule() {
		return getImpliesExpressionAccess().getRule();
	}

	//LogicalOrExpression returns Expression:
	//	LogicalAndExpression ({LogicalOrExpression.leftOperand=current} "||" rightOperand=LogicalAndExpression)*;
	public MscriptGrammarAccess.LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return gaMscript.getLogicalOrExpressionAccess();
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}

	//LogicalAndExpression returns Expression:
	//	EqualityExpression ({LogicalAndExpression.leftOperand=current} "&&" rightOperand=EqualityExpression)*;
	public MscriptGrammarAccess.LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return gaMscript.getLogicalAndExpressionAccess();
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}

	//EqualityExpression returns Expression:
	//	RelationalExpression ({EqualityExpression.leftOperand=current} operator=EqualityOperator
	//	rightOperand=RelationalExpression)*;
	public MscriptGrammarAccess.EqualityExpressionElements getEqualityExpressionAccess() {
		return gaMscript.getEqualityExpressionAccess();
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}

	//enum EqualityOperator:
	//	EqualTo="==" | NotEqualTo="!=";
	public MscriptGrammarAccess.EqualityOperatorElements getEqualityOperatorAccess() {
		return gaMscript.getEqualityOperatorAccess();
	}
	
	public EnumRule getEqualityOperatorRule() {
		return getEqualityOperatorAccess().getRule();
	}

	//RelationalExpression returns Expression:
	//	AdditiveExpression => ({RelationalExpression.leftOperand=current} operator=RelationalOperator
	//	rightOperand=AdditiveExpression | {TypeTestExpression.expression=current} "is" typeSpecifier=DataTypeSpecifier)?;
	public MscriptGrammarAccess.RelationalExpressionElements getRelationalExpressionAccess() {
		return gaMscript.getRelationalExpressionAccess();
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}

	//enum RelationalOperator:
	//	LessThan="<" | LessThanOrEqualTo="<=" | GreaterThan=">" | GreaterThanOrEqualTo=">=";
	public MscriptGrammarAccess.RelationalOperatorElements getRelationalOperatorAccess() {
		return gaMscript.getRelationalOperatorAccess();
	}
	
	public EnumRule getRelationalOperatorRule() {
		return getRelationalOperatorAccess().getRule();
	}

	//AdditiveExpression returns Expression:
	//	MultiplicativeExpression ({AdditiveExpression.leftOperand=current} operator=AdditiveOperator
	//	rightOperand=MultiplicativeExpression)*;
	public MscriptGrammarAccess.AdditiveExpressionElements getAdditiveExpressionAccess() {
		return gaMscript.getAdditiveExpressionAccess();
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	//enum AdditiveOperator:
	//	Add="+" | Subtract="-";
	public MscriptGrammarAccess.AdditiveOperatorElements getAdditiveOperatorAccess() {
		return gaMscript.getAdditiveOperatorAccess();
	}
	
	public EnumRule getAdditiveOperatorRule() {
		return getAdditiveOperatorAccess().getRule();
	}

	//MultiplicativeExpression returns Expression:
	//	PowerExpression ({MultiplicativeExpression.leftOperand=current} operator=MultiplicativeOperator
	//	rightOperand=PowerExpression)*;
	public MscriptGrammarAccess.MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return gaMscript.getMultiplicativeExpressionAccess();
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}

	//enum MultiplicativeOperator:
	//	Multiply="*" | Divide="/" | ElementWiseMultiply=".*" | ElementWiseDivide="./" | Modulo="%";
	public MscriptGrammarAccess.MultiplicativeOperatorElements getMultiplicativeOperatorAccess() {
		return gaMscript.getMultiplicativeOperatorAccess();
	}
	
	public EnumRule getMultiplicativeOperatorRule() {
		return getMultiplicativeOperatorAccess().getRule();
	}

	//PowerExpression returns Expression:
	//	UnaryExpression ({PowerExpression.operand=current} operator=PowerOperator exponent=UnaryExpression)?;
	public MscriptGrammarAccess.PowerExpressionElements getPowerExpressionAccess() {
		return gaMscript.getPowerExpressionAccess();
	}
	
	public ParserRule getPowerExpressionRule() {
		return getPowerExpressionAccess().getRule();
	}

	//enum PowerOperator:
	//	Power="^" | ElementWisePower=".^";
	public MscriptGrammarAccess.PowerOperatorElements getPowerOperatorAccess() {
		return gaMscript.getPowerOperatorAccess();
	}
	
	public EnumRule getPowerOperatorRule() {
		return getPowerOperatorAccess().getRule();
	}

	//UnaryExpression returns Expression:
	//	PostfixExpression | {UnaryExpression} operator=UnaryOperator operand=PostfixExpression;
	public MscriptGrammarAccess.UnaryExpressionElements getUnaryExpressionAccess() {
		return gaMscript.getUnaryExpressionAccess();
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}

	//enum UnaryOperator:
	//	Negate="-" | LogicalNot="!";
	public MscriptGrammarAccess.UnaryOperatorElements getUnaryOperatorAccess() {
		return gaMscript.getUnaryOperatorAccess();
	}
	
	public EnumRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}

	//PostfixExpression returns Expression:
	//	ArrayElementAccess ({PostfixExpression.operand=current} operator=PostfixOperator)?;
	public MscriptGrammarAccess.PostfixExpressionElements getPostfixExpressionAccess() {
		return gaMscript.getPostfixExpressionAccess();
	}
	
	public ParserRule getPostfixExpressionRule() {
		return getPostfixExpressionAccess().getRule();
	}

	//enum PostfixOperator:
	//	Derivative="\'";
	public MscriptGrammarAccess.PostfixOperatorElements getPostfixOperatorAccess() {
		return gaMscript.getPostfixOperatorAccess();
	}
	
	public EnumRule getPostfixOperatorRule() {
		return getPostfixOperatorAccess().getRule();
	}

	//ArrayElementAccess returns Expression:
	//	(QualifiedFeatureCall | MemberFeatureCall) ({ArrayElementAccess.array=current} "[" subscripts+=ArraySubscript (","
	//	subscripts+=ArraySubscript)* "]")*;
	public MscriptGrammarAccess.ArrayElementAccessElements getArrayElementAccessAccess() {
		return gaMscript.getArrayElementAccessAccess();
	}
	
	public ParserRule getArrayElementAccessRule() {
		return getArrayElementAccessAccess().getRule();
	}

	//MemberFeatureCall returns Expression:
	//	PrimaryExpression ({MemberVariableAccess.target=current} "." memberVariable=[CallableElement|ValidID] |
	//	{FunctionCall.arguments+=current} "." feature=[CallableElement|ValidID] "(" (arguments+=Expression (","
	//	arguments+=Expression)*)? ")" | {IterationCall.target=current} "." identifier=ValidID "("
	//	iterationVariables+=IterationVariableDeclaration ("," iterationVariables+=IterationVariableDeclaration)* (";"
	//	accumulator=IterationAccumulator)? (";" breakCondition=Expression)? "|" expression=Expression ")")*;
	public MscriptGrammarAccess.MemberFeatureCallElements getMemberFeatureCallAccess() {
		return gaMscript.getMemberFeatureCallAccess();
	}
	
	public ParserRule getMemberFeatureCallRule() {
		return getMemberFeatureCallAccess().getRule();
	}

	//AssignableMemberFeatureCall returns Expression:
	//	AssignablePrimaryExpression ({MemberVariableAccess.target=current} "." memberVariable=[CallableElement|ValidID])*;
	public MscriptGrammarAccess.AssignableMemberFeatureCallElements getAssignableMemberFeatureCallAccess() {
		return gaMscript.getAssignableMemberFeatureCallAccess();
	}
	
	public ParserRule getAssignableMemberFeatureCallRule() {
		return getAssignableMemberFeatureCallAccess().getRule();
	}

	//IterationAccumulator:
	//	name=ValidID "=" initializer=Expression;
	public MscriptGrammarAccess.IterationAccumulatorElements getIterationAccumulatorAccess() {
		return gaMscript.getIterationAccumulatorAccess();
	}
	
	public ParserRule getIterationAccumulatorRule() {
		return getIterationAccumulatorAccess().getRule();
	}

	//IterationVariableDeclaration:
	//	name=ValidID;
	public MscriptGrammarAccess.IterationVariableDeclarationElements getIterationVariableDeclarationAccess() {
		return gaMscript.getIterationVariableDeclarationAccess();
	}
	
	public ParserRule getIterationVariableDeclarationRule() {
		return getIterationVariableDeclarationAccess().getRule();
	}

	//ArraySubscript:
	//	slice?=":" | expression=Expression;
	public MscriptGrammarAccess.ArraySubscriptElements getArraySubscriptAccess() {
		return gaMscript.getArraySubscriptAccess();
	}
	
	public ParserRule getArraySubscriptRule() {
		return getArraySubscriptAccess().getRule();
	}

	//PrimaryExpression returns Expression:
	//	Literal | FeatureCall | UnitConstructionOperator | ArrayConstructionOperator | ArrayConcatenationOperator |
	//	ParenthesizedExpression | EndExpression | AlgorithmExpression;
	public MscriptGrammarAccess.PrimaryExpressionElements getPrimaryExpressionAccess() {
		return gaMscript.getPrimaryExpressionAccess();
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//AssignablePrimaryExpression returns Expression:
	//	FeatureCall | ParenthesizedExpression;
	public MscriptGrammarAccess.AssignablePrimaryExpressionElements getAssignablePrimaryExpressionAccess() {
		return gaMscript.getAssignablePrimaryExpressionAccess();
	}
	
	public ParserRule getAssignablePrimaryExpressionRule() {
		return getAssignablePrimaryExpressionAccess().getRule();
	}

	//Literal:
	//	NumericLiteral | BooleanLiteral | StringLiteral;
	public MscriptGrammarAccess.LiteralElements getLiteralAccess() {
		return gaMscript.getLiteralAccess();
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//NumericLiteral:
	//	IntegerLiteral | RealLiteral;
	public MscriptGrammarAccess.NumericLiteralElements getNumericLiteralAccess() {
		return gaMscript.getNumericLiteralAccess();
	}
	
	public ParserRule getNumericLiteralRule() {
		return getNumericLiteralAccess().getRule();
	}

	//RealLiteral:
	//	data=RealData unit=Unit;
	public MscriptGrammarAccess.RealLiteralElements getRealLiteralAccess() {
		return gaMscript.getRealLiteralAccess();
	}
	
	public ParserRule getRealLiteralRule() {
		return getRealLiteralAccess().getRule();
	}

	//RealData hidden():
	//	ValidInt ("." ValidInt (IJ | EXPIJ | E ("+" | "-") ValidInt IJ?)? | (EXPIJ | E ("+" | "-") ValidInt IJ?));
	public MscriptGrammarAccess.RealDataElements getRealDataAccess() {
		return gaMscript.getRealDataAccess();
	}
	
	public ParserRule getRealDataRule() {
		return getRealDataAccess().getRule();
	}

	//IntegerLiteral:
	//	data=IntegerData unit=Unit;
	public MscriptGrammarAccess.IntegerLiteralElements getIntegerLiteralAccess() {
		return gaMscript.getIntegerLiteralAccess();
	}
	
	public ParserRule getIntegerLiteralRule() {
		return getIntegerLiteralAccess().getRule();
	}

	//IntegerData hidden():
	//	ValidInt IJ?;
	public MscriptGrammarAccess.IntegerDataElements getIntegerDataAccess() {
		return gaMscript.getIntegerDataAccess();
	}
	
	public ParserRule getIntegerDataRule() {
		return getIntegerDataAccess().getRule();
	}

	//BooleanLiteral:
	//	{BooleanLiteral} (true?="true" | "false");
	public MscriptGrammarAccess.BooleanLiteralElements getBooleanLiteralAccess() {
		return gaMscript.getBooleanLiteralAccess();
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//StringLiteral:
	//	value=STRING;
	public MscriptGrammarAccess.StringLiteralElements getStringLiteralAccess() {
		return gaMscript.getStringLiteralAccess();
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//FeatureCall returns Expression:
	//	VariableReference | FunctionCall;
	public MscriptGrammarAccess.FeatureCallElements getFeatureCallAccess() {
		return gaMscript.getFeatureCallAccess();
	}
	
	public ParserRule getFeatureCallRule() {
		return getFeatureCallAccess().getRule();
	}

	//VariableReference returns Expression:
	//	{VariableReference} feature=[CallableElement|ValidID] ("{" stepExpression=StepExpression "}")?;
	public MscriptGrammarAccess.VariableReferenceElements getVariableReferenceAccess() {
		return gaMscript.getVariableReferenceAccess();
	}
	
	public ParserRule getVariableReferenceRule() {
		return getVariableReferenceAccess().getRule();
	}

	//FunctionCall returns Expression:
	//	{FunctionCall} feature=[CallableElement|ValidID] "(" (arguments+=Expression ("," arguments+=Expression)*)? ")";
	public MscriptGrammarAccess.FunctionCallElements getFunctionCallAccess() {
		return gaMscript.getFunctionCallAccess();
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}

	//QualifiedFeatureCall returns Expression:
	//	QualifiedVariableReference | QualifiedFunctionCall;
	public MscriptGrammarAccess.QualifiedFeatureCallElements getQualifiedFeatureCallAccess() {
		return gaMscript.getQualifiedFeatureCallAccess();
	}
	
	public ParserRule getQualifiedFeatureCallRule() {
		return getQualifiedFeatureCallAccess().getRule();
	}

	//QualifiedVariableReference returns Expression:
	//	{VariableReference} "::" feature=[CallableElement|QualifiedName];
	public MscriptGrammarAccess.QualifiedVariableReferenceElements getQualifiedVariableReferenceAccess() {
		return gaMscript.getQualifiedVariableReferenceAccess();
	}
	
	public ParserRule getQualifiedVariableReferenceRule() {
		return getQualifiedVariableReferenceAccess().getRule();
	}

	//QualifiedFunctionCall returns Expression:
	//	{FunctionCall} "::" feature=[CallableElement|QualifiedName] "(" (arguments+=Expression ("," arguments+=Expression)*)?
	//	")";
	public MscriptGrammarAccess.QualifiedFunctionCallElements getQualifiedFunctionCallAccess() {
		return gaMscript.getQualifiedFunctionCallAccess();
	}
	
	public ParserRule getQualifiedFunctionCallRule() {
		return getQualifiedFunctionCallAccess().getRule();
	}

	//StepExpression:
	//	RangeStepExpression;
	public MscriptGrammarAccess.StepExpressionElements getStepExpressionAccess() {
		return gaMscript.getStepExpressionAccess();
	}
	
	public ParserRule getStepExpressionRule() {
		return getStepExpressionAccess().getRule();
	}

	//RangeStepExpression returns StepExpression:
	//	AdditiveStepExpression ({RangeStepExpression.start=current} ".." end=AdditiveStepExpression)?;
	public MscriptGrammarAccess.RangeStepExpressionElements getRangeStepExpressionAccess() {
		return gaMscript.getRangeStepExpressionAccess();
	}
	
	public ParserRule getRangeStepExpressionRule() {
		return getRangeStepExpressionAccess().getRule();
	}

	//AdditiveStepExpression returns StepExpression:
	//	NegateStepExpression ({AdditiveStepExpression.leftOperand=current} operator=AdditiveOperator
	//	rightOperand=NegateStepExpression)*;
	public MscriptGrammarAccess.AdditiveStepExpressionElements getAdditiveStepExpressionAccess() {
		return gaMscript.getAdditiveStepExpressionAccess();
	}
	
	public ParserRule getAdditiveStepExpressionRule() {
		return getAdditiveStepExpressionAccess().getRule();
	}

	//NegateStepExpression returns StepExpression:
	//	PrimitiveStepExpression | {NegateStepExpression} "-" operand=PrimitiveStepExpression;
	public MscriptGrammarAccess.NegateStepExpressionElements getNegateStepExpressionAccess() {
		return gaMscript.getNegateStepExpressionAccess();
	}
	
	public ParserRule getNegateStepExpressionRule() {
		return getNegateStepExpressionAccess().getRule();
	}

	//PrimitiveStepExpression returns StepExpression:
	//	StepLiteral | StepN;
	public MscriptGrammarAccess.PrimitiveStepExpressionElements getPrimitiveStepExpressionAccess() {
		return gaMscript.getPrimitiveStepExpressionAccess();
	}
	
	public ParserRule getPrimitiveStepExpressionRule() {
		return getPrimitiveStepExpressionAccess().getRule();
	}

	//StepLiteral:
	//	value=ValidInt;
	public MscriptGrammarAccess.StepLiteralElements getStepLiteralAccess() {
		return gaMscript.getStepLiteralAccess();
	}
	
	public ParserRule getStepLiteralRule() {
		return getStepLiteralAccess().getRule();
	}

	//StepN:
	//	{StepN} N;
	public MscriptGrammarAccess.StepNElements getStepNAccess() {
		return gaMscript.getStepNAccess();
	}
	
	public ParserRule getStepNRule() {
		return getStepNAccess().getRule();
	}

	//ArrayConstructionOperator:
	//	"{" expressions+=Expression (("," expressions+=Expression)* | "for" iterationClauses+=ArrayConstructionIterationClause
	//	("," iterationClauses+=ArrayConstructionIterationClause)*) "}";
	public MscriptGrammarAccess.ArrayConstructionOperatorElements getArrayConstructionOperatorAccess() {
		return gaMscript.getArrayConstructionOperatorAccess();
	}
	
	public ParserRule getArrayConstructionOperatorRule() {
		return getArrayConstructionOperatorAccess().getRule();
	}

	//ArrayConstructionIterationClause:
	//	variableName=ValidID "in" collectionExpression=Expression;
	public MscriptGrammarAccess.ArrayConstructionIterationClauseElements getArrayConstructionIterationClauseAccess() {
		return gaMscript.getArrayConstructionIterationClauseAccess();
	}
	
	public ParserRule getArrayConstructionIterationClauseRule() {
		return getArrayConstructionIterationClauseAccess().getRule();
	}

	//ArrayConcatenationOperator:
	//	"[" rows+=ExpressionList (";" rows+=ExpressionList)* "]";
	public MscriptGrammarAccess.ArrayConcatenationOperatorElements getArrayConcatenationOperatorAccess() {
		return gaMscript.getArrayConcatenationOperatorAccess();
	}
	
	public ParserRule getArrayConcatenationOperatorRule() {
		return getArrayConcatenationOperatorAccess().getRule();
	}

	//ExpressionList:
	//	expressions+=Expression ("," expressions+=Expression)*;
	public MscriptGrammarAccess.ExpressionListElements getExpressionListAccess() {
		return gaMscript.getExpressionListAccess();
	}
	
	public ParserRule getExpressionListRule() {
		return getExpressionListAccess().getRule();
	}

	//UnitConstructionOperator:
	//	"unitlit" unit=ExplicitUnit;
	public MscriptGrammarAccess.UnitConstructionOperatorElements getUnitConstructionOperatorAccess() {
		return gaMscript.getUnitConstructionOperatorAccess();
	}
	
	public ParserRule getUnitConstructionOperatorRule() {
		return getUnitConstructionOperatorAccess().getRule();
	}

	//ParenthesizedExpression:
	//	"(" expressions+=Expression ("," expressions+=Expression)* ")";
	public MscriptGrammarAccess.ParenthesizedExpressionElements getParenthesizedExpressionAccess() {
		return gaMscript.getParenthesizedExpressionAccess();
	}
	
	public ParserRule getParenthesizedExpressionRule() {
		return getParenthesizedExpressionAccess().getRule();
	}

	//EndExpression:
	//	{EndExpression} "end";
	public MscriptGrammarAccess.EndExpressionElements getEndExpressionAccess() {
		return gaMscript.getEndExpressionAccess();
	}
	
	public ParserRule getEndExpressionRule() {
		return getEndExpressionAccess().getRule();
	}

	//AlgorithmExpression returns Expression:
	//	{AlgorithmExpression} "algo" body=Compound;
	public MscriptGrammarAccess.AlgorithmExpressionElements getAlgorithmExpressionAccess() {
		return gaMscript.getAlgorithmExpressionAccess();
	}
	
	public ParserRule getAlgorithmExpressionRule() {
		return getAlgorithmExpressionAccess().getRule();
	}

	//Compound:
	//	{Compound} "{" statements+=Statement* "}";
	public MscriptGrammarAccess.CompoundElements getCompoundAccess() {
		return gaMscript.getCompoundAccess();
	}
	
	public ParserRule getCompoundRule() {
		return getCompoundAccess().getRule();
	}

	//Statement:
	//	Compound | Assignment | LocalVariableDeclaration | IfStatement | WhileStatement | DoWhileStatement | ForStatement |
	//	ContinueStatement | BreakStatement | ReturnStatement;
	public MscriptGrammarAccess.StatementElements getStatementAccess() {
		return gaMscript.getStatementAccess();
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//Assignment:
	//	target=AssignableMemberFeatureCall "=" assignedExpression=Expression ";";
	public MscriptGrammarAccess.AssignmentElements getAssignmentAccess() {
		return gaMscript.getAssignmentAccess();
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//LocalVariableDeclaration:
	//	"var" name=ValidID "=" initializer=Expression ";";
	public MscriptGrammarAccess.LocalVariableDeclarationElements getLocalVariableDeclarationAccess() {
		return gaMscript.getLocalVariableDeclarationAccess();
	}
	
	public ParserRule getLocalVariableDeclarationRule() {
		return getLocalVariableDeclarationAccess().getRule();
	}

	//IfStatement:
	//	"if" "(" condition=Expression ")" thenStatement=Statement ("else" elseStatement=Statement)?;
	public MscriptGrammarAccess.IfStatementElements getIfStatementAccess() {
		return gaMscript.getIfStatementAccess();
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}

	//WhileStatement:
	//	"while" "(" condition=Expression ")" body=Statement;
	public MscriptGrammarAccess.WhileStatementElements getWhileStatementAccess() {
		return gaMscript.getWhileStatementAccess();
	}
	
	public ParserRule getWhileStatementRule() {
		return getWhileStatementAccess().getRule();
	}

	//ForStatement:
	//	"for" "(" iterationVariable=IterationVariableDeclaration "in" collectionExpression=Expression ")" body=Statement;
	public MscriptGrammarAccess.ForStatementElements getForStatementAccess() {
		return gaMscript.getForStatementAccess();
	}
	
	public ParserRule getForStatementRule() {
		return getForStatementAccess().getRule();
	}

	//DoWhileStatement:
	//	"do" body=Statement "while" "(" condition=Expression ")" ";";
	public MscriptGrammarAccess.DoWhileStatementElements getDoWhileStatementAccess() {
		return gaMscript.getDoWhileStatementAccess();
	}
	
	public ParserRule getDoWhileStatementRule() {
		return getDoWhileStatementAccess().getRule();
	}

	//ContinueStatement:
	//	{ContinueStatement} "continue" ";";
	public MscriptGrammarAccess.ContinueStatementElements getContinueStatementAccess() {
		return gaMscript.getContinueStatementAccess();
	}
	
	public ParserRule getContinueStatementRule() {
		return getContinueStatementAccess().getRule();
	}

	//BreakStatement:
	//	{BreakStatement} "break" ";";
	public MscriptGrammarAccess.BreakStatementElements getBreakStatementAccess() {
		return gaMscript.getBreakStatementAccess();
	}
	
	public ParserRule getBreakStatementRule() {
		return getBreakStatementAccess().getRule();
	}

	//ReturnStatement:
	//	"return" expression=Expression ";";
	public MscriptGrammarAccess.ReturnStatementElements getReturnStatementAccess() {
		return gaMscript.getReturnStatementAccess();
	}
	
	public ParserRule getReturnStatementRule() {
		return getReturnStatementAccess().getRule();
	}

	/// *
	// * Unit expressions
	// * / Unit:
	//	{Unit} ("(" ")" | "(" numerator=UnitNumerator ("/" denominator=UnitDenominator)? ")" |
	//	numerator=ImplicitUnitNumerator);
	public MscriptGrammarAccess.UnitElements getUnitAccess() {
		return gaMscript.getUnitAccess();
	}
	
	public ParserRule getUnitRule() {
		return getUnitAccess().getRule();
	}

	//ExplicitUnit returns Unit:
	//	"(" numerator=UnitNumerator ("/" denominator=UnitDenominator)? ")";
	public MscriptGrammarAccess.ExplicitUnitElements getExplicitUnitAccess() {
		return gaMscript.getExplicitUnitAccess();
	}
	
	public ParserRule getExplicitUnitRule() {
		return getExplicitUnitAccess().getRule();
	}

	//UnitNumerator:
	//	{UnitNumerator} ONE | factors+=UnitFactor ("*" factors+=UnitFactor)*;
	public MscriptGrammarAccess.UnitNumeratorElements getUnitNumeratorAccess() {
		return gaMscript.getUnitNumeratorAccess();
	}
	
	public ParserRule getUnitNumeratorRule() {
		return getUnitNumeratorAccess().getRule();
	}

	//ImplicitUnitNumerator returns UnitNumerator:
	//	{UnitNumerator};
	public MscriptGrammarAccess.ImplicitUnitNumeratorElements getImplicitUnitNumeratorAccess() {
		return gaMscript.getImplicitUnitNumeratorAccess();
	}
	
	public ParserRule getImplicitUnitNumeratorRule() {
		return getImplicitUnitNumeratorAccess().getRule();
	}

	//UnitDenominator:
	//	factors+=UnitFactor | "(" factors+=UnitFactor ("*" factors+=UnitFactor)* ")";
	public MscriptGrammarAccess.UnitDenominatorElements getUnitDenominatorAccess() {
		return gaMscript.getUnitDenominatorAccess();
	}
	
	public ParserRule getUnitDenominatorRule() {
		return getUnitDenominatorAccess().getRule();
	}

	//UnitFactor:
	//	symbol=ValidID ("^" exponent=UnitExponent)?;
	public MscriptGrammarAccess.UnitFactorElements getUnitFactorAccess() {
		return gaMscript.getUnitFactorAccess();
	}
	
	public ParserRule getUnitFactorRule() {
		return getUnitFactorAccess().getRule();
	}

	//UnitExponent returns ecore::EInt:
	//	"-"? ValidInt;
	public MscriptGrammarAccess.UnitExponentElements getUnitExponentAccess() {
		return gaMscript.getUnitExponentAccess();
	}
	
	public ParserRule getUnitExponentRule() {
		return getUnitExponentAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public MscriptGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaMscript.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//ValidInt returns ecore::EInt:
	//	ONE | INT;
	public MscriptGrammarAccess.ValidIntElements getValidIntAccess() {
		return gaMscript.getValidIntAccess();
	}
	
	public ParserRule getValidIntRule() {
		return getValidIntAccess().getRule();
	}

	//ValidID:
	//	N | IJ | E | EXPIJ | ID;
	public MscriptGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaMscript.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	/// *
	// * Terminals
	// * / terminal N:
	//	"n";
	public TerminalRule getNRule() {
		return gaMscript.getNRule();
	} 

	//terminal IJ:
	//	"i" | "j";
	public TerminalRule getIJRule() {
		return gaMscript.getIJRule();
	} 

	//terminal E:
	//	"e" | "E";
	public TerminalRule getERule() {
		return gaMscript.getERule();
	} 

	//terminal EXPIJ:
	//	E "0".."9"+ IJ?;
	public TerminalRule getEXPIJRule() {
		return gaMscript.getEXPIJRule();
	} 

	//terminal ONE:
	//	"1";
	public TerminalRule getONERule() {
		return gaMscript.getONERule();
	} 

	//terminal INT:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaMscript.getINTRule();
	} 

	//terminal ID:
	//	"_"? ("a".."z" | "A".."Z") ("0".."9" | "_" | "a".."z" | "A".."Z")*;
	public TerminalRule getIDRule() {
		return gaMscript.getIDRule();
	} 

	//terminal STRING:
	//	"\"" (!("\\" | "\"") | "\\" ("\'" | "\"" | "?" | "\\" | "a" | "b" | "f" | "n" | "r" | "t" | "v"))* "\"";
	public TerminalRule getSTRINGRule() {
		return gaMscript.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaMscript.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaMscript.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaMscript.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaMscript.getANY_OTHERRule();
	} 
}
