/*
 * generated by Xtext
 */
package org.eclipselabs.damos.dconfig;

import org.eclipse.xtext.conversion.IValueConverterService;
import org.eclipse.xtext.conversion.impl.AbstractIDValueConverter;
import org.eclipse.xtext.conversion.impl.QualifiedNameValueConverter;
import org.eclipse.xtext.linking.ILinker;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.parser.IAstFactory;
import org.eclipse.xtext.parser.antlr.Lexer;
import org.eclipse.xtext.parser.antlr.LexerBindings;
import org.eclipse.xtext.resource.ILocationInFileProvider;
import org.eclipse.xtext.scoping.IGlobalScopeProvider;
import org.eclipse.xtext.scoping.IScopeProvider;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipselabs.damos.dconfig.conversion.DconfigTerminalConverters;
import org.eclipselabs.damos.dconfig.naming.DconfigQualifiedNameProvider;
import org.eclipselabs.damos.dconfig.parser.antlr.DconfigLexer;
import org.eclipselabs.damos.dconfig.scoping.DconfigGlobalScopeProvider;
import org.eclipselabs.damos.dconfig.scoping.DconfigImportedNamespaceScopeProvider;
import org.eclipselabs.damos.mscript.conversion.MscriptIDValueConverter;
import org.eclipselabs.damos.mscript.conversion.MscriptQualifiedNameValueConverter;
import org.eclipselabs.damos.mscript.linking.MscriptLinker;
import org.eclipselabs.damos.mscript.parser.antlr.MscriptEcoreElementFactory;
import org.eclipselabs.damos.mscript.resource.MscriptLocationInFileProvider;

import com.google.inject.Binder;
import com.google.inject.name.Names;

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
public class DconfigRuntimeModule extends org.eclipselabs.damos.dconfig.AbstractDconfigRuntimeModule {

	public Class<? extends ILinker> bindILinker() {
		return MscriptLinker.class;
	}

	public Class<? extends AbstractIDValueConverter> bindAbstractIDValueConverter() {
		return MscriptIDValueConverter.class;
	}

	@Override
	public Class<? extends IValueConverterService> bindIValueConverterService() {
		return DconfigTerminalConverters.class;
	}
	
	@Override
	public Class<? extends IGlobalScopeProvider> bindIGlobalScopeProvider() {
		return DconfigGlobalScopeProvider.class;
	}
	
	public Class<? extends QualifiedNameValueConverter> bindQualifiedNameValueConverter() {
		return MscriptQualifiedNameValueConverter.class;
	}

	@Override
	public Class<? extends IQualifiedNameProvider> bindIQualifiedNameProvider() {
		return DconfigQualifiedNameProvider.class;
	}

	@Override
	public void configureIScopeProviderDelegate(com.google.inject.Binder binder) {
		binder.bind(IScopeProvider.class).annotatedWith(Names.named(AbstractDeclarativeScopeProvider.NAMED_DELEGATE)).to(DconfigImportedNamespaceScopeProvider.class);
	}

	@Override
	public void configureRuntimeLexer(Binder binder) {
		binder.bind(Lexer.class).annotatedWith(Names.named(LexerBindings.RUNTIME)).to(DconfigLexer.class);
	}

	@Override
	public Class<? extends ILocationInFileProvider> bindILocationInFileProvider() {
		return MscriptLocationInFileProvider.class;
	}

	@Override
	public Class<? extends IAstFactory> bindIAstFactory() {
		return MscriptEcoreElementFactory.class;
	}

}
