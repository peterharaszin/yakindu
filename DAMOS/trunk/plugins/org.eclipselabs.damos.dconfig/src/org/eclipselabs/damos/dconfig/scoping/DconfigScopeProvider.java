/*
 * generated by Xtext
 */
package org.eclipselabs.damos.dconfig.scoping;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.SimpleScope;
import org.eclipselabs.damos.dconfig.ComputationProperty;
import org.eclipselabs.damos.dconfig.Configuration;
import org.eclipselabs.damos.dconfig.DconfigPackage;
import org.eclipselabs.damos.dconfig.FragmentConfiguration;
import org.eclipselabs.damos.dconfig.Mapping;
import org.eclipselabs.damos.dconfig.MappingBody;
import org.eclipselabs.damos.dconfig.Property;
import org.eclipselabs.damos.dconfig.PropertyContainer;
import org.eclipselabs.damos.dconfig.RootSystemConfiguration;
import org.eclipselabs.damos.dconfig.RunnerSpecifier;
import org.eclipselabs.damos.dconfig.SelectionProperty;
import org.eclipselabs.damos.dconfig.SelectionPropertyBody;
import org.eclipselabs.damos.dconfig.SelectionPropertyDeclaration;
import org.eclipselabs.damos.dconfig.SelectionPropertyOption;
import org.eclipselabs.damos.dconfig.SimplePropertyDeclaration;
import org.eclipselabs.damos.dconfig.SubsystemConfiguration;
import org.eclipselabs.damos.dconfig.SystemConfiguration;
import org.eclipselabs.damos.dconfig.SystemConfigurationBody;
import org.eclipselabs.damos.dml.Component;
import org.eclipselabs.damos.dml.DMLPackage;
import org.eclipselabs.damos.dml.Fragment;
import org.eclipselabs.damos.dml.Subsystem;
import org.eclipselabs.damos.dml.SubsystemRealization;
import org.eclipselabs.damos.dml.util.DMLUtil;
import org.eclipselabs.damos.mscript.computationmodel.ComputationModelPackage;
import org.eclipselabs.damos.mscript.computationmodel.scoping.ComputationModelScopeProvider;

import com.google.common.base.Predicate;
import com.google.common.collect.Iterables;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping
 * on how and when to use it 
 *
 */
public class DconfigScopeProvider extends ComputationModelScopeProvider {
	
	public IScope scope_Configuration_extendedConfiguration(Configuration context, EReference reference) {
		return new SimpleScope(Scopes.selectCompatible(getDelegate().getScope(context, reference).getAllElements(),
				DconfigPackage.eINSTANCE.getConfiguration()));
	}
	
	public IScope scope_RunnerSpecifier_runnerDeclaration(RunnerSpecifier context, EReference reference) {
		return new SimpleScope(Scopes.selectCompatible(getDelegate().getScope(context, reference).getAllElements(),
				DconfigPackage.eINSTANCE.getRunnerDeclaration()));
	}

	public IScope scope_SimpleProperty_declaration(Configuration context, EReference reference) {
		return new SimpleScope(Scopes.selectCompatible(getDelegate().getScope(context, reference).getAllElements(),
				DconfigPackage.eINSTANCE.getSimplePropertyDeclaration()));
	}

	public IScope scope_SimpleProperty_declaration(SelectionPropertyBody context, EReference reference) {
		return Scopes.scopeFor(Iterables.filter(context.getOwner().getSelection().getPropertyDeclarations(), SimplePropertyDeclaration.class));
	}

	public IScope scope_SimpleProperty_declaration(MappingBody context, EReference reference) {
		return Scopes.scopeFor(Iterables.filter(context.getOwner().getTargetResource().getPropertyDeclarations(), SimplePropertyDeclaration.class));
	}

	public IScope scope_SelectionProperty_declaration(Configuration context, EReference reference) {
		return new SimpleScope(Scopes.selectCompatible(getDelegate().getScope(context, reference).getAllElements(),
				DconfigPackage.eINSTANCE.getSelectionPropertyDeclaration()));
	}
	
	public IScope scope_SelectionProperty_declaration(SelectionPropertyBody context, EReference reference) {
		return Scopes.scopeFor(Iterables.filter(context.getOwner().getSelection().getPropertyDeclarations(), SelectionPropertyDeclaration.class));
	}

	public IScope scope_SelectionProperty_declaration(MappingBody context, EReference reference) {
		return Scopes.scopeFor(Iterables.filter(context.getOwner().getTargetResource().getPropertyDeclarations(), SelectionPropertyDeclaration.class));
	}

	public IScope scope_SelectionProperty_selection(final SelectionProperty context, EReference reference) {
		Iterable<IEObjectDescription> elements = getDelegate().getScope(context, reference).getAllElements();
		Iterable<IEObjectDescription> filteredElements = Iterables.filter(elements, new Predicate<IEObjectDescription>() {

			public boolean apply(IEObjectDescription input) {
				EObject eObjectOrProxy = input.getEObjectOrProxy();
				if (eObjectOrProxy instanceof SelectionPropertyOption) {
					eObjectOrProxy = EcoreUtil.resolve(eObjectOrProxy, context);
					if (!eObjectOrProxy.eIsProxy()) {
						SelectionPropertyOption option = (SelectionPropertyOption) eObjectOrProxy;
						if (option.getTarget() == context.getDeclaration()) {
							return true;
						}
					}
				}
				return false;
			}
			
		});
		return new SimpleScope(filteredElements);
	}
	
	public IScope scope_RootSystemConfiguration_contextFragment(RootSystemConfiguration context, EReference reference) {
		return new SimpleScope(Scopes.selectCompatible(getDelegate().getScope(context, reference).getAllElements(),
				DMLPackage.eINSTANCE.getFragment()));
	}

	public IScope scope_FragmentConfiguration_startFragment(SystemConfiguration context, EReference reference) {
		Fragment contextFragment = getContextFragment(context);
		if (contextFragment != null) {
			List<Fragment> fragments = new ArrayList<Fragment>();
			while (contextFragment != null) {
				fragments.add(contextFragment);
				contextFragment = contextFragment.getParent();
			}
			return Scopes.scopeFor(fragments);
		}
		return IScope.NULLSCOPE;
	}

	public IScope scope_FragmentConfiguration_endFragment(FragmentConfiguration context, EReference reference) {
		SystemConfiguration systemConfiguration = DMLUtil.getOwner(context, SystemConfiguration.class);
		if (systemConfiguration == null) {
			return IScope.NULLSCOPE;
		}
		Fragment startFragment = context.getStartFragment();
		Fragment contextFragment = getContextFragment(systemConfiguration);
		if (contextFragment != null) {
			List<Fragment> fragments = new ArrayList<Fragment>();
			while (contextFragment != null) {
				if (startFragment == contextFragment) {
					startFragment = null;
				}
				if (startFragment == null) {
					fragments.add(contextFragment);
				}
				contextFragment = contextFragment.getParent();
			}
			return Scopes.scopeFor(fragments);
		}
		return IScope.NULLSCOPE;
	}

	public IScope scope_ComponentConfiguration_component(SystemConfiguration context, EReference reference) {
		Fragment contextFragment = getContextFragment(context);
		if (contextFragment == null) {
			return IScope.NULLSCOPE;
		}

		return Scopes.scopeFor(Iterables.filter(contextFragment.getAllFragmentElements(), Component.class));
	}

	public IScope scope_SubsystemConfiguration_subsystem(SubsystemConfiguration context, EReference reference) {
		SystemConfiguration enclosingSystemConfiguration = context.getParent();
		if (enclosingSystemConfiguration == null) {
			return IScope.NULLSCOPE;
		}

		Fragment contextFragment = getContextFragment(enclosingSystemConfiguration);
		if (contextFragment == null) {
			return IScope.NULLSCOPE;
		}
		
		return Scopes.scopeFor(Iterables.filter(contextFragment.getAllFragmentElements(), Subsystem.class));
	}
	
	public IScope scope_ComputationProperty_computationModel(ComputationProperty context, EReference reference) {
		return new SimpleScope(Scopes.selectCompatible(getDelegate().getScope(context, reference).getAllElements(),
				ComputationModelPackage.eINSTANCE.getComputationModel()));
	}

	public IScope scope_Mapping_source(SystemConfiguration context, EReference reference) {
		Fragment contextFragment = getContextFragment(context);
		if (contextFragment == null) {
			return IScope.NULLSCOPE;
		}

		return Scopes.scopeFor(Iterables.filter(contextFragment.getAllFragmentElements(), Component.class));
	}

	public IScope scope_Mapping_targetProperty(final SystemConfigurationBody context, EReference reference) {
		List<Property> properties = new ArrayList<Property>();
		EObject eObject = context;
		while (eObject != null) {
			if (eObject instanceof PropertyContainer) {
				collectNamedSelectionProperties((PropertyContainer) eObject, properties);
			}
			if (eObject instanceof Configuration) {
				break;
			}
			eObject = eObject.eContainer();
		}
		return Scopes.scopeFor(properties);
	}
	
	public IScope scope_Mapping_targetResource(Mapping context, EReference reference) {
		if (context.getTargetProperty() != null && context.getTargetProperty().getDeclaration() != null) {
			return Scopes.scopeFor(context.getTargetProperty().getSelection().getResourceDeclarations());
		}
		return IScope.NULLSCOPE;
	}

	private void collectNamedSelectionProperties(PropertyContainer propertyContainer, List<Property> properties) {
		for (Property property : propertyContainer.getProperties()) {
			if (property instanceof SelectionProperty) {
				SelectionProperty selectionProperty = (SelectionProperty) property;
				if (selectionProperty.getName() != null) {
					properties.add(selectionProperty);
				}
			}
		}
	}

	private Fragment getContextFragment(SystemConfiguration systemConfiguration) {
		if (systemConfiguration instanceof RootSystemConfiguration) {
			return ((RootSystemConfiguration) systemConfiguration).getContextFragment();
		}
	
		List<SystemConfiguration> enclosingSystemConfigurations = new ArrayList<SystemConfiguration>();
		enclosingSystemConfigurations.add(systemConfiguration);
		
		while (systemConfiguration instanceof SubsystemConfiguration) {
			systemConfiguration = ((SubsystemConfiguration) systemConfiguration).getParent();
			enclosingSystemConfigurations.add(systemConfiguration);
		}
		
		SystemConfiguration rootSystemConfiguration = enclosingSystemConfigurations.get(enclosingSystemConfigurations.size() - 1);
		if (!(rootSystemConfiguration instanceof RootSystemConfiguration)) {
			return null;
		}
		
		Fragment contextFragment = ((RootSystemConfiguration) rootSystemConfiguration).getContextFragment();
		
		for (int i = enclosingSystemConfigurations.size() - 2; i >= 0; --i) {
			SystemConfiguration next = enclosingSystemConfigurations.get(i);
			if (!(next instanceof SubsystemConfiguration)) {
				return null;
			}
			SubsystemRealization realization = ((SubsystemConfiguration) next).getSubsystem().getRealization(contextFragment);
			if (realization == null) {
				return null;
			}
			contextFragment = realization.getRealizingFragment();
			if (contextFragment == null) {
				return null;
			}
		}
		
		return contextFragment;
	}

}
