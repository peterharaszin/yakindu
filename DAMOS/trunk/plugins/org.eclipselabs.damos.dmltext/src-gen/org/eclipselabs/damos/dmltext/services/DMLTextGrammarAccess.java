/*
* generated by Xtext
*/

package org.eclipselabs.damos.dmltext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipselabs.damos.mscript.services.MscriptGrammarAccess;

@Singleton
public class DMLTextGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class RootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Root");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cBlockTypesAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cBlockTypesMscriptBlockTypeParserRuleCall_0_0 = (RuleCall)cBlockTypesAssignment_0.eContents().get(0);
		private final Assignment cSystemInterfacesAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cSystemInterfacesMscriptSystemInterfaceParserRuleCall_1_0 = (RuleCall)cSystemInterfacesAssignment_1.eContents().get(0);
		
		//Root:
		//	(blockTypes+=MscriptBlockType | systemInterfaces+=MscriptSystemInterface)*;
		public ParserRule getRule() { return rule; }

		//(blockTypes+=MscriptBlockType | systemInterfaces+=MscriptSystemInterface)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//blockTypes+=MscriptBlockType
		public Assignment getBlockTypesAssignment_0() { return cBlockTypesAssignment_0; }

		//MscriptBlockType
		public RuleCall getBlockTypesMscriptBlockTypeParserRuleCall_0_0() { return cBlockTypesMscriptBlockTypeParserRuleCall_0_0; }

		//systemInterfaces+=MscriptSystemInterface
		public Assignment getSystemInterfacesAssignment_1() { return cSystemInterfacesAssignment_1; }

		//MscriptSystemInterface
		public RuleCall getSystemInterfacesMscriptSystemInterfaceParserRuleCall_1_0() { return cSystemInterfacesMscriptSystemInterfaceParserRuleCall_1_0; }
	}

	public class MscriptBlockTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MscriptBlockType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPackageNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPackageNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cPackageNameAssignment_1.eContents().get(0);
		private final Assignment cImportDeclarationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportDeclarationsImportDeclarationParserRuleCall_2_0 = (RuleCall)cImportDeclarationsAssignment_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Assignment cTimingAssignment_3_0 = (Assignment)cUnorderedGroup_3.eContents().get(0);
		private final RuleCall cTimingTimingKindEnumRuleCall_3_0_0 = (RuleCall)cTimingAssignment_3_0.eContents().get(0);
		private final Assignment cBoundaryAssignment_3_1 = (Assignment)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cBoundaryBoundaryKeyword_3_1_0 = (Keyword)cBoundaryAssignment_3_1.eContents().get(0);
		private final Keyword cBlockTypeKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameValidIDParserRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cInputDefinitionsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cInputDefinitionsInputDefinitionParserRuleCall_7_0 = (RuleCall)cInputDefinitionsAssignment_7.eContents().get(0);
		private final Assignment cOutputDefinitionsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cOutputDefinitionsOutputDefinitionParserRuleCall_8_0 = (RuleCall)cOutputDefinitionsAssignment_8.eContents().get(0);
		private final Assignment cParametersAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cParametersParameterParserRuleCall_9_0 = (RuleCall)cParametersAssignment_9.eContents().get(0);
		private final Assignment cDeclarationsAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_10_0 = (RuleCall)cDeclarationsAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//MscriptBlockType:
		//	"package" packageName=QualifiedName importDeclarations+=ImportDeclaration* (timing=TimingKind? &
		//	boundary?="boundary"?) "blockType" name=ValidID "{" inputDefinitions+=InputDefinition*
		//	outputDefinitions+=OutputDefinition* parameters+=Parameter* declarations+=Declaration* "}";
		public ParserRule getRule() { return rule; }

		//"package" packageName=QualifiedName importDeclarations+=ImportDeclaration* (timing=TimingKind? & boundary?="boundary"?)
		//"blockType" name=ValidID "{" inputDefinitions+=InputDefinition* outputDefinitions+=OutputDefinition*
		//parameters+=Parameter* declarations+=Declaration* "}"
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//packageName=QualifiedName
		public Assignment getPackageNameAssignment_1() { return cPackageNameAssignment_1; }

		//QualifiedName
		public RuleCall getPackageNameQualifiedNameParserRuleCall_1_0() { return cPackageNameQualifiedNameParserRuleCall_1_0; }

		//importDeclarations+=ImportDeclaration*
		public Assignment getImportDeclarationsAssignment_2() { return cImportDeclarationsAssignment_2; }

		//ImportDeclaration
		public RuleCall getImportDeclarationsImportDeclarationParserRuleCall_2_0() { return cImportDeclarationsImportDeclarationParserRuleCall_2_0; }

		//timing=TimingKind? & boundary?="boundary"?
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//timing=TimingKind?
		public Assignment getTimingAssignment_3_0() { return cTimingAssignment_3_0; }

		//TimingKind
		public RuleCall getTimingTimingKindEnumRuleCall_3_0_0() { return cTimingTimingKindEnumRuleCall_3_0_0; }

		//boundary?="boundary"?
		public Assignment getBoundaryAssignment_3_1() { return cBoundaryAssignment_3_1; }

		//"boundary"
		public Keyword getBoundaryBoundaryKeyword_3_1_0() { return cBoundaryBoundaryKeyword_3_1_0; }

		//"blockType"
		public Keyword getBlockTypeKeyword_4() { return cBlockTypeKeyword_4; }

		//name=ValidID
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_5_0() { return cNameValidIDParserRuleCall_5_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//inputDefinitions+=InputDefinition*
		public Assignment getInputDefinitionsAssignment_7() { return cInputDefinitionsAssignment_7; }

		//InputDefinition
		public RuleCall getInputDefinitionsInputDefinitionParserRuleCall_7_0() { return cInputDefinitionsInputDefinitionParserRuleCall_7_0; }

		//outputDefinitions+=OutputDefinition*
		public Assignment getOutputDefinitionsAssignment_8() { return cOutputDefinitionsAssignment_8; }

		//OutputDefinition
		public RuleCall getOutputDefinitionsOutputDefinitionParserRuleCall_8_0() { return cOutputDefinitionsOutputDefinitionParserRuleCall_8_0; }

		//parameters+=Parameter*
		public Assignment getParametersAssignment_9() { return cParametersAssignment_9; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_9_0() { return cParametersParameterParserRuleCall_9_0; }

		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_10() { return cDeclarationsAssignment_10; }

		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_10_0() { return cDeclarationsDeclarationParserRuleCall_10_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}

	public class InputDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InputDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_0 = (UnorderedGroup)cGroup.eContents().get(0);
		private final Assignment cSocketAssignment_0_0 = (Assignment)cUnorderedGroup_0.eContents().get(0);
		private final Keyword cSocketSocketKeyword_0_0_0 = (Keyword)cSocketAssignment_0_0.eContents().get(0);
		private final Assignment cTestPointAssignment_0_1 = (Assignment)cUnorderedGroup_0.eContents().get(1);
		private final Keyword cTestPointTestPointKeyword_0_1_0 = (Keyword)cTestPointAssignment_0_1.eContents().get(0);
		private final Keyword cInputKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMinimumPortCountAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMinimumPortCountValidIntParserRuleCall_3_1_0 = (RuleCall)cMinimumPortCountAssignment_3_1.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cMaximumPortCountAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cMaximumPortCountUpperBoundLiteralParserRuleCall_3_3_0 = (RuleCall)cMaximumPortCountAssignment_3_3.eContents().get(0);
		private final Group cGroup_3_4 = (Group)cGroup_3.eContents().get(4);
		private final Keyword cVerticalLineKeyword_3_4_0 = (Keyword)cGroup_3_4.eContents().get(0);
		private final Assignment cDefaultPortCountAssignment_3_4_1 = (Assignment)cGroup_3_4.eContents().get(1);
		private final RuleCall cDefaultPortCountValidIntParserRuleCall_3_4_1_0 = (RuleCall)cDefaultPortCountAssignment_3_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_5 = (Keyword)cGroup_3.eContents().get(5);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_4_1 = (UnorderedGroup)cGroup_4.eContents().get(1);
		private final Group cGroup_4_1_0 = (Group)cUnorderedGroup_4_1.eContents().get(0);
		private final Keyword cDirectFeedthroughKeyword_4_1_0_0 = (Keyword)cGroup_4_1_0.eContents().get(0);
		private final Assignment cDirectFeedthroughPolicyAssignment_4_1_0_1 = (Assignment)cGroup_4_1_0.eContents().get(1);
		private final RuleCall cDirectFeedthroughPolicyDirectFeedthroughPolicyParserRuleCall_4_1_0_1_0 = (RuleCall)cDirectFeedthroughPolicyAssignment_4_1_0_1.eContents().get(0);
		private final Assignment cParametersAssignment_4_1_1 = (Assignment)cUnorderedGroup_4_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_4_1_1_0 = (RuleCall)cParametersAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//InputDefinition:
		//	(socket?="socket"? & testPoint?="testPoint"?) "input" name=ValidID ("[" minimumPortCount=ValidInt ".."
		//	maximumPortCount=UpperBoundLiteral ("|" defaultPortCount=ValidInt)? "]")? ("{" (("directFeedthrough"
		//	directFeedthroughPolicy=DirectFeedthroughPolicy)? & parameters+=Parameter*) "}")?;
		public ParserRule getRule() { return rule; }

		//(socket?="socket"? & testPoint?="testPoint"?) "input" name=ValidID ("[" minimumPortCount=ValidInt ".."
		//maximumPortCount=UpperBoundLiteral ("|" defaultPortCount=ValidInt)? "]")? ("{" (("directFeedthrough"
		//directFeedthroughPolicy=DirectFeedthroughPolicy)? & parameters+=Parameter*) "}")?
		public Group getGroup() { return cGroup; }

		//socket?="socket"? & testPoint?="testPoint"?
		public UnorderedGroup getUnorderedGroup_0() { return cUnorderedGroup_0; }

		//socket?="socket"?
		public Assignment getSocketAssignment_0_0() { return cSocketAssignment_0_0; }

		//"socket"
		public Keyword getSocketSocketKeyword_0_0_0() { return cSocketSocketKeyword_0_0_0; }

		//testPoint?="testPoint"?
		public Assignment getTestPointAssignment_0_1() { return cTestPointAssignment_0_1; }

		//"testPoint"
		public Keyword getTestPointTestPointKeyword_0_1_0() { return cTestPointTestPointKeyword_0_1_0; }

		//"input"
		public Keyword getInputKeyword_1() { return cInputKeyword_1; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }

		//("[" minimumPortCount=ValidInt ".." maximumPortCount=UpperBoundLiteral ("|" defaultPortCount=ValidInt)? "]")?
		public Group getGroup_3() { return cGroup_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }

		//minimumPortCount=ValidInt
		public Assignment getMinimumPortCountAssignment_3_1() { return cMinimumPortCountAssignment_3_1; }

		//ValidInt
		public RuleCall getMinimumPortCountValidIntParserRuleCall_3_1_0() { return cMinimumPortCountValidIntParserRuleCall_3_1_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_3_2() { return cFullStopFullStopKeyword_3_2; }

		//maximumPortCount=UpperBoundLiteral
		public Assignment getMaximumPortCountAssignment_3_3() { return cMaximumPortCountAssignment_3_3; }

		//UpperBoundLiteral
		public RuleCall getMaximumPortCountUpperBoundLiteralParserRuleCall_3_3_0() { return cMaximumPortCountUpperBoundLiteralParserRuleCall_3_3_0; }

		//("|" defaultPortCount=ValidInt)?
		public Group getGroup_3_4() { return cGroup_3_4; }

		//"|"
		public Keyword getVerticalLineKeyword_3_4_0() { return cVerticalLineKeyword_3_4_0; }

		//defaultPortCount=ValidInt
		public Assignment getDefaultPortCountAssignment_3_4_1() { return cDefaultPortCountAssignment_3_4_1; }

		//ValidInt
		public RuleCall getDefaultPortCountValidIntParserRuleCall_3_4_1_0() { return cDefaultPortCountValidIntParserRuleCall_3_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_5() { return cRightSquareBracketKeyword_3_5; }

		//("{" (("directFeedthrough" directFeedthroughPolicy=DirectFeedthroughPolicy)? & parameters+=Parameter*) "}")?
		public Group getGroup_4() { return cGroup_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }

		//("directFeedthrough" directFeedthroughPolicy=DirectFeedthroughPolicy)? & parameters+=Parameter*
		public UnorderedGroup getUnorderedGroup_4_1() { return cUnorderedGroup_4_1; }

		//("directFeedthrough" directFeedthroughPolicy=DirectFeedthroughPolicy)?
		public Group getGroup_4_1_0() { return cGroup_4_1_0; }

		//"directFeedthrough"
		public Keyword getDirectFeedthroughKeyword_4_1_0_0() { return cDirectFeedthroughKeyword_4_1_0_0; }

		//directFeedthroughPolicy=DirectFeedthroughPolicy
		public Assignment getDirectFeedthroughPolicyAssignment_4_1_0_1() { return cDirectFeedthroughPolicyAssignment_4_1_0_1; }

		//DirectFeedthroughPolicy
		public RuleCall getDirectFeedthroughPolicyDirectFeedthroughPolicyParserRuleCall_4_1_0_1_0() { return cDirectFeedthroughPolicyDirectFeedthroughPolicyParserRuleCall_4_1_0_1_0; }

		//parameters+=Parameter*
		public Assignment getParametersAssignment_4_1_1() { return cParametersAssignment_4_1_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_4_1_1_0() { return cParametersParameterParserRuleCall_4_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_2() { return cRightCurlyBracketKeyword_4_2; }
	}

	public class DirectFeedthroughPolicyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DirectFeedthroughPolicy");
		private final RuleCall cBooleanDirectFeedthroughPolicyParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//DirectFeedthroughPolicy:
		//	BooleanDirectFeedthroughPolicy;
		public ParserRule getRule() { return rule; }

		//BooleanDirectFeedthroughPolicy
		public RuleCall getBooleanDirectFeedthroughPolicyParserRuleCall() { return cBooleanDirectFeedthroughPolicyParserRuleCall; }
	}

	public class BooleanDirectFeedthroughPolicyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanDirectFeedthroughPolicy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanDirectFeedthroughPolicyAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cDirectFeedthroughAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cDirectFeedthroughAlwaysKeyword_1_0_0 = (Keyword)cDirectFeedthroughAssignment_1_0.eContents().get(0);
		private final Keyword cNeverKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//BooleanDirectFeedthroughPolicy:
		//	{BooleanDirectFeedthroughPolicy} (directFeedthrough?="always" | "never");
		public ParserRule getRule() { return rule; }

		//{BooleanDirectFeedthroughPolicy} (directFeedthrough?="always" | "never")
		public Group getGroup() { return cGroup; }

		//{BooleanDirectFeedthroughPolicy}
		public Action getBooleanDirectFeedthroughPolicyAction_0() { return cBooleanDirectFeedthroughPolicyAction_0; }

		//directFeedthrough?="always" | "never"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//directFeedthrough?="always"
		public Assignment getDirectFeedthroughAssignment_1_0() { return cDirectFeedthroughAssignment_1_0; }

		//"always"
		public Keyword getDirectFeedthroughAlwaysKeyword_1_0_0() { return cDirectFeedthroughAlwaysKeyword_1_0_0; }

		//"never"
		public Keyword getNeverKeyword_1_1() { return cNeverKeyword_1_1; }
	}

	public class OutputDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OutputDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_0 = (UnorderedGroup)cGroup.eContents().get(0);
		private final Assignment cSocketAssignment_0_0 = (Assignment)cUnorderedGroup_0.eContents().get(0);
		private final Keyword cSocketSocketKeyword_0_0_0 = (Keyword)cSocketAssignment_0_0.eContents().get(0);
		private final Assignment cTestPointAssignment_0_1 = (Assignment)cUnorderedGroup_0.eContents().get(1);
		private final Keyword cTestPointTestPointKeyword_0_1_0 = (Keyword)cTestPointAssignment_0_1.eContents().get(0);
		private final Keyword cOutputKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMinimumPortCountAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMinimumPortCountValidIntParserRuleCall_3_1_0 = (RuleCall)cMinimumPortCountAssignment_3_1.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cMaximumPortCountAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cMaximumPortCountUpperBoundLiteralParserRuleCall_3_3_0 = (RuleCall)cMaximumPortCountAssignment_3_3.eContents().get(0);
		private final Group cGroup_3_4 = (Group)cGroup_3.eContents().get(4);
		private final Keyword cVerticalLineKeyword_3_4_0 = (Keyword)cGroup_3_4.eContents().get(0);
		private final Assignment cDefaultPortCountAssignment_3_4_1 = (Assignment)cGroup_3_4.eContents().get(1);
		private final RuleCall cDefaultPortCountValidIntParserRuleCall_3_4_1_0 = (RuleCall)cDefaultPortCountAssignment_3_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_5 = (Keyword)cGroup_3.eContents().get(5);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cParametersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_4_1_0 = (RuleCall)cParametersAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//OutputDefinition:
		//	(socket?="socket"? & testPoint?="testPoint"?) "output" name=ValidID ("[" minimumPortCount=ValidInt ".."
		//	maximumPortCount=UpperBoundLiteral ("|" defaultPortCount=ValidInt)? "]")? ("{" parameters+=Parameter* "}")?;
		public ParserRule getRule() { return rule; }

		//(socket?="socket"? & testPoint?="testPoint"?) "output" name=ValidID ("[" minimumPortCount=ValidInt ".."
		//maximumPortCount=UpperBoundLiteral ("|" defaultPortCount=ValidInt)? "]")? ("{" parameters+=Parameter* "}")?
		public Group getGroup() { return cGroup; }

		//socket?="socket"? & testPoint?="testPoint"?
		public UnorderedGroup getUnorderedGroup_0() { return cUnorderedGroup_0; }

		//socket?="socket"?
		public Assignment getSocketAssignment_0_0() { return cSocketAssignment_0_0; }

		//"socket"
		public Keyword getSocketSocketKeyword_0_0_0() { return cSocketSocketKeyword_0_0_0; }

		//testPoint?="testPoint"?
		public Assignment getTestPointAssignment_0_1() { return cTestPointAssignment_0_1; }

		//"testPoint"
		public Keyword getTestPointTestPointKeyword_0_1_0() { return cTestPointTestPointKeyword_0_1_0; }

		//"output"
		public Keyword getOutputKeyword_1() { return cOutputKeyword_1; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }

		//("[" minimumPortCount=ValidInt ".." maximumPortCount=UpperBoundLiteral ("|" defaultPortCount=ValidInt)? "]")?
		public Group getGroup_3() { return cGroup_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }

		//minimumPortCount=ValidInt
		public Assignment getMinimumPortCountAssignment_3_1() { return cMinimumPortCountAssignment_3_1; }

		//ValidInt
		public RuleCall getMinimumPortCountValidIntParserRuleCall_3_1_0() { return cMinimumPortCountValidIntParserRuleCall_3_1_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_3_2() { return cFullStopFullStopKeyword_3_2; }

		//maximumPortCount=UpperBoundLiteral
		public Assignment getMaximumPortCountAssignment_3_3() { return cMaximumPortCountAssignment_3_3; }

		//UpperBoundLiteral
		public RuleCall getMaximumPortCountUpperBoundLiteralParserRuleCall_3_3_0() { return cMaximumPortCountUpperBoundLiteralParserRuleCall_3_3_0; }

		//("|" defaultPortCount=ValidInt)?
		public Group getGroup_3_4() { return cGroup_3_4; }

		//"|"
		public Keyword getVerticalLineKeyword_3_4_0() { return cVerticalLineKeyword_3_4_0; }

		//defaultPortCount=ValidInt
		public Assignment getDefaultPortCountAssignment_3_4_1() { return cDefaultPortCountAssignment_3_4_1; }

		//ValidInt
		public RuleCall getDefaultPortCountValidIntParserRuleCall_3_4_1_0() { return cDefaultPortCountValidIntParserRuleCall_3_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_5() { return cRightSquareBracketKeyword_3_5; }

		//("{" parameters+=Parameter* "}")?
		public Group getGroup_4() { return cGroup_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }

		//parameters+=Parameter*
		public Assignment getParametersAssignment_4_1() { return cParametersAssignment_4_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_4_1_0() { return cParametersParameterParserRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_2() { return cRightCurlyBracketKeyword_4_2; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOpaqueParameterParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMscriptParameterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Parameter:
		//	OpaqueParameter | MscriptParameter;
		public ParserRule getRule() { return rule; }

		//OpaqueParameter | MscriptParameter
		public Alternatives getAlternatives() { return cAlternatives; }

		//OpaqueParameter
		public RuleCall getOpaqueParameterParserRuleCall_0() { return cOpaqueParameterParserRuleCall_0; }

		//MscriptParameter
		public RuleCall getMscriptParameterParserRuleCall_1() { return cMscriptParameterParserRuleCall_1; }
	}

	public class OpaqueParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpaqueParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityParameterVisibilityKindEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Assignment cDataTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDataTypeOpaqueTypeSpecificationParserRuleCall_1_0 = (RuleCall)cDataTypeAssignment_1.eContents().get(0);
		private final Keyword cParameterKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameValidIDParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOwnedDefaultValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOwnedDefaultValueStringValueSpecificationParserRuleCall_5_0 = (RuleCall)cOwnedDefaultValueAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cPredefinedKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cPredefinedValuesAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cPredefinedValuesOpaqueParameterPredefinedValueParserRuleCall_6_2_0 = (RuleCall)cPredefinedValuesAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cPredefinedValuesAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cPredefinedValuesOpaqueParameterPredefinedValueParserRuleCall_6_3_1_0 = (RuleCall)cPredefinedValuesAssignment_6_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		
		//OpaqueParameter returns Parameter:
		//	visibility=ParameterVisibilityKind? dataType=OpaqueTypeSpecification "parameter" name=ValidID "="
		//	ownedDefaultValue=StringValueSpecification ("predefined" "{" predefinedValues+=OpaqueParameterPredefinedValue (","
		//	predefinedValues+=OpaqueParameterPredefinedValue)* "}")?;
		public ParserRule getRule() { return rule; }

		//visibility=ParameterVisibilityKind? dataType=OpaqueTypeSpecification "parameter" name=ValidID "="
		//ownedDefaultValue=StringValueSpecification ("predefined" "{" predefinedValues+=OpaqueParameterPredefinedValue (","
		//predefinedValues+=OpaqueParameterPredefinedValue)* "}")?
		public Group getGroup() { return cGroup; }

		//visibility=ParameterVisibilityKind?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }

		//ParameterVisibilityKind
		public RuleCall getVisibilityParameterVisibilityKindEnumRuleCall_0_0() { return cVisibilityParameterVisibilityKindEnumRuleCall_0_0; }

		//dataType=OpaqueTypeSpecification
		public Assignment getDataTypeAssignment_1() { return cDataTypeAssignment_1; }

		//OpaqueTypeSpecification
		public RuleCall getDataTypeOpaqueTypeSpecificationParserRuleCall_1_0() { return cDataTypeOpaqueTypeSpecificationParserRuleCall_1_0; }

		//"parameter"
		public Keyword getParameterKeyword_2() { return cParameterKeyword_2; }

		//name=ValidID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_3_0() { return cNameValidIDParserRuleCall_3_0; }

		//"="
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }

		//ownedDefaultValue=StringValueSpecification
		public Assignment getOwnedDefaultValueAssignment_5() { return cOwnedDefaultValueAssignment_5; }

		//StringValueSpecification
		public RuleCall getOwnedDefaultValueStringValueSpecificationParserRuleCall_5_0() { return cOwnedDefaultValueStringValueSpecificationParserRuleCall_5_0; }

		//("predefined" "{" predefinedValues+=OpaqueParameterPredefinedValue (","
		//predefinedValues+=OpaqueParameterPredefinedValue)* "}")?
		public Group getGroup_6() { return cGroup_6; }

		//"predefined"
		public Keyword getPredefinedKeyword_6_0() { return cPredefinedKeyword_6_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }

		//predefinedValues+=OpaqueParameterPredefinedValue
		public Assignment getPredefinedValuesAssignment_6_2() { return cPredefinedValuesAssignment_6_2; }

		//OpaqueParameterPredefinedValue
		public RuleCall getPredefinedValuesOpaqueParameterPredefinedValueParserRuleCall_6_2_0() { return cPredefinedValuesOpaqueParameterPredefinedValueParserRuleCall_6_2_0; }

		//("," predefinedValues+=OpaqueParameterPredefinedValue)*
		public Group getGroup_6_3() { return cGroup_6_3; }

		//","
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }

		//predefinedValues+=OpaqueParameterPredefinedValue
		public Assignment getPredefinedValuesAssignment_6_3_1() { return cPredefinedValuesAssignment_6_3_1; }

		//OpaqueParameterPredefinedValue
		public RuleCall getPredefinedValuesOpaqueParameterPredefinedValueParserRuleCall_6_3_1_0() { return cPredefinedValuesOpaqueParameterPredefinedValueParserRuleCall_6_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6_4() { return cRightCurlyBracketKeyword_6_4; }
	}

	public class MscriptParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MscriptParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityParameterVisibilityKindEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Keyword cParameterKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOwnedDefaultValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOwnedDefaultValueMscriptValueSpecificationParserRuleCall_4_0 = (RuleCall)cOwnedDefaultValueAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cPredefinedKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cPredefinedValuesAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cPredefinedValuesMscriptParameterPredefinedValueParserRuleCall_5_2_0 = (RuleCall)cPredefinedValuesAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cPredefinedValuesAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cPredefinedValuesMscriptParameterPredefinedValueParserRuleCall_5_3_1_0 = (RuleCall)cPredefinedValuesAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		
		//MscriptParameter returns Parameter:
		//	visibility=ParameterVisibilityKind? "parameter" name=ValidID "=" ownedDefaultValue=MscriptValueSpecification
		//	("predefined" "{" predefinedValues+=MscriptParameterPredefinedValue (","
		//	predefinedValues+=MscriptParameterPredefinedValue)* "}")?;
		public ParserRule getRule() { return rule; }

		//visibility=ParameterVisibilityKind? "parameter" name=ValidID "=" ownedDefaultValue=MscriptValueSpecification
		//("predefined" "{" predefinedValues+=MscriptParameterPredefinedValue (","
		//predefinedValues+=MscriptParameterPredefinedValue)* "}")?
		public Group getGroup() { return cGroup; }

		//visibility=ParameterVisibilityKind?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }

		//ParameterVisibilityKind
		public RuleCall getVisibilityParameterVisibilityKindEnumRuleCall_0_0() { return cVisibilityParameterVisibilityKindEnumRuleCall_0_0; }

		//"parameter"
		public Keyword getParameterKeyword_1() { return cParameterKeyword_1; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//ownedDefaultValue=MscriptValueSpecification
		public Assignment getOwnedDefaultValueAssignment_4() { return cOwnedDefaultValueAssignment_4; }

		//MscriptValueSpecification
		public RuleCall getOwnedDefaultValueMscriptValueSpecificationParserRuleCall_4_0() { return cOwnedDefaultValueMscriptValueSpecificationParserRuleCall_4_0; }

		//("predefined" "{" predefinedValues+=MscriptParameterPredefinedValue (","
		//predefinedValues+=MscriptParameterPredefinedValue)* "}")?
		public Group getGroup_5() { return cGroup_5; }

		//"predefined"
		public Keyword getPredefinedKeyword_5_0() { return cPredefinedKeyword_5_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }

		//predefinedValues+=MscriptParameterPredefinedValue
		public Assignment getPredefinedValuesAssignment_5_2() { return cPredefinedValuesAssignment_5_2; }

		//MscriptParameterPredefinedValue
		public RuleCall getPredefinedValuesMscriptParameterPredefinedValueParserRuleCall_5_2_0() { return cPredefinedValuesMscriptParameterPredefinedValueParserRuleCall_5_2_0; }

		//("," predefinedValues+=MscriptParameterPredefinedValue)*
		public Group getGroup_5_3() { return cGroup_5_3; }

		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }

		//predefinedValues+=MscriptParameterPredefinedValue
		public Assignment getPredefinedValuesAssignment_5_3_1() { return cPredefinedValuesAssignment_5_3_1; }

		//MscriptParameterPredefinedValue
		public RuleCall getPredefinedValuesMscriptParameterPredefinedValueParserRuleCall_5_3_1_0() { return cPredefinedValuesMscriptParameterPredefinedValueParserRuleCall_5_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_4() { return cRightCurlyBracketKeyword_5_4; }
	}

	public class OpaqueParameterPredefinedValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpaqueParameterPredefinedValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueStringValueSpecificationParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAliasAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAliasSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cAliasAssignment_1_1.eContents().get(0);
		
		//OpaqueParameterPredefinedValue returns ParameterPredefinedValue:
		//	value=StringValueSpecification ("as" alias=STRING)?;
		public ParserRule getRule() { return rule; }

		//value=StringValueSpecification ("as" alias=STRING)?
		public Group getGroup() { return cGroup; }

		//value=StringValueSpecification
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//StringValueSpecification
		public RuleCall getValueStringValueSpecificationParserRuleCall_0_0() { return cValueStringValueSpecificationParserRuleCall_0_0; }

		//("as" alias=STRING)?
		public Group getGroup_1() { return cGroup_1; }

		//"as"
		public Keyword getAsKeyword_1_0() { return cAsKeyword_1_0; }

		//alias=STRING
		public Assignment getAliasAssignment_1_1() { return cAliasAssignment_1_1; }

		//STRING
		public RuleCall getAliasSTRINGTerminalRuleCall_1_1_0() { return cAliasSTRINGTerminalRuleCall_1_1_0; }
	}

	public class MscriptParameterPredefinedValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MscriptParameterPredefinedValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueMscriptValueSpecificationParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAliasAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAliasSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cAliasAssignment_1_1.eContents().get(0);
		
		//MscriptParameterPredefinedValue returns ParameterPredefinedValue:
		//	value=MscriptValueSpecification ("as" alias=STRING)?;
		public ParserRule getRule() { return rule; }

		//value=MscriptValueSpecification ("as" alias=STRING)?
		public Group getGroup() { return cGroup; }

		//value=MscriptValueSpecification
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//MscriptValueSpecification
		public RuleCall getValueMscriptValueSpecificationParserRuleCall_0_0() { return cValueMscriptValueSpecificationParserRuleCall_0_0; }

		//("as" alias=STRING)?
		public Group getGroup_1() { return cGroup_1; }

		//"as"
		public Keyword getAsKeyword_1_0() { return cAsKeyword_1_0; }

		//alias=STRING
		public Assignment getAliasAssignment_1_1() { return cAliasAssignment_1_1; }

		//STRING
		public RuleCall getAliasSTRINGTerminalRuleCall_1_1_0() { return cAliasSTRINGTerminalRuleCall_1_1_0; }
	}

	public class OpaqueTypeSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpaqueTypeSpecification");
		private final Assignment cKindAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cKindOpaqueTypeKindEnumRuleCall_0 = (RuleCall)cKindAssignment.eContents().get(0);
		
		//OpaqueTypeSpecification returns PrimitiveTypeSpecification:
		//	kind=OpaqueTypeKind;
		public ParserRule getRule() { return rule; }

		//kind=OpaqueTypeKind
		public Assignment getKindAssignment() { return cKindAssignment; }

		//OpaqueTypeKind
		public RuleCall getKindOpaqueTypeKindEnumRuleCall_0() { return cKindOpaqueTypeKindEnumRuleCall_0; }
	}

	public class StringValueSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringValueSpecification");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringValueSpecification:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class MscriptValueSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MscriptValueSpecification");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_0 = (RuleCall)cExpressionAssignment.eContents().get(0);
		
		//MscriptValueSpecification:
		//	expression=Expression;
		public ParserRule getRule() { return rule; }

		//expression=Expression
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0() { return cExpressionExpressionParserRuleCall_0; }
	}

	public class MscriptSystemInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MscriptSystemInterface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPackageNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPackageNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cPackageNameAssignment_1.eContents().get(0);
		private final Assignment cImportDeclarationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportDeclarationsImportDeclarationParserRuleCall_2_0 = (RuleCall)cImportDeclarationsAssignment_2.eContents().get(0);
		private final Keyword cSystemInterfaceKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameValidIDParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cInletsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cInletsInletParserRuleCall_6_0 = (RuleCall)cInletsAssignment_6.eContents().get(0);
		private final Assignment cOutletsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cOutletsOutletParserRuleCall_7_0 = (RuleCall)cOutletsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//MscriptSystemInterface:
		//	"package" packageName=QualifiedName importDeclarations+=ImportDeclaration* "systemInterface" name=ValidID "{"
		//	inlets+=Inlet* outlets+=Outlet* "}";
		public ParserRule getRule() { return rule; }

		//"package" packageName=QualifiedName importDeclarations+=ImportDeclaration* "systemInterface" name=ValidID "{"
		//inlets+=Inlet* outlets+=Outlet* "}"
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//packageName=QualifiedName
		public Assignment getPackageNameAssignment_1() { return cPackageNameAssignment_1; }

		//QualifiedName
		public RuleCall getPackageNameQualifiedNameParserRuleCall_1_0() { return cPackageNameQualifiedNameParserRuleCall_1_0; }

		//importDeclarations+=ImportDeclaration*
		public Assignment getImportDeclarationsAssignment_2() { return cImportDeclarationsAssignment_2; }

		//ImportDeclaration
		public RuleCall getImportDeclarationsImportDeclarationParserRuleCall_2_0() { return cImportDeclarationsImportDeclarationParserRuleCall_2_0; }

		//"systemInterface"
		public Keyword getSystemInterfaceKeyword_3() { return cSystemInterfaceKeyword_3; }

		//name=ValidID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_4_0() { return cNameValidIDParserRuleCall_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//inlets+=Inlet*
		public Assignment getInletsAssignment_6() { return cInletsAssignment_6; }

		//Inlet
		public RuleCall getInletsInletParserRuleCall_6_0() { return cInletsInletParserRuleCall_6_0; }

		//outlets+=Outlet*
		public Assignment getOutletsAssignment_7() { return cOutletsAssignment_7; }

		//Outlet
		public RuleCall getOutletsOutletParserRuleCall_7_0() { return cOutletsOutletParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class InletElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Inlet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInletKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDataTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDataTypeMscriptDataTypeSpecificationParserRuleCall_1_0 = (RuleCall)cDataTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Inlet:
		//	"inlet" dataType=MscriptDataTypeSpecification name=ValidID;
		public ParserRule getRule() { return rule; }

		//"inlet" dataType=MscriptDataTypeSpecification name=ValidID
		public Group getGroup() { return cGroup; }

		//"inlet"
		public Keyword getInletKeyword_0() { return cInletKeyword_0; }

		//dataType=MscriptDataTypeSpecification
		public Assignment getDataTypeAssignment_1() { return cDataTypeAssignment_1; }

		//MscriptDataTypeSpecification
		public RuleCall getDataTypeMscriptDataTypeSpecificationParserRuleCall_1_0() { return cDataTypeMscriptDataTypeSpecificationParserRuleCall_1_0; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
	}

	public class OutletElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Outlet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOutletKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDataTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDataTypeMscriptDataTypeSpecificationParserRuleCall_1_0 = (RuleCall)cDataTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Outlet:
		//	"outlet" dataType=MscriptDataTypeSpecification name=ValidID;
		public ParserRule getRule() { return rule; }

		//"outlet" dataType=MscriptDataTypeSpecification name=ValidID
		public Group getGroup() { return cGroup; }

		//"outlet"
		public Keyword getOutletKeyword_0() { return cOutletKeyword_0; }

		//dataType=MscriptDataTypeSpecification
		public Assignment getDataTypeAssignment_1() { return cDataTypeAssignment_1; }

		//MscriptDataTypeSpecification
		public RuleCall getDataTypeMscriptDataTypeSpecificationParserRuleCall_1_0() { return cDataTypeMscriptDataTypeSpecificationParserRuleCall_1_0; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
	}

	public class MscriptDataTypeSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MscriptDataTypeSpecification");
		private final Assignment cTypeSpecifierAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeSpecifierTypeSpecifierParserRuleCall_0 = (RuleCall)cTypeSpecifierAssignment.eContents().get(0);
		
		//MscriptDataTypeSpecification:
		//	typeSpecifier=TypeSpecifier;
		public ParserRule getRule() { return rule; }

		//typeSpecifier=TypeSpecifier
		public Assignment getTypeSpecifierAssignment() { return cTypeSpecifierAssignment; }

		//TypeSpecifier
		public RuleCall getTypeSpecifierTypeSpecifierParserRuleCall_0() { return cTypeSpecifierTypeSpecifierParserRuleCall_0; }
	}

	public class UpperBoundLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UpperBoundLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValidIntParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//UpperBoundLiteral returns ecore::EInt:
		//	ValidInt | "*";
		public ParserRule getRule() { return rule; }

		//ValidInt | "*"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ValidInt
		public RuleCall getValidIntParserRuleCall_0() { return cValidIntParserRuleCall_0; }

		//"*"
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}

	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cFullStopAsteriskKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName (".*" | "." "*")?;
		public ParserRule getRule() { return rule; }

		//QualifiedName (".*" | "." "*")?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//(".*" | "." "*")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//".*"
		public Keyword getFullStopAsteriskKeyword_1_0() { return cFullStopAsteriskKeyword_1_0; }

		//"." "*"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"."
		public Keyword getFullStopKeyword_1_1_0() { return cFullStopKeyword_1_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_1_1() { return cAsteriskKeyword_1_1_1; }
	}
	
	
	public class TimingKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "TimingKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cContinuousEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cContinuousContinuousKeyword_0_0 = (Keyword)cContinuousEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSynchronousEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSynchronousSynchronousKeyword_1_0 = (Keyword)cSynchronousEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cAsynchronousEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cAsynchronousAsynchronousKeyword_2_0 = (Keyword)cAsynchronousEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDiscreteEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDiscreteDiscreteKeyword_3_0 = (Keyword)cDiscreteEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum TimingKind:
		//	Continuous="continuous" | Synchronous="synchronous" | Asynchronous="asynchronous" | Discrete="discrete";
		public EnumRule getRule() { return rule; }

		//Continuous="continuous" | Synchronous="synchronous" | Asynchronous="asynchronous" | Discrete="discrete"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Continuous="continuous"
		public EnumLiteralDeclaration getContinuousEnumLiteralDeclaration_0() { return cContinuousEnumLiteralDeclaration_0; }

		//"continuous"
		public Keyword getContinuousContinuousKeyword_0_0() { return cContinuousContinuousKeyword_0_0; }

		//Synchronous="synchronous"
		public EnumLiteralDeclaration getSynchronousEnumLiteralDeclaration_1() { return cSynchronousEnumLiteralDeclaration_1; }

		//"synchronous"
		public Keyword getSynchronousSynchronousKeyword_1_0() { return cSynchronousSynchronousKeyword_1_0; }

		//Asynchronous="asynchronous"
		public EnumLiteralDeclaration getAsynchronousEnumLiteralDeclaration_2() { return cAsynchronousEnumLiteralDeclaration_2; }

		//"asynchronous"
		public Keyword getAsynchronousAsynchronousKeyword_2_0() { return cAsynchronousAsynchronousKeyword_2_0; }

		//Discrete="discrete"
		public EnumLiteralDeclaration getDiscreteEnumLiteralDeclaration_3() { return cDiscreteEnumLiteralDeclaration_3; }

		//"discrete"
		public Keyword getDiscreteDiscreteKeyword_3_0() { return cDiscreteDiscreteKeyword_3_0; }
	}

	public class ParameterVisibilityKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterVisibilityKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPublicEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPublicPublicKeyword_0_0 = (Keyword)cPublicEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPrivateEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPrivatePrivateKeyword_1_0 = (Keyword)cPrivateEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ParameterVisibilityKind:
		//	Public="public" | Private="private";
		public EnumRule getRule() { return rule; }

		//Public="public" | Private="private"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Public="public"
		public EnumLiteralDeclaration getPublicEnumLiteralDeclaration_0() { return cPublicEnumLiteralDeclaration_0; }

		//"public"
		public Keyword getPublicPublicKeyword_0_0() { return cPublicPublicKeyword_0_0; }

		//Private="private"
		public EnumLiteralDeclaration getPrivateEnumLiteralDeclaration_1() { return cPrivateEnumLiteralDeclaration_1; }

		//"private"
		public Keyword getPrivatePrivateKeyword_1_0() { return cPrivatePrivateKeyword_1_0; }
	}

	public class OpaqueTypeKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "OpaqueTypeKind");
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cStringOpaqueKeyword_0 = (Keyword)cStringEnumLiteralDeclaration.eContents().get(0);
		
		//enum OpaqueTypeKind returns PrimitiveTypeKind:
		//	String="opaque";
		public EnumRule getRule() { return rule; }

		//String="opaque"
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration() { return cStringEnumLiteralDeclaration; }

		//"opaque"
		public Keyword getStringOpaqueKeyword_0() { return cStringOpaqueKeyword_0; }
	}
	
	private RootElements pRoot;
	private MscriptBlockTypeElements pMscriptBlockType;
	private TimingKindElements unknownRuleTimingKind;
	private InputDefinitionElements pInputDefinition;
	private DirectFeedthroughPolicyElements pDirectFeedthroughPolicy;
	private BooleanDirectFeedthroughPolicyElements pBooleanDirectFeedthroughPolicy;
	private OutputDefinitionElements pOutputDefinition;
	private ParameterElements pParameter;
	private OpaqueParameterElements pOpaqueParameter;
	private MscriptParameterElements pMscriptParameter;
	private OpaqueParameterPredefinedValueElements pOpaqueParameterPredefinedValue;
	private MscriptParameterPredefinedValueElements pMscriptParameterPredefinedValue;
	private ParameterVisibilityKindElements unknownRuleParameterVisibilityKind;
	private OpaqueTypeSpecificationElements pOpaqueTypeSpecification;
	private OpaqueTypeKindElements unknownRuleOpaqueTypeKind;
	private StringValueSpecificationElements pStringValueSpecification;
	private MscriptValueSpecificationElements pMscriptValueSpecification;
	private MscriptSystemInterfaceElements pMscriptSystemInterface;
	private InletElements pInlet;
	private OutletElements pOutlet;
	private MscriptDataTypeSpecificationElements pMscriptDataTypeSpecification;
	private UpperBoundLiteralElements pUpperBoundLiteral;
	private QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	
	private final Grammar grammar;

	private MscriptGrammarAccess gaMscript;

	@Inject
	public DMLTextGrammarAccess(GrammarProvider grammarProvider,
		MscriptGrammarAccess gaMscript) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaMscript = gaMscript;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipselabs.damos.dmltext.DMLText".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public MscriptGrammarAccess getMscriptGrammarAccess() {
		return gaMscript;
	}

	
	//Root:
	//	(blockTypes+=MscriptBlockType | systemInterfaces+=MscriptSystemInterface)*;
	public RootElements getRootAccess() {
		return (pRoot != null) ? pRoot : (pRoot = new RootElements());
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}

	//MscriptBlockType:
	//	"package" packageName=QualifiedName importDeclarations+=ImportDeclaration* (timing=TimingKind? &
	//	boundary?="boundary"?) "blockType" name=ValidID "{" inputDefinitions+=InputDefinition*
	//	outputDefinitions+=OutputDefinition* parameters+=Parameter* declarations+=Declaration* "}";
	public MscriptBlockTypeElements getMscriptBlockTypeAccess() {
		return (pMscriptBlockType != null) ? pMscriptBlockType : (pMscriptBlockType = new MscriptBlockTypeElements());
	}
	
	public ParserRule getMscriptBlockTypeRule() {
		return getMscriptBlockTypeAccess().getRule();
	}

	//enum TimingKind:
	//	Continuous="continuous" | Synchronous="synchronous" | Asynchronous="asynchronous" | Discrete="discrete";
	public TimingKindElements getTimingKindAccess() {
		return (unknownRuleTimingKind != null) ? unknownRuleTimingKind : (unknownRuleTimingKind = new TimingKindElements());
	}
	
	public EnumRule getTimingKindRule() {
		return getTimingKindAccess().getRule();
	}

	//InputDefinition:
	//	(socket?="socket"? & testPoint?="testPoint"?) "input" name=ValidID ("[" minimumPortCount=ValidInt ".."
	//	maximumPortCount=UpperBoundLiteral ("|" defaultPortCount=ValidInt)? "]")? ("{" (("directFeedthrough"
	//	directFeedthroughPolicy=DirectFeedthroughPolicy)? & parameters+=Parameter*) "}")?;
	public InputDefinitionElements getInputDefinitionAccess() {
		return (pInputDefinition != null) ? pInputDefinition : (pInputDefinition = new InputDefinitionElements());
	}
	
	public ParserRule getInputDefinitionRule() {
		return getInputDefinitionAccess().getRule();
	}

	//DirectFeedthroughPolicy:
	//	BooleanDirectFeedthroughPolicy;
	public DirectFeedthroughPolicyElements getDirectFeedthroughPolicyAccess() {
		return (pDirectFeedthroughPolicy != null) ? pDirectFeedthroughPolicy : (pDirectFeedthroughPolicy = new DirectFeedthroughPolicyElements());
	}
	
	public ParserRule getDirectFeedthroughPolicyRule() {
		return getDirectFeedthroughPolicyAccess().getRule();
	}

	//BooleanDirectFeedthroughPolicy:
	//	{BooleanDirectFeedthroughPolicy} (directFeedthrough?="always" | "never");
	public BooleanDirectFeedthroughPolicyElements getBooleanDirectFeedthroughPolicyAccess() {
		return (pBooleanDirectFeedthroughPolicy != null) ? pBooleanDirectFeedthroughPolicy : (pBooleanDirectFeedthroughPolicy = new BooleanDirectFeedthroughPolicyElements());
	}
	
	public ParserRule getBooleanDirectFeedthroughPolicyRule() {
		return getBooleanDirectFeedthroughPolicyAccess().getRule();
	}

	//OutputDefinition:
	//	(socket?="socket"? & testPoint?="testPoint"?) "output" name=ValidID ("[" minimumPortCount=ValidInt ".."
	//	maximumPortCount=UpperBoundLiteral ("|" defaultPortCount=ValidInt)? "]")? ("{" parameters+=Parameter* "}")?;
	public OutputDefinitionElements getOutputDefinitionAccess() {
		return (pOutputDefinition != null) ? pOutputDefinition : (pOutputDefinition = new OutputDefinitionElements());
	}
	
	public ParserRule getOutputDefinitionRule() {
		return getOutputDefinitionAccess().getRule();
	}

	//Parameter:
	//	OpaqueParameter | MscriptParameter;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//OpaqueParameter returns Parameter:
	//	visibility=ParameterVisibilityKind? dataType=OpaqueTypeSpecification "parameter" name=ValidID "="
	//	ownedDefaultValue=StringValueSpecification ("predefined" "{" predefinedValues+=OpaqueParameterPredefinedValue (","
	//	predefinedValues+=OpaqueParameterPredefinedValue)* "}")?;
	public OpaqueParameterElements getOpaqueParameterAccess() {
		return (pOpaqueParameter != null) ? pOpaqueParameter : (pOpaqueParameter = new OpaqueParameterElements());
	}
	
	public ParserRule getOpaqueParameterRule() {
		return getOpaqueParameterAccess().getRule();
	}

	//MscriptParameter returns Parameter:
	//	visibility=ParameterVisibilityKind? "parameter" name=ValidID "=" ownedDefaultValue=MscriptValueSpecification
	//	("predefined" "{" predefinedValues+=MscriptParameterPredefinedValue (","
	//	predefinedValues+=MscriptParameterPredefinedValue)* "}")?;
	public MscriptParameterElements getMscriptParameterAccess() {
		return (pMscriptParameter != null) ? pMscriptParameter : (pMscriptParameter = new MscriptParameterElements());
	}
	
	public ParserRule getMscriptParameterRule() {
		return getMscriptParameterAccess().getRule();
	}

	//OpaqueParameterPredefinedValue returns ParameterPredefinedValue:
	//	value=StringValueSpecification ("as" alias=STRING)?;
	public OpaqueParameterPredefinedValueElements getOpaqueParameterPredefinedValueAccess() {
		return (pOpaqueParameterPredefinedValue != null) ? pOpaqueParameterPredefinedValue : (pOpaqueParameterPredefinedValue = new OpaqueParameterPredefinedValueElements());
	}
	
	public ParserRule getOpaqueParameterPredefinedValueRule() {
		return getOpaqueParameterPredefinedValueAccess().getRule();
	}

	//MscriptParameterPredefinedValue returns ParameterPredefinedValue:
	//	value=MscriptValueSpecification ("as" alias=STRING)?;
	public MscriptParameterPredefinedValueElements getMscriptParameterPredefinedValueAccess() {
		return (pMscriptParameterPredefinedValue != null) ? pMscriptParameterPredefinedValue : (pMscriptParameterPredefinedValue = new MscriptParameterPredefinedValueElements());
	}
	
	public ParserRule getMscriptParameterPredefinedValueRule() {
		return getMscriptParameterPredefinedValueAccess().getRule();
	}

	//enum ParameterVisibilityKind:
	//	Public="public" | Private="private";
	public ParameterVisibilityKindElements getParameterVisibilityKindAccess() {
		return (unknownRuleParameterVisibilityKind != null) ? unknownRuleParameterVisibilityKind : (unknownRuleParameterVisibilityKind = new ParameterVisibilityKindElements());
	}
	
	public EnumRule getParameterVisibilityKindRule() {
		return getParameterVisibilityKindAccess().getRule();
	}

	//OpaqueTypeSpecification returns PrimitiveTypeSpecification:
	//	kind=OpaqueTypeKind;
	public OpaqueTypeSpecificationElements getOpaqueTypeSpecificationAccess() {
		return (pOpaqueTypeSpecification != null) ? pOpaqueTypeSpecification : (pOpaqueTypeSpecification = new OpaqueTypeSpecificationElements());
	}
	
	public ParserRule getOpaqueTypeSpecificationRule() {
		return getOpaqueTypeSpecificationAccess().getRule();
	}

	//enum OpaqueTypeKind returns PrimitiveTypeKind:
	//	String="opaque";
	public OpaqueTypeKindElements getOpaqueTypeKindAccess() {
		return (unknownRuleOpaqueTypeKind != null) ? unknownRuleOpaqueTypeKind : (unknownRuleOpaqueTypeKind = new OpaqueTypeKindElements());
	}
	
	public EnumRule getOpaqueTypeKindRule() {
		return getOpaqueTypeKindAccess().getRule();
	}

	//StringValueSpecification:
	//	value=STRING;
	public StringValueSpecificationElements getStringValueSpecificationAccess() {
		return (pStringValueSpecification != null) ? pStringValueSpecification : (pStringValueSpecification = new StringValueSpecificationElements());
	}
	
	public ParserRule getStringValueSpecificationRule() {
		return getStringValueSpecificationAccess().getRule();
	}

	//MscriptValueSpecification:
	//	expression=Expression;
	public MscriptValueSpecificationElements getMscriptValueSpecificationAccess() {
		return (pMscriptValueSpecification != null) ? pMscriptValueSpecification : (pMscriptValueSpecification = new MscriptValueSpecificationElements());
	}
	
	public ParserRule getMscriptValueSpecificationRule() {
		return getMscriptValueSpecificationAccess().getRule();
	}

	//MscriptSystemInterface:
	//	"package" packageName=QualifiedName importDeclarations+=ImportDeclaration* "systemInterface" name=ValidID "{"
	//	inlets+=Inlet* outlets+=Outlet* "}";
	public MscriptSystemInterfaceElements getMscriptSystemInterfaceAccess() {
		return (pMscriptSystemInterface != null) ? pMscriptSystemInterface : (pMscriptSystemInterface = new MscriptSystemInterfaceElements());
	}
	
	public ParserRule getMscriptSystemInterfaceRule() {
		return getMscriptSystemInterfaceAccess().getRule();
	}

	//Inlet:
	//	"inlet" dataType=MscriptDataTypeSpecification name=ValidID;
	public InletElements getInletAccess() {
		return (pInlet != null) ? pInlet : (pInlet = new InletElements());
	}
	
	public ParserRule getInletRule() {
		return getInletAccess().getRule();
	}

	//Outlet:
	//	"outlet" dataType=MscriptDataTypeSpecification name=ValidID;
	public OutletElements getOutletAccess() {
		return (pOutlet != null) ? pOutlet : (pOutlet = new OutletElements());
	}
	
	public ParserRule getOutletRule() {
		return getOutletAccess().getRule();
	}

	//MscriptDataTypeSpecification:
	//	typeSpecifier=TypeSpecifier;
	public MscriptDataTypeSpecificationElements getMscriptDataTypeSpecificationAccess() {
		return (pMscriptDataTypeSpecification != null) ? pMscriptDataTypeSpecification : (pMscriptDataTypeSpecification = new MscriptDataTypeSpecificationElements());
	}
	
	public ParserRule getMscriptDataTypeSpecificationRule() {
		return getMscriptDataTypeSpecificationAccess().getRule();
	}

	//UpperBoundLiteral returns ecore::EInt:
	//	ValidInt | "*";
	public UpperBoundLiteralElements getUpperBoundLiteralAccess() {
		return (pUpperBoundLiteral != null) ? pUpperBoundLiteral : (pUpperBoundLiteral = new UpperBoundLiteralElements());
	}
	
	public ParserRule getUpperBoundLiteralRule() {
		return getUpperBoundLiteralAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName (".*" | "." "*")?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return (pQualifiedNameWithWildcard != null) ? pQualifiedNameWithWildcard : (pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements());
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//Module:
	//	"package" packageName=QualifiedName importDeclarations+=ImportDeclaration* declarations+=Declaration*;
	public MscriptGrammarAccess.ModuleElements getModuleAccess() {
		return gaMscript.getModuleAccess();
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}

	//ImportDeclaration:
	//	"import" importedNamespace=QualifiedNameWithWildcard;
	public MscriptGrammarAccess.ImportDeclarationElements getImportDeclarationAccess() {
		return gaMscript.getImportDeclarationAccess();
	}
	
	public ParserRule getImportDeclarationRule() {
		return getImportDeclarationAccess().getRule();
	}

	//Declaration:
	//	TypeDeclaration | EnumerationDeclaration | FunctionDeclaration;
	public MscriptGrammarAccess.DeclarationElements getDeclarationAccess() {
		return gaMscript.getDeclarationAccess();
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	/// *
	// * TypeDeclaration
	// * / TypeDeclaration:
	//	"type" name=ValidID "=" typeSpecifier=TypeSpecifier | "struct" name=ValidID
	//	typeSpecifier=StructDeclarationTypeSpecifier;
	public MscriptGrammarAccess.TypeDeclarationElements getTypeDeclarationAccess() {
		return gaMscript.getTypeDeclarationAccess();
	}
	
	public ParserRule getTypeDeclarationRule() {
		return getTypeDeclarationAccess().getRule();
	}

	//StructDeclarationTypeSpecifier returns AnonymousTypeSpecifier:
	//	type=StructDeclarationType;
	public MscriptGrammarAccess.StructDeclarationTypeSpecifierElements getStructDeclarationTypeSpecifierAccess() {
		return gaMscript.getStructDeclarationTypeSpecifierAccess();
	}
	
	public ParserRule getStructDeclarationTypeSpecifierRule() {
		return getStructDeclarationTypeSpecifierAccess().getRule();
	}

	//StructDeclarationType returns StructType:
	//	"{" members+=StructMember (";" members+=StructMember)* ";"? "}";
	public MscriptGrammarAccess.StructDeclarationTypeElements getStructDeclarationTypeAccess() {
		return gaMscript.getStructDeclarationTypeAccess();
	}
	
	public ParserRule getStructDeclarationTypeRule() {
		return getStructDeclarationTypeAccess().getRule();
	}

	/// *
	// * Enumeration
	// * / EnumerationDeclaration:
	//	"enum" name=ValidID "{" (literalDeclarations+=EnumerationLiteralDeclaration (","
	//	literalDeclarations+=EnumerationLiteralDeclaration)* ","?)? "}";
	public MscriptGrammarAccess.EnumerationDeclarationElements getEnumerationDeclarationAccess() {
		return gaMscript.getEnumerationDeclarationAccess();
	}
	
	public ParserRule getEnumerationDeclarationRule() {
		return getEnumerationDeclarationAccess().getRule();
	}

	//EnumerationLiteralDeclaration:
	//	name=ValidID;
	public MscriptGrammarAccess.EnumerationLiteralDeclarationElements getEnumerationLiteralDeclarationAccess() {
		return gaMscript.getEnumerationLiteralDeclarationAccess();
	}
	
	public ParserRule getEnumerationLiteralDeclarationRule() {
		return getEnumerationLiteralDeclarationAccess().getRule();
	}

	/// *
	// * Function
	// * / FunctionDeclaration:
	//	kind=FunctionKind? "function" name=ValidID ("<" staticParameterDeclarations+=StaticParameterDeclaration (","
	//	staticParameterDeclarations+=StaticParameterDeclaration)* ">")? "("
	//	(inputParameterDeclarations+=InputParameterDeclaration ("," inputParameterDeclarations+=InputParameterDeclaration)*)?
	//	")" "->" outputParameterDeclarations+=OutputParameterDeclaration (","
	//	outputParameterDeclarations+=OutputParameterDeclaration)* "{" (checks+=Check | assertions+=Assertion |
	//	functionAliasDeclarations+=FunctionAliasDeclaration | stateVariableDeclarations+=StateVariableDeclaration |
	//	constantDeclarations+=ConstantDeclaration | equations+=Equation)* "}";
	public MscriptGrammarAccess.FunctionDeclarationElements getFunctionDeclarationAccess() {
		return gaMscript.getFunctionDeclarationAccess();
	}
	
	public ParserRule getFunctionDeclarationRule() {
		return getFunctionDeclarationAccess().getRule();
	}

	//enum FunctionKind:
	//	Stateful="stateful" | Continuous="continuous";
	public MscriptGrammarAccess.FunctionKindElements getFunctionKindAccess() {
		return gaMscript.getFunctionKindAccess();
	}
	
	public EnumRule getFunctionKindRule() {
		return getFunctionKindAccess().getRule();
	}

	//StaticParameterDeclaration:
	//	name=ValidID;
	public MscriptGrammarAccess.StaticParameterDeclarationElements getStaticParameterDeclarationAccess() {
		return gaMscript.getStaticParameterDeclarationAccess();
	}
	
	public ParserRule getStaticParameterDeclarationRule() {
		return getStaticParameterDeclarationAccess().getRule();
	}

	//InputParameterDeclaration:
	//	name=ValidID;
	public MscriptGrammarAccess.InputParameterDeclarationElements getInputParameterDeclarationAccess() {
		return gaMscript.getInputParameterDeclarationAccess();
	}
	
	public ParserRule getInputParameterDeclarationRule() {
		return getInputParameterDeclarationAccess().getRule();
	}

	//OutputParameterDeclaration:
	//	name=ValidID;
	public MscriptGrammarAccess.OutputParameterDeclarationElements getOutputParameterDeclarationAccess() {
		return gaMscript.getOutputParameterDeclarationAccess();
	}
	
	public ParserRule getOutputParameterDeclarationRule() {
		return getOutputParameterDeclarationAccess().getRule();
	}

	//Check:
	//	"check" ("<" staticArguments+=Expression ("," staticArguments+=Expression)* ">")? "("
	//	(inputParameterTypes+=TypeSpecifier ("," inputParameterTypes+=TypeSpecifier)*)? ")" "->"
	//	outputParameterTypes+=TypeSpecifier ("," outputParameterTypes+=TypeSpecifier)*;
	public MscriptGrammarAccess.CheckElements getCheckAccess() {
		return gaMscript.getCheckAccess();
	}
	
	public ParserRule getCheckRule() {
		return getCheckAccess().getRule();
	}

	//enum AssertionStatusKind:
	//	Info="info" | Warning="warning" | Error="error" | Fatal="fatal";
	public MscriptGrammarAccess.AssertionStatusKindElements getAssertionStatusKindAccess() {
		return gaMscript.getAssertionStatusKindAccess();
	}
	
	public EnumRule getAssertionStatusKindRule() {
		return getAssertionStatusKindAccess().getRule();
	}

	//Assertion:
	//	static?="static"? "assert" condition=Expression ":" statusKind=AssertionStatusKind message=Expression;
	public MscriptGrammarAccess.AssertionElements getAssertionAccess() {
		return gaMscript.getAssertionAccess();
	}
	
	public ParserRule getAssertionRule() {
		return getAssertionAccess().getRule();
	}

	//StateVariableDeclaration:
	//	"var" name=ValidID;
	public MscriptGrammarAccess.StateVariableDeclarationElements getStateVariableDeclarationAccess() {
		return gaMscript.getStateVariableDeclarationAccess();
	}
	
	public ParserRule getStateVariableDeclarationRule() {
		return getStateVariableDeclarationAccess().getRule();
	}

	//ConstantDeclaration:
	//	"const" name=ValidID "=" initializer=Expression;
	public MscriptGrammarAccess.ConstantDeclarationElements getConstantDeclarationAccess() {
		return gaMscript.getConstantDeclarationAccess();
	}
	
	public ParserRule getConstantDeclarationRule() {
		return getConstantDeclarationAccess().getRule();
	}

	//FunctionAliasDeclaration:
	//	"function" name=ValidID "=" functionDeclaration=[FunctionDeclaration|QualifiedName] ("<" staticArguments+=Expression
	//	("," staticArguments+=Expression)* ">")?;
	public MscriptGrammarAccess.FunctionAliasDeclarationElements getFunctionAliasDeclarationAccess() {
		return gaMscript.getFunctionAliasDeclarationAccess();
	}
	
	public ParserRule getFunctionAliasDeclarationRule() {
		return getFunctionAliasDeclarationAccess().getRule();
	}

	//Equation:
	//	initial?="initial"? "eq" leftHandSide=Expression "=" rightHandSide=Expression;
	public MscriptGrammarAccess.EquationElements getEquationAccess() {
		return gaMscript.getEquationAccess();
	}
	
	public ParserRule getEquationRule() {
		return getEquationAccess().getRule();
	}

	/// *
	// * Data type specifier
	// * / TypeSpecifier:
	//	AnonymousTypeSpecifier | DeclaredTypeSpecifier;
	public MscriptGrammarAccess.TypeSpecifierElements getTypeSpecifierAccess() {
		return gaMscript.getTypeSpecifierAccess();
	}
	
	public ParserRule getTypeSpecifierRule() {
		return getTypeSpecifierAccess().getRule();
	}

	//AnonymousTypeSpecifier:
	//	type=(PrimitiveType | ArrayType | StructType);
	public MscriptGrammarAccess.AnonymousTypeSpecifierElements getAnonymousTypeSpecifierAccess() {
		return gaMscript.getAnonymousTypeSpecifierAccess();
	}
	
	public ParserRule getAnonymousTypeSpecifierRule() {
		return getAnonymousTypeSpecifierAccess().getRule();
	}

	//DeclaredTypeSpecifier:
	//	typeDeclaration=[TypeDeclaration|QualifiedName];
	public MscriptGrammarAccess.DeclaredTypeSpecifierElements getDeclaredTypeSpecifierAccess() {
		return gaMscript.getDeclaredTypeSpecifierAccess();
	}
	
	public ParserRule getDeclaredTypeSpecifierRule() {
		return getDeclaredTypeSpecifierAccess().getRule();
	}

	//PrimitiveType:
	//	NumericType | BooleanType | StringType;
	public MscriptGrammarAccess.PrimitiveTypeElements getPrimitiveTypeAccess() {
		return gaMscript.getPrimitiveTypeAccess();
	}
	
	public ParserRule getPrimitiveTypeRule() {
		return getPrimitiveTypeAccess().getRule();
	}

	//NumericType:
	//	RealType | IntegerType | ComplexType | GaussianType;
	public MscriptGrammarAccess.NumericTypeElements getNumericTypeAccess() {
		return gaMscript.getNumericTypeAccess();
	}
	
	public ParserRule getNumericTypeRule() {
		return getNumericTypeAccess().getRule();
	}

	//RealType:
	//	{RealType} "real" unit=Unit;
	public MscriptGrammarAccess.RealTypeElements getRealTypeAccess() {
		return gaMscript.getRealTypeAccess();
	}
	
	public ParserRule getRealTypeRule() {
		return getRealTypeAccess().getRule();
	}

	//IntegerType:
	//	{IntegerType} "int" unit=Unit;
	public MscriptGrammarAccess.IntegerTypeElements getIntegerTypeAccess() {
		return gaMscript.getIntegerTypeAccess();
	}
	
	public ParserRule getIntegerTypeRule() {
		return getIntegerTypeAccess().getRule();
	}

	//ComplexType:
	//	{ComplexType} "complex" unit=Unit;
	public MscriptGrammarAccess.ComplexTypeElements getComplexTypeAccess() {
		return gaMscript.getComplexTypeAccess();
	}
	
	public ParserRule getComplexTypeRule() {
		return getComplexTypeAccess().getRule();
	}

	//GaussianType:
	//	{GaussianType} "gaussian" unit=Unit;
	public MscriptGrammarAccess.GaussianTypeElements getGaussianTypeAccess() {
		return gaMscript.getGaussianTypeAccess();
	}
	
	public ParserRule getGaussianTypeRule() {
		return getGaussianTypeAccess().getRule();
	}

	//BooleanType:
	//	{BooleanType} "boolean";
	public MscriptGrammarAccess.BooleanTypeElements getBooleanTypeAccess() {
		return gaMscript.getBooleanTypeAccess();
	}
	
	public ParserRule getBooleanTypeRule() {
		return getBooleanTypeAccess().getRule();
	}

	//StringType:
	//	{StringType} "string";
	public MscriptGrammarAccess.StringTypeElements getStringTypeAccess() {
		return gaMscript.getStringTypeAccess();
	}
	
	public ParserRule getStringTypeRule() {
		return getStringTypeAccess().getRule();
	}

	//ArrayType:
	//	elementTypeSpecifier=ArrayTypeSpecifier "[" dimensions+=ArrayDimension ("," dimensions+=ArrayDimension)* "]";
	public MscriptGrammarAccess.ArrayTypeElements getArrayTypeAccess() {
		return gaMscript.getArrayTypeAccess();
	}
	
	public ParserRule getArrayTypeRule() {
		return getArrayTypeAccess().getRule();
	}

	//ArrayTypeSpecifier returns TypeSpecifier:
	//	AnonymousArrayTypeSpecifier | DeclaredTypeSpecifier;
	public MscriptGrammarAccess.ArrayTypeSpecifierElements getArrayTypeSpecifierAccess() {
		return gaMscript.getArrayTypeSpecifierAccess();
	}
	
	public ParserRule getArrayTypeSpecifierRule() {
		return getArrayTypeSpecifierAccess().getRule();
	}

	//AnonymousArrayTypeSpecifier returns AnonymousTypeSpecifier:
	//	type=PrimitiveType;
	public MscriptGrammarAccess.AnonymousArrayTypeSpecifierElements getAnonymousArrayTypeSpecifierAccess() {
		return gaMscript.getAnonymousArrayTypeSpecifierAccess();
	}
	
	public ParserRule getAnonymousArrayTypeSpecifierRule() {
		return getAnonymousArrayTypeSpecifierAccess().getRule();
	}

	//ArrayDimension:
	//	{ArrayDimension} size=Expression?;
	public MscriptGrammarAccess.ArrayDimensionElements getArrayDimensionAccess() {
		return gaMscript.getArrayDimensionAccess();
	}
	
	public ParserRule getArrayDimensionRule() {
		return getArrayDimensionAccess().getRule();
	}

	//StructType:
	//	"struct" "{" members+=StructMember (";" members+=StructMember)* ";"? "}";
	public MscriptGrammarAccess.StructTypeElements getStructTypeAccess() {
		return gaMscript.getStructTypeAccess();
	}
	
	public ParserRule getStructTypeRule() {
		return getStructTypeAccess().getRule();
	}

	//StructMember:
	//	typeSpecifier=TypeSpecifier name=ValidID;
	public MscriptGrammarAccess.StructMemberElements getStructMemberAccess() {
		return gaMscript.getStructMemberAccess();
	}
	
	public ParserRule getStructMemberRule() {
		return getStructMemberAccess().getRule();
	}

	/// *
	// * Expressions
	// * / Expression:
	//	LambdaExpression | LetExpression | IfExpression | SwitchExpression | RangeExpression;
	public MscriptGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaMscript.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//LambdaExpression:
	//	(parameters+=InputParameterDeclaration | "(" (parameters+=InputParameterDeclaration (","
	//	parameters+=InputParameterDeclaration)*)? ")") "->" expression=Expression;
	public MscriptGrammarAccess.LambdaExpressionElements getLambdaExpressionAccess() {
		return gaMscript.getLambdaExpressionAccess();
	}
	
	public ParserRule getLambdaExpressionRule() {
		return getLambdaExpressionAccess().getRule();
	}

	//LetExpression:
	//	"let" assignments+=LetExpressionAssignment ("," assignments+=LetExpressionAssignment)* "in" target=Expression;
	public MscriptGrammarAccess.LetExpressionElements getLetExpressionAccess() {
		return gaMscript.getLetExpressionAccess();
	}
	
	public ParserRule getLetExpressionRule() {
		return getLetExpressionAccess().getRule();
	}

	//LetExpressionAssignment:
	//	(variables+=LetExpressionVariableDeclaration | "(" variables+=LetExpressionVariableDeclaration (","
	//	variables+=LetExpressionVariableDeclaration)+ ")") "=" assignedExpression=Expression;
	public MscriptGrammarAccess.LetExpressionAssignmentElements getLetExpressionAssignmentAccess() {
		return gaMscript.getLetExpressionAssignmentAccess();
	}
	
	public ParserRule getLetExpressionAssignmentRule() {
		return getLetExpressionAssignmentAccess().getRule();
	}

	//LetExpressionVariableDeclaration:
	//	name=ValidID;
	public MscriptGrammarAccess.LetExpressionVariableDeclarationElements getLetExpressionVariableDeclarationAccess() {
		return gaMscript.getLetExpressionVariableDeclarationAccess();
	}
	
	public ParserRule getLetExpressionVariableDeclarationRule() {
		return getLetExpressionVariableDeclarationAccess().getRule();
	}

	//IfExpression:
	//	static?="static"? "if" condition=Expression "then" thenExpression=Expression "else" elseExpression=Expression;
	public MscriptGrammarAccess.IfExpressionElements getIfExpressionAccess() {
		return gaMscript.getIfExpressionAccess();
	}
	
	public ParserRule getIfExpressionRule() {
		return getIfExpressionAccess().getRule();
	}

	//SwitchExpression:
	//	static?="static"? "switch" controlExpression=Expression cases+=SwitchCase* "default" ":" defaultExpression=Expression;
	public MscriptGrammarAccess.SwitchExpressionElements getSwitchExpressionAccess() {
		return gaMscript.getSwitchExpressionAccess();
	}
	
	public ParserRule getSwitchExpressionRule() {
		return getSwitchExpressionAccess().getRule();
	}

	//SwitchCase:
	//	"case" caseExpression=ImpliesExpression ":" resultExpression=Expression;
	public MscriptGrammarAccess.SwitchCaseElements getSwitchCaseAccess() {
		return gaMscript.getSwitchCaseAccess();
	}
	
	public ParserRule getSwitchCaseRule() {
		return getSwitchCaseAccess().getRule();
	}

	//RangeExpression returns Expression:
	//	ImpliesExpression ({RangeExpression.operands+=current} ":" operands+=ImpliesExpression (":"
	//	operands+=ImpliesExpression)?)?;
	public MscriptGrammarAccess.RangeExpressionElements getRangeExpressionAccess() {
		return gaMscript.getRangeExpressionAccess();
	}
	
	public ParserRule getRangeExpressionRule() {
		return getRangeExpressionAccess().getRule();
	}

	//ImpliesExpression returns Expression:
	//	LogicalOrExpression ({ImpliesExpression.leftOperand=current} operator=ImpliesOperator
	//	rightOperand=LogicalOrExpression)?;
	public MscriptGrammarAccess.ImpliesExpressionElements getImpliesExpressionAccess() {
		return gaMscript.getImpliesExpressionAccess();
	}
	
	public ParserRule getImpliesExpressionRule() {
		return getImpliesExpressionAccess().getRule();
	}

	//enum ImpliesOperator returns OperatorKind:
	//	Implies="=>";
	public MscriptGrammarAccess.ImpliesOperatorElements getImpliesOperatorAccess() {
		return gaMscript.getImpliesOperatorAccess();
	}
	
	public EnumRule getImpliesOperatorRule() {
		return getImpliesOperatorAccess().getRule();
	}

	//LogicalOrExpression returns Expression:
	//	LogicalAndExpression ({LogicalOrExpression.leftOperand=current} operator=LogicalOrOperator
	//	rightOperand=LogicalAndExpression)*;
	public MscriptGrammarAccess.LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return gaMscript.getLogicalOrExpressionAccess();
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}

	//enum LogicalOrOperator returns OperatorKind:
	//	LogicalOr="||";
	public MscriptGrammarAccess.LogicalOrOperatorElements getLogicalOrOperatorAccess() {
		return gaMscript.getLogicalOrOperatorAccess();
	}
	
	public EnumRule getLogicalOrOperatorRule() {
		return getLogicalOrOperatorAccess().getRule();
	}

	//LogicalAndExpression returns Expression:
	//	EqualityExpression ({LogicalAndExpression.leftOperand=current} operator=LogicalAndOperator
	//	rightOperand=EqualityExpression)*;
	public MscriptGrammarAccess.LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return gaMscript.getLogicalAndExpressionAccess();
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}

	//enum LogicalAndOperator returns OperatorKind:
	//	LogicalAnd="&&";
	public MscriptGrammarAccess.LogicalAndOperatorElements getLogicalAndOperatorAccess() {
		return gaMscript.getLogicalAndOperatorAccess();
	}
	
	public EnumRule getLogicalAndOperatorRule() {
		return getLogicalAndOperatorAccess().getRule();
	}

	//EqualityExpression returns Expression:
	//	RelationalExpression ({EqualityExpression.leftOperand=current} operator=EqualityOperator
	//	rightOperand=RelationalExpression)*;
	public MscriptGrammarAccess.EqualityExpressionElements getEqualityExpressionAccess() {
		return gaMscript.getEqualityExpressionAccess();
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}

	//enum EqualityOperator returns OperatorKind:
	//	EqualTo="==" | NotEqualTo="!=";
	public MscriptGrammarAccess.EqualityOperatorElements getEqualityOperatorAccess() {
		return gaMscript.getEqualityOperatorAccess();
	}
	
	public EnumRule getEqualityOperatorRule() {
		return getEqualityOperatorAccess().getRule();
	}

	//RelationalExpression returns Expression:
	//	AdditiveExpression => ({RelationalExpression.leftOperand=current} operator=RelationalOperator
	//	rightOperand=AdditiveExpression | {TypeTestExpression.expression=current} "is" typeSpecifier=TypeSpecifier)?;
	public MscriptGrammarAccess.RelationalExpressionElements getRelationalExpressionAccess() {
		return gaMscript.getRelationalExpressionAccess();
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}

	//enum RelationalOperator returns OperatorKind:
	//	LessThan="<" | LessThanOrEqualTo="<=" | GreaterThan=">" | GreaterThanOrEqualTo=">=";
	public MscriptGrammarAccess.RelationalOperatorElements getRelationalOperatorAccess() {
		return gaMscript.getRelationalOperatorAccess();
	}
	
	public EnumRule getRelationalOperatorRule() {
		return getRelationalOperatorAccess().getRule();
	}

	//AdditiveExpression returns Expression:
	//	MultiplicativeExpression ({AdditiveExpression.leftOperand=current} operator=AdditiveOperator
	//	rightOperand=MultiplicativeExpression)*;
	public MscriptGrammarAccess.AdditiveExpressionElements getAdditiveExpressionAccess() {
		return gaMscript.getAdditiveExpressionAccess();
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	//enum AdditiveOperator returns OperatorKind:
	//	Add="+" | Subtract="-" | ElementWiseAdd=".+" | ElementWiseSubtract=".-";
	public MscriptGrammarAccess.AdditiveOperatorElements getAdditiveOperatorAccess() {
		return gaMscript.getAdditiveOperatorAccess();
	}
	
	public EnumRule getAdditiveOperatorRule() {
		return getAdditiveOperatorAccess().getRule();
	}

	//MultiplicativeExpression returns Expression:
	//	PowerExpression ({MultiplicativeExpression.leftOperand=current} operator=MultiplicativeOperator
	//	rightOperand=PowerExpression)*;
	public MscriptGrammarAccess.MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return gaMscript.getMultiplicativeExpressionAccess();
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}

	//enum MultiplicativeOperator returns OperatorKind:
	//	Multiply="*" | Divide="/" | Modulo="%" | ElementWiseMultiply=".*" | ElementWiseDivide="./" | ElementWiseModulo=".%";
	public MscriptGrammarAccess.MultiplicativeOperatorElements getMultiplicativeOperatorAccess() {
		return gaMscript.getMultiplicativeOperatorAccess();
	}
	
	public EnumRule getMultiplicativeOperatorRule() {
		return getMultiplicativeOperatorAccess().getRule();
	}

	//PowerExpression returns Expression:
	//	PrefixUnaryExpression ({PowerExpression.leftOperand=current} operator=PowerOperator
	//	rightOperand=PrefixUnaryExpression)?;
	public MscriptGrammarAccess.PowerExpressionElements getPowerExpressionAccess() {
		return gaMscript.getPowerExpressionAccess();
	}
	
	public ParserRule getPowerExpressionRule() {
		return getPowerExpressionAccess().getRule();
	}

	//enum PowerOperator returns OperatorKind:
	//	Power="^" | ElementWisePower=".^";
	public MscriptGrammarAccess.PowerOperatorElements getPowerOperatorAccess() {
		return gaMscript.getPowerOperatorAccess();
	}
	
	public EnumRule getPowerOperatorRule() {
		return getPowerOperatorAccess().getRule();
	}

	//PrefixUnaryExpression returns Expression:
	//	PostfixUnaryExpression | {UnaryExpression} operator=PrefixUnaryOperator operand=PostfixUnaryExpression;
	public MscriptGrammarAccess.PrefixUnaryExpressionElements getPrefixUnaryExpressionAccess() {
		return gaMscript.getPrefixUnaryExpressionAccess();
	}
	
	public ParserRule getPrefixUnaryExpressionRule() {
		return getPrefixUnaryExpressionAccess().getRule();
	}

	//enum PrefixUnaryOperator returns OperatorKind:
	//	Negate="-" | LogicalNot="!";
	public MscriptGrammarAccess.PrefixUnaryOperatorElements getPrefixUnaryOperatorAccess() {
		return gaMscript.getPrefixUnaryOperatorAccess();
	}
	
	public EnumRule getPrefixUnaryOperatorRule() {
		return getPrefixUnaryOperatorAccess().getRule();
	}

	//PostfixUnaryExpression returns Expression:
	//	(QualifiedFeatureCall | MemberFeatureCall) ({UnaryExpression.operand=current} operator=PostfixUnaryOperator)?;
	public MscriptGrammarAccess.PostfixUnaryExpressionElements getPostfixUnaryExpressionAccess() {
		return gaMscript.getPostfixUnaryExpressionAccess();
	}
	
	public ParserRule getPostfixUnaryExpressionRule() {
		return getPostfixUnaryExpressionAccess().getRule();
	}

	//enum PostfixUnaryOperator returns OperatorKind:
	//	Derivative="\'";
	public MscriptGrammarAccess.PostfixUnaryOperatorElements getPostfixUnaryOperatorAccess() {
		return gaMscript.getPostfixUnaryOperatorAccess();
	}
	
	public EnumRule getPostfixUnaryOperatorRule() {
		return getPostfixUnaryOperatorAccess().getRule();
	}

	//MemberFeatureCall returns Expression:
	//	PrimaryExpression ({ArrayElementAccess.array=current} "[" subscripts+=ArraySubscript ("," subscripts+=ArraySubscript)*
	//	"]" | {MemberVariableAccess.target=current} "." memberVariable=ValidID | {FunctionCall.arguments+=current} "."
	//	feature=[CallableElement|ValidID] "(" (arguments+=Expression ("," arguments+=Expression)*)? ")" |
	//	{IterationCall.target=current} "." identifier=ValidID "(" iterationVariables+=IterationVariableDeclaration (","
	//	iterationVariables+=IterationVariableDeclaration)* (";" accumulator=IterationAccumulator)? (";"
	//	breakCondition=Expression)? "|" expression=Expression ")")*;
	public MscriptGrammarAccess.MemberFeatureCallElements getMemberFeatureCallAccess() {
		return gaMscript.getMemberFeatureCallAccess();
	}
	
	public ParserRule getMemberFeatureCallRule() {
		return getMemberFeatureCallAccess().getRule();
	}

	//IterationAccumulator:
	//	name=ValidID "=" initializer=Expression;
	public MscriptGrammarAccess.IterationAccumulatorElements getIterationAccumulatorAccess() {
		return gaMscript.getIterationAccumulatorAccess();
	}
	
	public ParserRule getIterationAccumulatorRule() {
		return getIterationAccumulatorAccess().getRule();
	}

	//IterationVariableDeclaration:
	//	name=ValidID;
	public MscriptGrammarAccess.IterationVariableDeclarationElements getIterationVariableDeclarationAccess() {
		return gaMscript.getIterationVariableDeclarationAccess();
	}
	
	public ParserRule getIterationVariableDeclarationRule() {
		return getIterationVariableDeclarationAccess().getRule();
	}

	//ArraySubscript:
	//	slice?=":" | expression=Expression;
	public MscriptGrammarAccess.ArraySubscriptElements getArraySubscriptAccess() {
		return gaMscript.getArraySubscriptAccess();
	}
	
	public ParserRule getArraySubscriptRule() {
		return getArraySubscriptAccess().getRule();
	}

	//PrimaryExpression returns Expression:
	//	Literal | TemplateExpression | FeatureCall | UnitConstructionOperator | ArrayConstructionOperator |
	//	ArrayConcatenationOperator | StructConstructionOperator | ParenthesizedExpression | EndExpression |
	//	AlgorithmExpression;
	public MscriptGrammarAccess.PrimaryExpressionElements getPrimaryExpressionAccess() {
		return gaMscript.getPrimaryExpressionAccess();
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//Literal:
	//	NumericLiteral | BooleanLiteral | StringLiteral;
	public MscriptGrammarAccess.LiteralElements getLiteralAccess() {
		return gaMscript.getLiteralAccess();
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//NumericLiteral:
	//	IntegerLiteral | RealLiteral;
	public MscriptGrammarAccess.NumericLiteralElements getNumericLiteralAccess() {
		return gaMscript.getNumericLiteralAccess();
	}
	
	public ParserRule getNumericLiteralRule() {
		return getNumericLiteralAccess().getRule();
	}

	//RealLiteral:
	//	data=RealData unit=Unit;
	public MscriptGrammarAccess.RealLiteralElements getRealLiteralAccess() {
		return gaMscript.getRealLiteralAccess();
	}
	
	public ParserRule getRealLiteralRule() {
		return getRealLiteralAccess().getRule();
	}

	//RealData hidden():
	//	ValidInt ("." ValidInt (IJ | EXPIJ | E ("+" | "-") ValidInt IJ?)? | (EXPIJ | E ("+" | "-") ValidInt IJ?));
	public MscriptGrammarAccess.RealDataElements getRealDataAccess() {
		return gaMscript.getRealDataAccess();
	}
	
	public ParserRule getRealDataRule() {
		return getRealDataAccess().getRule();
	}

	//IntegerLiteral:
	//	data=IntegerData unit=Unit;
	public MscriptGrammarAccess.IntegerLiteralElements getIntegerLiteralAccess() {
		return gaMscript.getIntegerLiteralAccess();
	}
	
	public ParserRule getIntegerLiteralRule() {
		return getIntegerLiteralAccess().getRule();
	}

	//IntegerData hidden():
	//	ValidInt IJ?;
	public MscriptGrammarAccess.IntegerDataElements getIntegerDataAccess() {
		return gaMscript.getIntegerDataAccess();
	}
	
	public ParserRule getIntegerDataRule() {
		return getIntegerDataAccess().getRule();
	}

	//BooleanLiteral:
	//	{BooleanLiteral} (true?="true" | "false");
	public MscriptGrammarAccess.BooleanLiteralElements getBooleanLiteralAccess() {
		return gaMscript.getBooleanLiteralAccess();
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//StringLiteral:
	//	text=STRING;
	public MscriptGrammarAccess.StringLiteralElements getStringLiteralAccess() {
		return gaMscript.getStringLiteralAccess();
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//TemplateExpression hidden():
	//	{TemplateExpression} "\"\"\"" segments+=ConstantTemplateSegment? (segments+=ExpressionTemplateSegment
	//	segments+=ConstantTemplateSegment?)* "\"\"\"";
	public MscriptGrammarAccess.TemplateExpressionElements getTemplateExpressionAccess() {
		return gaMscript.getTemplateExpressionAccess();
	}
	
	public ParserRule getTemplateExpressionRule() {
		return getTemplateExpressionAccess().getRule();
	}

	//ConstantTemplateSegment:
	//	text=ConstantString;
	public MscriptGrammarAccess.ConstantTemplateSegmentElements getConstantTemplateSegmentAccess() {
		return gaMscript.getConstantTemplateSegmentAccess();
	}
	
	public ParserRule getConstantTemplateSegmentRule() {
		return getConstantTemplateSegmentAccess().getRule();
	}

	//ConstantString:
	//	(CONSTANT_STRING | ID | ANY_OTHER)+;
	public MscriptGrammarAccess.ConstantStringElements getConstantStringAccess() {
		return gaMscript.getConstantStringAccess();
	}
	
	public ParserRule getConstantStringRule() {
		return getConstantStringAccess().getRule();
	}

	//ExpressionTemplateSegment hidden(WS, ML_COMMENT):
	//	"«" expression=Expression "»";
	public MscriptGrammarAccess.ExpressionTemplateSegmentElements getExpressionTemplateSegmentAccess() {
		return gaMscript.getExpressionTemplateSegmentAccess();
	}
	
	public ParserRule getExpressionTemplateSegmentRule() {
		return getExpressionTemplateSegmentAccess().getRule();
	}

	//FeatureCall returns Expression:
	//	VariableReference | FunctionCall;
	public MscriptGrammarAccess.FeatureCallElements getFeatureCallAccess() {
		return gaMscript.getFeatureCallAccess();
	}
	
	public ParserRule getFeatureCallRule() {
		return getFeatureCallAccess().getRule();
	}

	//VariableReference returns Expression:
	//	{VariableReference} feature=[CallableElement|ValidID] ("{" stepExpression=StepExpression "}")?;
	public MscriptGrammarAccess.VariableReferenceElements getVariableReferenceAccess() {
		return gaMscript.getVariableReferenceAccess();
	}
	
	public ParserRule getVariableReferenceRule() {
		return getVariableReferenceAccess().getRule();
	}

	//FunctionCall returns Expression:
	//	{FunctionCall} feature=[CallableElement|ValidID] "(" (arguments+=Expression ("," arguments+=Expression)*)? ")";
	public MscriptGrammarAccess.FunctionCallElements getFunctionCallAccess() {
		return gaMscript.getFunctionCallAccess();
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}

	//QualifiedFeatureCall returns Expression:
	//	QualifiedVariableReference | QualifiedFunctionCall;
	public MscriptGrammarAccess.QualifiedFeatureCallElements getQualifiedFeatureCallAccess() {
		return gaMscript.getQualifiedFeatureCallAccess();
	}
	
	public ParserRule getQualifiedFeatureCallRule() {
		return getQualifiedFeatureCallAccess().getRule();
	}

	//QualifiedVariableReference returns Expression:
	//	{VariableReference} "::" feature=[CallableElement|QualifiedName];
	public MscriptGrammarAccess.QualifiedVariableReferenceElements getQualifiedVariableReferenceAccess() {
		return gaMscript.getQualifiedVariableReferenceAccess();
	}
	
	public ParserRule getQualifiedVariableReferenceRule() {
		return getQualifiedVariableReferenceAccess().getRule();
	}

	//QualifiedFunctionCall returns Expression:
	//	{FunctionCall} "::" feature=[CallableElement|QualifiedName] "(" (arguments+=Expression ("," arguments+=Expression)*)?
	//	")";
	public MscriptGrammarAccess.QualifiedFunctionCallElements getQualifiedFunctionCallAccess() {
		return gaMscript.getQualifiedFunctionCallAccess();
	}
	
	public ParserRule getQualifiedFunctionCallRule() {
		return getQualifiedFunctionCallAccess().getRule();
	}

	//StepExpression:
	//	RangeStepExpression;
	public MscriptGrammarAccess.StepExpressionElements getStepExpressionAccess() {
		return gaMscript.getStepExpressionAccess();
	}
	
	public ParserRule getStepExpressionRule() {
		return getStepExpressionAccess().getRule();
	}

	//RangeStepExpression returns StepExpression:
	//	AdditiveStepExpression ({RangeStepExpression.start=current} ".." end=AdditiveStepExpression)?;
	public MscriptGrammarAccess.RangeStepExpressionElements getRangeStepExpressionAccess() {
		return gaMscript.getRangeStepExpressionAccess();
	}
	
	public ParserRule getRangeStepExpressionRule() {
		return getRangeStepExpressionAccess().getRule();
	}

	//AdditiveStepExpression returns StepExpression:
	//	NegateStepExpression ({AdditiveStepExpression.leftOperand=current} operator=AdditiveOperator
	//	rightOperand=NegateStepExpression)*;
	public MscriptGrammarAccess.AdditiveStepExpressionElements getAdditiveStepExpressionAccess() {
		return gaMscript.getAdditiveStepExpressionAccess();
	}
	
	public ParserRule getAdditiveStepExpressionRule() {
		return getAdditiveStepExpressionAccess().getRule();
	}

	//NegateStepExpression returns StepExpression:
	//	PrimitiveStepExpression | {NegateStepExpression} "-" operand=PrimitiveStepExpression;
	public MscriptGrammarAccess.NegateStepExpressionElements getNegateStepExpressionAccess() {
		return gaMscript.getNegateStepExpressionAccess();
	}
	
	public ParserRule getNegateStepExpressionRule() {
		return getNegateStepExpressionAccess().getRule();
	}

	//PrimitiveStepExpression returns StepExpression:
	//	StepLiteral | StepN;
	public MscriptGrammarAccess.PrimitiveStepExpressionElements getPrimitiveStepExpressionAccess() {
		return gaMscript.getPrimitiveStepExpressionAccess();
	}
	
	public ParserRule getPrimitiveStepExpressionRule() {
		return getPrimitiveStepExpressionAccess().getRule();
	}

	//StepLiteral:
	//	value=ValidInt;
	public MscriptGrammarAccess.StepLiteralElements getStepLiteralAccess() {
		return gaMscript.getStepLiteralAccess();
	}
	
	public ParserRule getStepLiteralRule() {
		return getStepLiteralAccess().getRule();
	}

	//StepN:
	//	{StepN} N;
	public MscriptGrammarAccess.StepNElements getStepNAccess() {
		return gaMscript.getStepNAccess();
	}
	
	public ParserRule getStepNRule() {
		return getStepNAccess().getRule();
	}

	//ArrayConstructionOperator:
	//	"{" expressions+=Expression (("," expressions+=Expression)* | "for" iterationClauses+=ArrayConstructionIterationClause
	//	("," iterationClauses+=ArrayConstructionIterationClause)*) "}";
	public MscriptGrammarAccess.ArrayConstructionOperatorElements getArrayConstructionOperatorAccess() {
		return gaMscript.getArrayConstructionOperatorAccess();
	}
	
	public ParserRule getArrayConstructionOperatorRule() {
		return getArrayConstructionOperatorAccess().getRule();
	}

	//ArrayConstructionIterationClause:
	//	iterationVariable=IterationVariableDeclaration "in" collectionExpression=Expression;
	public MscriptGrammarAccess.ArrayConstructionIterationClauseElements getArrayConstructionIterationClauseAccess() {
		return gaMscript.getArrayConstructionIterationClauseAccess();
	}
	
	public ParserRule getArrayConstructionIterationClauseRule() {
		return getArrayConstructionIterationClauseAccess().getRule();
	}

	//ArrayConcatenationOperator:
	//	"[" rows+=ExpressionList (";" rows+=ExpressionList)* "]";
	public MscriptGrammarAccess.ArrayConcatenationOperatorElements getArrayConcatenationOperatorAccess() {
		return gaMscript.getArrayConcatenationOperatorAccess();
	}
	
	public ParserRule getArrayConcatenationOperatorRule() {
		return getArrayConcatenationOperatorAccess().getRule();
	}

	//ExpressionList:
	//	expressions+=Expression ("," expressions+=Expression)*;
	public MscriptGrammarAccess.ExpressionListElements getExpressionListAccess() {
		return gaMscript.getExpressionListAccess();
	}
	
	public ParserRule getExpressionListRule() {
		return getExpressionListAccess().getRule();
	}

	//StructConstructionOperator:
	//	"{" members+=StructConstructionMember ("," members+=StructConstructionMember)* "}";
	public MscriptGrammarAccess.StructConstructionOperatorElements getStructConstructionOperatorAccess() {
		return gaMscript.getStructConstructionOperatorAccess();
	}
	
	public ParserRule getStructConstructionOperatorRule() {
		return getStructConstructionOperatorAccess().getRule();
	}

	//StructConstructionMember:
	//	name=ValidID "=" value=Expression;
	public MscriptGrammarAccess.StructConstructionMemberElements getStructConstructionMemberAccess() {
		return gaMscript.getStructConstructionMemberAccess();
	}
	
	public ParserRule getStructConstructionMemberRule() {
		return getStructConstructionMemberAccess().getRule();
	}

	//UnitConstructionOperator:
	//	"unitlit" unit=ExplicitUnit;
	public MscriptGrammarAccess.UnitConstructionOperatorElements getUnitConstructionOperatorAccess() {
		return gaMscript.getUnitConstructionOperatorAccess();
	}
	
	public ParserRule getUnitConstructionOperatorRule() {
		return getUnitConstructionOperatorAccess().getRule();
	}

	//ParenthesizedExpression:
	//	"(" expressions+=Expression ("," expressions+=Expression)* ")";
	public MscriptGrammarAccess.ParenthesizedExpressionElements getParenthesizedExpressionAccess() {
		return gaMscript.getParenthesizedExpressionAccess();
	}
	
	public ParserRule getParenthesizedExpressionRule() {
		return getParenthesizedExpressionAccess().getRule();
	}

	//EndExpression:
	//	{EndExpression} "end";
	public MscriptGrammarAccess.EndExpressionElements getEndExpressionAccess() {
		return gaMscript.getEndExpressionAccess();
	}
	
	public ParserRule getEndExpressionRule() {
		return getEndExpressionAccess().getRule();
	}

	//AlgorithmExpression returns Expression:
	//	{AlgorithmExpression} "algorithm" body=Compound;
	public MscriptGrammarAccess.AlgorithmExpressionElements getAlgorithmExpressionAccess() {
		return gaMscript.getAlgorithmExpressionAccess();
	}
	
	public ParserRule getAlgorithmExpressionRule() {
		return getAlgorithmExpressionAccess().getRule();
	}

	//Compound:
	//	{Compound} "{" statements+=Statement* "}";
	public MscriptGrammarAccess.CompoundElements getCompoundAccess() {
		return gaMscript.getCompoundAccess();
	}
	
	public ParserRule getCompoundRule() {
		return getCompoundAccess().getRule();
	}

	//Statement:
	//	Compound | Assignment | LocalVariableDeclaration | IfStatement | WhileStatement | DoWhileStatement | ForStatement |
	//	ContinueStatement | BreakStatement | ReturnStatement;
	public MscriptGrammarAccess.StatementElements getStatementAccess() {
		return gaMscript.getStatementAccess();
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//Assignment:
	//	target=AssignableMemberFeatureCall "=" assignedExpression=Expression ";";
	public MscriptGrammarAccess.AssignmentElements getAssignmentAccess() {
		return gaMscript.getAssignmentAccess();
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//AssignableMemberFeatureCall returns Expression:
	//	AssignablePrimaryExpression ({ArrayElementAccess.array=current} "[" subscripts+=ArraySubscript (","
	//	subscripts+=ArraySubscript)* "]" | {MemberVariableAccess.target=current} "." memberVariable=ValidID)*;
	public MscriptGrammarAccess.AssignableMemberFeatureCallElements getAssignableMemberFeatureCallAccess() {
		return gaMscript.getAssignableMemberFeatureCallAccess();
	}
	
	public ParserRule getAssignableMemberFeatureCallRule() {
		return getAssignableMemberFeatureCallAccess().getRule();
	}

	//AssignablePrimaryExpression returns Expression:
	//	VariableReference | ParenthesizedExpression;
	public MscriptGrammarAccess.AssignablePrimaryExpressionElements getAssignablePrimaryExpressionAccess() {
		return gaMscript.getAssignablePrimaryExpressionAccess();
	}
	
	public ParserRule getAssignablePrimaryExpressionRule() {
		return getAssignablePrimaryExpressionAccess().getRule();
	}

	//LocalVariableDeclaration:
	//	"var" name=ValidID "=" initializer=Expression ";";
	public MscriptGrammarAccess.LocalVariableDeclarationElements getLocalVariableDeclarationAccess() {
		return gaMscript.getLocalVariableDeclarationAccess();
	}
	
	public ParserRule getLocalVariableDeclarationRule() {
		return getLocalVariableDeclarationAccess().getRule();
	}

	//IfStatement:
	//	"if" "(" condition=Expression ")" thenStatement=Statement ("else" elseStatement=Statement)?;
	public MscriptGrammarAccess.IfStatementElements getIfStatementAccess() {
		return gaMscript.getIfStatementAccess();
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}

	//WhileStatement:
	//	"while" "(" condition=Expression ")" body=Statement;
	public MscriptGrammarAccess.WhileStatementElements getWhileStatementAccess() {
		return gaMscript.getWhileStatementAccess();
	}
	
	public ParserRule getWhileStatementRule() {
		return getWhileStatementAccess().getRule();
	}

	//ForStatement:
	//	"for" "(" iterationVariable=IterationVariableDeclaration "in" collectionExpression=Expression ")" body=Statement;
	public MscriptGrammarAccess.ForStatementElements getForStatementAccess() {
		return gaMscript.getForStatementAccess();
	}
	
	public ParserRule getForStatementRule() {
		return getForStatementAccess().getRule();
	}

	//DoWhileStatement:
	//	"do" body=Statement "while" "(" condition=Expression ")" ";";
	public MscriptGrammarAccess.DoWhileStatementElements getDoWhileStatementAccess() {
		return gaMscript.getDoWhileStatementAccess();
	}
	
	public ParserRule getDoWhileStatementRule() {
		return getDoWhileStatementAccess().getRule();
	}

	//ContinueStatement:
	//	{ContinueStatement} "continue" ";";
	public MscriptGrammarAccess.ContinueStatementElements getContinueStatementAccess() {
		return gaMscript.getContinueStatementAccess();
	}
	
	public ParserRule getContinueStatementRule() {
		return getContinueStatementAccess().getRule();
	}

	//BreakStatement:
	//	{BreakStatement} "break" ";";
	public MscriptGrammarAccess.BreakStatementElements getBreakStatementAccess() {
		return gaMscript.getBreakStatementAccess();
	}
	
	public ParserRule getBreakStatementRule() {
		return getBreakStatementAccess().getRule();
	}

	//ReturnStatement:
	//	"return" expression=Expression ";";
	public MscriptGrammarAccess.ReturnStatementElements getReturnStatementAccess() {
		return gaMscript.getReturnStatementAccess();
	}
	
	public ParserRule getReturnStatementRule() {
		return getReturnStatementAccess().getRule();
	}

	/// *
	// * Unit expressions
	// * / Unit:
	//	{Unit} ("(" ")" | "(" numerator=UnitNumerator ("/" denominator=UnitDenominator)? ")" |
	//	numerator=ImplicitUnitNumerator);
	public MscriptGrammarAccess.UnitElements getUnitAccess() {
		return gaMscript.getUnitAccess();
	}
	
	public ParserRule getUnitRule() {
		return getUnitAccess().getRule();
	}

	//ExplicitUnit returns Unit:
	//	"(" numerator=UnitNumerator ("/" denominator=UnitDenominator)? ")";
	public MscriptGrammarAccess.ExplicitUnitElements getExplicitUnitAccess() {
		return gaMscript.getExplicitUnitAccess();
	}
	
	public ParserRule getExplicitUnitRule() {
		return getExplicitUnitAccess().getRule();
	}

	//UnitNumerator:
	//	{UnitNumerator} ONE | factors+=UnitFactor ("*" factors+=UnitFactor)*;
	public MscriptGrammarAccess.UnitNumeratorElements getUnitNumeratorAccess() {
		return gaMscript.getUnitNumeratorAccess();
	}
	
	public ParserRule getUnitNumeratorRule() {
		return getUnitNumeratorAccess().getRule();
	}

	//ImplicitUnitNumerator returns UnitNumerator:
	//	{UnitNumerator};
	public MscriptGrammarAccess.ImplicitUnitNumeratorElements getImplicitUnitNumeratorAccess() {
		return gaMscript.getImplicitUnitNumeratorAccess();
	}
	
	public ParserRule getImplicitUnitNumeratorRule() {
		return getImplicitUnitNumeratorAccess().getRule();
	}

	//UnitDenominator:
	//	factors+=UnitFactor | "(" factors+=UnitFactor ("*" factors+=UnitFactor)* ")";
	public MscriptGrammarAccess.UnitDenominatorElements getUnitDenominatorAccess() {
		return gaMscript.getUnitDenominatorAccess();
	}
	
	public ParserRule getUnitDenominatorRule() {
		return getUnitDenominatorAccess().getRule();
	}

	//UnitFactor:
	//	symbol=ValidID ("^" exponent=UnitExponent)?;
	public MscriptGrammarAccess.UnitFactorElements getUnitFactorAccess() {
		return gaMscript.getUnitFactorAccess();
	}
	
	public ParserRule getUnitFactorRule() {
		return getUnitFactorAccess().getRule();
	}

	//UnitExponent returns ecore::EInt:
	//	"-"? ValidInt;
	public MscriptGrammarAccess.UnitExponentElements getUnitExponentAccess() {
		return gaMscript.getUnitExponentAccess();
	}
	
	public ParserRule getUnitExponentRule() {
		return getUnitExponentAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public MscriptGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaMscript.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//ValidInt returns ecore::EInt:
	//	ONE | INT;
	public MscriptGrammarAccess.ValidIntElements getValidIntAccess() {
		return gaMscript.getValidIntAccess();
	}
	
	public ParserRule getValidIntRule() {
		return getValidIntAccess().getRule();
	}

	//ValidID:
	//	N | IJ | E | EXP | EXPIJ | ID;
	public MscriptGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaMscript.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	/// *
	// * Terminals
	// * / terminal N:
	//	"n";
	public TerminalRule getNRule() {
		return gaMscript.getNRule();
	} 

	//terminal IJ:
	//	"i" | "j";
	public TerminalRule getIJRule() {
		return gaMscript.getIJRule();
	} 

	//terminal E:
	//	"e" | "E";
	public TerminalRule getERule() {
		return gaMscript.getERule();
	} 

	//terminal EXP:
	//	E "0".."9"+;
	public TerminalRule getEXPRule() {
		return gaMscript.getEXPRule();
	} 

	//terminal EXPIJ:
	//	EXP IJ;
	public TerminalRule getEXPIJRule() {
		return gaMscript.getEXPIJRule();
	} 

	//terminal ONE:
	//	"1";
	public TerminalRule getONERule() {
		return gaMscript.getONERule();
	} 

	//terminal INT:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaMscript.getINTRule();
	} 

	//terminal ID:
	//	"_"? ("a".."z" | "A".."Z") ("0".."9" | "_" | "a".."z" | "A".."Z")*;
	public TerminalRule getIDRule() {
		return gaMscript.getIDRule();
	} 

	//terminal STRING:
	//	"\"" (!("\\" | "\"") | "\\" ("\'" | "\"" | "?" | "\\" | "a" | "b" | "f" | "n" | "r" | "t" | "v"))* "\"";
	public TerminalRule getSTRINGRule() {
		return gaMscript.getSTRINGRule();
	} 

	//terminal CONSTANT_STRING:
	//	"­";
	public TerminalRule getCONSTANT_STRINGRule() {
		return gaMscript.getCONSTANT_STRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaMscript.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaMscript.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaMscript.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaMscript.getANY_OTHERRule();
	} 
}
