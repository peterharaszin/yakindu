grammar org.eclipselabs.damos.dmltext.DMLText with org.eclipselabs.damos.mscript.Mscript

import "platform:/resource/org.eclipselabs.damos.dml/model/DML.ecore"
import "platform:/resource/org.eclipselabs.damos.dmltext/model/DMLText.ecore"
import "platform:/resource/org.eclipselabs.damos.mscript/model/Mscript.ecore"
import 'http://www.eclipse.org/emf/2002/Ecore' as ecore

Root:
	(blockTypes+=MscriptBlockType | systemInterfaces+=MscriptSystemInterface)*;
	
MscriptBlockType:
	'package' packageName=QualifiedName
	(importDeclarations+=ImportDeclaration)*
	((timing=TimingKind)? & (boundary?='boundary')?) 'blockType' name=ValidID '{'
		(inputDefinitions+=InputDefinition)*
		(outputDefinitions+=OutputDefinition)*
		(parameters+=Parameter)*
		(declarations+=Declaration)*
	'}';

enum TimingKind:
	Continuous='continuous' |
	Synchronous='synchronous' |
	Asynchronous='asynchronous' |
	Discrete='discrete';

InputDefinition:
	((socket?='socket')? & (testPoint?='testPoint')?) 'input' name=ValidID ('[' minimumPortCount=ValidInt '..'  maximumPortCount=UpperBoundLiteral ('|' defaultPortCount=ValidInt)? ']')? ('{'
		(('directFeedthrough' directFeedthroughPolicy=DirectFeedthroughPolicy)? &
		(parameters+=Parameter)*)
	'}')?;
	
DirectFeedthroughPolicy:
	BooleanDirectFeedthroughPolicy;

BooleanDirectFeedthroughPolicy:
	{BooleanDirectFeedthroughPolicy} (directFeedthrough?='always' | 'never');

OutputDefinition:
	((socket?='socket')? & (testPoint?='testPoint')?) 'output' name=ValidID ('[' minimumPortCount=ValidInt '..'  maximumPortCount=UpperBoundLiteral ('|' defaultPortCount=ValidInt)? ']')? ('{'
		(parameters+=Parameter)*
	'}')?;

Parameter:
	OpaqueParameter | MscriptParameter;
	
OpaqueParameter returns Parameter:
	(visibility=ParameterVisibilityKind)? dataType=OpaqueTypeSpecification 'parameter' name=ValidID '=' ownedDefaultValue=StringValueSpecification
		('predefined' '{' predefinedValues+=OpaqueParameterPredefinedValue (',' predefinedValues+=OpaqueParameterPredefinedValue)* '}')?;

MscriptParameter returns Parameter:
	(visibility=ParameterVisibilityKind)? 'parameter' name=ValidID '=' ownedDefaultValue=MscriptValueSpecification
		('predefined' '{' predefinedValues+=MscriptParameterPredefinedValue (',' predefinedValues+=MscriptParameterPredefinedValue)* '}')?;

OpaqueParameterPredefinedValue returns ParameterPredefinedValue:
	value=StringValueSpecification ('as' alias=STRING)?;

MscriptParameterPredefinedValue returns ParameterPredefinedValue:
	value=MscriptValueSpecification ('as' alias=STRING)?;

enum ParameterVisibilityKind:
	Public='public' | Private='private';

OpaqueTypeSpecification returns PrimitiveTypeSpecification:
	kind=OpaqueTypeKind;

enum OpaqueTypeKind returns PrimitiveTypeKind:
	String='opaque'; 

StringValueSpecification:
	value=STRING;

MscriptValueSpecification:
	expression=Expression;

MscriptSystemInterface:
	'package' packageName=QualifiedName
	(importDeclarations+=ImportDeclaration)*
	'systemInterface' name=ValidID '{'
		(inlets+=Inlet)* 
		(outlets+=Outlet)*
	'}';
	
Inlet:
	'inlet' dataType=MscriptDataTypeSpecification name=ValidID;

Outlet:
	'outlet' dataType=MscriptDataTypeSpecification name=ValidID;

MscriptDataTypeSpecification:
	specifier=DataTypeSpecifier;
	
UpperBoundLiteral returns ecore::EInt:
	ValidInt | '*';

QualifiedNameWithWildcard:
	QualifiedName ('.*' | '.' '*')?;
