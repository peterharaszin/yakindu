grammar org.eclipselabs.damos.dmltext.DMLText with org.eclipselabs.mscript.language.Mscript

import "platform:/resource/org.eclipselabs.damos.dml/model/DML.ecore"
import "platform:/resource/org.eclipselabs.damos.dmltext/model/DMLText.ecore"
import "platform:/resource/org.eclipselabs.mscript.language/model/Mscript.ecore"
import 'http://www.eclipse.org/emf/2002/Ecore' as ecore

Root:
	(blockTypes+=BlockType | systemInterfaces+=SystemInterface)*;
	
BlockType:
	(timing=TimingKind)? 'blockType' qualifiedName=QualifiedName '{'
		(inputDefinitions+=InputDefinition)*
		(outputDefinitions+=OutputDefinition)*
		(parameters+=Parameter)*
		(behavior=MscriptBehaviorSpecification)?
	'}';

enum TimingKind:
	Continuous='continuous' |
	Synchronous='synchronous' |
	Asynchronous='asynchronous' |
	Discrete='discrete';

InputDefinition:
	((socket?='socket')? & (testPoint?='testPoint')?) 'input' name=ValidID ('[' minimumPortCount=ValidInt '..'  maximumPortCount=UpperBoundLiteral ('|' defaultPortCount=ValidInt)? ']')? ('{'
		('directFeedthrough' directFeedthroughPolicy=DirectFeedthroughPolicy)?
		(parameters+=Parameter)*
	'}')?;
	
DirectFeedthroughPolicy:
	BooleanDirectFeedthroughPolicy;

BooleanDirectFeedthroughPolicy:
	{BooleanDirectFeedthroughPolicy} (directFeedthrough?='always' | 'never');

OutputDefinition:
	((socket?='socket')? & (testPoint?='testPoint')?) 'output' name=ValidID ('[' minimumPortCount=ValidInt '..'  maximumPortCount=UpperBoundLiteral ('|' defaultPortCount=ValidInt)? ']')? ('{'
		(parameters+=Parameter)*
	'}')?;

Parameter:
	(visibility=ParameterVisibilityKind)? 'parameter' name=ValidID '=' ownedDefaultValue=MscriptValueSpecification
		('predefined' '{' predefinedValues+=ParameterPredefinedValue (',' predefinedValues+=ParameterPredefinedValue)* '}')?;
	
ParameterPredefinedValue:
	value=MscriptValueSpecification ('alias' alias=STRING)?;

enum ParameterVisibilityKind:
	Public='public' | Private='private';

MscriptValueSpecification:
	expression=Expression;

MscriptBehaviorSpecification:
	'behavior' '{'
		module=Module
	'}';
	
SystemInterface:
	'systemInterface' name=ValidID '{'
		(inlets+=Inlet)*
		(outlets+=Outlet)*
	'}';
	
Inlet:
	'inlet' dataType=MscriptDataTypeSpecification name=ValidID;

Outlet:
	'outlet' dataType=MscriptDataTypeSpecification name=ValidID;

MscriptDataTypeSpecification:
	specifier=DataTypeSpecifier;
	
UpperBoundLiteral returns ecore::EInt:
	ValidInt | '*';
