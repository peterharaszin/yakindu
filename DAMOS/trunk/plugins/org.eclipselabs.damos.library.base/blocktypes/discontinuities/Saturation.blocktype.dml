<?xml version="1.0" encoding="UTF-8"?>
<dml:BlockType xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dml="http://www.eclipselabs.org/damos/DML/1.0.0" xmi:id="_HIuvUIkREd-UBLGPWvR3ew" qualifiedName="org.eclipselabs.damos.library.base.discontinuities.Saturation">
  <parameters xsi:type="dml:ExpressionParameter" xmi:id="_HIuvU4kREd-UBLGPWvR3ew" name="upperLimit">
    <defaultExpression xmi:id="_HIuvVIkREd-UBLGPWvR3ew" expression="1"/>
  </parameters>
  <parameters xsi:type="dml:ExpressionParameter" xmi:id="_HIuvVYkREd-UBLGPWvR3ew" name="lowerLimit">
    <defaultExpression xmi:id="_HIuvVokREd-UBLGPWvR3ew" expression="-1"/>
  </parameters>
  <inputDefinitions xmi:id="_HIuvUYkREd-UBLGPWvR3ew" name="input"/>
  <outputDefinitions xmi:id="_HIuvUokREd-UBLGPWvR3ew" name="output"/>
  <behavior xsi:type="dml:OpaqueBehaviorSpecification" xmi:id="_R23FsBm7EeC_e-Pf9pf9-g" behavior="func Saturation&lt;upperLimit, lowerLimit>(input) -> output {&#xA;&#x9;static assert input is real() :&#xA;&#x9;&#x9;error &quot;Input value must be numeric&quot;;&#xA;&#x9;&#x9;&#xA;&#x9;static assert upperLimit is real() :&#xA;&#x9;&#x9;error &quot;Upper limit value must be numeric&quot;;&#xA;&#x9;&#x9;&#xA;&#x9;static assert lowerLimit is real() :&#xA;&#x9;&#x9;error &quot;Lower limit value must be numeric&quot;;&#xA;&#x9;&#x9;&#xA;&#x9;static assert input is real() &amp;&amp; upperLimit is real() => unit(input) == unit(upperLimit) :&#xA;&#x9;&#x9;error &quot;Input value and upper limit value must have same unit&quot;;&#xA;&#x9;&#x9;&#xA;&#x9;static assert input is real() &amp;&amp; lowerLimit is real() => unit(input) == unit(lowerLimit) :&#xA;&#x9;&#x9;error &quot;Input value and lower limit value must have same unit&quot;;&#xA;&#xA;&#x9;static assert upperLimit is real() &amp;&amp; lowerLimit is real() &amp;&amp; unit(upperLimit) == unit(lowerLimit) => upperLimit >= lowerLimit :&#xA;&#x9;&#x9;warning &quot;Upper limit should be greater than or equal to lower limit&quot;;&#xA;&#xA;&#x9;output =&#xA;&#x9;&#x9;if input > upperLimit then&#xA;&#x9;&#x9;&#x9;upperLimit&#xA;&#x9;&#x9;else if input &lt; lowerLimit then&#xA;&#x9;&#x9;&#x9;lowerLimit&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;input;&#xA;}&#xA;"/>
</dml:BlockType>
