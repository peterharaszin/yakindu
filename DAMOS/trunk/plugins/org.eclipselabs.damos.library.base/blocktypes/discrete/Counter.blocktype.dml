<?xml version="1.0" encoding="UTF-8"?>
<dml:BlockType xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dml="http://www.eclipselabs.org/damos/DML/1.0.0" xmi:id="_NfmKwIkREd-UBLGPWvR3ew" qualifiedName="org.eclipselabs.damos.library.base.discrete.Counter" familyId="" timing="Asynchronous">
  <parameters xsi:type="dml:ExpressionParameter" xmi:id="_NfmKwYkREd-UBLGPWvR3ew" name="initialValue">
    <defaultExpression xmi:id="_Nfmx0IkREd-UBLGPWvR3ew" expression="0"/>
  </parameters>
  <parameters xsi:type="dml:ExpressionParameter" xmi:id="_Nfmx0YkREd-UBLGPWvR3ew" name="step">
    <defaultExpression xmi:id="_Nfmx0okREd-UBLGPWvR3ew" expression="1"/>
  </parameters>
  <parameters xsi:type="dml:ExpressionParameter" xmi:id="_Pg-gMM_VEeCh7L-0B9kyyg" name="upperLimit">
    <defaultExpression xmi:id="_VYZmkM_VEeCh7L-0B9kyyg" expression="10"/>
  </parameters>
  <parameters xsi:type="dml:ExpressionParameter" xmi:id="_YdLmMM_VEeCh7L-0B9kyyg" name="lowerLimit">
    <defaultExpression xmi:id="_cLC_EM_VEeCh7L-0B9kyyg" expression="0"/>
  </parameters>
  <parameters xsi:type="dml:ExpressionParameter" xmi:id="_TCX7oM_bEeCIcLMyV5eFDw" name="upTrigger">
    <defaultExpression xmi:id="_q6KQIM_bEeCIcLMyV5eFDw" expression="0"/>
    <predefinedExpressions xmi:id="_sOsaIM_bEeCIcLMyV5eFDw" alias="Rising">
      <expression xmi:id="_td5YMM_bEeCIcLMyV5eFDw" expression="0"/>
    </predefinedExpressions>
    <predefinedExpressions xmi:id="_w7bPAM_bEeCIcLMyV5eFDw" alias="Falling">
      <expression xmi:id="_w7bPAc_bEeCIcLMyV5eFDw" expression="1"/>
    </predefinedExpressions>
    <predefinedExpressions xmi:id="_x0Ul4M_bEeCIcLMyV5eFDw" alias="Both">
      <expression xmi:id="_x0Ul4c_bEeCIcLMyV5eFDw" expression="2"/>
    </predefinedExpressions>
  </parameters>
  <parameters xsi:type="dml:ExpressionParameter" xmi:id="__S5D0M_bEeCIcLMyV5eFDw" name="downTrigger">
    <defaultExpression xmi:id="__S5D0c_bEeCIcLMyV5eFDw" expression="0"/>
    <predefinedExpressions xmi:id="__S5D0s_bEeCIcLMyV5eFDw" alias="Rising">
      <expression xmi:id="__S5D08_bEeCIcLMyV5eFDw" expression="0"/>
    </predefinedExpressions>
    <predefinedExpressions xmi:id="__S5D1M_bEeCIcLMyV5eFDw" alias="Falling">
      <expression xmi:id="__S5D1c_bEeCIcLMyV5eFDw" expression="1"/>
    </predefinedExpressions>
    <predefinedExpressions xmi:id="__S5D1s_bEeCIcLMyV5eFDw" alias="Both">
      <expression xmi:id="__S5D18_bEeCIcLMyV5eFDw" expression="2"/>
    </predefinedExpressions>
  </parameters>
  <inputDefinitions xmi:id="_Nfmx04kREd-UBLGPWvR3ew" name="up" socket="true">
    <directFeedthroughPolicy xsi:type="dml:BooleanDirectFeedthroughPolicy" xmi:id="_Nfmx1IkREd-UBLGPWvR3ew" directFeedthrough="false"/>
  </inputDefinitions>
  <inputDefinitions xmi:id="_jC0IIM_VEeCh7L-0B9kyyg" name="down" socket="true">
    <directFeedthroughPolicy xsi:type="dml:BooleanDirectFeedthroughPolicy" xmi:id="_l9g-sM_VEeCh7L-0B9kyyg" directFeedthrough="false"/>
  </inputDefinitions>
  <outputDefinitions xmi:id="_Nfmx1YkREd-UBLGPWvR3ew" name="output"/>
  <behavior xsi:type="dml:OpaqueBehaviorSpecification" xmi:id="_5lQbgc_vEeC7L-AYklWMrw" behavior="stateful func Counter&lt;initialValue, step, upperLimit, lowerLimit, upTrigger, downTrigger>(triggerKind, up, down) -> output {&#xA;&#x9;check&lt;0, 1, 10, 0, 0, 0>(int, bool, bool) -> int;&#xA;&#x9;check&lt;0, 1, 10, 0, 1, 1>(int, bool, bool) -> int;&#xA;&#x9;check&lt;0, 1, 10, 0, 2, 2>(int, bool, bool) -> int;&#xA;&#x9;&#xA;&#x9;static assert initialValue is real() :&#xA;&#x9;&#x9;error &quot;Initial value must be numeric&quot;;&#xA;&#x9;&#x9;&#xA;&#x9;static assert step is real() :&#xA;&#x9;&#x9;error &quot;Step value must be numeric&quot;;&#xA;&#xA;&#x9;static assert upperLimit is real() :&#xA;&#x9;&#x9;error &quot;Upper limit value must be numeric&quot;;&#xA;&#x9;&#x9;&#xA;&#x9;static assert lowerLimit is real() :&#xA;&#x9;&#x9;error &quot;Lower limit value must be numeric&quot;;&#xA;&#xA;&#x9;static assert initialValue is real() &amp;&amp; step is real() => unit(initialValue) == unit(step) :&#xA;&#x9;&#x9;error &quot;Initial value and step value must have same unit&quot;;&#xA;&#x9;&#x9;&#xA;&#x9;static assert initialValue is real() &amp;&amp; upperLimit is real() => unit(initialValue) == unit(upperLimit) :&#xA;&#x9;&#x9;error &quot;Initial value and upper limit value must have same unit&quot;;&#xA;&#xA;&#x9;static assert initialValue is real() &amp;&amp; lowerLimit is real() => unit(initialValue) == unit(lowerLimit) :&#xA;&#x9;&#x9;error &quot;Initial value and lower limit value must have same unit&quot;;&#xA;&#xA;&#x9;static assert up is bool:&#xA;&#x9;&#x9;error &quot;Up input value must be boolean&quot;;&#xA;&#xA;&#x9;static assert down is bool:&#xA;&#x9;&#x9;error &quot;Down input value must be boolean&quot;;&#xA;&#xA;&#x9;static assert upTrigger is int:&#xA;&#x9;&#x9;error &quot;Up trigger value must be integer&quot;;&#xA;&#xA;&#x9;static assert downTrigger is int:&#xA;&#x9;&#x9;error &quot;Down trigger value must be integer&quot;;&#xA;&#xA;&#x9;static assert upperLimit is real() &amp;&amp; lowerLimit is real() &amp;&amp; unit(upperLimit) == unit(lowerLimit) => upperLimit >= lowerLimit :&#xA;&#x9;&#x9;warning &quot;Upper limit value should be greater than or equal to lower limit value&quot;;&#xA;&#xA;&#x9;output{-1} = initialValue;&#xA;&#x9;output{n} =&#xA;&#x9;&#x9;if triggerKind == 0 then&#xA;&#x9;&#x9;&#x9;if static if upTrigger == 0 then up else static if upTrigger == 1 then !up else true then&#xA;&#x9;&#x9;&#x9;&#x9;let result = output{n-1} + step in&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if result &lt; upperLimit then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;result&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;upperLimit&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;output{n-1}&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;if static if downTrigger == 0 then down else static if downTrigger == 1 then !down else true then&#xA;&#x9;&#x9;&#x9;&#x9;let result = output{n-1} - step in&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if result > lowerLimit then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;result&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;lowerLimit&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;output{n-1};&#xA;}&#xA;"/>
</dml:BlockType>
