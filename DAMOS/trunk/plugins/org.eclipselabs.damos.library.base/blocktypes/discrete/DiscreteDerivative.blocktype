synchronous blockType damos::library::base::_discrete::DiscreteDerivative

input u
output y

parameter initialCondition = 0
parameter gain = 1(s) // normalized

behavior {

	stateful func main<initialCondition, gain, fs>(u) -> y {
		check<0, 1(s), 1(1/s)>(real) -> real
		
		static assert u is real() :
			error "Input value must be numeric"
	
		static assert initialCondition is real() :
			error "Initial condition must be numeric"
			
		static assert initialCondition is real() && u is real() => unit(initialCondition) == unit(u) :
			error "Initial condition and input value must have same unit"
			
		static assert gain is real() :
			error "Gain value must be numeric"
	
		eq u{-1} = initialCondition
		eq y{n} = fs * gain * (u{n} - u{n-1})
	}
	
}
