synchronous blockType org::eclipselabs::damos::library::base::_discrete::DiscreteIntegrator

input u {
	directFeedthrough never
}
output y

parameter initialCondition = 0
parameter gain = 1(1/s) // normalized
parameter accumulate = false predefined {
	true as "yes",
	false as "no"
}

behavior {

	stateful func main<initialCondition, gain, Ts>(u) -> y {
		check<0(kg*s), 1, 1(s)>(real(kg)) -> real(kg*s)
		check<0(s), 1, 1(s)>(real) -> real(s)
		check<0, 1(1/s), 1(s)>(real) -> real
	
		static assert u is real() :
			error "Input value must be numeric"
	
		static assert initialCondition is real() :
			error "Initial value must be numeric"
			
		static assert initialCondition is real() && u is real() && gain is real() => unit(initialCondition) == unit(gain) * unit(u) * $(s) :
			error "Initial condition unit must be input value unit times gain unit times second"
			
		static assert gain is real() :
			error "Gain value must be numeric"
			
		var sum
	
		eq sum{0} = initialCondition
		eq sum{n+1} = sum{n} + gain * Ts * u{n}
		eq y{n} = sum{n}
	}
	
}
