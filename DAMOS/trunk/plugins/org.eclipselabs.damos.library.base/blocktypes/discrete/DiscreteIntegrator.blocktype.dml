<?xml version="1.0" encoding="UTF-8"?>
<dml:BlockType xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dml="http://www.eclipselabs.org/damos/DML/1.0.0" xmi:id="_SfVbMIkREd-UBLGPWvR3ew" qualifiedName="org.eclipselabs.damos.library.base.discrete.DiscreteIntegrator">
  <parameters xsi:type="dml:ExpressionParameter" xmi:id="_SfVbMYkREd-UBLGPWvR3ew" name="initialCondition">
    <defaultExpression xmi:id="_SfVbMokREd-UBLGPWvR3ew" expression="0"/>
  </parameters>
  <parameters xsi:type="dml:ExpressionParameter" xmi:id="_SfVbM4kREd-UBLGPWvR3ew" name="gain">
    <defaultExpression xmi:id="_SfVbNIkREd-UBLGPWvR3ew" expression="1(1/s) /* normalized */"/>
  </parameters>
  <parameters xsi:type="dml:ExpressionParameter" xmi:id="_SfVbNYkREd-UBLGPWvR3ew" name="accumulation">
    <defaultExpression xmi:id="_SfVbNokREd-UBLGPWvR3ew" expression="false"/>
    <predefinedExpressions xmi:id="_SfWCQIkREd-UBLGPWvR3ew" alias="yes">
      <expression xmi:id="_SfWCQYkREd-UBLGPWvR3ew" expression="true"/>
    </predefinedExpressions>
    <predefinedExpressions xmi:id="_SfWCQokREd-UBLGPWvR3ew" alias="no">
      <expression xmi:id="_SfWCQ4kREd-UBLGPWvR3ew" expression="false"/>
    </predefinedExpressions>
  </parameters>
  <inputDefinitions xmi:id="_SfWCRIkREd-UBLGPWvR3ew" name="input">
    <directFeedthroughPolicy xsi:type="dml:BooleanDirectFeedthroughPolicy" xmi:id="_SfWCRYkREd-UBLGPWvR3ew" directFeedthrough="false"/>
  </inputDefinitions>
  <outputDefinitions xmi:id="_SfWCRokREd-UBLGPWvR3ew" name="output"/>
  <behavior xsi:type="dml:OpaqueBehaviorSpecification" xmi:id="_v5eV8RgUEeClJ-iH_ulhsg" behavior="stateful func DiscreteIntegrator&lt;initialCondition, gain, Ts>(input) -> output {&#xA;&#x9;static assert input is real() :&#xA;&#x9;&#x9;error &quot;Input value must be numeric&quot;;&#xA;&#xA;&#x9;static assert initialCondition is real() :&#xA;&#x9;&#x9;error &quot;Initial value must be numeric&quot;;&#xA;&#x9;&#x9;&#xA;&#x9;static assert initialCondition is real() &amp;&amp; input is real() => unit(initialCondition) == unit(input) :&#xA;&#x9;&#x9;error &quot;Initial condition and input value must have same unit&quot;;&#xA;&#x9;&#x9;&#xA;&#x9;static assert gain is real() :&#xA;&#x9;&#x9;error &quot;Gain value must be numeric&quot;;&#xA;&#x9;&#x9;&#xA;&#x9;var sum;&#xA;&#xA;&#x9;sum(0) = initialCondition;&#xA;&#x9;sum(n+1) = sum(n) + input(n);&#xA;&#x9;output(n) = Ts * gain * sum(n);&#xA;}&#xA;"/>
</dml:BlockType>
