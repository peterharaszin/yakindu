<?xml version="1.0" encoding="UTF-8"?>
<dml:BlockType xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dml="http://www.eclipselabs.org/damos/DML/1.0.0" xmi:id="_cW9AkIkREd-UBLGPWvR3ew" qualifiedName="org.eclipselabs.damos.library.base.logic.Compare">
  <parameters xsi:type="dml:ExpressionParameter" xmi:id="_cW9noIkREd-UBLGPWvR3ew" name="operator">
    <defaultExpression xmi:id="_cW9noYkREd-UBLGPWvR3ew" expression="0"/>
    <predefinedExpressions xmi:id="_cW9nookREd-UBLGPWvR3ew" alias="==">
      <expression xmi:id="_cW9no4kREd-UBLGPWvR3ew" expression="0"/>
    </predefinedExpressions>
    <predefinedExpressions xmi:id="_cW9npIkREd-UBLGPWvR3ew" alias="!=">
      <expression xmi:id="_cW9npYkREd-UBLGPWvR3ew" expression="1"/>
    </predefinedExpressions>
    <predefinedExpressions xmi:id="_cW9npokREd-UBLGPWvR3ew" alias="&lt;">
      <expression xmi:id="_cW9np4kREd-UBLGPWvR3ew" expression="2"/>
    </predefinedExpressions>
    <predefinedExpressions xmi:id="_cW9nqIkREd-UBLGPWvR3ew" alias="&lt;=">
      <expression xmi:id="_cW9nqYkREd-UBLGPWvR3ew" expression="3"/>
    </predefinedExpressions>
    <predefinedExpressions xmi:id="_cW9nqokREd-UBLGPWvR3ew" alias=">=">
      <expression xmi:id="_cW9nq4kREd-UBLGPWvR3ew" expression="4"/>
    </predefinedExpressions>
    <predefinedExpressions xmi:id="_cW9nrIkREd-UBLGPWvR3ew" alias=">">
      <expression xmi:id="_cW9nrYkREd-UBLGPWvR3ew" expression="5"/>
    </predefinedExpressions>
  </parameters>
  <inputDefinitions xmi:id="_cW9nrokREd-UBLGPWvR3ew" name="inputA"/>
  <inputDefinitions xmi:id="_cW9nr4kREd-UBLGPWvR3ew" name="inputB"/>
  <outputDefinitions xmi:id="_cW9nsIkREd-UBLGPWvR3ew" name="output"/>
  <behavior xsi:type="dml:OpaqueBehaviorSpecification" xmi:id="_hvu7gBm-EeC_e-Pf9pf9-g" behavior="func Compare&lt;operator>(inputA, inputB) -> output {&#xA;&#x9;static assert inputA is real() :&#xA;&#x9;&#x9;error &quot;Input value A must be numeric&quot;;&#xA;&#x9;&#x9;&#xA;&#x9;static assert inputB is real() :&#xA;&#x9;&#x9;error &quot;Input value B must be numeric&quot;;&#xA;&#x9;&#x9;&#xA;&#x9;static assert inputA is real() &amp;&amp; inputB is real() => inputA.unit == inputB.unit :&#xA;&#x9;&#x9;error &quot;Input values must have same unit&quot;;&#xA;&#x9;&#x9;&#xA;&#x9;static assert operator is real &amp;&amp; operator >=0 &amp;&amp; operator &lt;= 5 :&#xA;&#x9;&#x9;error &quot;Invalid operator specified&quot;;&#xA;&#xA;&#x9;// TODO: Use static switch expression&#xA;&#x9;output =&#xA;&#x9;&#x9;if operator == 0 then&#xA;&#x9;&#x9;&#x9;inputA == inputB&#xA;&#x9;&#x9;else if operator == 1 then&#xA;&#x9;&#x9;&#x9;inputA != inputB&#xA;&#x9;&#x9;else if operator == 2 then&#xA;&#x9;&#x9;&#x9;inputA &lt; inputB&#xA;&#x9;&#x9;else if operator == 3 then&#xA;&#x9;&#x9;&#x9;inputA &lt;= inputB&#xA;&#x9;&#x9;else if operator == 4 then&#xA;&#x9;&#x9;&#x9;inputA >= inputB&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;inputA > inputB;&#xA;}&#xA;"/>
</dml:BlockType>
