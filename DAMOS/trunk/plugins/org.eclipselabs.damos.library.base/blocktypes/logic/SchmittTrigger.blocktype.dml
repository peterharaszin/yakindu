<?xml version="1.0" encoding="UTF-8"?>
<dml:BlockType xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dml="http://www.eclipselabs.org/damos/DML/1.0.0" xmi:id="_hV_tcIkREd-UBLGPWvR3ew" qualifiedName="org.eclipselabs.damos.library.base.logic.SchmittTrigger">
  <parameters xsi:type="dml:ExpressionParameter" xmi:id="_hV_tcYkREd-UBLGPWvR3ew" name="upperThreshold">
    <defaultExpression xmi:id="_hWAUgIkREd-UBLGPWvR3ew" expression="1"/>
  </parameters>
  <parameters xsi:type="dml:ExpressionParameter" xmi:id="_hWAUgYkREd-UBLGPWvR3ew" name="lowerThreshold">
    <defaultExpression xmi:id="_hWAUgokREd-UBLGPWvR3ew" expression="-1"/>
  </parameters>
  <parameters xsi:type="dml:ExpressionParameter" xmi:id="_hWAUg4kREd-UBLGPWvR3ew" name="initialOutput">
    <defaultExpression xmi:id="_hWAUhIkREd-UBLGPWvR3ew" expression="false"/>
    <predefinedExpressions xmi:id="_hWAUhYkREd-UBLGPWvR3ew">
      <expression xmi:id="_hWAUhokREd-UBLGPWvR3ew" expression="true"/>
    </predefinedExpressions>
    <predefinedExpressions xmi:id="_hWAUh4kREd-UBLGPWvR3ew">
      <expression xmi:id="_hWAUiIkREd-UBLGPWvR3ew" expression="false"/>
    </predefinedExpressions>
  </parameters>
  <inputDefinitions xmi:id="_hWAUiYkREd-UBLGPWvR3ew" name="input"/>
  <outputDefinitions xmi:id="_hWAUiokREd-UBLGPWvR3ew" name="output"/>
  <behavior xsi:type="dml:OpaqueBehaviorSpecification" xmi:id="_rNsAkRj2EeCcn7vKZMOi5w" behavior="stateful func SchmittTrigger&lt;upperThreshold, lowerThreshold, initialOutput>(input) -> output {&#xA;&#x9;static assert input is real() :&#xA;&#x9;&#x9;error &quot;Input value must be numeric&quot;;&#xA;&#x9;&#x9;&#xA;&#x9;static assert upperThreshold is real() :&#xA;&#x9;&#x9;error &quot;Upper limit value must be numeric&quot;;&#xA;&#x9;&#x9;&#xA;&#x9;static assert lowerThreshold is real() :&#xA;&#x9;&#x9;error &quot;Lower limit value must be numeric&quot;;&#xA;&#x9;&#x9;&#xA;&#x9;static assert input is real() &amp;&amp; upperThreshold is real() => input.unit == upperThreshold.unit :&#xA;&#x9;&#x9;error &quot;Input value and upper threshold value must have same unit&quot;;&#xA;&#x9;&#x9;&#xA;&#x9;static assert input is real() &amp;&amp; lowerThreshold is real() => input.unit == lowerThreshold.unit :&#xA;&#x9;&#x9;error &quot;Input value and lower threshold value must have same unit&quot;;&#xA;&#xA;&#x9;static assert upperThreshold is real() &amp;&amp; lowerThreshold is real() &amp;&amp; upperThreshold.unit == lowerThreshold.unit => upperThreshold >= lowerThreshold :&#xA;&#x9;&#x9;warning &quot;Upper limit should be greater than or equal to lower limit&quot;;&#xA;&#xA;&#x9;static assert initialOutput is bool:&#xA;&#x9;&#x9;error &quot;Initial output must be boolean&quot;;&#xA;&#x9;&#xA;&#x9;output(-1) = initialOutput;&#xA;&#x9;output(n) =&#xA;&#x9;&#x9;if input &lt; lowerThreshold then&#xA;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;else if input > upperThreshold then&#xA;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;output(n-1);&#xA;}&#xA;"/>
</dml:BlockType>
