/*
* generated by Xtext
*/
grammar InternalMscript;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package org.eclipselabs.damos.mscript.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.eclipselabs.damos.mscript.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.eclipselabs.damos.mscript.services.MscriptGrammarAccess;

}

@parser::members {
 
 	private MscriptGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(MscriptGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModule
entryRuleModule 
:
{ before(grammarAccess.getModuleRule()); }
	 ruleModule
{ after(grammarAccess.getModuleRule()); } 
	 EOF 
;

// Rule Module
ruleModule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModuleAccess().getGroup()); }
(rule__Module__Group__0)
{ after(grammarAccess.getModuleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImportDeclaration
entryRuleImportDeclaration 
:
{ before(grammarAccess.getImportDeclarationRule()); }
	 ruleImportDeclaration
{ after(grammarAccess.getImportDeclarationRule()); } 
	 EOF 
;

// Rule ImportDeclaration
ruleImportDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImportDeclarationAccess().getGroup()); }
(rule__ImportDeclaration__Group__0)
{ after(grammarAccess.getImportDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeclaration
entryRuleDeclaration 
:
{ before(grammarAccess.getDeclarationRule()); }
	 ruleDeclaration
{ after(grammarAccess.getDeclarationRule()); } 
	 EOF 
;

// Rule Declaration
ruleDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclarationAccess().getAlternatives()); }
(rule__Declaration__Alternatives)
{ after(grammarAccess.getDeclarationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeDeclaration
entryRuleTypeDeclaration 
:
{ before(grammarAccess.getTypeDeclarationRule()); }
	 ruleTypeDeclaration
{ after(grammarAccess.getTypeDeclarationRule()); } 
	 EOF 
;

// Rule TypeDeclaration
ruleTypeDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeDeclarationAccess().getAlternatives()); }
(rule__TypeDeclaration__Alternatives)
{ after(grammarAccess.getTypeDeclarationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStructDeclarationTypeSpecifier
entryRuleStructDeclarationTypeSpecifier 
:
{ before(grammarAccess.getStructDeclarationTypeSpecifierRule()); }
	 ruleStructDeclarationTypeSpecifier
{ after(grammarAccess.getStructDeclarationTypeSpecifierRule()); } 
	 EOF 
;

// Rule StructDeclarationTypeSpecifier
ruleStructDeclarationTypeSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStructDeclarationTypeSpecifierAccess().getTypeAssignment()); }
(rule__StructDeclarationTypeSpecifier__TypeAssignment)
{ after(grammarAccess.getStructDeclarationTypeSpecifierAccess().getTypeAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStructDeclarationType
entryRuleStructDeclarationType 
:
{ before(grammarAccess.getStructDeclarationTypeRule()); }
	 ruleStructDeclarationType
{ after(grammarAccess.getStructDeclarationTypeRule()); } 
	 EOF 
;

// Rule StructDeclarationType
ruleStructDeclarationType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStructDeclarationTypeAccess().getGroup()); }
(rule__StructDeclarationType__Group__0)
{ after(grammarAccess.getStructDeclarationTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumerationDeclaration
entryRuleEnumerationDeclaration 
:
{ before(grammarAccess.getEnumerationDeclarationRule()); }
	 ruleEnumerationDeclaration
{ after(grammarAccess.getEnumerationDeclarationRule()); } 
	 EOF 
;

// Rule EnumerationDeclaration
ruleEnumerationDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumerationDeclarationAccess().getGroup()); }
(rule__EnumerationDeclaration__Group__0)
{ after(grammarAccess.getEnumerationDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumerationLiteralDeclaration
entryRuleEnumerationLiteralDeclaration 
:
{ before(grammarAccess.getEnumerationLiteralDeclarationRule()); }
	 ruleEnumerationLiteralDeclaration
{ after(grammarAccess.getEnumerationLiteralDeclarationRule()); } 
	 EOF 
;

// Rule EnumerationLiteralDeclaration
ruleEnumerationLiteralDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumerationLiteralDeclarationAccess().getNameAssignment()); }
(rule__EnumerationLiteralDeclaration__NameAssignment)
{ after(grammarAccess.getEnumerationLiteralDeclarationAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionDeclaration
entryRuleFunctionDeclaration 
:
{ before(grammarAccess.getFunctionDeclarationRule()); }
	 ruleFunctionDeclaration
{ after(grammarAccess.getFunctionDeclarationRule()); } 
	 EOF 
;

// Rule FunctionDeclaration
ruleFunctionDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getGroup()); }
(rule__FunctionDeclaration__Group__0)
{ after(grammarAccess.getFunctionDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStaticParameterDeclaration
entryRuleStaticParameterDeclaration 
:
{ before(grammarAccess.getStaticParameterDeclarationRule()); }
	 ruleStaticParameterDeclaration
{ after(grammarAccess.getStaticParameterDeclarationRule()); } 
	 EOF 
;

// Rule StaticParameterDeclaration
ruleStaticParameterDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStaticParameterDeclarationAccess().getNameAssignment()); }
(rule__StaticParameterDeclaration__NameAssignment)
{ after(grammarAccess.getStaticParameterDeclarationAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInputParameterDeclaration
entryRuleInputParameterDeclaration 
:
{ before(grammarAccess.getInputParameterDeclarationRule()); }
	 ruleInputParameterDeclaration
{ after(grammarAccess.getInputParameterDeclarationRule()); } 
	 EOF 
;

// Rule InputParameterDeclaration
ruleInputParameterDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInputParameterDeclarationAccess().getNameAssignment()); }
(rule__InputParameterDeclaration__NameAssignment)
{ after(grammarAccess.getInputParameterDeclarationAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOutputParameterDeclaration
entryRuleOutputParameterDeclaration 
:
{ before(grammarAccess.getOutputParameterDeclarationRule()); }
	 ruleOutputParameterDeclaration
{ after(grammarAccess.getOutputParameterDeclarationRule()); } 
	 EOF 
;

// Rule OutputParameterDeclaration
ruleOutputParameterDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOutputParameterDeclarationAccess().getNameAssignment()); }
(rule__OutputParameterDeclaration__NameAssignment)
{ after(grammarAccess.getOutputParameterDeclarationAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCheck
entryRuleCheck 
:
{ before(grammarAccess.getCheckRule()); }
	 ruleCheck
{ after(grammarAccess.getCheckRule()); } 
	 EOF 
;

// Rule Check
ruleCheck
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCheckAccess().getGroup()); }
(rule__Check__Group__0)
{ after(grammarAccess.getCheckAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssertion
entryRuleAssertion 
:
{ before(grammarAccess.getAssertionRule()); }
	 ruleAssertion
{ after(grammarAccess.getAssertionRule()); } 
	 EOF 
;

// Rule Assertion
ruleAssertion
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssertionAccess().getGroup()); }
(rule__Assertion__Group__0)
{ after(grammarAccess.getAssertionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStateVariableDeclaration
entryRuleStateVariableDeclaration 
:
{ before(grammarAccess.getStateVariableDeclarationRule()); }
	 ruleStateVariableDeclaration
{ after(grammarAccess.getStateVariableDeclarationRule()); } 
	 EOF 
;

// Rule StateVariableDeclaration
ruleStateVariableDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStateVariableDeclarationAccess().getGroup()); }
(rule__StateVariableDeclaration__Group__0)
{ after(grammarAccess.getStateVariableDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstantDeclaration
entryRuleConstantDeclaration 
:
{ before(grammarAccess.getConstantDeclarationRule()); }
	 ruleConstantDeclaration
{ after(grammarAccess.getConstantDeclarationRule()); } 
	 EOF 
;

// Rule ConstantDeclaration
ruleConstantDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstantDeclarationAccess().getGroup()); }
(rule__ConstantDeclaration__Group__0)
{ after(grammarAccess.getConstantDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionAliasDeclaration
entryRuleFunctionAliasDeclaration 
:
{ before(grammarAccess.getFunctionAliasDeclarationRule()); }
	 ruleFunctionAliasDeclaration
{ after(grammarAccess.getFunctionAliasDeclarationRule()); } 
	 EOF 
;

// Rule FunctionAliasDeclaration
ruleFunctionAliasDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionAliasDeclarationAccess().getGroup()); }
(rule__FunctionAliasDeclaration__Group__0)
{ after(grammarAccess.getFunctionAliasDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEquation
entryRuleEquation 
:
{ before(grammarAccess.getEquationRule()); }
	 ruleEquation
{ after(grammarAccess.getEquationRule()); } 
	 EOF 
;

// Rule Equation
ruleEquation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEquationAccess().getGroup()); }
(rule__Equation__Group__0)
{ after(grammarAccess.getEquationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeSpecifier
entryRuleTypeSpecifier 
:
{ before(grammarAccess.getTypeSpecifierRule()); }
	 ruleTypeSpecifier
{ after(grammarAccess.getTypeSpecifierRule()); } 
	 EOF 
;

// Rule TypeSpecifier
ruleTypeSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeSpecifierAccess().getAlternatives()); }
(rule__TypeSpecifier__Alternatives)
{ after(grammarAccess.getTypeSpecifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAnonymousTypeSpecifier
entryRuleAnonymousTypeSpecifier 
:
{ before(grammarAccess.getAnonymousTypeSpecifierRule()); }
	 ruleAnonymousTypeSpecifier
{ after(grammarAccess.getAnonymousTypeSpecifierRule()); } 
	 EOF 
;

// Rule AnonymousTypeSpecifier
ruleAnonymousTypeSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAnonymousTypeSpecifierAccess().getTypeAssignment()); }
(rule__AnonymousTypeSpecifier__TypeAssignment)
{ after(grammarAccess.getAnonymousTypeSpecifierAccess().getTypeAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeclaredTypeSpecifier
entryRuleDeclaredTypeSpecifier 
:
{ before(grammarAccess.getDeclaredTypeSpecifierRule()); }
	 ruleDeclaredTypeSpecifier
{ after(grammarAccess.getDeclaredTypeSpecifierRule()); } 
	 EOF 
;

// Rule DeclaredTypeSpecifier
ruleDeclaredTypeSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclaredTypeSpecifierAccess().getTypeDeclarationAssignment()); }
(rule__DeclaredTypeSpecifier__TypeDeclarationAssignment)
{ after(grammarAccess.getDeclaredTypeSpecifierAccess().getTypeDeclarationAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimitiveType
entryRulePrimitiveType 
:
{ before(grammarAccess.getPrimitiveTypeRule()); }
	 rulePrimitiveType
{ after(grammarAccess.getPrimitiveTypeRule()); } 
	 EOF 
;

// Rule PrimitiveType
rulePrimitiveType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getAlternatives()); }
(rule__PrimitiveType__Alternatives)
{ after(grammarAccess.getPrimitiveTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumericType
entryRuleNumericType 
:
{ before(grammarAccess.getNumericTypeRule()); }
	 ruleNumericType
{ after(grammarAccess.getNumericTypeRule()); } 
	 EOF 
;

// Rule NumericType
ruleNumericType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumericTypeAccess().getAlternatives()); }
(rule__NumericType__Alternatives)
{ after(grammarAccess.getNumericTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRealType
entryRuleRealType 
:
{ before(grammarAccess.getRealTypeRule()); }
	 ruleRealType
{ after(grammarAccess.getRealTypeRule()); } 
	 EOF 
;

// Rule RealType
ruleRealType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRealTypeAccess().getGroup()); }
(rule__RealType__Group__0)
{ after(grammarAccess.getRealTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntegerType
entryRuleIntegerType 
:
{ before(grammarAccess.getIntegerTypeRule()); }
	 ruleIntegerType
{ after(grammarAccess.getIntegerTypeRule()); } 
	 EOF 
;

// Rule IntegerType
ruleIntegerType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntegerTypeAccess().getGroup()); }
(rule__IntegerType__Group__0)
{ after(grammarAccess.getIntegerTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComplexType
entryRuleComplexType 
:
{ before(grammarAccess.getComplexTypeRule()); }
	 ruleComplexType
{ after(grammarAccess.getComplexTypeRule()); } 
	 EOF 
;

// Rule ComplexType
ruleComplexType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getComplexTypeAccess().getGroup()); }
(rule__ComplexType__Group__0)
{ after(grammarAccess.getComplexTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGaussianType
entryRuleGaussianType 
:
{ before(grammarAccess.getGaussianTypeRule()); }
	 ruleGaussianType
{ after(grammarAccess.getGaussianTypeRule()); } 
	 EOF 
;

// Rule GaussianType
ruleGaussianType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGaussianTypeAccess().getGroup()); }
(rule__GaussianType__Group__0)
{ after(grammarAccess.getGaussianTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanType
entryRuleBooleanType 
:
{ before(grammarAccess.getBooleanTypeRule()); }
	 ruleBooleanType
{ after(grammarAccess.getBooleanTypeRule()); } 
	 EOF 
;

// Rule BooleanType
ruleBooleanType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanTypeAccess().getGroup()); }
(rule__BooleanType__Group__0)
{ after(grammarAccess.getBooleanTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringType
entryRuleStringType 
:
{ before(grammarAccess.getStringTypeRule()); }
	 ruleStringType
{ after(grammarAccess.getStringTypeRule()); } 
	 EOF 
;

// Rule StringType
ruleStringType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringTypeAccess().getGroup()); }
(rule__StringType__Group__0)
{ after(grammarAccess.getStringTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArrayType
entryRuleArrayType 
:
{ before(grammarAccess.getArrayTypeRule()); }
	 ruleArrayType
{ after(grammarAccess.getArrayTypeRule()); } 
	 EOF 
;

// Rule ArrayType
ruleArrayType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArrayTypeAccess().getGroup()); }
(rule__ArrayType__Group__0)
{ after(grammarAccess.getArrayTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArrayTypeSpecifier
entryRuleArrayTypeSpecifier 
:
{ before(grammarAccess.getArrayTypeSpecifierRule()); }
	 ruleArrayTypeSpecifier
{ after(grammarAccess.getArrayTypeSpecifierRule()); } 
	 EOF 
;

// Rule ArrayTypeSpecifier
ruleArrayTypeSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArrayTypeSpecifierAccess().getAlternatives()); }
(rule__ArrayTypeSpecifier__Alternatives)
{ after(grammarAccess.getArrayTypeSpecifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAnonymousArrayTypeSpecifier
entryRuleAnonymousArrayTypeSpecifier 
:
{ before(grammarAccess.getAnonymousArrayTypeSpecifierRule()); }
	 ruleAnonymousArrayTypeSpecifier
{ after(grammarAccess.getAnonymousArrayTypeSpecifierRule()); } 
	 EOF 
;

// Rule AnonymousArrayTypeSpecifier
ruleAnonymousArrayTypeSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAnonymousArrayTypeSpecifierAccess().getTypeAssignment()); }
(rule__AnonymousArrayTypeSpecifier__TypeAssignment)
{ after(grammarAccess.getAnonymousArrayTypeSpecifierAccess().getTypeAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArrayDimension
entryRuleArrayDimension 
:
{ before(grammarAccess.getArrayDimensionRule()); }
	 ruleArrayDimension
{ after(grammarAccess.getArrayDimensionRule()); } 
	 EOF 
;

// Rule ArrayDimension
ruleArrayDimension
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArrayDimensionAccess().getGroup()); }
(rule__ArrayDimension__Group__0)
{ after(grammarAccess.getArrayDimensionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStructType
entryRuleStructType 
:
{ before(grammarAccess.getStructTypeRule()); }
	 ruleStructType
{ after(grammarAccess.getStructTypeRule()); } 
	 EOF 
;

// Rule StructType
ruleStructType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStructTypeAccess().getGroup()); }
(rule__StructType__Group__0)
{ after(grammarAccess.getStructTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStructMember
entryRuleStructMember 
:
{ before(grammarAccess.getStructMemberRule()); }
	 ruleStructMember
{ after(grammarAccess.getStructMemberRule()); } 
	 EOF 
;

// Rule StructMember
ruleStructMember
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStructMemberAccess().getGroup()); }
(rule__StructMember__Group__0)
{ after(grammarAccess.getStructMemberAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
(rule__Expression__Alternatives)
{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLambdaExpression
entryRuleLambdaExpression 
:
{ before(grammarAccess.getLambdaExpressionRule()); }
	 ruleLambdaExpression
{ after(grammarAccess.getLambdaExpressionRule()); } 
	 EOF 
;

// Rule LambdaExpression
ruleLambdaExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLambdaExpressionAccess().getGroup()); }
(rule__LambdaExpression__Group__0)
{ after(grammarAccess.getLambdaExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLambdaExpressionParameter
entryRuleLambdaExpressionParameter 
:
{ before(grammarAccess.getLambdaExpressionParameterRule()); }
	 ruleLambdaExpressionParameter
{ after(grammarAccess.getLambdaExpressionParameterRule()); } 
	 EOF 
;

// Rule LambdaExpressionParameter
ruleLambdaExpressionParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLambdaExpressionParameterAccess().getNameAssignment()); }
(rule__LambdaExpressionParameter__NameAssignment)
{ after(grammarAccess.getLambdaExpressionParameterAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLetExpression
entryRuleLetExpression 
:
{ before(grammarAccess.getLetExpressionRule()); }
	 ruleLetExpression
{ after(grammarAccess.getLetExpressionRule()); } 
	 EOF 
;

// Rule LetExpression
ruleLetExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLetExpressionAccess().getGroup()); }
(rule__LetExpression__Group__0)
{ after(grammarAccess.getLetExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLetExpressionAssignment
entryRuleLetExpressionAssignment 
:
{ before(grammarAccess.getLetExpressionAssignmentRule()); }
	 ruleLetExpressionAssignment
{ after(grammarAccess.getLetExpressionAssignmentRule()); } 
	 EOF 
;

// Rule LetExpressionAssignment
ruleLetExpressionAssignment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLetExpressionAssignmentAccess().getGroup()); }
(rule__LetExpressionAssignment__Group__0)
{ after(grammarAccess.getLetExpressionAssignmentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLetExpressionVariableDeclaration
entryRuleLetExpressionVariableDeclaration 
:
{ before(grammarAccess.getLetExpressionVariableDeclarationRule()); }
	 ruleLetExpressionVariableDeclaration
{ after(grammarAccess.getLetExpressionVariableDeclarationRule()); } 
	 EOF 
;

// Rule LetExpressionVariableDeclaration
ruleLetExpressionVariableDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLetExpressionVariableDeclarationAccess().getNameAssignment()); }
(rule__LetExpressionVariableDeclaration__NameAssignment)
{ after(grammarAccess.getLetExpressionVariableDeclarationAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIfExpression
entryRuleIfExpression 
:
{ before(grammarAccess.getIfExpressionRule()); }
	 ruleIfExpression
{ after(grammarAccess.getIfExpressionRule()); } 
	 EOF 
;

// Rule IfExpression
ruleIfExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIfExpressionAccess().getGroup()); }
(rule__IfExpression__Group__0)
{ after(grammarAccess.getIfExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSwitchExpression
entryRuleSwitchExpression 
:
{ before(grammarAccess.getSwitchExpressionRule()); }
	 ruleSwitchExpression
{ after(grammarAccess.getSwitchExpressionRule()); } 
	 EOF 
;

// Rule SwitchExpression
ruleSwitchExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSwitchExpressionAccess().getGroup()); }
(rule__SwitchExpression__Group__0)
{ after(grammarAccess.getSwitchExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSwitchCase
entryRuleSwitchCase 
:
{ before(grammarAccess.getSwitchCaseRule()); }
	 ruleSwitchCase
{ after(grammarAccess.getSwitchCaseRule()); } 
	 EOF 
;

// Rule SwitchCase
ruleSwitchCase
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSwitchCaseAccess().getGroup()); }
(rule__SwitchCase__Group__0)
{ after(grammarAccess.getSwitchCaseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRangeExpression
entryRuleRangeExpression 
:
{ before(grammarAccess.getRangeExpressionRule()); }
	 ruleRangeExpression
{ after(grammarAccess.getRangeExpressionRule()); } 
	 EOF 
;

// Rule RangeExpression
ruleRangeExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRangeExpressionAccess().getGroup()); }
(rule__RangeExpression__Group__0)
{ after(grammarAccess.getRangeExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImpliesExpression
entryRuleImpliesExpression 
:
{ before(grammarAccess.getImpliesExpressionRule()); }
	 ruleImpliesExpression
{ after(grammarAccess.getImpliesExpressionRule()); } 
	 EOF 
;

// Rule ImpliesExpression
ruleImpliesExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImpliesExpressionAccess().getGroup()); }
(rule__ImpliesExpression__Group__0)
{ after(grammarAccess.getImpliesExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLogicalOrExpression
entryRuleLogicalOrExpression 
:
{ before(grammarAccess.getLogicalOrExpressionRule()); }
	 ruleLogicalOrExpression
{ after(grammarAccess.getLogicalOrExpressionRule()); } 
	 EOF 
;

// Rule LogicalOrExpression
ruleLogicalOrExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getGroup()); }
(rule__LogicalOrExpression__Group__0)
{ after(grammarAccess.getLogicalOrExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLogicalAndExpression
entryRuleLogicalAndExpression 
:
{ before(grammarAccess.getLogicalAndExpressionRule()); }
	 ruleLogicalAndExpression
{ after(grammarAccess.getLogicalAndExpressionRule()); } 
	 EOF 
;

// Rule LogicalAndExpression
ruleLogicalAndExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getGroup()); }
(rule__LogicalAndExpression__Group__0)
{ after(grammarAccess.getLogicalAndExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression 
:
{ before(grammarAccess.getEqualityExpressionRule()); }
	 ruleEqualityExpression
{ after(grammarAccess.getEqualityExpressionRule()); } 
	 EOF 
;

// Rule EqualityExpression
ruleEqualityExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEqualityExpressionAccess().getGroup()); }
(rule__EqualityExpression__Group__0)
{ after(grammarAccess.getEqualityExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression 
:
{ before(grammarAccess.getRelationalExpressionRule()); }
	 ruleRelationalExpression
{ after(grammarAccess.getRelationalExpressionRule()); } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup()); }
(rule__RelationalExpression__Group__0)
{ after(grammarAccess.getRelationalExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression 
:
{ before(grammarAccess.getAdditiveExpressionRule()); }
	 ruleAdditiveExpression
{ after(grammarAccess.getAdditiveExpressionRule()); } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
(rule__AdditiveExpression__Group__0)
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression 
:
{ before(grammarAccess.getMultiplicativeExpressionRule()); }
	 ruleMultiplicativeExpression
{ after(grammarAccess.getMultiplicativeExpressionRule()); } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
(rule__MultiplicativeExpression__Group__0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePowerExpression
entryRulePowerExpression 
:
{ before(grammarAccess.getPowerExpressionRule()); }
	 rulePowerExpression
{ after(grammarAccess.getPowerExpressionRule()); } 
	 EOF 
;

// Rule PowerExpression
rulePowerExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPowerExpressionAccess().getGroup()); }
(rule__PowerExpression__Group__0)
{ after(grammarAccess.getPowerExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrefixUnaryExpression
entryRulePrefixUnaryExpression 
:
{ before(grammarAccess.getPrefixUnaryExpressionRule()); }
	 rulePrefixUnaryExpression
{ after(grammarAccess.getPrefixUnaryExpressionRule()); } 
	 EOF 
;

// Rule PrefixUnaryExpression
rulePrefixUnaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrefixUnaryExpressionAccess().getAlternatives()); }
(rule__PrefixUnaryExpression__Alternatives)
{ after(grammarAccess.getPrefixUnaryExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePostfixUnaryExpression
entryRulePostfixUnaryExpression 
:
{ before(grammarAccess.getPostfixUnaryExpressionRule()); }
	 rulePostfixUnaryExpression
{ after(grammarAccess.getPostfixUnaryExpressionRule()); } 
	 EOF 
;

// Rule PostfixUnaryExpression
rulePostfixUnaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPostfixUnaryExpressionAccess().getGroup()); }
(rule__PostfixUnaryExpression__Group__0)
{ after(grammarAccess.getPostfixUnaryExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMemberFeatureCall
entryRuleMemberFeatureCall 
:
{ before(grammarAccess.getMemberFeatureCallRule()); }
	 ruleMemberFeatureCall
{ after(grammarAccess.getMemberFeatureCallRule()); } 
	 EOF 
;

// Rule MemberFeatureCall
ruleMemberFeatureCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getGroup()); }
(rule__MemberFeatureCall__Group__0)
{ after(grammarAccess.getMemberFeatureCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIterationAccumulator
entryRuleIterationAccumulator 
:
{ before(grammarAccess.getIterationAccumulatorRule()); }
	 ruleIterationAccumulator
{ after(grammarAccess.getIterationAccumulatorRule()); } 
	 EOF 
;

// Rule IterationAccumulator
ruleIterationAccumulator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIterationAccumulatorAccess().getGroup()); }
(rule__IterationAccumulator__Group__0)
{ after(grammarAccess.getIterationAccumulatorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIterationVariableDeclaration
entryRuleIterationVariableDeclaration 
:
{ before(grammarAccess.getIterationVariableDeclarationRule()); }
	 ruleIterationVariableDeclaration
{ after(grammarAccess.getIterationVariableDeclarationRule()); } 
	 EOF 
;

// Rule IterationVariableDeclaration
ruleIterationVariableDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIterationVariableDeclarationAccess().getNameAssignment()); }
(rule__IterationVariableDeclaration__NameAssignment)
{ after(grammarAccess.getIterationVariableDeclarationAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArraySubscript
entryRuleArraySubscript 
:
{ before(grammarAccess.getArraySubscriptRule()); }
	 ruleArraySubscript
{ after(grammarAccess.getArraySubscriptRule()); } 
	 EOF 
;

// Rule ArraySubscript
ruleArraySubscript
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArraySubscriptAccess().getAlternatives()); }
(rule__ArraySubscript__Alternatives)
{ after(grammarAccess.getArraySubscriptAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression 
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
(rule__PrimaryExpression__Alternatives)
{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteral
entryRuleLiteral 
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
(rule__Literal__Alternatives)
{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumericLiteral
entryRuleNumericLiteral 
:
{ before(grammarAccess.getNumericLiteralRule()); }
	 ruleNumericLiteral
{ after(grammarAccess.getNumericLiteralRule()); } 
	 EOF 
;

// Rule NumericLiteral
ruleNumericLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumericLiteralAccess().getAlternatives()); }
(rule__NumericLiteral__Alternatives)
{ after(grammarAccess.getNumericLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRealLiteral
entryRuleRealLiteral 
:
{ before(grammarAccess.getRealLiteralRule()); }
	 ruleRealLiteral
{ after(grammarAccess.getRealLiteralRule()); } 
	 EOF 
;

// Rule RealLiteral
ruleRealLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRealLiteralAccess().getGroup()); }
(rule__RealLiteral__Group__0)
{ after(grammarAccess.getRealLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRealData
entryRuleRealData 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getRealDataRule()); }
	 ruleRealData
{ after(grammarAccess.getRealDataRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule RealData
ruleRealData
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRealDataAccess().getGroup()); }
(rule__RealData__Group__0)
{ after(grammarAccess.getRealDataAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleIntegerLiteral
entryRuleIntegerLiteral 
:
{ before(grammarAccess.getIntegerLiteralRule()); }
	 ruleIntegerLiteral
{ after(grammarAccess.getIntegerLiteralRule()); } 
	 EOF 
;

// Rule IntegerLiteral
ruleIntegerLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntegerLiteralAccess().getGroup()); }
(rule__IntegerLiteral__Group__0)
{ after(grammarAccess.getIntegerLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntegerData
entryRuleIntegerData 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getIntegerDataRule()); }
	 ruleIntegerData
{ after(grammarAccess.getIntegerDataRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule IntegerData
ruleIntegerData
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntegerDataAccess().getGroup()); }
(rule__IntegerData__Group__0)
{ after(grammarAccess.getIntegerDataAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral 
:
{ before(grammarAccess.getBooleanLiteralRule()); }
	 ruleBooleanLiteral
{ after(grammarAccess.getBooleanLiteralRule()); } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanLiteralAccess().getGroup()); }
(rule__BooleanLiteral__Group__0)
{ after(grammarAccess.getBooleanLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringLiteral
entryRuleStringLiteral 
:
{ before(grammarAccess.getStringLiteralRule()); }
	 ruleStringLiteral
{ after(grammarAccess.getStringLiteralRule()); } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringLiteralAccess().getTextAssignment()); }
(rule__StringLiteral__TextAssignment)
{ after(grammarAccess.getStringLiteralAccess().getTextAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTemplateExpression
entryRuleTemplateExpression 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getTemplateExpressionRule()); }
	 ruleTemplateExpression
{ after(grammarAccess.getTemplateExpressionRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule TemplateExpression
ruleTemplateExpression
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTemplateExpressionAccess().getGroup()); }
(rule__TemplateExpression__Group__0)
{ after(grammarAccess.getTemplateExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleConstantTemplateSegment
entryRuleConstantTemplateSegment 
:
{ before(grammarAccess.getConstantTemplateSegmentRule()); }
	 ruleConstantTemplateSegment
{ after(grammarAccess.getConstantTemplateSegmentRule()); } 
	 EOF 
;

// Rule ConstantTemplateSegment
ruleConstantTemplateSegment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstantTemplateSegmentAccess().getTextAssignment()); }
(rule__ConstantTemplateSegment__TextAssignment)
{ after(grammarAccess.getConstantTemplateSegmentAccess().getTextAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstantString
entryRuleConstantString 
:
{ before(grammarAccess.getConstantStringRule()); }
	 ruleConstantString
{ after(grammarAccess.getConstantStringRule()); } 
	 EOF 
;

// Rule ConstantString
ruleConstantString
    @init {
		int stackSize = keepStackSize();
    }
	:
(
(
{ before(grammarAccess.getConstantStringAccess().getAlternatives()); }
(rule__ConstantString__Alternatives)
{ after(grammarAccess.getConstantStringAccess().getAlternatives()); }
)
(
{ before(grammarAccess.getConstantStringAccess().getAlternatives()); }
(rule__ConstantString__Alternatives)*
{ after(grammarAccess.getConstantStringAccess().getAlternatives()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpressionTemplateSegment
entryRuleExpressionTemplateSegment 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT");
}
:
{ before(grammarAccess.getExpressionTemplateSegmentRule()); }
	 ruleExpressionTemplateSegment
{ after(grammarAccess.getExpressionTemplateSegmentRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ExpressionTemplateSegment
ruleExpressionTemplateSegment
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT");
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionTemplateSegmentAccess().getGroup()); }
(rule__ExpressionTemplateSegment__Group__0)
{ after(grammarAccess.getExpressionTemplateSegmentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleFeatureCall
entryRuleFeatureCall 
:
{ before(grammarAccess.getFeatureCallRule()); }
	 ruleFeatureCall
{ after(grammarAccess.getFeatureCallRule()); } 
	 EOF 
;

// Rule FeatureCall
ruleFeatureCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFeatureCallAccess().getAlternatives()); }
(rule__FeatureCall__Alternatives)
{ after(grammarAccess.getFeatureCallAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableReference
entryRuleVariableReference 
:
{ before(grammarAccess.getVariableReferenceRule()); }
	 ruleVariableReference
{ after(grammarAccess.getVariableReferenceRule()); } 
	 EOF 
;

// Rule VariableReference
ruleVariableReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableReferenceAccess().getGroup()); }
(rule__VariableReference__Group__0)
{ after(grammarAccess.getVariableReferenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionCall
entryRuleFunctionCall 
:
{ before(grammarAccess.getFunctionCallRule()); }
	 ruleFunctionCall
{ after(grammarAccess.getFunctionCallRule()); } 
	 EOF 
;

// Rule FunctionCall
ruleFunctionCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionCallAccess().getGroup()); }
(rule__FunctionCall__Group__0)
{ after(grammarAccess.getFunctionCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedFeatureCall
entryRuleQualifiedFeatureCall 
:
{ before(grammarAccess.getQualifiedFeatureCallRule()); }
	 ruleQualifiedFeatureCall
{ after(grammarAccess.getQualifiedFeatureCallRule()); } 
	 EOF 
;

// Rule QualifiedFeatureCall
ruleQualifiedFeatureCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedFeatureCallAccess().getAlternatives()); }
(rule__QualifiedFeatureCall__Alternatives)
{ after(grammarAccess.getQualifiedFeatureCallAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedVariableReference
entryRuleQualifiedVariableReference 
:
{ before(grammarAccess.getQualifiedVariableReferenceRule()); }
	 ruleQualifiedVariableReference
{ after(grammarAccess.getQualifiedVariableReferenceRule()); } 
	 EOF 
;

// Rule QualifiedVariableReference
ruleQualifiedVariableReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedVariableReferenceAccess().getGroup()); }
(rule__QualifiedVariableReference__Group__0)
{ after(grammarAccess.getQualifiedVariableReferenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedFunctionCall
entryRuleQualifiedFunctionCall 
:
{ before(grammarAccess.getQualifiedFunctionCallRule()); }
	 ruleQualifiedFunctionCall
{ after(grammarAccess.getQualifiedFunctionCallRule()); } 
	 EOF 
;

// Rule QualifiedFunctionCall
ruleQualifiedFunctionCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedFunctionCallAccess().getGroup()); }
(rule__QualifiedFunctionCall__Group__0)
{ after(grammarAccess.getQualifiedFunctionCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStepExpression
entryRuleStepExpression 
:
{ before(grammarAccess.getStepExpressionRule()); }
	 ruleStepExpression
{ after(grammarAccess.getStepExpressionRule()); } 
	 EOF 
;

// Rule StepExpression
ruleStepExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStepExpressionAccess().getRangeStepExpressionParserRuleCall()); }
	ruleRangeStepExpression
{ after(grammarAccess.getStepExpressionAccess().getRangeStepExpressionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRangeStepExpression
entryRuleRangeStepExpression 
:
{ before(grammarAccess.getRangeStepExpressionRule()); }
	 ruleRangeStepExpression
{ after(grammarAccess.getRangeStepExpressionRule()); } 
	 EOF 
;

// Rule RangeStepExpression
ruleRangeStepExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRangeStepExpressionAccess().getGroup()); }
(rule__RangeStepExpression__Group__0)
{ after(grammarAccess.getRangeStepExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAdditiveStepExpression
entryRuleAdditiveStepExpression 
:
{ before(grammarAccess.getAdditiveStepExpressionRule()); }
	 ruleAdditiveStepExpression
{ after(grammarAccess.getAdditiveStepExpressionRule()); } 
	 EOF 
;

// Rule AdditiveStepExpression
ruleAdditiveStepExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditiveStepExpressionAccess().getGroup()); }
(rule__AdditiveStepExpression__Group__0)
{ after(grammarAccess.getAdditiveStepExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNegateStepExpression
entryRuleNegateStepExpression 
:
{ before(grammarAccess.getNegateStepExpressionRule()); }
	 ruleNegateStepExpression
{ after(grammarAccess.getNegateStepExpressionRule()); } 
	 EOF 
;

// Rule NegateStepExpression
ruleNegateStepExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNegateStepExpressionAccess().getAlternatives()); }
(rule__NegateStepExpression__Alternatives)
{ after(grammarAccess.getNegateStepExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimitiveStepExpression
entryRulePrimitiveStepExpression 
:
{ before(grammarAccess.getPrimitiveStepExpressionRule()); }
	 rulePrimitiveStepExpression
{ after(grammarAccess.getPrimitiveStepExpressionRule()); } 
	 EOF 
;

// Rule PrimitiveStepExpression
rulePrimitiveStepExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimitiveStepExpressionAccess().getAlternatives()); }
(rule__PrimitiveStepExpression__Alternatives)
{ after(grammarAccess.getPrimitiveStepExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStepLiteral
entryRuleStepLiteral 
:
{ before(grammarAccess.getStepLiteralRule()); }
	 ruleStepLiteral
{ after(grammarAccess.getStepLiteralRule()); } 
	 EOF 
;

// Rule StepLiteral
ruleStepLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStepLiteralAccess().getValueAssignment()); }
(rule__StepLiteral__ValueAssignment)
{ after(grammarAccess.getStepLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStepN
entryRuleStepN 
:
{ before(grammarAccess.getStepNRule()); }
	 ruleStepN
{ after(grammarAccess.getStepNRule()); } 
	 EOF 
;

// Rule StepN
ruleStepN
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStepNAccess().getGroup()); }
(rule__StepN__Group__0)
{ after(grammarAccess.getStepNAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArrayConstructionOperator
entryRuleArrayConstructionOperator 
:
{ before(grammarAccess.getArrayConstructionOperatorRule()); }
	 ruleArrayConstructionOperator
{ after(grammarAccess.getArrayConstructionOperatorRule()); } 
	 EOF 
;

// Rule ArrayConstructionOperator
ruleArrayConstructionOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArrayConstructionOperatorAccess().getGroup()); }
(rule__ArrayConstructionOperator__Group__0)
{ after(grammarAccess.getArrayConstructionOperatorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArrayConstructionIterationClause
entryRuleArrayConstructionIterationClause 
:
{ before(grammarAccess.getArrayConstructionIterationClauseRule()); }
	 ruleArrayConstructionIterationClause
{ after(grammarAccess.getArrayConstructionIterationClauseRule()); } 
	 EOF 
;

// Rule ArrayConstructionIterationClause
ruleArrayConstructionIterationClause
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArrayConstructionIterationClauseAccess().getGroup()); }
(rule__ArrayConstructionIterationClause__Group__0)
{ after(grammarAccess.getArrayConstructionIterationClauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArrayConcatenationOperator
entryRuleArrayConcatenationOperator 
:
{ before(grammarAccess.getArrayConcatenationOperatorRule()); }
	 ruleArrayConcatenationOperator
{ after(grammarAccess.getArrayConcatenationOperatorRule()); } 
	 EOF 
;

// Rule ArrayConcatenationOperator
ruleArrayConcatenationOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArrayConcatenationOperatorAccess().getGroup()); }
(rule__ArrayConcatenationOperator__Group__0)
{ after(grammarAccess.getArrayConcatenationOperatorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpressionList
entryRuleExpressionList 
:
{ before(grammarAccess.getExpressionListRule()); }
	 ruleExpressionList
{ after(grammarAccess.getExpressionListRule()); } 
	 EOF 
;

// Rule ExpressionList
ruleExpressionList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionListAccess().getGroup()); }
(rule__ExpressionList__Group__0)
{ after(grammarAccess.getExpressionListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStructConstructionOperator
entryRuleStructConstructionOperator 
:
{ before(grammarAccess.getStructConstructionOperatorRule()); }
	 ruleStructConstructionOperator
{ after(grammarAccess.getStructConstructionOperatorRule()); } 
	 EOF 
;

// Rule StructConstructionOperator
ruleStructConstructionOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStructConstructionOperatorAccess().getGroup()); }
(rule__StructConstructionOperator__Group__0)
{ after(grammarAccess.getStructConstructionOperatorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStructConstructionMember
entryRuleStructConstructionMember 
:
{ before(grammarAccess.getStructConstructionMemberRule()); }
	 ruleStructConstructionMember
{ after(grammarAccess.getStructConstructionMemberRule()); } 
	 EOF 
;

// Rule StructConstructionMember
ruleStructConstructionMember
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStructConstructionMemberAccess().getGroup()); }
(rule__StructConstructionMember__Group__0)
{ after(grammarAccess.getStructConstructionMemberAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnitConstructionOperator
entryRuleUnitConstructionOperator 
:
{ before(grammarAccess.getUnitConstructionOperatorRule()); }
	 ruleUnitConstructionOperator
{ after(grammarAccess.getUnitConstructionOperatorRule()); } 
	 EOF 
;

// Rule UnitConstructionOperator
ruleUnitConstructionOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnitConstructionOperatorAccess().getGroup()); }
(rule__UnitConstructionOperator__Group__0)
{ after(grammarAccess.getUnitConstructionOperatorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParenthesizedExpression
entryRuleParenthesizedExpression 
:
{ before(grammarAccess.getParenthesizedExpressionRule()); }
	 ruleParenthesizedExpression
{ after(grammarAccess.getParenthesizedExpressionRule()); } 
	 EOF 
;

// Rule ParenthesizedExpression
ruleParenthesizedExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParenthesizedExpressionAccess().getGroup()); }
(rule__ParenthesizedExpression__Group__0)
{ after(grammarAccess.getParenthesizedExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEndExpression
entryRuleEndExpression 
:
{ before(grammarAccess.getEndExpressionRule()); }
	 ruleEndExpression
{ after(grammarAccess.getEndExpressionRule()); } 
	 EOF 
;

// Rule EndExpression
ruleEndExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEndExpressionAccess().getGroup()); }
(rule__EndExpression__Group__0)
{ after(grammarAccess.getEndExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAlgorithmExpression
entryRuleAlgorithmExpression 
:
{ before(grammarAccess.getAlgorithmExpressionRule()); }
	 ruleAlgorithmExpression
{ after(grammarAccess.getAlgorithmExpressionRule()); } 
	 EOF 
;

// Rule AlgorithmExpression
ruleAlgorithmExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAlgorithmExpressionAccess().getGroup()); }
(rule__AlgorithmExpression__Group__0)
{ after(grammarAccess.getAlgorithmExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCompoundStatement
entryRuleCompoundStatement 
:
{ before(grammarAccess.getCompoundStatementRule()); }
	 ruleCompoundStatement
{ after(grammarAccess.getCompoundStatementRule()); } 
	 EOF 
;

// Rule CompoundStatement
ruleCompoundStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCompoundStatementAccess().getGroup()); }
(rule__CompoundStatement__Group__0)
{ after(grammarAccess.getCompoundStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStatement
entryRuleStatement 
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatementAccess().getAlternatives()); }
(rule__Statement__Alternatives)
{ after(grammarAccess.getStatementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssignment
entryRuleAssignment 
:
{ before(grammarAccess.getAssignmentRule()); }
	 ruleAssignment
{ after(grammarAccess.getAssignmentRule()); } 
	 EOF 
;

// Rule Assignment
ruleAssignment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignmentAccess().getGroup()); }
(rule__Assignment__Group__0)
{ after(grammarAccess.getAssignmentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssignableMemberFeatureCall
entryRuleAssignableMemberFeatureCall 
:
{ before(grammarAccess.getAssignableMemberFeatureCallRule()); }
	 ruleAssignableMemberFeatureCall
{ after(grammarAccess.getAssignableMemberFeatureCallRule()); } 
	 EOF 
;

// Rule AssignableMemberFeatureCall
ruleAssignableMemberFeatureCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignableMemberFeatureCallAccess().getGroup()); }
(rule__AssignableMemberFeatureCall__Group__0)
{ after(grammarAccess.getAssignableMemberFeatureCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssignablePrimaryExpression
entryRuleAssignablePrimaryExpression 
:
{ before(grammarAccess.getAssignablePrimaryExpressionRule()); }
	 ruleAssignablePrimaryExpression
{ after(grammarAccess.getAssignablePrimaryExpressionRule()); } 
	 EOF 
;

// Rule AssignablePrimaryExpression
ruleAssignablePrimaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignablePrimaryExpressionAccess().getAlternatives()); }
(rule__AssignablePrimaryExpression__Alternatives)
{ after(grammarAccess.getAssignablePrimaryExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLocalVariableDeclaration
entryRuleLocalVariableDeclaration 
:
{ before(grammarAccess.getLocalVariableDeclarationRule()); }
	 ruleLocalVariableDeclaration
{ after(grammarAccess.getLocalVariableDeclarationRule()); } 
	 EOF 
;

// Rule LocalVariableDeclaration
ruleLocalVariableDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLocalVariableDeclarationAccess().getGroup()); }
(rule__LocalVariableDeclaration__Group__0)
{ after(grammarAccess.getLocalVariableDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIfStatement
entryRuleIfStatement 
:
{ before(grammarAccess.getIfStatementRule()); }
	 ruleIfStatement
{ after(grammarAccess.getIfStatementRule()); } 
	 EOF 
;

// Rule IfStatement
ruleIfStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIfStatementAccess().getGroup()); }
(rule__IfStatement__Group__0)
{ after(grammarAccess.getIfStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWhileStatement
entryRuleWhileStatement 
:
{ before(grammarAccess.getWhileStatementRule()); }
	 ruleWhileStatement
{ after(grammarAccess.getWhileStatementRule()); } 
	 EOF 
;

// Rule WhileStatement
ruleWhileStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWhileStatementAccess().getGroup()); }
(rule__WhileStatement__Group__0)
{ after(grammarAccess.getWhileStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleForStatement
entryRuleForStatement 
:
{ before(grammarAccess.getForStatementRule()); }
	 ruleForStatement
{ after(grammarAccess.getForStatementRule()); } 
	 EOF 
;

// Rule ForStatement
ruleForStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getForStatementAccess().getGroup()); }
(rule__ForStatement__Group__0)
{ after(grammarAccess.getForStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDoWhileStatement
entryRuleDoWhileStatement 
:
{ before(grammarAccess.getDoWhileStatementRule()); }
	 ruleDoWhileStatement
{ after(grammarAccess.getDoWhileStatementRule()); } 
	 EOF 
;

// Rule DoWhileStatement
ruleDoWhileStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDoWhileStatementAccess().getGroup()); }
(rule__DoWhileStatement__Group__0)
{ after(grammarAccess.getDoWhileStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleContinueStatement
entryRuleContinueStatement 
:
{ before(grammarAccess.getContinueStatementRule()); }
	 ruleContinueStatement
{ after(grammarAccess.getContinueStatementRule()); } 
	 EOF 
;

// Rule ContinueStatement
ruleContinueStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getContinueStatementAccess().getGroup()); }
(rule__ContinueStatement__Group__0)
{ after(grammarAccess.getContinueStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBreakStatement
entryRuleBreakStatement 
:
{ before(grammarAccess.getBreakStatementRule()); }
	 ruleBreakStatement
{ after(grammarAccess.getBreakStatementRule()); } 
	 EOF 
;

// Rule BreakStatement
ruleBreakStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBreakStatementAccess().getGroup()); }
(rule__BreakStatement__Group__0)
{ after(grammarAccess.getBreakStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReturnStatement
entryRuleReturnStatement 
:
{ before(grammarAccess.getReturnStatementRule()); }
	 ruleReturnStatement
{ after(grammarAccess.getReturnStatementRule()); } 
	 EOF 
;

// Rule ReturnStatement
ruleReturnStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReturnStatementAccess().getGroup()); }
(rule__ReturnStatement__Group__0)
{ after(grammarAccess.getReturnStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnit
entryRuleUnit 
:
{ before(grammarAccess.getUnitRule()); }
	 ruleUnit
{ after(grammarAccess.getUnitRule()); } 
	 EOF 
;

// Rule Unit
ruleUnit
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnitAccess().getGroup()); }
(rule__Unit__Group__0)
{ after(grammarAccess.getUnitAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExplicitUnit
entryRuleExplicitUnit 
:
{ before(grammarAccess.getExplicitUnitRule()); }
	 ruleExplicitUnit
{ after(grammarAccess.getExplicitUnitRule()); } 
	 EOF 
;

// Rule ExplicitUnit
ruleExplicitUnit
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExplicitUnitAccess().getGroup()); }
(rule__ExplicitUnit__Group__0)
{ after(grammarAccess.getExplicitUnitAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnitNumerator
entryRuleUnitNumerator 
:
{ before(grammarAccess.getUnitNumeratorRule()); }
	 ruleUnitNumerator
{ after(grammarAccess.getUnitNumeratorRule()); } 
	 EOF 
;

// Rule UnitNumerator
ruleUnitNumerator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnitNumeratorAccess().getAlternatives()); }
(rule__UnitNumerator__Alternatives)
{ after(grammarAccess.getUnitNumeratorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImplicitUnitNumerator
entryRuleImplicitUnitNumerator 
:
{ before(grammarAccess.getImplicitUnitNumeratorRule()); }
	 ruleImplicitUnitNumerator
{ after(grammarAccess.getImplicitUnitNumeratorRule()); } 
	 EOF 
;

// Rule ImplicitUnitNumerator
ruleImplicitUnitNumerator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImplicitUnitNumeratorAccess().getUnitNumeratorAction()); }
(

)
{ after(grammarAccess.getImplicitUnitNumeratorAccess().getUnitNumeratorAction()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnitDenominator
entryRuleUnitDenominator 
:
{ before(grammarAccess.getUnitDenominatorRule()); }
	 ruleUnitDenominator
{ after(grammarAccess.getUnitDenominatorRule()); } 
	 EOF 
;

// Rule UnitDenominator
ruleUnitDenominator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnitDenominatorAccess().getAlternatives()); }
(rule__UnitDenominator__Alternatives)
{ after(grammarAccess.getUnitDenominatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnitFactor
entryRuleUnitFactor 
:
{ before(grammarAccess.getUnitFactorRule()); }
	 ruleUnitFactor
{ after(grammarAccess.getUnitFactorRule()); } 
	 EOF 
;

// Rule UnitFactor
ruleUnitFactor
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnitFactorAccess().getGroup()); }
(rule__UnitFactor__Group__0)
{ after(grammarAccess.getUnitFactorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnitExponent
entryRuleUnitExponent 
:
{ before(grammarAccess.getUnitExponentRule()); }
	 ruleUnitExponent
{ after(grammarAccess.getUnitExponentRule()); } 
	 EOF 
;

// Rule UnitExponent
ruleUnitExponent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnitExponentAccess().getGroup()); }
(rule__UnitExponent__Group__0)
{ after(grammarAccess.getUnitExponentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedName
entryRuleQualifiedName 
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
(rule__QualifiedName__Group__0)
{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard 
:
{ before(grammarAccess.getQualifiedNameWithWildcardRule()); }
	 ruleQualifiedNameWithWildcard
{ after(grammarAccess.getQualifiedNameWithWildcardRule()); } 
	 EOF 
;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup()); }
(rule__QualifiedNameWithWildcard__Group__0)
{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValidInt
entryRuleValidInt 
:
{ before(grammarAccess.getValidIntRule()); }
	 ruleValidInt
{ after(grammarAccess.getValidIntRule()); } 
	 EOF 
;

// Rule ValidInt
ruleValidInt
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValidIntAccess().getAlternatives()); }
(rule__ValidInt__Alternatives)
{ after(grammarAccess.getValidIntAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValidID
entryRuleValidID 
:
{ before(grammarAccess.getValidIDRule()); }
	 ruleValidID
{ after(grammarAccess.getValidIDRule()); } 
	 EOF 
;

// Rule ValidID
ruleValidID
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValidIDAccess().getAlternatives()); }
(rule__ValidID__Alternatives)
{ after(grammarAccess.getValidIDAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule FunctionKind
ruleFunctionKind
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionKindAccess().getAlternatives()); }
(rule__FunctionKind__Alternatives)
{ after(grammarAccess.getFunctionKindAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule AssertionStatusKind
ruleAssertionStatusKind
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssertionStatusKindAccess().getAlternatives()); }
(rule__AssertionStatusKind__Alternatives)
{ after(grammarAccess.getAssertionStatusKindAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule ImpliesOperator
ruleImpliesOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImpliesOperatorAccess().getImpliesEnumLiteralDeclaration()); }
(	'=>' 
)
{ after(grammarAccess.getImpliesOperatorAccess().getImpliesEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule LogicalOrOperator
ruleLogicalOrOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrOperatorAccess().getLogicalOrEnumLiteralDeclaration()); }
(	'||' 
)
{ after(grammarAccess.getLogicalOrOperatorAccess().getLogicalOrEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule LogicalAndOperator
ruleLogicalAndOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndOperatorAccess().getLogicalAndEnumLiteralDeclaration()); }
(	'&&' 
)
{ after(grammarAccess.getLogicalAndOperatorAccess().getLogicalAndEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule EqualityOperator
ruleEqualityOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityOperatorAccess().getAlternatives()); }
(rule__EqualityOperator__Alternatives)
{ after(grammarAccess.getEqualityOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule RelationalOperator
ruleRelationalOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalOperatorAccess().getAlternatives()); }
(rule__RelationalOperator__Alternatives)
{ after(grammarAccess.getRelationalOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule AdditiveOperator
ruleAdditiveOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveOperatorAccess().getAlternatives()); }
(rule__AdditiveOperator__Alternatives)
{ after(grammarAccess.getAdditiveOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule MultiplicativeOperator
ruleMultiplicativeOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeOperatorAccess().getAlternatives()); }
(rule__MultiplicativeOperator__Alternatives)
{ after(grammarAccess.getMultiplicativeOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule PowerOperator
rulePowerOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerOperatorAccess().getAlternatives()); }
(rule__PowerOperator__Alternatives)
{ after(grammarAccess.getPowerOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule PrefixUnaryOperator
rulePrefixUnaryOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrefixUnaryOperatorAccess().getAlternatives()); }
(rule__PrefixUnaryOperator__Alternatives)
{ after(grammarAccess.getPrefixUnaryOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule PostfixUnaryOperator
rulePostfixUnaryOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixUnaryOperatorAccess().getDerivativeEnumLiteralDeclaration()); }
(	'\'' 
)
{ after(grammarAccess.getPostfixUnaryOperatorAccess().getDerivativeEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Declaration__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getTypeDeclarationParserRuleCall_0()); }
	ruleTypeDeclaration
{ after(grammarAccess.getDeclarationAccess().getTypeDeclarationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getDeclarationAccess().getEnumerationDeclarationParserRuleCall_1()); }
	ruleEnumerationDeclaration
{ after(grammarAccess.getDeclarationAccess().getEnumerationDeclarationParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getDeclarationAccess().getFunctionDeclarationParserRuleCall_2()); }
	ruleFunctionDeclaration
{ after(grammarAccess.getDeclarationAccess().getFunctionDeclarationParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclaration__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclarationAccess().getGroup_0()); }
(rule__TypeDeclaration__Group_0__0)
{ after(grammarAccess.getTypeDeclarationAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getTypeDeclarationAccess().getGroup_1()); }
(rule__TypeDeclaration__Group_1__0)
{ after(grammarAccess.getTypeDeclarationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Alternatives_11
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getChecksAssignment_11_0()); }
(rule__FunctionDeclaration__ChecksAssignment_11_0)
{ after(grammarAccess.getFunctionDeclarationAccess().getChecksAssignment_11_0()); }
)

    |(
{ before(grammarAccess.getFunctionDeclarationAccess().getAssertionsAssignment_11_1()); }
(rule__FunctionDeclaration__AssertionsAssignment_11_1)
{ after(grammarAccess.getFunctionDeclarationAccess().getAssertionsAssignment_11_1()); }
)

    |(
{ before(grammarAccess.getFunctionDeclarationAccess().getFunctionAliasDeclarationsAssignment_11_2()); }
(rule__FunctionDeclaration__FunctionAliasDeclarationsAssignment_11_2)
{ after(grammarAccess.getFunctionDeclarationAccess().getFunctionAliasDeclarationsAssignment_11_2()); }
)

    |(
{ before(grammarAccess.getFunctionDeclarationAccess().getStateVariableDeclarationsAssignment_11_3()); }
(rule__FunctionDeclaration__StateVariableDeclarationsAssignment_11_3)
{ after(grammarAccess.getFunctionDeclarationAccess().getStateVariableDeclarationsAssignment_11_3()); }
)

    |(
{ before(grammarAccess.getFunctionDeclarationAccess().getConstantDeclarationsAssignment_11_4()); }
(rule__FunctionDeclaration__ConstantDeclarationsAssignment_11_4)
{ after(grammarAccess.getFunctionDeclarationAccess().getConstantDeclarationsAssignment_11_4()); }
)

    |(
{ before(grammarAccess.getFunctionDeclarationAccess().getEquationsAssignment_11_5()); }
(rule__FunctionDeclaration__EquationsAssignment_11_5)
{ after(grammarAccess.getFunctionDeclarationAccess().getEquationsAssignment_11_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSpecifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeSpecifierAccess().getAnonymousTypeSpecifierParserRuleCall_0()); }
	ruleAnonymousTypeSpecifier
{ after(grammarAccess.getTypeSpecifierAccess().getAnonymousTypeSpecifierParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTypeSpecifierAccess().getDeclaredTypeSpecifierParserRuleCall_1()); }
	ruleDeclaredTypeSpecifier
{ after(grammarAccess.getTypeSpecifierAccess().getDeclaredTypeSpecifierParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AnonymousTypeSpecifier__TypeAlternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnonymousTypeSpecifierAccess().getTypePrimitiveTypeParserRuleCall_0_0()); }
	rulePrimitiveType
{ after(grammarAccess.getAnonymousTypeSpecifierAccess().getTypePrimitiveTypeParserRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getAnonymousTypeSpecifierAccess().getTypeArrayTypeParserRuleCall_0_1()); }
	ruleArrayType
{ after(grammarAccess.getAnonymousTypeSpecifierAccess().getTypeArrayTypeParserRuleCall_0_1()); }
)

    |(
{ before(grammarAccess.getAnonymousTypeSpecifierAccess().getTypeStructTypeParserRuleCall_0_2()); }
	ruleStructType
{ after(grammarAccess.getAnonymousTypeSpecifierAccess().getTypeStructTypeParserRuleCall_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getNumericTypeParserRuleCall_0()); }
	ruleNumericType
{ after(grammarAccess.getPrimitiveTypeAccess().getNumericTypeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPrimitiveTypeAccess().getBooleanTypeParserRuleCall_1()); }
	ruleBooleanType
{ after(grammarAccess.getPrimitiveTypeAccess().getBooleanTypeParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getPrimitiveTypeAccess().getStringTypeParserRuleCall_2()); }
	ruleStringType
{ after(grammarAccess.getPrimitiveTypeAccess().getStringTypeParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumericType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericTypeAccess().getRealTypeParserRuleCall_0()); }
	ruleRealType
{ after(grammarAccess.getNumericTypeAccess().getRealTypeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNumericTypeAccess().getIntegerTypeParserRuleCall_1()); }
	ruleIntegerType
{ after(grammarAccess.getNumericTypeAccess().getIntegerTypeParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getNumericTypeAccess().getComplexTypeParserRuleCall_2()); }
	ruleComplexType
{ after(grammarAccess.getNumericTypeAccess().getComplexTypeParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getNumericTypeAccess().getGaussianTypeParserRuleCall_3()); }
	ruleGaussianType
{ after(grammarAccess.getNumericTypeAccess().getGaussianTypeParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayTypeSpecifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeSpecifierAccess().getAnonymousArrayTypeSpecifierParserRuleCall_0()); }
	ruleAnonymousArrayTypeSpecifier
{ after(grammarAccess.getArrayTypeSpecifierAccess().getAnonymousArrayTypeSpecifierParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getArrayTypeSpecifierAccess().getDeclaredTypeSpecifierParserRuleCall_1()); }
	ruleDeclaredTypeSpecifier
{ after(grammarAccess.getArrayTypeSpecifierAccess().getDeclaredTypeSpecifierParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getLambdaExpressionParserRuleCall_0()); }
	ruleLambdaExpression
{ after(grammarAccess.getExpressionAccess().getLambdaExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getLetExpressionParserRuleCall_1()); }
	ruleLetExpression
{ after(grammarAccess.getExpressionAccess().getLetExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getIfExpressionParserRuleCall_2()); }
	ruleIfExpression
{ after(grammarAccess.getExpressionAccess().getIfExpressionParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getSwitchExpressionParserRuleCall_3()); }
	ruleSwitchExpression
{ after(grammarAccess.getExpressionAccess().getSwitchExpressionParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getRangeExpressionParserRuleCall_4()); }
	ruleRangeExpression
{ after(grammarAccess.getExpressionAccess().getRangeExpressionParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLambdaExpressionAccess().getParametersAssignment_0_0()); }
(rule__LambdaExpression__ParametersAssignment_0_0)
{ after(grammarAccess.getLambdaExpressionAccess().getParametersAssignment_0_0()); }
)

    |(
{ before(grammarAccess.getLambdaExpressionAccess().getGroup_0_1()); }
(rule__LambdaExpression__Group_0_1__0)
{ after(grammarAccess.getLambdaExpressionAccess().getGroup_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpressionAssignment__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAssignmentAccess().getVariablesAssignment_0_0()); }
(rule__LetExpressionAssignment__VariablesAssignment_0_0)
{ after(grammarAccess.getLetExpressionAssignmentAccess().getVariablesAssignment_0_0()); }
)

    |(
{ before(grammarAccess.getLetExpressionAssignmentAccess().getGroup_0_1()); }
(rule__LetExpressionAssignment__Group_0_1__0)
{ after(grammarAccess.getLetExpressionAssignmentAccess().getGroup_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup_1_0_0()); }
(rule__RelationalExpression__Group_1_0_0__0)
{ after(grammarAccess.getRelationalExpressionAccess().getGroup_1_0_0()); }
)

    |(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup_1_0_1()); }
(rule__RelationalExpression__Group_1_0_1__0)
{ after(grammarAccess.getRelationalExpressionAccess().getGroup_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixUnaryExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrefixUnaryExpressionAccess().getPostfixUnaryExpressionParserRuleCall_0()); }
	rulePostfixUnaryExpression
{ after(grammarAccess.getPrefixUnaryExpressionAccess().getPostfixUnaryExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPrefixUnaryExpressionAccess().getGroup_1()); }
(rule__PrefixUnaryExpression__Group_1__0)
{ after(grammarAccess.getPrefixUnaryExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixUnaryExpression__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixUnaryExpressionAccess().getQualifiedFeatureCallParserRuleCall_0_0()); }
	ruleQualifiedFeatureCall
{ after(grammarAccess.getPostfixUnaryExpressionAccess().getQualifiedFeatureCallParserRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getPostfixUnaryExpressionAccess().getMemberFeatureCallParserRuleCall_0_1()); }
	ruleMemberFeatureCall
{ after(grammarAccess.getPostfixUnaryExpressionAccess().getMemberFeatureCallParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getGroup_1_0()); }
(rule__MemberFeatureCall__Group_1_0__0)
{ after(grammarAccess.getMemberFeatureCallAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getMemberFeatureCallAccess().getGroup_1_1()); }
(rule__MemberFeatureCall__Group_1_1__0)
{ after(grammarAccess.getMemberFeatureCallAccess().getGroup_1_1()); }
)

    |(
{ before(grammarAccess.getMemberFeatureCallAccess().getGroup_1_2()); }
(rule__MemberFeatureCall__Group_1_2__0)
{ after(grammarAccess.getMemberFeatureCallAccess().getGroup_1_2()); }
)

    |(
{ before(grammarAccess.getMemberFeatureCallAccess().getGroup_1_3()); }
(rule__MemberFeatureCall__Group_1_3__0)
{ after(grammarAccess.getMemberFeatureCallAccess().getGroup_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArraySubscript__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArraySubscriptAccess().getSliceAssignment_0()); }
(rule__ArraySubscript__SliceAssignment_0)
{ after(grammarAccess.getArraySubscriptAccess().getSliceAssignment_0()); }
)

    |(
{ before(grammarAccess.getArraySubscriptAccess().getExpressionAssignment_1()); }
(rule__ArraySubscript__ExpressionAssignment_1)
{ after(grammarAccess.getArraySubscriptAccess().getExpressionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_0()); }
	ruleLiteral
{ after(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getTemplateExpressionParserRuleCall_1()); }
	ruleTemplateExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getTemplateExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getFeatureCallParserRuleCall_2()); }
	ruleFeatureCall
{ after(grammarAccess.getPrimaryExpressionAccess().getFeatureCallParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getUnitConstructionOperatorParserRuleCall_3()); }
	ruleUnitConstructionOperator
{ after(grammarAccess.getPrimaryExpressionAccess().getUnitConstructionOperatorParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getArrayConstructionOperatorParserRuleCall_4()); }
	ruleArrayConstructionOperator
{ after(grammarAccess.getPrimaryExpressionAccess().getArrayConstructionOperatorParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getArrayConcatenationOperatorParserRuleCall_5()); }
	ruleArrayConcatenationOperator
{ after(grammarAccess.getPrimaryExpressionAccess().getArrayConcatenationOperatorParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getStructConstructionOperatorParserRuleCall_6()); }
	ruleStructConstructionOperator
{ after(grammarAccess.getPrimaryExpressionAccess().getStructConstructionOperatorParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getParenthesizedExpressionParserRuleCall_7()); }
	ruleParenthesizedExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getParenthesizedExpressionParserRuleCall_7()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getEndExpressionParserRuleCall_8()); }
	ruleEndExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getEndExpressionParserRuleCall_8()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getAlgorithmExpressionParserRuleCall_9()); }
	ruleAlgorithmExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getAlgorithmExpressionParserRuleCall_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getNumericLiteralParserRuleCall_0()); }
	ruleNumericLiteral
{ after(grammarAccess.getLiteralAccess().getNumericLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_1()); }
	ruleBooleanLiteral
{ after(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_2()); }
	ruleStringLiteral
{ after(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumericLiteral__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericLiteralAccess().getIntegerLiteralParserRuleCall_0()); }
	ruleIntegerLiteral
{ after(grammarAccess.getNumericLiteralAccess().getIntegerLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNumericLiteralAccess().getRealLiteralParserRuleCall_1()); }
	ruleRealLiteral
{ after(grammarAccess.getNumericLiteralAccess().getRealLiteralParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RealData__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealDataAccess().getGroup_1_0()); }
(rule__RealData__Group_1_0__0)
{ after(grammarAccess.getRealDataAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getRealDataAccess().getAlternatives_1_1()); }
(rule__RealData__Alternatives_1_1)
{ after(grammarAccess.getRealDataAccess().getAlternatives_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RealData__Alternatives_1_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealDataAccess().getIJTerminalRuleCall_1_0_2_0()); }
	RULE_IJ
{ after(grammarAccess.getRealDataAccess().getIJTerminalRuleCall_1_0_2_0()); }
)

    |(
{ before(grammarAccess.getRealDataAccess().getEXPIJTerminalRuleCall_1_0_2_1()); }
	RULE_EXPIJ
{ after(grammarAccess.getRealDataAccess().getEXPIJTerminalRuleCall_1_0_2_1()); }
)

    |(
{ before(grammarAccess.getRealDataAccess().getGroup_1_0_2_2()); }
(rule__RealData__Group_1_0_2_2__0)
{ after(grammarAccess.getRealDataAccess().getGroup_1_0_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RealData__Alternatives_1_0_2_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealDataAccess().getPlusSignKeyword_1_0_2_2_1_0()); }

	'+' 

{ after(grammarAccess.getRealDataAccess().getPlusSignKeyword_1_0_2_2_1_0()); }
)

    |(
{ before(grammarAccess.getRealDataAccess().getHyphenMinusKeyword_1_0_2_2_1_1()); }

	'-' 

{ after(grammarAccess.getRealDataAccess().getHyphenMinusKeyword_1_0_2_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RealData__Alternatives_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealDataAccess().getEXPIJTerminalRuleCall_1_1_0()); }
	RULE_EXPIJ
{ after(grammarAccess.getRealDataAccess().getEXPIJTerminalRuleCall_1_1_0()); }
)

    |(
{ before(grammarAccess.getRealDataAccess().getGroup_1_1_1()); }
(rule__RealData__Group_1_1_1__0)
{ after(grammarAccess.getRealDataAccess().getGroup_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RealData__Alternatives_1_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealDataAccess().getPlusSignKeyword_1_1_1_1_0()); }

	'+' 

{ after(grammarAccess.getRealDataAccess().getPlusSignKeyword_1_1_1_1_0()); }
)

    |(
{ before(grammarAccess.getRealDataAccess().getHyphenMinusKeyword_1_1_1_1_1()); }

	'-' 

{ after(grammarAccess.getRealDataAccess().getHyphenMinusKeyword_1_1_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanLiteralAccess().getTrueAssignment_1_0()); }
(rule__BooleanLiteral__TrueAssignment_1_0)
{ after(grammarAccess.getBooleanLiteralAccess().getTrueAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1_1()); }

	'false' 

{ after(grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantString__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantStringAccess().getCONSTANT_STRINGTerminalRuleCall_0()); }
	RULE_CONSTANT_STRING
{ after(grammarAccess.getConstantStringAccess().getCONSTANT_STRINGTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getConstantStringAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getConstantStringAccess().getIDTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getConstantStringAccess().getANY_OTHERTerminalRuleCall_2()); }
	RULE_ANY_OTHER
{ after(grammarAccess.getConstantStringAccess().getANY_OTHERTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureCallAccess().getVariableReferenceParserRuleCall_0()); }
	ruleVariableReference
{ after(grammarAccess.getFeatureCallAccess().getVariableReferenceParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getFeatureCallAccess().getFunctionCallParserRuleCall_1()); }
	ruleFunctionCall
{ after(grammarAccess.getFeatureCallAccess().getFunctionCallParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedFeatureCall__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedFeatureCallAccess().getQualifiedVariableReferenceParserRuleCall_0()); }
	ruleQualifiedVariableReference
{ after(grammarAccess.getQualifiedFeatureCallAccess().getQualifiedVariableReferenceParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getQualifiedFeatureCallAccess().getQualifiedFunctionCallParserRuleCall_1()); }
	ruleQualifiedFunctionCall
{ after(grammarAccess.getQualifiedFeatureCallAccess().getQualifiedFunctionCallParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NegateStepExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegateStepExpressionAccess().getPrimitiveStepExpressionParserRuleCall_0()); }
	rulePrimitiveStepExpression
{ after(grammarAccess.getNegateStepExpressionAccess().getPrimitiveStepExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNegateStepExpressionAccess().getGroup_1()); }
(rule__NegateStepExpression__Group_1__0)
{ after(grammarAccess.getNegateStepExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveStepExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveStepExpressionAccess().getStepLiteralParserRuleCall_0()); }
	ruleStepLiteral
{ after(grammarAccess.getPrimitiveStepExpressionAccess().getStepLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPrimitiveStepExpressionAccess().getStepNParserRuleCall_1()); }
	ruleStepN
{ after(grammarAccess.getPrimitiveStepExpressionAccess().getStepNParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayConstructionOperator__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayConstructionOperatorAccess().getGroup_2_0()); }
(rule__ArrayConstructionOperator__Group_2_0__0)*
{ after(grammarAccess.getArrayConstructionOperatorAccess().getGroup_2_0()); }
)

    |(
{ before(grammarAccess.getArrayConstructionOperatorAccess().getGroup_2_1()); }
(rule__ArrayConstructionOperator__Group_2_1__0)
{ after(grammarAccess.getArrayConstructionOperatorAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getCompoundStatementParserRuleCall_0()); }
	ruleCompoundStatement
{ after(grammarAccess.getStatementAccess().getCompoundStatementParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getAssignmentParserRuleCall_1()); }
	ruleAssignment
{ after(grammarAccess.getStatementAccess().getAssignmentParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getLocalVariableDeclarationParserRuleCall_2()); }
	ruleLocalVariableDeclaration
{ after(grammarAccess.getStatementAccess().getLocalVariableDeclarationParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_3()); }
	ruleIfStatement
{ after(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getWhileStatementParserRuleCall_4()); }
	ruleWhileStatement
{ after(grammarAccess.getStatementAccess().getWhileStatementParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getDoWhileStatementParserRuleCall_5()); }
	ruleDoWhileStatement
{ after(grammarAccess.getStatementAccess().getDoWhileStatementParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getForStatementParserRuleCall_6()); }
	ruleForStatement
{ after(grammarAccess.getStatementAccess().getForStatementParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getContinueStatementParserRuleCall_7()); }
	ruleContinueStatement
{ after(grammarAccess.getStatementAccess().getContinueStatementParserRuleCall_7()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getBreakStatementParserRuleCall_8()); }
	ruleBreakStatement
{ after(grammarAccess.getStatementAccess().getBreakStatementParserRuleCall_8()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getReturnStatementParserRuleCall_9()); }
	ruleReturnStatement
{ after(grammarAccess.getStatementAccess().getReturnStatementParserRuleCall_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignableMemberFeatureCall__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignableMemberFeatureCallAccess().getGroup_1_0()); }
(rule__AssignableMemberFeatureCall__Group_1_0__0)
{ after(grammarAccess.getAssignableMemberFeatureCallAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getAssignableMemberFeatureCallAccess().getGroup_1_1()); }
(rule__AssignableMemberFeatureCall__Group_1_1__0)
{ after(grammarAccess.getAssignableMemberFeatureCallAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignablePrimaryExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignablePrimaryExpressionAccess().getVariableReferenceParserRuleCall_0()); }
	ruleVariableReference
{ after(grammarAccess.getAssignablePrimaryExpressionAccess().getVariableReferenceParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAssignablePrimaryExpressionAccess().getParenthesizedExpressionParserRuleCall_1()); }
	ruleParenthesizedExpression
{ after(grammarAccess.getAssignablePrimaryExpressionAccess().getParenthesizedExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Unit__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitAccess().getGroup_1_0()); }
(rule__Unit__Group_1_0__0)
{ after(grammarAccess.getUnitAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getUnitAccess().getGroup_1_1()); }
(rule__Unit__Group_1_1__0)
{ after(grammarAccess.getUnitAccess().getGroup_1_1()); }
)

    |(
{ before(grammarAccess.getUnitAccess().getNumeratorAssignment_1_2()); }
(rule__Unit__NumeratorAssignment_1_2)
{ after(grammarAccess.getUnitAccess().getNumeratorAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitNumerator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitNumeratorAccess().getGroup_0()); }
(rule__UnitNumerator__Group_0__0)
{ after(grammarAccess.getUnitNumeratorAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getUnitNumeratorAccess().getGroup_1()); }
(rule__UnitNumerator__Group_1__0)
{ after(grammarAccess.getUnitNumeratorAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitDenominator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitDenominatorAccess().getFactorsAssignment_0()); }
(rule__UnitDenominator__FactorsAssignment_0)
{ after(grammarAccess.getUnitDenominatorAccess().getFactorsAssignment_0()); }
)

    |(
{ before(grammarAccess.getUnitDenominatorAccess().getGroup_1()); }
(rule__UnitDenominator__Group_1__0)
{ after(grammarAccess.getUnitDenominatorAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildcard__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1_0()); }

	'.*' 

{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1_0()); }
)

    |(
{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup_1_1()); }
(rule__QualifiedNameWithWildcard__Group_1_1__0)
{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValidInt__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValidIntAccess().getONETerminalRuleCall_0()); }
	RULE_ONE
{ after(grammarAccess.getValidIntAccess().getONETerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getValidIntAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
{ after(grammarAccess.getValidIntAccess().getINTTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValidID__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValidIDAccess().getNTerminalRuleCall_0()); }
	RULE_N
{ after(grammarAccess.getValidIDAccess().getNTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getValidIDAccess().getIJTerminalRuleCall_1()); }
	RULE_IJ
{ after(grammarAccess.getValidIDAccess().getIJTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getValidIDAccess().getETerminalRuleCall_2()); }
	RULE_E
{ after(grammarAccess.getValidIDAccess().getETerminalRuleCall_2()); }
)

    |(
{ before(grammarAccess.getValidIDAccess().getEXPTerminalRuleCall_3()); }
	RULE_EXP
{ after(grammarAccess.getValidIDAccess().getEXPTerminalRuleCall_3()); }
)

    |(
{ before(grammarAccess.getValidIDAccess().getEXPIJTerminalRuleCall_4()); }
	RULE_EXPIJ
{ after(grammarAccess.getValidIDAccess().getEXPIJTerminalRuleCall_4()); }
)

    |(
{ before(grammarAccess.getValidIDAccess().getIDTerminalRuleCall_5()); }
	RULE_ID
{ after(grammarAccess.getValidIDAccess().getIDTerminalRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionKind__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionKindAccess().getStatefulEnumLiteralDeclaration_0()); }
(	'stateful' 
)
{ after(grammarAccess.getFunctionKindAccess().getStatefulEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getFunctionKindAccess().getContinuousEnumLiteralDeclaration_1()); }
(	'continuous' 
)
{ after(grammarAccess.getFunctionKindAccess().getContinuousEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssertionStatusKind__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssertionStatusKindAccess().getInfoEnumLiteralDeclaration_0()); }
(	'info' 
)
{ after(grammarAccess.getAssertionStatusKindAccess().getInfoEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getAssertionStatusKindAccess().getWarningEnumLiteralDeclaration_1()); }
(	'warning' 
)
{ after(grammarAccess.getAssertionStatusKindAccess().getWarningEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getAssertionStatusKindAccess().getErrorEnumLiteralDeclaration_2()); }
(	'error' 
)
{ after(grammarAccess.getAssertionStatusKindAccess().getErrorEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getAssertionStatusKindAccess().getFatalEnumLiteralDeclaration_3()); }
(	'fatal' 
)
{ after(grammarAccess.getAssertionStatusKindAccess().getFatalEnumLiteralDeclaration_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityOperatorAccess().getEqualToEnumLiteralDeclaration_0()); }
(	'==' 
)
{ after(grammarAccess.getEqualityOperatorAccess().getEqualToEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getEqualityOperatorAccess().getNotEqualToEnumLiteralDeclaration_1()); }
(	'!=' 
)
{ after(grammarAccess.getEqualityOperatorAccess().getNotEqualToEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalOperatorAccess().getLessThanEnumLiteralDeclaration_0()); }
(	'<' 
)
{ after(grammarAccess.getRelationalOperatorAccess().getLessThanEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getLessThanOrEqualToEnumLiteralDeclaration_1()); }
(	'<=' 
)
{ after(grammarAccess.getRelationalOperatorAccess().getLessThanOrEqualToEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getGreaterThanEnumLiteralDeclaration_2()); }
(	'>' 
)
{ after(grammarAccess.getRelationalOperatorAccess().getGreaterThanEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getGreaterThanOrEqualToEnumLiteralDeclaration_3()); }
(	'>=' 
)
{ after(grammarAccess.getRelationalOperatorAccess().getGreaterThanOrEqualToEnumLiteralDeclaration_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveOperatorAccess().getAddEnumLiteralDeclaration_0()); }
(	'+' 
)
{ after(grammarAccess.getAdditiveOperatorAccess().getAddEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getAdditiveOperatorAccess().getSubtractEnumLiteralDeclaration_1()); }
(	'-' 
)
{ after(grammarAccess.getAdditiveOperatorAccess().getSubtractEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getAdditiveOperatorAccess().getElementWiseAddEnumLiteralDeclaration_2()); }
(	'.+' 
)
{ after(grammarAccess.getAdditiveOperatorAccess().getElementWiseAddEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getAdditiveOperatorAccess().getElementWiseSubtractEnumLiteralDeclaration_3()); }
(	'.-' 
)
{ after(grammarAccess.getAdditiveOperatorAccess().getElementWiseSubtractEnumLiteralDeclaration_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeOperatorAccess().getMultiplyEnumLiteralDeclaration_0()); }
(	'*' 
)
{ after(grammarAccess.getMultiplicativeOperatorAccess().getMultiplyEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getMultiplicativeOperatorAccess().getDivideEnumLiteralDeclaration_1()); }
(	'/' 
)
{ after(grammarAccess.getMultiplicativeOperatorAccess().getDivideEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getMultiplicativeOperatorAccess().getModuloEnumLiteralDeclaration_2()); }
(	'%' 
)
{ after(grammarAccess.getMultiplicativeOperatorAccess().getModuloEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getMultiplicativeOperatorAccess().getElementWiseMultiplyEnumLiteralDeclaration_3()); }
(	'.*' 
)
{ after(grammarAccess.getMultiplicativeOperatorAccess().getElementWiseMultiplyEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getMultiplicativeOperatorAccess().getElementWiseDivideEnumLiteralDeclaration_4()); }
(	'./' 
)
{ after(grammarAccess.getMultiplicativeOperatorAccess().getElementWiseDivideEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getMultiplicativeOperatorAccess().getElementWiseModuloEnumLiteralDeclaration_5()); }
(	'.%' 
)
{ after(grammarAccess.getMultiplicativeOperatorAccess().getElementWiseModuloEnumLiteralDeclaration_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PowerOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerOperatorAccess().getPowerEnumLiteralDeclaration_0()); }
(	'^' 
)
{ after(grammarAccess.getPowerOperatorAccess().getPowerEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getPowerOperatorAccess().getElementWisePowerEnumLiteralDeclaration_1()); }
(	'.^' 
)
{ after(grammarAccess.getPowerOperatorAccess().getElementWisePowerEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixUnaryOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrefixUnaryOperatorAccess().getNegateEnumLiteralDeclaration_0()); }
(	'-' 
)
{ after(grammarAccess.getPrefixUnaryOperatorAccess().getNegateEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getPrefixUnaryOperatorAccess().getLogicalNotEnumLiteralDeclaration_1()); }
(	'!' 
)
{ after(grammarAccess.getPrefixUnaryOperatorAccess().getLogicalNotEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Module__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group__0__Impl
	rule__Module__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getPackageKeyword_0()); }

	'package' 

{ after(grammarAccess.getModuleAccess().getPackageKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Module__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group__1__Impl
	rule__Module__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getPackageNameAssignment_1()); }
(rule__Module__PackageNameAssignment_1)
{ after(grammarAccess.getModuleAccess().getPackageNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Module__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group__2__Impl
	rule__Module__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getImportDeclarationsAssignment_2()); }
(rule__Module__ImportDeclarationsAssignment_2)*
{ after(grammarAccess.getModuleAccess().getImportDeclarationsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Module__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getDeclarationsAssignment_3()); }
(rule__Module__DeclarationsAssignment_3)*
{ after(grammarAccess.getModuleAccess().getDeclarationsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ImportDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImportDeclaration__Group__0__Impl
	rule__ImportDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportDeclarationAccess().getImportKeyword_0()); }

	'import' 

{ after(grammarAccess.getImportDeclarationAccess().getImportKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ImportDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImportDeclaration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportDeclarationAccess().getImportedNamespaceAssignment_1()); }
(rule__ImportDeclaration__ImportedNamespaceAssignment_1)
{ after(grammarAccess.getImportDeclarationAccess().getImportedNamespaceAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TypeDeclaration__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDeclaration__Group_0__0__Impl
	rule__TypeDeclaration__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclaration__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclarationAccess().getTypeKeyword_0_0()); }

	'type' 

{ after(grammarAccess.getTypeDeclarationAccess().getTypeKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDeclaration__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDeclaration__Group_0__1__Impl
	rule__TypeDeclaration__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclaration__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclarationAccess().getNameAssignment_0_1()); }
(rule__TypeDeclaration__NameAssignment_0_1)
{ after(grammarAccess.getTypeDeclarationAccess().getNameAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDeclaration__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDeclaration__Group_0__2__Impl
	rule__TypeDeclaration__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclaration__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclarationAccess().getEqualsSignKeyword_0_2()); }

	'=' 

{ after(grammarAccess.getTypeDeclarationAccess().getEqualsSignKeyword_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDeclaration__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDeclaration__Group_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclaration__Group_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclarationAccess().getTypeSpecifierAssignment_0_3()); }
(rule__TypeDeclaration__TypeSpecifierAssignment_0_3)
{ after(grammarAccess.getTypeDeclarationAccess().getTypeSpecifierAssignment_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__TypeDeclaration__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDeclaration__Group_1__0__Impl
	rule__TypeDeclaration__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclaration__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclarationAccess().getStructKeyword_1_0()); }

	'struct' 

{ after(grammarAccess.getTypeDeclarationAccess().getStructKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDeclaration__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDeclaration__Group_1__1__Impl
	rule__TypeDeclaration__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclaration__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclarationAccess().getNameAssignment_1_1()); }
(rule__TypeDeclaration__NameAssignment_1_1)
{ after(grammarAccess.getTypeDeclarationAccess().getNameAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDeclaration__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDeclaration__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclaration__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclarationAccess().getTypeSpecifierAssignment_1_2()); }
(rule__TypeDeclaration__TypeSpecifierAssignment_1_2)
{ after(grammarAccess.getTypeDeclarationAccess().getTypeSpecifierAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__StructDeclarationType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructDeclarationType__Group__0__Impl
	rule__StructDeclarationType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StructDeclarationType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructDeclarationTypeAccess().getLeftCurlyBracketKeyword_0()); }

	'{' 

{ after(grammarAccess.getStructDeclarationTypeAccess().getLeftCurlyBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StructDeclarationType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructDeclarationType__Group__1__Impl
	rule__StructDeclarationType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StructDeclarationType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructDeclarationTypeAccess().getMembersAssignment_1()); }
(rule__StructDeclarationType__MembersAssignment_1)
{ after(grammarAccess.getStructDeclarationTypeAccess().getMembersAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StructDeclarationType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructDeclarationType__Group__2__Impl
	rule__StructDeclarationType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StructDeclarationType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructDeclarationTypeAccess().getGroup_2()); }
(rule__StructDeclarationType__Group_2__0)*
{ after(grammarAccess.getStructDeclarationTypeAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StructDeclarationType__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructDeclarationType__Group__3__Impl
	rule__StructDeclarationType__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__StructDeclarationType__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructDeclarationTypeAccess().getSemicolonKeyword_3()); }
(
	';' 
)?
{ after(grammarAccess.getStructDeclarationTypeAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StructDeclarationType__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructDeclarationType__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StructDeclarationType__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructDeclarationTypeAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getStructDeclarationTypeAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__StructDeclarationType__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructDeclarationType__Group_2__0__Impl
	rule__StructDeclarationType__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StructDeclarationType__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructDeclarationTypeAccess().getSemicolonKeyword_2_0()); }

	';' 

{ after(grammarAccess.getStructDeclarationTypeAccess().getSemicolonKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StructDeclarationType__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructDeclarationType__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StructDeclarationType__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructDeclarationTypeAccess().getMembersAssignment_2_1()); }
(rule__StructDeclarationType__MembersAssignment_2_1)
{ after(grammarAccess.getStructDeclarationTypeAccess().getMembersAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EnumerationDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationDeclaration__Group__0__Impl
	rule__EnumerationDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationDeclarationAccess().getEnumKeyword_0()); }

	'enum' 

{ after(grammarAccess.getEnumerationDeclarationAccess().getEnumKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationDeclaration__Group__1__Impl
	rule__EnumerationDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationDeclarationAccess().getNameAssignment_1()); }
(rule__EnumerationDeclaration__NameAssignment_1)
{ after(grammarAccess.getEnumerationDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationDeclaration__Group__2__Impl
	rule__EnumerationDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationDeclarationAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getEnumerationDeclarationAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationDeclaration__Group__3__Impl
	rule__EnumerationDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationDeclarationAccess().getGroup_3()); }
(rule__EnumerationDeclaration__Group_3__0)?
{ after(grammarAccess.getEnumerationDeclarationAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationDeclaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationDeclarationAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getEnumerationDeclarationAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__EnumerationDeclaration__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationDeclaration__Group_3__0__Impl
	rule__EnumerationDeclaration__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationDeclaration__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationDeclarationAccess().getLiteralDeclarationsAssignment_3_0()); }
(rule__EnumerationDeclaration__LiteralDeclarationsAssignment_3_0)
{ after(grammarAccess.getEnumerationDeclarationAccess().getLiteralDeclarationsAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationDeclaration__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationDeclaration__Group_3__1__Impl
	rule__EnumerationDeclaration__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationDeclaration__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationDeclarationAccess().getGroup_3_1()); }
(rule__EnumerationDeclaration__Group_3_1__0)*
{ after(grammarAccess.getEnumerationDeclarationAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationDeclaration__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationDeclaration__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationDeclaration__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationDeclarationAccess().getCommaKeyword_3_2()); }
(
	',' 
)?
{ after(grammarAccess.getEnumerationDeclarationAccess().getCommaKeyword_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__EnumerationDeclaration__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationDeclaration__Group_3_1__0__Impl
	rule__EnumerationDeclaration__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationDeclaration__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationDeclarationAccess().getCommaKeyword_3_1_0()); }

	',' 

{ after(grammarAccess.getEnumerationDeclarationAccess().getCommaKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationDeclaration__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationDeclaration__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationDeclaration__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationDeclarationAccess().getLiteralDeclarationsAssignment_3_1_1()); }
(rule__EnumerationDeclaration__LiteralDeclarationsAssignment_3_1_1)
{ after(grammarAccess.getEnumerationDeclarationAccess().getLiteralDeclarationsAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__0__Impl
	rule__FunctionDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getKindAssignment_0()); }
(rule__FunctionDeclaration__KindAssignment_0)?
{ after(grammarAccess.getFunctionDeclarationAccess().getKindAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__1__Impl
	rule__FunctionDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getFunctionKeyword_1()); }

	'function' 

{ after(grammarAccess.getFunctionDeclarationAccess().getFunctionKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__2__Impl
	rule__FunctionDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getNameAssignment_2()); }
(rule__FunctionDeclaration__NameAssignment_2)
{ after(grammarAccess.getFunctionDeclarationAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__3__Impl
	rule__FunctionDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getGroup_3()); }
(rule__FunctionDeclaration__Group_3__0)?
{ after(grammarAccess.getFunctionDeclarationAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__4__Impl
	rule__FunctionDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getLeftParenthesisKeyword_4()); }

	'(' 

{ after(grammarAccess.getFunctionDeclarationAccess().getLeftParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__5__Impl
	rule__FunctionDeclaration__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getGroup_5()); }
(rule__FunctionDeclaration__Group_5__0)?
{ after(grammarAccess.getFunctionDeclarationAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__6__Impl
	rule__FunctionDeclaration__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getRightParenthesisKeyword_6()); }

	')' 

{ after(grammarAccess.getFunctionDeclarationAccess().getRightParenthesisKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__7__Impl
	rule__FunctionDeclaration__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getHyphenMinusGreaterThanSignKeyword_7()); }

	'->' 

{ after(grammarAccess.getFunctionDeclarationAccess().getHyphenMinusGreaterThanSignKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__8__Impl
	rule__FunctionDeclaration__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getOutputParameterDeclarationsAssignment_8()); }
(rule__FunctionDeclaration__OutputParameterDeclarationsAssignment_8)
{ after(grammarAccess.getFunctionDeclarationAccess().getOutputParameterDeclarationsAssignment_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__9__Impl
	rule__FunctionDeclaration__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getGroup_9()); }
(rule__FunctionDeclaration__Group_9__0)*
{ after(grammarAccess.getFunctionDeclarationAccess().getGroup_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__10
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__10__Impl
	rule__FunctionDeclaration__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__10__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getLeftCurlyBracketKeyword_10()); }

	'{' 

{ after(grammarAccess.getFunctionDeclarationAccess().getLeftCurlyBracketKeyword_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__11
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__11__Impl
	rule__FunctionDeclaration__Group__12
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__11__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getAlternatives_11()); }
(rule__FunctionDeclaration__Alternatives_11)*
{ after(grammarAccess.getFunctionDeclarationAccess().getAlternatives_11()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__12
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__12__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__12__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getRightCurlyBracketKeyword_12()); }

	'}' 

{ after(grammarAccess.getFunctionDeclarationAccess().getRightCurlyBracketKeyword_12()); }
)

;
finally {
	restoreStackSize(stackSize);
}




























rule__FunctionDeclaration__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_3__0__Impl
	rule__FunctionDeclaration__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getLessThanSignKeyword_3_0()); }

	'<' 

{ after(grammarAccess.getFunctionDeclarationAccess().getLessThanSignKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_3__1__Impl
	rule__FunctionDeclaration__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getStaticParameterDeclarationsAssignment_3_1()); }
(rule__FunctionDeclaration__StaticParameterDeclarationsAssignment_3_1)
{ after(grammarAccess.getFunctionDeclarationAccess().getStaticParameterDeclarationsAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_3__2__Impl
	rule__FunctionDeclaration__Group_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getGroup_3_2()); }
(rule__FunctionDeclaration__Group_3_2__0)*
{ after(grammarAccess.getFunctionDeclarationAccess().getGroup_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group_3__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_3__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_3__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getGreaterThanSignKeyword_3_3()); }

	'>' 

{ after(grammarAccess.getFunctionDeclarationAccess().getGreaterThanSignKeyword_3_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__FunctionDeclaration__Group_3_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_3_2__0__Impl
	rule__FunctionDeclaration__Group_3_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_3_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getCommaKeyword_3_2_0()); }

	',' 

{ after(grammarAccess.getFunctionDeclarationAccess().getCommaKeyword_3_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group_3_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_3_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_3_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getStaticParameterDeclarationsAssignment_3_2_1()); }
(rule__FunctionDeclaration__StaticParameterDeclarationsAssignment_3_2_1)
{ after(grammarAccess.getFunctionDeclarationAccess().getStaticParameterDeclarationsAssignment_3_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionDeclaration__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_5__0__Impl
	rule__FunctionDeclaration__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getInputParameterDeclarationsAssignment_5_0()); }
(rule__FunctionDeclaration__InputParameterDeclarationsAssignment_5_0)
{ after(grammarAccess.getFunctionDeclarationAccess().getInputParameterDeclarationsAssignment_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getGroup_5_1()); }
(rule__FunctionDeclaration__Group_5_1__0)*
{ after(grammarAccess.getFunctionDeclarationAccess().getGroup_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionDeclaration__Group_5_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_5_1__0__Impl
	rule__FunctionDeclaration__Group_5_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_5_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getCommaKeyword_5_1_0()); }

	',' 

{ after(grammarAccess.getFunctionDeclarationAccess().getCommaKeyword_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group_5_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_5_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_5_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getInputParameterDeclarationsAssignment_5_1_1()); }
(rule__FunctionDeclaration__InputParameterDeclarationsAssignment_5_1_1)
{ after(grammarAccess.getFunctionDeclarationAccess().getInputParameterDeclarationsAssignment_5_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionDeclaration__Group_9__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_9__0__Impl
	rule__FunctionDeclaration__Group_9__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_9__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getCommaKeyword_9_0()); }

	',' 

{ after(grammarAccess.getFunctionDeclarationAccess().getCommaKeyword_9_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group_9__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_9__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_9__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getOutputParameterDeclarationsAssignment_9_1()); }
(rule__FunctionDeclaration__OutputParameterDeclarationsAssignment_9_1)
{ after(grammarAccess.getFunctionDeclarationAccess().getOutputParameterDeclarationsAssignment_9_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Check__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Check__Group__0__Impl
	rule__Check__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckAccess().getCheckKeyword_0()); }

	'check' 

{ after(grammarAccess.getCheckAccess().getCheckKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Check__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Check__Group__1__Impl
	rule__Check__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckAccess().getGroup_1()); }
(rule__Check__Group_1__0)?
{ after(grammarAccess.getCheckAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Check__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Check__Group__2__Impl
	rule__Check__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getCheckAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Check__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Check__Group__3__Impl
	rule__Check__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckAccess().getGroup_3()); }
(rule__Check__Group_3__0)?
{ after(grammarAccess.getCheckAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Check__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Check__Group__4__Impl
	rule__Check__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getCheckAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Check__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Check__Group__5__Impl
	rule__Check__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckAccess().getHyphenMinusGreaterThanSignKeyword_5()); }

	'->' 

{ after(grammarAccess.getCheckAccess().getHyphenMinusGreaterThanSignKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Check__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Check__Group__6__Impl
	rule__Check__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckAccess().getOutputParameterTypesAssignment_6()); }
(rule__Check__OutputParameterTypesAssignment_6)
{ after(grammarAccess.getCheckAccess().getOutputParameterTypesAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Check__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Check__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckAccess().getGroup_7()); }
(rule__Check__Group_7__0)*
{ after(grammarAccess.getCheckAccess().getGroup_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__Check__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Check__Group_1__0__Impl
	rule__Check__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckAccess().getLessThanSignKeyword_1_0()); }

	'<' 

{ after(grammarAccess.getCheckAccess().getLessThanSignKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Check__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Check__Group_1__1__Impl
	rule__Check__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckAccess().getStaticArgumentsAssignment_1_1()); }
(rule__Check__StaticArgumentsAssignment_1_1)
{ after(grammarAccess.getCheckAccess().getStaticArgumentsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Check__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Check__Group_1__2__Impl
	rule__Check__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckAccess().getGroup_1_2()); }
(rule__Check__Group_1_2__0)*
{ after(grammarAccess.getCheckAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Check__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Check__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckAccess().getGreaterThanSignKeyword_1_3()); }

	'>' 

{ after(grammarAccess.getCheckAccess().getGreaterThanSignKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Check__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Check__Group_1_2__0__Impl
	rule__Check__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckAccess().getCommaKeyword_1_2_0()); }

	',' 

{ after(grammarAccess.getCheckAccess().getCommaKeyword_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Check__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Check__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckAccess().getStaticArgumentsAssignment_1_2_1()); }
(rule__Check__StaticArgumentsAssignment_1_2_1)
{ after(grammarAccess.getCheckAccess().getStaticArgumentsAssignment_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Check__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Check__Group_3__0__Impl
	rule__Check__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckAccess().getInputParameterTypesAssignment_3_0()); }
(rule__Check__InputParameterTypesAssignment_3_0)
{ after(grammarAccess.getCheckAccess().getInputParameterTypesAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Check__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Check__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckAccess().getGroup_3_1()); }
(rule__Check__Group_3_1__0)*
{ after(grammarAccess.getCheckAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Check__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Check__Group_3_1__0__Impl
	rule__Check__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckAccess().getCommaKeyword_3_1_0()); }

	',' 

{ after(grammarAccess.getCheckAccess().getCommaKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Check__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Check__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckAccess().getInputParameterTypesAssignment_3_1_1()); }
(rule__Check__InputParameterTypesAssignment_3_1_1)
{ after(grammarAccess.getCheckAccess().getInputParameterTypesAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Check__Group_7__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Check__Group_7__0__Impl
	rule__Check__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group_7__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckAccess().getCommaKeyword_7_0()); }

	',' 

{ after(grammarAccess.getCheckAccess().getCommaKeyword_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Check__Group_7__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Check__Group_7__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group_7__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckAccess().getOutputParameterTypesAssignment_7_1()); }
(rule__Check__OutputParameterTypesAssignment_7_1)
{ after(grammarAccess.getCheckAccess().getOutputParameterTypesAssignment_7_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Assertion__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assertion__Group__0__Impl
	rule__Assertion__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assertion__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssertionAccess().getStaticAssignment_0()); }
(rule__Assertion__StaticAssignment_0)?
{ after(grammarAccess.getAssertionAccess().getStaticAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assertion__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assertion__Group__1__Impl
	rule__Assertion__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assertion__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssertionAccess().getAssertKeyword_1()); }

	'assert' 

{ after(grammarAccess.getAssertionAccess().getAssertKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assertion__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assertion__Group__2__Impl
	rule__Assertion__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Assertion__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssertionAccess().getConditionAssignment_2()); }
(rule__Assertion__ConditionAssignment_2)
{ after(grammarAccess.getAssertionAccess().getConditionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assertion__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assertion__Group__3__Impl
	rule__Assertion__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Assertion__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssertionAccess().getColonKeyword_3()); }

	':' 

{ after(grammarAccess.getAssertionAccess().getColonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assertion__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assertion__Group__4__Impl
	rule__Assertion__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Assertion__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssertionAccess().getStatusKindAssignment_4()); }
(rule__Assertion__StatusKindAssignment_4)
{ after(grammarAccess.getAssertionAccess().getStatusKindAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assertion__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assertion__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assertion__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssertionAccess().getMessageAssignment_5()); }
(rule__Assertion__MessageAssignment_5)
{ after(grammarAccess.getAssertionAccess().getMessageAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__StateVariableDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateVariableDeclaration__Group__0__Impl
	rule__StateVariableDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StateVariableDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateVariableDeclarationAccess().getVarKeyword_0()); }

	'var' 

{ after(grammarAccess.getStateVariableDeclarationAccess().getVarKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StateVariableDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateVariableDeclaration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StateVariableDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateVariableDeclarationAccess().getNameAssignment_1()); }
(rule__StateVariableDeclaration__NameAssignment_1)
{ after(grammarAccess.getStateVariableDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConstantDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantDeclaration__Group__0__Impl
	rule__ConstantDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclarationAccess().getConstKeyword_0()); }

	'const' 

{ after(grammarAccess.getConstantDeclarationAccess().getConstKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstantDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantDeclaration__Group__1__Impl
	rule__ConstantDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclarationAccess().getNameAssignment_1()); }
(rule__ConstantDeclaration__NameAssignment_1)
{ after(grammarAccess.getConstantDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstantDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantDeclaration__Group__2__Impl
	rule__ConstantDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclarationAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getConstantDeclarationAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstantDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclarationAccess().getInitializerAssignment_3()); }
(rule__ConstantDeclaration__InitializerAssignment_3)
{ after(grammarAccess.getConstantDeclarationAccess().getInitializerAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__FunctionAliasDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionAliasDeclaration__Group__0__Impl
	rule__FunctionAliasDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionAliasDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAliasDeclarationAccess().getFunctionKeyword_0()); }

	'function' 

{ after(grammarAccess.getFunctionAliasDeclarationAccess().getFunctionKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionAliasDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionAliasDeclaration__Group__1__Impl
	rule__FunctionAliasDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionAliasDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAliasDeclarationAccess().getNameAssignment_1()); }
(rule__FunctionAliasDeclaration__NameAssignment_1)
{ after(grammarAccess.getFunctionAliasDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionAliasDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionAliasDeclaration__Group__2__Impl
	rule__FunctionAliasDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionAliasDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAliasDeclarationAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getFunctionAliasDeclarationAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionAliasDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionAliasDeclaration__Group__3__Impl
	rule__FunctionAliasDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionAliasDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAliasDeclarationAccess().getFunctionDeclarationAssignment_3()); }
(rule__FunctionAliasDeclaration__FunctionDeclarationAssignment_3)
{ after(grammarAccess.getFunctionAliasDeclarationAccess().getFunctionDeclarationAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionAliasDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionAliasDeclaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionAliasDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAliasDeclarationAccess().getGroup_4()); }
(rule__FunctionAliasDeclaration__Group_4__0)?
{ after(grammarAccess.getFunctionAliasDeclarationAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__FunctionAliasDeclaration__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionAliasDeclaration__Group_4__0__Impl
	rule__FunctionAliasDeclaration__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionAliasDeclaration__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAliasDeclarationAccess().getLessThanSignKeyword_4_0()); }

	'<' 

{ after(grammarAccess.getFunctionAliasDeclarationAccess().getLessThanSignKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionAliasDeclaration__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionAliasDeclaration__Group_4__1__Impl
	rule__FunctionAliasDeclaration__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionAliasDeclaration__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAliasDeclarationAccess().getStaticArgumentsAssignment_4_1()); }
(rule__FunctionAliasDeclaration__StaticArgumentsAssignment_4_1)
{ after(grammarAccess.getFunctionAliasDeclarationAccess().getStaticArgumentsAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionAliasDeclaration__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionAliasDeclaration__Group_4__2__Impl
	rule__FunctionAliasDeclaration__Group_4__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionAliasDeclaration__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAliasDeclarationAccess().getGroup_4_2()); }
(rule__FunctionAliasDeclaration__Group_4_2__0)*
{ after(grammarAccess.getFunctionAliasDeclarationAccess().getGroup_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionAliasDeclaration__Group_4__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionAliasDeclaration__Group_4__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionAliasDeclaration__Group_4__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAliasDeclarationAccess().getGreaterThanSignKeyword_4_3()); }

	'>' 

{ after(grammarAccess.getFunctionAliasDeclarationAccess().getGreaterThanSignKeyword_4_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__FunctionAliasDeclaration__Group_4_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionAliasDeclaration__Group_4_2__0__Impl
	rule__FunctionAliasDeclaration__Group_4_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionAliasDeclaration__Group_4_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAliasDeclarationAccess().getCommaKeyword_4_2_0()); }

	',' 

{ after(grammarAccess.getFunctionAliasDeclarationAccess().getCommaKeyword_4_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionAliasDeclaration__Group_4_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionAliasDeclaration__Group_4_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionAliasDeclaration__Group_4_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAliasDeclarationAccess().getStaticArgumentsAssignment_4_2_1()); }
(rule__FunctionAliasDeclaration__StaticArgumentsAssignment_4_2_1)
{ after(grammarAccess.getFunctionAliasDeclarationAccess().getStaticArgumentsAssignment_4_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Equation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equation__Group__0__Impl
	rule__Equation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEquationAccess().getInitialAssignment_0()); }
(rule__Equation__InitialAssignment_0)?
{ after(grammarAccess.getEquationAccess().getInitialAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Equation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equation__Group__1__Impl
	rule__Equation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Equation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEquationAccess().getEqKeyword_1()); }

	'eq' 

{ after(grammarAccess.getEquationAccess().getEqKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Equation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equation__Group__2__Impl
	rule__Equation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Equation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEquationAccess().getLeftHandSideAssignment_2()); }
(rule__Equation__LeftHandSideAssignment_2)
{ after(grammarAccess.getEquationAccess().getLeftHandSideAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Equation__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equation__Group__3__Impl
	rule__Equation__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Equation__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEquationAccess().getEqualsSignKeyword_3()); }

	'=' 

{ after(grammarAccess.getEquationAccess().getEqualsSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Equation__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equation__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equation__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEquationAccess().getRightHandSideAssignment_4()); }
(rule__Equation__RightHandSideAssignment_4)
{ after(grammarAccess.getEquationAccess().getRightHandSideAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__RealType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RealType__Group__0__Impl
	rule__RealType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RealType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealTypeAccess().getRealTypeAction_0()); }
(

)
{ after(grammarAccess.getRealTypeAccess().getRealTypeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RealType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RealType__Group__1__Impl
	rule__RealType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RealType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealTypeAccess().getRealKeyword_1()); }

	'real' 

{ after(grammarAccess.getRealTypeAccess().getRealKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RealType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RealType__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RealType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealTypeAccess().getUnitAssignment_2()); }
(rule__RealType__UnitAssignment_2)
{ after(grammarAccess.getRealTypeAccess().getUnitAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__IntegerType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerType__Group__0__Impl
	rule__IntegerType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerTypeAccess().getIntegerTypeAction_0()); }
(

)
{ after(grammarAccess.getIntegerTypeAccess().getIntegerTypeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerType__Group__1__Impl
	rule__IntegerType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerTypeAccess().getIntKeyword_1()); }

	'int' 

{ after(grammarAccess.getIntegerTypeAccess().getIntKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerType__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerTypeAccess().getUnitAssignment_2()); }
(rule__IntegerType__UnitAssignment_2)
{ after(grammarAccess.getIntegerTypeAccess().getUnitAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ComplexType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComplexType__Group__0__Impl
	rule__ComplexType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComplexTypeAccess().getComplexTypeAction_0()); }
(

)
{ after(grammarAccess.getComplexTypeAccess().getComplexTypeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComplexType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComplexType__Group__1__Impl
	rule__ComplexType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComplexTypeAccess().getComplexKeyword_1()); }

	'complex' 

{ after(grammarAccess.getComplexTypeAccess().getComplexKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComplexType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComplexType__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComplexTypeAccess().getUnitAssignment_2()); }
(rule__ComplexType__UnitAssignment_2)
{ after(grammarAccess.getComplexTypeAccess().getUnitAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__GaussianType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GaussianType__Group__0__Impl
	rule__GaussianType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GaussianType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGaussianTypeAccess().getGaussianTypeAction_0()); }
(

)
{ after(grammarAccess.getGaussianTypeAccess().getGaussianTypeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GaussianType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GaussianType__Group__1__Impl
	rule__GaussianType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GaussianType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGaussianTypeAccess().getGaussianKeyword_1()); }

	'gaussian' 

{ after(grammarAccess.getGaussianTypeAccess().getGaussianKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GaussianType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GaussianType__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GaussianType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGaussianTypeAccess().getUnitAssignment_2()); }
(rule__GaussianType__UnitAssignment_2)
{ after(grammarAccess.getGaussianTypeAccess().getUnitAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BooleanType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanType__Group__0__Impl
	rule__BooleanType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanTypeAccess().getBooleanTypeAction_0()); }
(

)
{ after(grammarAccess.getBooleanTypeAccess().getBooleanTypeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanTypeAccess().getBooleanKeyword_1()); }

	'boolean' 

{ after(grammarAccess.getBooleanTypeAccess().getBooleanKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StringType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringType__Group__0__Impl
	rule__StringType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringTypeAccess().getStringTypeAction_0()); }
(

)
{ after(grammarAccess.getStringTypeAccess().getStringTypeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringTypeAccess().getStringKeyword_1()); }

	'string' 

{ after(grammarAccess.getStringTypeAccess().getStringKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ArrayType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayType__Group__0__Impl
	rule__ArrayType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeAccess().getElementTypeSpecifierAssignment_0()); }
(rule__ArrayType__ElementTypeSpecifierAssignment_0)
{ after(grammarAccess.getArrayTypeAccess().getElementTypeSpecifierAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayType__Group__1__Impl
	rule__ArrayType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeAccess().getLeftSquareBracketKeyword_1()); }

	'[' 

{ after(grammarAccess.getArrayTypeAccess().getLeftSquareBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayType__Group__2__Impl
	rule__ArrayType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeAccess().getDimensionsAssignment_2()); }
(rule__ArrayType__DimensionsAssignment_2)
{ after(grammarAccess.getArrayTypeAccess().getDimensionsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayType__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayType__Group__3__Impl
	rule__ArrayType__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayType__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeAccess().getGroup_3()); }
(rule__ArrayType__Group_3__0)*
{ after(grammarAccess.getArrayTypeAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayType__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayType__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayType__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeAccess().getRightSquareBracketKeyword_4()); }

	']' 

{ after(grammarAccess.getArrayTypeAccess().getRightSquareBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ArrayType__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayType__Group_3__0__Impl
	rule__ArrayType__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayType__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getArrayTypeAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayType__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayType__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayType__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeAccess().getDimensionsAssignment_3_1()); }
(rule__ArrayType__DimensionsAssignment_3_1)
{ after(grammarAccess.getArrayTypeAccess().getDimensionsAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ArrayDimension__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayDimension__Group__0__Impl
	rule__ArrayDimension__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDimension__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayDimensionAccess().getArrayDimensionAction_0()); }
(

)
{ after(grammarAccess.getArrayDimensionAccess().getArrayDimensionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayDimension__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayDimension__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDimension__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayDimensionAccess().getSizeAssignment_1()); }
(rule__ArrayDimension__SizeAssignment_1)?
{ after(grammarAccess.getArrayDimensionAccess().getSizeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StructType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructType__Group__0__Impl
	rule__StructType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StructType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructTypeAccess().getStructKeyword_0()); }

	'struct' 

{ after(grammarAccess.getStructTypeAccess().getStructKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StructType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructType__Group__1__Impl
	rule__StructType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StructType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructTypeAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getStructTypeAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StructType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructType__Group__2__Impl
	rule__StructType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StructType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructTypeAccess().getMembersAssignment_2()); }
(rule__StructType__MembersAssignment_2)
{ after(grammarAccess.getStructTypeAccess().getMembersAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StructType__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructType__Group__3__Impl
	rule__StructType__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__StructType__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructTypeAccess().getGroup_3()); }
(rule__StructType__Group_3__0)*
{ after(grammarAccess.getStructTypeAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StructType__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructType__Group__4__Impl
	rule__StructType__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__StructType__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructTypeAccess().getSemicolonKeyword_4()); }
(
	';' 
)?
{ after(grammarAccess.getStructTypeAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StructType__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructType__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StructType__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructTypeAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getStructTypeAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__StructType__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructType__Group_3__0__Impl
	rule__StructType__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StructType__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructTypeAccess().getSemicolonKeyword_3_0()); }

	';' 

{ after(grammarAccess.getStructTypeAccess().getSemicolonKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StructType__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructType__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StructType__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructTypeAccess().getMembersAssignment_3_1()); }
(rule__StructType__MembersAssignment_3_1)
{ after(grammarAccess.getStructTypeAccess().getMembersAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StructMember__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructMember__Group__0__Impl
	rule__StructMember__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StructMember__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructMemberAccess().getTypeSpecifierAssignment_0()); }
(rule__StructMember__TypeSpecifierAssignment_0)
{ after(grammarAccess.getStructMemberAccess().getTypeSpecifierAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StructMember__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructMember__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StructMember__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructMemberAccess().getNameAssignment_1()); }
(rule__StructMember__NameAssignment_1)
{ after(grammarAccess.getStructMemberAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LambdaExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LambdaExpression__Group__0__Impl
	rule__LambdaExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLambdaExpressionAccess().getAlternatives_0()); }
(rule__LambdaExpression__Alternatives_0)
{ after(grammarAccess.getLambdaExpressionAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LambdaExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LambdaExpression__Group__1__Impl
	rule__LambdaExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLambdaExpressionAccess().getHyphenMinusGreaterThanSignKeyword_1()); }

	'->' 

{ after(grammarAccess.getLambdaExpressionAccess().getHyphenMinusGreaterThanSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LambdaExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LambdaExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLambdaExpressionAccess().getExpressionAssignment_2()); }
(rule__LambdaExpression__ExpressionAssignment_2)
{ after(grammarAccess.getLambdaExpressionAccess().getExpressionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LambdaExpression__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LambdaExpression__Group_0_1__0__Impl
	rule__LambdaExpression__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLambdaExpressionAccess().getLeftParenthesisKeyword_0_1_0()); }

	'(' 

{ after(grammarAccess.getLambdaExpressionAccess().getLeftParenthesisKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LambdaExpression__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LambdaExpression__Group_0_1__1__Impl
	rule__LambdaExpression__Group_0_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLambdaExpressionAccess().getGroup_0_1_1()); }
(rule__LambdaExpression__Group_0_1_1__0)?
{ after(grammarAccess.getLambdaExpressionAccess().getGroup_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LambdaExpression__Group_0_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LambdaExpression__Group_0_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__Group_0_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLambdaExpressionAccess().getRightParenthesisKeyword_0_1_2()); }

	')' 

{ after(grammarAccess.getLambdaExpressionAccess().getRightParenthesisKeyword_0_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LambdaExpression__Group_0_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LambdaExpression__Group_0_1_1__0__Impl
	rule__LambdaExpression__Group_0_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__Group_0_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLambdaExpressionAccess().getParametersAssignment_0_1_1_0()); }
(rule__LambdaExpression__ParametersAssignment_0_1_1_0)
{ after(grammarAccess.getLambdaExpressionAccess().getParametersAssignment_0_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LambdaExpression__Group_0_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LambdaExpression__Group_0_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__Group_0_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLambdaExpressionAccess().getGroup_0_1_1_1()); }
(rule__LambdaExpression__Group_0_1_1_1__0)*
{ after(grammarAccess.getLambdaExpressionAccess().getGroup_0_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LambdaExpression__Group_0_1_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LambdaExpression__Group_0_1_1_1__0__Impl
	rule__LambdaExpression__Group_0_1_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__Group_0_1_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLambdaExpressionAccess().getCommaKeyword_0_1_1_1_0()); }

	',' 

{ after(grammarAccess.getLambdaExpressionAccess().getCommaKeyword_0_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LambdaExpression__Group_0_1_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LambdaExpression__Group_0_1_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__Group_0_1_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLambdaExpressionAccess().getParametersAssignment_0_1_1_1_1()); }
(rule__LambdaExpression__ParametersAssignment_0_1_1_1_1)
{ after(grammarAccess.getLambdaExpressionAccess().getParametersAssignment_0_1_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LetExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetExpression__Group__0__Impl
	rule__LetExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAccess().getLetKeyword_0()); }

	'let' 

{ after(grammarAccess.getLetExpressionAccess().getLetKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LetExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetExpression__Group__1__Impl
	rule__LetExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAccess().getAssignmentsAssignment_1()); }
(rule__LetExpression__AssignmentsAssignment_1)
{ after(grammarAccess.getLetExpressionAccess().getAssignmentsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LetExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetExpression__Group__2__Impl
	rule__LetExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAccess().getGroup_2()); }
(rule__LetExpression__Group_2__0)*
{ after(grammarAccess.getLetExpressionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LetExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetExpression__Group__3__Impl
	rule__LetExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAccess().getInKeyword_3()); }

	'in' 

{ after(grammarAccess.getLetExpressionAccess().getInKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LetExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetExpression__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAccess().getTargetAssignment_4()); }
(rule__LetExpression__TargetAssignment_4)
{ after(grammarAccess.getLetExpressionAccess().getTargetAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__LetExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetExpression__Group_2__0__Impl
	rule__LetExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getLetExpressionAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LetExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAccess().getAssignmentsAssignment_2_1()); }
(rule__LetExpression__AssignmentsAssignment_2_1)
{ after(grammarAccess.getLetExpressionAccess().getAssignmentsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LetExpressionAssignment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetExpressionAssignment__Group__0__Impl
	rule__LetExpressionAssignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpressionAssignment__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAssignmentAccess().getAlternatives_0()); }
(rule__LetExpressionAssignment__Alternatives_0)
{ after(grammarAccess.getLetExpressionAssignmentAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LetExpressionAssignment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetExpressionAssignment__Group__1__Impl
	rule__LetExpressionAssignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpressionAssignment__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAssignmentAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getLetExpressionAssignmentAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LetExpressionAssignment__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetExpressionAssignment__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpressionAssignment__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAssignmentAccess().getAssignedExpressionAssignment_2()); }
(rule__LetExpressionAssignment__AssignedExpressionAssignment_2)
{ after(grammarAccess.getLetExpressionAssignmentAccess().getAssignedExpressionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LetExpressionAssignment__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetExpressionAssignment__Group_0_1__0__Impl
	rule__LetExpressionAssignment__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpressionAssignment__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAssignmentAccess().getLeftParenthesisKeyword_0_1_0()); }

	'(' 

{ after(grammarAccess.getLetExpressionAssignmentAccess().getLeftParenthesisKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LetExpressionAssignment__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetExpressionAssignment__Group_0_1__1__Impl
	rule__LetExpressionAssignment__Group_0_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpressionAssignment__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAssignmentAccess().getVariablesAssignment_0_1_1()); }
(rule__LetExpressionAssignment__VariablesAssignment_0_1_1)
{ after(grammarAccess.getLetExpressionAssignmentAccess().getVariablesAssignment_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LetExpressionAssignment__Group_0_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetExpressionAssignment__Group_0_1__2__Impl
	rule__LetExpressionAssignment__Group_0_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpressionAssignment__Group_0_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getLetExpressionAssignmentAccess().getGroup_0_1_2()); }
(rule__LetExpressionAssignment__Group_0_1_2__0)
{ after(grammarAccess.getLetExpressionAssignmentAccess().getGroup_0_1_2()); }
)
(
{ before(grammarAccess.getLetExpressionAssignmentAccess().getGroup_0_1_2()); }
(rule__LetExpressionAssignment__Group_0_1_2__0)*
{ after(grammarAccess.getLetExpressionAssignmentAccess().getGroup_0_1_2()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LetExpressionAssignment__Group_0_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetExpressionAssignment__Group_0_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpressionAssignment__Group_0_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAssignmentAccess().getRightParenthesisKeyword_0_1_3()); }

	')' 

{ after(grammarAccess.getLetExpressionAssignmentAccess().getRightParenthesisKeyword_0_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__LetExpressionAssignment__Group_0_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetExpressionAssignment__Group_0_1_2__0__Impl
	rule__LetExpressionAssignment__Group_0_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpressionAssignment__Group_0_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAssignmentAccess().getCommaKeyword_0_1_2_0()); }

	',' 

{ after(grammarAccess.getLetExpressionAssignmentAccess().getCommaKeyword_0_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LetExpressionAssignment__Group_0_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetExpressionAssignment__Group_0_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpressionAssignment__Group_0_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAssignmentAccess().getVariablesAssignment_0_1_2_1()); }
(rule__LetExpressionAssignment__VariablesAssignment_0_1_2_1)
{ after(grammarAccess.getLetExpressionAssignmentAccess().getVariablesAssignment_0_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IfExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpression__Group__0__Impl
	rule__IfExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getStaticAssignment_0()); }
(rule__IfExpression__StaticAssignment_0)?
{ after(grammarAccess.getIfExpressionAccess().getStaticAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpression__Group__1__Impl
	rule__IfExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getIfKeyword_1()); }

	'if' 

{ after(grammarAccess.getIfExpressionAccess().getIfKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpression__Group__2__Impl
	rule__IfExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getConditionAssignment_2()); }
(rule__IfExpression__ConditionAssignment_2)
{ after(grammarAccess.getIfExpressionAccess().getConditionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpression__Group__3__Impl
	rule__IfExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getThenKeyword_3()); }

	'then' 

{ after(grammarAccess.getIfExpressionAccess().getThenKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpression__Group__4__Impl
	rule__IfExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getThenExpressionAssignment_4()); }
(rule__IfExpression__ThenExpressionAssignment_4)
{ after(grammarAccess.getIfExpressionAccess().getThenExpressionAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpression__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpression__Group__5__Impl
	rule__IfExpression__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getElseKeyword_5()); }

	'else' 

{ after(grammarAccess.getIfExpressionAccess().getElseKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpression__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpression__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getElseExpressionAssignment_6()); }
(rule__IfExpression__ElseExpressionAssignment_6)
{ after(grammarAccess.getIfExpressionAccess().getElseExpressionAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__SwitchExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchExpression__Group__0__Impl
	rule__SwitchExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchExpressionAccess().getStaticAssignment_0()); }
(rule__SwitchExpression__StaticAssignment_0)?
{ after(grammarAccess.getSwitchExpressionAccess().getStaticAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchExpression__Group__1__Impl
	rule__SwitchExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchExpressionAccess().getSwitchKeyword_1()); }

	'switch' 

{ after(grammarAccess.getSwitchExpressionAccess().getSwitchKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchExpression__Group__2__Impl
	rule__SwitchExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchExpressionAccess().getControlExpressionAssignment_2()); }
(rule__SwitchExpression__ControlExpressionAssignment_2)
{ after(grammarAccess.getSwitchExpressionAccess().getControlExpressionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchExpression__Group__3__Impl
	rule__SwitchExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchExpressionAccess().getCasesAssignment_3()); }
(rule__SwitchExpression__CasesAssignment_3)*
{ after(grammarAccess.getSwitchExpressionAccess().getCasesAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchExpression__Group__4__Impl
	rule__SwitchExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchExpressionAccess().getDefaultKeyword_4()); }

	'default' 

{ after(grammarAccess.getSwitchExpressionAccess().getDefaultKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchExpression__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchExpression__Group__5__Impl
	rule__SwitchExpression__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchExpression__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchExpressionAccess().getColonKeyword_5()); }

	':' 

{ after(grammarAccess.getSwitchExpressionAccess().getColonKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchExpression__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchExpression__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchExpression__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchExpressionAccess().getDefaultExpressionAssignment_6()); }
(rule__SwitchExpression__DefaultExpressionAssignment_6)
{ after(grammarAccess.getSwitchExpressionAccess().getDefaultExpressionAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__SwitchCase__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchCase__Group__0__Impl
	rule__SwitchCase__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchCaseAccess().getCaseKeyword_0()); }

	'case' 

{ after(grammarAccess.getSwitchCaseAccess().getCaseKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchCase__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchCase__Group__1__Impl
	rule__SwitchCase__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchCaseAccess().getCaseExpressionAssignment_1()); }
(rule__SwitchCase__CaseExpressionAssignment_1)
{ after(grammarAccess.getSwitchCaseAccess().getCaseExpressionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchCase__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchCase__Group__2__Impl
	rule__SwitchCase__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchCaseAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getSwitchCaseAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchCase__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchCase__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchCaseAccess().getResultExpressionAssignment_3()); }
(rule__SwitchCase__ResultExpressionAssignment_3)
{ after(grammarAccess.getSwitchCaseAccess().getResultExpressionAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__RangeExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeExpression__Group__0__Impl
	rule__RangeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExpressionAccess().getImpliesExpressionParserRuleCall_0()); }
	ruleImpliesExpression
{ after(grammarAccess.getRangeExpressionAccess().getImpliesExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExpressionAccess().getGroup_1()); }
(rule__RangeExpression__Group_1__0)?
{ after(grammarAccess.getRangeExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RangeExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeExpression__Group_1__0__Impl
	rule__RangeExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExpressionAccess().getRangeExpressionOperandsAction_1_0()); }
(

)
{ after(grammarAccess.getRangeExpressionAccess().getRangeExpressionOperandsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeExpression__Group_1__1__Impl
	rule__RangeExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExpressionAccess().getColonKeyword_1_1()); }

	':' 

{ after(grammarAccess.getRangeExpressionAccess().getColonKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeExpression__Group_1__2__Impl
	rule__RangeExpression__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExpressionAccess().getOperandsAssignment_1_2()); }
(rule__RangeExpression__OperandsAssignment_1_2)
{ after(grammarAccess.getRangeExpressionAccess().getOperandsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeExpression__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeExpression__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExpressionAccess().getGroup_1_3()); }
(rule__RangeExpression__Group_1_3__0)?
{ after(grammarAccess.getRangeExpressionAccess().getGroup_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__RangeExpression__Group_1_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeExpression__Group_1_3__0__Impl
	rule__RangeExpression__Group_1_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__Group_1_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExpressionAccess().getColonKeyword_1_3_0()); }

	':' 

{ after(grammarAccess.getRangeExpressionAccess().getColonKeyword_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeExpression__Group_1_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeExpression__Group_1_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__Group_1_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExpressionAccess().getOperandsAssignment_1_3_1()); }
(rule__RangeExpression__OperandsAssignment_1_3_1)
{ after(grammarAccess.getRangeExpressionAccess().getOperandsAssignment_1_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ImpliesExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImpliesExpression__Group__0__Impl
	rule__ImpliesExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImpliesExpressionAccess().getLogicalOrExpressionParserRuleCall_0()); }
	ruleLogicalOrExpression
{ after(grammarAccess.getImpliesExpressionAccess().getLogicalOrExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ImpliesExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImpliesExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImpliesExpressionAccess().getGroup_1()); }
(rule__ImpliesExpression__Group_1__0)?
{ after(grammarAccess.getImpliesExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ImpliesExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImpliesExpression__Group_1__0__Impl
	rule__ImpliesExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImpliesExpressionAccess().getImpliesExpressionLeftOperandAction_1_0()); }
(

)
{ after(grammarAccess.getImpliesExpressionAccess().getImpliesExpressionLeftOperandAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ImpliesExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImpliesExpression__Group_1__1__Impl
	rule__ImpliesExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImpliesExpressionAccess().getOperatorAssignment_1_1()); }
(rule__ImpliesExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getImpliesExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ImpliesExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImpliesExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImpliesExpressionAccess().getRightOperandAssignment_1_2()); }
(rule__ImpliesExpression__RightOperandAssignment_1_2)
{ after(grammarAccess.getImpliesExpressionAccess().getRightOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LogicalOrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group__0__Impl
	rule__LogicalOrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getLogicalAndExpressionParserRuleCall_0()); }
	ruleLogicalAndExpression
{ after(grammarAccess.getLogicalOrExpressionAccess().getLogicalAndExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalOrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getGroup_1()); }
(rule__LogicalOrExpression__Group_1__0)*
{ after(grammarAccess.getLogicalOrExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalOrExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group_1__0__Impl
	rule__LogicalOrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getLogicalOrExpressionLeftOperandAction_1_0()); }
(

)
{ after(grammarAccess.getLogicalOrExpressionAccess().getLogicalOrExpressionLeftOperandAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalOrExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group_1__1__Impl
	rule__LogicalOrExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getOperatorAssignment_1_1()); }
(rule__LogicalOrExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getLogicalOrExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalOrExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getRightOperandAssignment_1_2()); }
(rule__LogicalOrExpression__RightOperandAssignment_1_2)
{ after(grammarAccess.getLogicalOrExpressionAccess().getRightOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LogicalAndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group__0__Impl
	rule__LogicalAndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getEqualityExpressionParserRuleCall_0()); }
	ruleEqualityExpression
{ after(grammarAccess.getLogicalAndExpressionAccess().getEqualityExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalAndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getGroup_1()); }
(rule__LogicalAndExpression__Group_1__0)*
{ after(grammarAccess.getLogicalAndExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalAndExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group_1__0__Impl
	rule__LogicalAndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getLogicalAndExpressionLeftOperandAction_1_0()); }
(

)
{ after(grammarAccess.getLogicalAndExpressionAccess().getLogicalAndExpressionLeftOperandAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalAndExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group_1__1__Impl
	rule__LogicalAndExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getOperatorAssignment_1_1()); }
(rule__LogicalAndExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getLogicalAndExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalAndExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getRightOperandAssignment_1_2()); }
(rule__LogicalAndExpression__RightOperandAssignment_1_2)
{ after(grammarAccess.getLogicalAndExpressionAccess().getRightOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__EqualityExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group__0__Impl
	rule__EqualityExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); }
	ruleRelationalExpression
{ after(grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getGroup_1()); }
(rule__EqualityExpression__Group_1__0)*
{ after(grammarAccess.getEqualityExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EqualityExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group_1__0__Impl
	rule__EqualityExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLeftOperandAction_1_0()); }
(

)
{ after(grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLeftOperandAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group_1__1__Impl
	rule__EqualityExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getOperatorAssignment_1_1()); }
(rule__EqualityExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getEqualityExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getRightOperandAssignment_1_2()); }
(rule__EqualityExpression__RightOperandAssignment_1_2)
{ after(grammarAccess.getEqualityExpressionAccess().getRightOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__RelationalExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group__0__Impl
	rule__RelationalExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getAdditiveExpressionParserRuleCall_0()); }
	ruleAdditiveExpression
{ after(grammarAccess.getRelationalExpressionAccess().getAdditiveExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup_1()); }
(rule__RelationalExpression__Group_1__0)?
{ after(grammarAccess.getRelationalExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getAlternatives_1_0()); }
(rule__RelationalExpression__Alternatives_1_0)
{ after(grammarAccess.getRelationalExpressionAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__RelationalExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1_0_0__0__Impl
	rule__RelationalExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLeftOperandAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLeftOperandAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1_0_0__1__Impl
	rule__RelationalExpression__Group_1_0_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOperatorAssignment_1_0_0_1()); }
(rule__RelationalExpression__OperatorAssignment_1_0_0_1)
{ after(grammarAccess.getRelationalExpressionAccess().getOperatorAssignment_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1_0_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1_0_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1_0_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getRightOperandAssignment_1_0_0_2()); }
(rule__RelationalExpression__RightOperandAssignment_1_0_0_2)
{ after(grammarAccess.getRelationalExpressionAccess().getRightOperandAssignment_1_0_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__RelationalExpression__Group_1_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1_0_1__0__Impl
	rule__RelationalExpression__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getTypeTestExpressionExpressionAction_1_0_1_0()); }
(

)
{ after(grammarAccess.getRelationalExpressionAccess().getTypeTestExpressionExpressionAction_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1_0_1__1__Impl
	rule__RelationalExpression__Group_1_0_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getIsKeyword_1_0_1_1()); }

	'is' 

{ after(grammarAccess.getRelationalExpressionAccess().getIsKeyword_1_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1_0_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1_0_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1_0_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getTypeSpecifierAssignment_1_0_1_2()); }
(rule__RelationalExpression__TypeSpecifierAssignment_1_0_1_2)
{ after(grammarAccess.getRelationalExpressionAccess().getTypeSpecifierAssignment_1_0_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AdditiveExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group__0__Impl
	rule__AdditiveExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); }
	ruleMultiplicativeExpression
{ after(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup_1()); }
(rule__AdditiveExpression__Group_1__0)*
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditiveExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1__0__Impl
	rule__AdditiveExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftOperandAction_1_0()); }
(

)
{ after(grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftOperandAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1__1__Impl
	rule__AdditiveExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getOperatorAssignment_1_1()); }
(rule__AdditiveExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getAdditiveExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getRightOperandAssignment_1_2()); }
(rule__AdditiveExpression__RightOperandAssignment_1_2)
{ after(grammarAccess.getAdditiveExpressionAccess().getRightOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MultiplicativeExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group__0__Impl
	rule__MultiplicativeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getPowerExpressionParserRuleCall_0()); }
	rulePowerExpression
{ after(grammarAccess.getMultiplicativeExpressionAccess().getPowerExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1()); }
(rule__MultiplicativeExpression__Group_1__0)*
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicativeExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1__0__Impl
	rule__MultiplicativeExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftOperandAction_1_0()); }
(

)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftOperandAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1__1__Impl
	rule__MultiplicativeExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOperatorAssignment_1_1()); }
(rule__MultiplicativeExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getRightOperandAssignment_1_2()); }
(rule__MultiplicativeExpression__RightOperandAssignment_1_2)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getRightOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PowerExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PowerExpression__Group__0__Impl
	rule__PowerExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerExpressionAccess().getPrefixUnaryExpressionParserRuleCall_0()); }
	rulePrefixUnaryExpression
{ after(grammarAccess.getPowerExpressionAccess().getPrefixUnaryExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PowerExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PowerExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerExpressionAccess().getGroup_1()); }
(rule__PowerExpression__Group_1__0)?
{ after(grammarAccess.getPowerExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PowerExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PowerExpression__Group_1__0__Impl
	rule__PowerExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerExpressionAccess().getPowerExpressionLeftOperandAction_1_0()); }
(

)
{ after(grammarAccess.getPowerExpressionAccess().getPowerExpressionLeftOperandAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PowerExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PowerExpression__Group_1__1__Impl
	rule__PowerExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerExpressionAccess().getOperatorAssignment_1_1()); }
(rule__PowerExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getPowerExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PowerExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PowerExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerExpressionAccess().getRightOperandAssignment_1_2()); }
(rule__PowerExpression__RightOperandAssignment_1_2)
{ after(grammarAccess.getPowerExpressionAccess().getRightOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PrefixUnaryExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrefixUnaryExpression__Group_1__0__Impl
	rule__PrefixUnaryExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixUnaryExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrefixUnaryExpressionAccess().getUnaryExpressionAction_1_0()); }
(

)
{ after(grammarAccess.getPrefixUnaryExpressionAccess().getUnaryExpressionAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrefixUnaryExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrefixUnaryExpression__Group_1__1__Impl
	rule__PrefixUnaryExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixUnaryExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrefixUnaryExpressionAccess().getOperatorAssignment_1_1()); }
(rule__PrefixUnaryExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getPrefixUnaryExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrefixUnaryExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrefixUnaryExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixUnaryExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrefixUnaryExpressionAccess().getOperandAssignment_1_2()); }
(rule__PrefixUnaryExpression__OperandAssignment_1_2)
{ after(grammarAccess.getPrefixUnaryExpressionAccess().getOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PostfixUnaryExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixUnaryExpression__Group__0__Impl
	rule__PostfixUnaryExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixUnaryExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixUnaryExpressionAccess().getAlternatives_0()); }
(rule__PostfixUnaryExpression__Alternatives_0)
{ after(grammarAccess.getPostfixUnaryExpressionAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PostfixUnaryExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixUnaryExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixUnaryExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixUnaryExpressionAccess().getGroup_1()); }
(rule__PostfixUnaryExpression__Group_1__0)?
{ after(grammarAccess.getPostfixUnaryExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PostfixUnaryExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixUnaryExpression__Group_1__0__Impl
	rule__PostfixUnaryExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixUnaryExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixUnaryExpressionAccess().getUnaryExpressionOperandAction_1_0()); }
(

)
{ after(grammarAccess.getPostfixUnaryExpressionAccess().getUnaryExpressionOperandAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PostfixUnaryExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixUnaryExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixUnaryExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixUnaryExpressionAccess().getOperatorAssignment_1_1()); }
(rule__PostfixUnaryExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getPostfixUnaryExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MemberFeatureCall__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group__0__Impl
	rule__MemberFeatureCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getPrimaryExpressionParserRuleCall_0()); }
	rulePrimaryExpression
{ after(grammarAccess.getMemberFeatureCallAccess().getPrimaryExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MemberFeatureCall__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getAlternatives_1()); }
(rule__MemberFeatureCall__Alternatives_1)*
{ after(grammarAccess.getMemberFeatureCallAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MemberFeatureCall__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_0__0__Impl
	rule__MemberFeatureCall__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getArrayElementAccessArrayAction_1_0_0()); }
(

)
{ after(grammarAccess.getMemberFeatureCallAccess().getArrayElementAccessArrayAction_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MemberFeatureCall__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_0__1__Impl
	rule__MemberFeatureCall__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getLeftSquareBracketKeyword_1_0_1()); }

	'[' 

{ after(grammarAccess.getMemberFeatureCallAccess().getLeftSquareBracketKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MemberFeatureCall__Group_1_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_0__2__Impl
	rule__MemberFeatureCall__Group_1_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getSubscriptsAssignment_1_0_2()); }
(rule__MemberFeatureCall__SubscriptsAssignment_1_0_2)
{ after(grammarAccess.getMemberFeatureCallAccess().getSubscriptsAssignment_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MemberFeatureCall__Group_1_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_0__3__Impl
	rule__MemberFeatureCall__Group_1_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getGroup_1_0_3()); }
(rule__MemberFeatureCall__Group_1_0_3__0)*
{ after(grammarAccess.getMemberFeatureCallAccess().getGroup_1_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MemberFeatureCall__Group_1_0__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_0__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_0__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getRightSquareBracketKeyword_1_0_4()); }

	']' 

{ after(grammarAccess.getMemberFeatureCallAccess().getRightSquareBracketKeyword_1_0_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__MemberFeatureCall__Group_1_0_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_0_3__0__Impl
	rule__MemberFeatureCall__Group_1_0_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_0_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getCommaKeyword_1_0_3_0()); }

	',' 

{ after(grammarAccess.getMemberFeatureCallAccess().getCommaKeyword_1_0_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MemberFeatureCall__Group_1_0_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_0_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_0_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getSubscriptsAssignment_1_0_3_1()); }
(rule__MemberFeatureCall__SubscriptsAssignment_1_0_3_1)
{ after(grammarAccess.getMemberFeatureCallAccess().getSubscriptsAssignment_1_0_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MemberFeatureCall__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_1__0__Impl
	rule__MemberFeatureCall__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getMemberVariableAccessTargetAction_1_1_0()); }
(

)
{ after(grammarAccess.getMemberFeatureCallAccess().getMemberVariableAccessTargetAction_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MemberFeatureCall__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_1__1__Impl
	rule__MemberFeatureCall__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getFullStopKeyword_1_1_1()); }

	'.' 

{ after(grammarAccess.getMemberFeatureCallAccess().getFullStopKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MemberFeatureCall__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getMemberVariableAssignment_1_1_2()); }
(rule__MemberFeatureCall__MemberVariableAssignment_1_1_2)
{ after(grammarAccess.getMemberFeatureCallAccess().getMemberVariableAssignment_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MemberFeatureCall__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_2__0__Impl
	rule__MemberFeatureCall__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getFunctionCallArgumentsAction_1_2_0()); }
(

)
{ after(grammarAccess.getMemberFeatureCallAccess().getFunctionCallArgumentsAction_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MemberFeatureCall__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_2__1__Impl
	rule__MemberFeatureCall__Group_1_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getFullStopKeyword_1_2_1()); }

	'.' 

{ after(grammarAccess.getMemberFeatureCallAccess().getFullStopKeyword_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MemberFeatureCall__Group_1_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_2__2__Impl
	rule__MemberFeatureCall__Group_1_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getFeatureAssignment_1_2_2()); }
(rule__MemberFeatureCall__FeatureAssignment_1_2_2)
{ after(grammarAccess.getMemberFeatureCallAccess().getFeatureAssignment_1_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MemberFeatureCall__Group_1_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_2__3__Impl
	rule__MemberFeatureCall__Group_1_2__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getLeftParenthesisKeyword_1_2_3()); }

	'(' 

{ after(grammarAccess.getMemberFeatureCallAccess().getLeftParenthesisKeyword_1_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MemberFeatureCall__Group_1_2__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_2__4__Impl
	rule__MemberFeatureCall__Group_1_2__5
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_2__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getGroup_1_2_4()); }
(rule__MemberFeatureCall__Group_1_2_4__0)?
{ after(grammarAccess.getMemberFeatureCallAccess().getGroup_1_2_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MemberFeatureCall__Group_1_2__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_2__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_2__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getRightParenthesisKeyword_1_2_5()); }

	')' 

{ after(grammarAccess.getMemberFeatureCallAccess().getRightParenthesisKeyword_1_2_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__MemberFeatureCall__Group_1_2_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_2_4__0__Impl
	rule__MemberFeatureCall__Group_1_2_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_2_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getArgumentsAssignment_1_2_4_0()); }
(rule__MemberFeatureCall__ArgumentsAssignment_1_2_4_0)
{ after(grammarAccess.getMemberFeatureCallAccess().getArgumentsAssignment_1_2_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MemberFeatureCall__Group_1_2_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_2_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_2_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getGroup_1_2_4_1()); }
(rule__MemberFeatureCall__Group_1_2_4_1__0)*
{ after(grammarAccess.getMemberFeatureCallAccess().getGroup_1_2_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MemberFeatureCall__Group_1_2_4_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_2_4_1__0__Impl
	rule__MemberFeatureCall__Group_1_2_4_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_2_4_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getCommaKeyword_1_2_4_1_0()); }

	',' 

{ after(grammarAccess.getMemberFeatureCallAccess().getCommaKeyword_1_2_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MemberFeatureCall__Group_1_2_4_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_2_4_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_2_4_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getArgumentsAssignment_1_2_4_1_1()); }
(rule__MemberFeatureCall__ArgumentsAssignment_1_2_4_1_1)
{ after(grammarAccess.getMemberFeatureCallAccess().getArgumentsAssignment_1_2_4_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MemberFeatureCall__Group_1_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_3__0__Impl
	rule__MemberFeatureCall__Group_1_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getIterationCallTargetAction_1_3_0()); }
(

)
{ after(grammarAccess.getMemberFeatureCallAccess().getIterationCallTargetAction_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MemberFeatureCall__Group_1_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_3__1__Impl
	rule__MemberFeatureCall__Group_1_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getFullStopKeyword_1_3_1()); }

	'.' 

{ after(grammarAccess.getMemberFeatureCallAccess().getFullStopKeyword_1_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MemberFeatureCall__Group_1_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_3__2__Impl
	rule__MemberFeatureCall__Group_1_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getIdentifierAssignment_1_3_2()); }
(rule__MemberFeatureCall__IdentifierAssignment_1_3_2)
{ after(grammarAccess.getMemberFeatureCallAccess().getIdentifierAssignment_1_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MemberFeatureCall__Group_1_3__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_3__3__Impl
	rule__MemberFeatureCall__Group_1_3__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_3__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getLeftParenthesisKeyword_1_3_3()); }

	'(' 

{ after(grammarAccess.getMemberFeatureCallAccess().getLeftParenthesisKeyword_1_3_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MemberFeatureCall__Group_1_3__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_3__4__Impl
	rule__MemberFeatureCall__Group_1_3__5
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_3__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getIterationVariablesAssignment_1_3_4()); }
(rule__MemberFeatureCall__IterationVariablesAssignment_1_3_4)
{ after(grammarAccess.getMemberFeatureCallAccess().getIterationVariablesAssignment_1_3_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MemberFeatureCall__Group_1_3__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_3__5__Impl
	rule__MemberFeatureCall__Group_1_3__6
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_3__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getGroup_1_3_5()); }
(rule__MemberFeatureCall__Group_1_3_5__0)*
{ after(grammarAccess.getMemberFeatureCallAccess().getGroup_1_3_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MemberFeatureCall__Group_1_3__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_3__6__Impl
	rule__MemberFeatureCall__Group_1_3__7
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_3__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getGroup_1_3_6()); }
(rule__MemberFeatureCall__Group_1_3_6__0)?
{ after(grammarAccess.getMemberFeatureCallAccess().getGroup_1_3_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MemberFeatureCall__Group_1_3__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_3__7__Impl
	rule__MemberFeatureCall__Group_1_3__8
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_3__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getGroup_1_3_7()); }
(rule__MemberFeatureCall__Group_1_3_7__0)?
{ after(grammarAccess.getMemberFeatureCallAccess().getGroup_1_3_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MemberFeatureCall__Group_1_3__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_3__8__Impl
	rule__MemberFeatureCall__Group_1_3__9
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_3__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getVerticalLineKeyword_1_3_8()); }

	'|' 

{ after(grammarAccess.getMemberFeatureCallAccess().getVerticalLineKeyword_1_3_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MemberFeatureCall__Group_1_3__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_3__9__Impl
	rule__MemberFeatureCall__Group_1_3__10
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_3__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getExpressionAssignment_1_3_9()); }
(rule__MemberFeatureCall__ExpressionAssignment_1_3_9)
{ after(grammarAccess.getMemberFeatureCallAccess().getExpressionAssignment_1_3_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MemberFeatureCall__Group_1_3__10
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_3__10__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_3__10__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getRightParenthesisKeyword_1_3_10()); }

	')' 

{ after(grammarAccess.getMemberFeatureCallAccess().getRightParenthesisKeyword_1_3_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}
























rule__MemberFeatureCall__Group_1_3_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_3_5__0__Impl
	rule__MemberFeatureCall__Group_1_3_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_3_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getCommaKeyword_1_3_5_0()); }

	',' 

{ after(grammarAccess.getMemberFeatureCallAccess().getCommaKeyword_1_3_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MemberFeatureCall__Group_1_3_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_3_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_3_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getIterationVariablesAssignment_1_3_5_1()); }
(rule__MemberFeatureCall__IterationVariablesAssignment_1_3_5_1)
{ after(grammarAccess.getMemberFeatureCallAccess().getIterationVariablesAssignment_1_3_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MemberFeatureCall__Group_1_3_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_3_6__0__Impl
	rule__MemberFeatureCall__Group_1_3_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_3_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getSemicolonKeyword_1_3_6_0()); }

	';' 

{ after(grammarAccess.getMemberFeatureCallAccess().getSemicolonKeyword_1_3_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MemberFeatureCall__Group_1_3_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_3_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_3_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getAccumulatorAssignment_1_3_6_1()); }
(rule__MemberFeatureCall__AccumulatorAssignment_1_3_6_1)
{ after(grammarAccess.getMemberFeatureCallAccess().getAccumulatorAssignment_1_3_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MemberFeatureCall__Group_1_3_7__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_3_7__0__Impl
	rule__MemberFeatureCall__Group_1_3_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_3_7__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getSemicolonKeyword_1_3_7_0()); }

	';' 

{ after(grammarAccess.getMemberFeatureCallAccess().getSemicolonKeyword_1_3_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MemberFeatureCall__Group_1_3_7__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberFeatureCall__Group_1_3_7__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__Group_1_3_7__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getBreakConditionAssignment_1_3_7_1()); }
(rule__MemberFeatureCall__BreakConditionAssignment_1_3_7_1)
{ after(grammarAccess.getMemberFeatureCallAccess().getBreakConditionAssignment_1_3_7_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IterationAccumulator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationAccumulator__Group__0__Impl
	rule__IterationAccumulator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationAccumulator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterationAccumulatorAccess().getNameAssignment_0()); }
(rule__IterationAccumulator__NameAssignment_0)
{ after(grammarAccess.getIterationAccumulatorAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IterationAccumulator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationAccumulator__Group__1__Impl
	rule__IterationAccumulator__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationAccumulator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterationAccumulatorAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getIterationAccumulatorAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IterationAccumulator__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationAccumulator__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationAccumulator__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterationAccumulatorAccess().getInitializerAssignment_2()); }
(rule__IterationAccumulator__InitializerAssignment_2)
{ after(grammarAccess.getIterationAccumulatorAccess().getInitializerAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__RealLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RealLiteral__Group__0__Impl
	rule__RealLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RealLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealLiteralAccess().getDataAssignment_0()); }
(rule__RealLiteral__DataAssignment_0)
{ after(grammarAccess.getRealLiteralAccess().getDataAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RealLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RealLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RealLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealLiteralAccess().getUnitAssignment_1()); }
(rule__RealLiteral__UnitAssignment_1)
{ after(grammarAccess.getRealLiteralAccess().getUnitAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RealData__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RealData__Group__0__Impl
	rule__RealData__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RealData__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealDataAccess().getValidIntParserRuleCall_0()); }
	ruleValidInt
{ after(grammarAccess.getRealDataAccess().getValidIntParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RealData__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RealData__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RealData__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealDataAccess().getAlternatives_1()); }
(rule__RealData__Alternatives_1)
{ after(grammarAccess.getRealDataAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RealData__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RealData__Group_1_0__0__Impl
	rule__RealData__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RealData__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealDataAccess().getFullStopKeyword_1_0_0()); }

	'.' 

{ after(grammarAccess.getRealDataAccess().getFullStopKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RealData__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RealData__Group_1_0__1__Impl
	rule__RealData__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RealData__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealDataAccess().getValidIntParserRuleCall_1_0_1()); }
	ruleValidInt
{ after(grammarAccess.getRealDataAccess().getValidIntParserRuleCall_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RealData__Group_1_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RealData__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RealData__Group_1_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealDataAccess().getAlternatives_1_0_2()); }
(rule__RealData__Alternatives_1_0_2)?
{ after(grammarAccess.getRealDataAccess().getAlternatives_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__RealData__Group_1_0_2_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RealData__Group_1_0_2_2__0__Impl
	rule__RealData__Group_1_0_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RealData__Group_1_0_2_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealDataAccess().getETerminalRuleCall_1_0_2_2_0()); }
	RULE_E
{ after(grammarAccess.getRealDataAccess().getETerminalRuleCall_1_0_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RealData__Group_1_0_2_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RealData__Group_1_0_2_2__1__Impl
	rule__RealData__Group_1_0_2_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RealData__Group_1_0_2_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealDataAccess().getAlternatives_1_0_2_2_1()); }
(rule__RealData__Alternatives_1_0_2_2_1)
{ after(grammarAccess.getRealDataAccess().getAlternatives_1_0_2_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RealData__Group_1_0_2_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RealData__Group_1_0_2_2__2__Impl
	rule__RealData__Group_1_0_2_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RealData__Group_1_0_2_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealDataAccess().getValidIntParserRuleCall_1_0_2_2_2()); }
	ruleValidInt
{ after(grammarAccess.getRealDataAccess().getValidIntParserRuleCall_1_0_2_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RealData__Group_1_0_2_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RealData__Group_1_0_2_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RealData__Group_1_0_2_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealDataAccess().getIJTerminalRuleCall_1_0_2_2_3()); }
(	RULE_IJ)?
{ after(grammarAccess.getRealDataAccess().getIJTerminalRuleCall_1_0_2_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__RealData__Group_1_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RealData__Group_1_1_1__0__Impl
	rule__RealData__Group_1_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RealData__Group_1_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealDataAccess().getETerminalRuleCall_1_1_1_0()); }
	RULE_E
{ after(grammarAccess.getRealDataAccess().getETerminalRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RealData__Group_1_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RealData__Group_1_1_1__1__Impl
	rule__RealData__Group_1_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RealData__Group_1_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealDataAccess().getAlternatives_1_1_1_1()); }
(rule__RealData__Alternatives_1_1_1_1)
{ after(grammarAccess.getRealDataAccess().getAlternatives_1_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RealData__Group_1_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RealData__Group_1_1_1__2__Impl
	rule__RealData__Group_1_1_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RealData__Group_1_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealDataAccess().getValidIntParserRuleCall_1_1_1_2()); }
	ruleValidInt
{ after(grammarAccess.getRealDataAccess().getValidIntParserRuleCall_1_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RealData__Group_1_1_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RealData__Group_1_1_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RealData__Group_1_1_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealDataAccess().getIJTerminalRuleCall_1_1_1_3()); }
(	RULE_IJ)?
{ after(grammarAccess.getRealDataAccess().getIJTerminalRuleCall_1_1_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__IntegerLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerLiteral__Group__0__Impl
	rule__IntegerLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerLiteralAccess().getDataAssignment_0()); }
(rule__IntegerLiteral__DataAssignment_0)
{ after(grammarAccess.getIntegerLiteralAccess().getDataAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerLiteralAccess().getUnitAssignment_1()); }
(rule__IntegerLiteral__UnitAssignment_1)
{ after(grammarAccess.getIntegerLiteralAccess().getUnitAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IntegerData__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerData__Group__0__Impl
	rule__IntegerData__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerData__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerDataAccess().getValidIntParserRuleCall_0()); }
	ruleValidInt
{ after(grammarAccess.getIntegerDataAccess().getValidIntParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerData__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerData__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerData__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerDataAccess().getIJTerminalRuleCall_1()); }
(	RULE_IJ)?
{ after(grammarAccess.getIntegerDataAccess().getIJTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BooleanLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanLiteral__Group__0__Impl
	rule__BooleanLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0()); }
(

)
{ after(grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanLiteralAccess().getAlternatives_1()); }
(rule__BooleanLiteral__Alternatives_1)
{ after(grammarAccess.getBooleanLiteralAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TemplateExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemplateExpression__Group__0__Impl
	rule__TemplateExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TemplateExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemplateExpressionAccess().getTemplateExpressionAction_0()); }
(

)
{ after(grammarAccess.getTemplateExpressionAccess().getTemplateExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemplateExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemplateExpression__Group__1__Impl
	rule__TemplateExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TemplateExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemplateExpressionAccess().getQuotationMarkQuotationMarkQuotationMarkKeyword_1()); }

	'"""' 

{ after(grammarAccess.getTemplateExpressionAccess().getQuotationMarkQuotationMarkQuotationMarkKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemplateExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemplateExpression__Group__2__Impl
	rule__TemplateExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TemplateExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemplateExpressionAccess().getSegmentsAssignment_2()); }
(rule__TemplateExpression__SegmentsAssignment_2)?
{ after(grammarAccess.getTemplateExpressionAccess().getSegmentsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemplateExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemplateExpression__Group__3__Impl
	rule__TemplateExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TemplateExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemplateExpressionAccess().getGroup_3()); }
(rule__TemplateExpression__Group_3__0)*
{ after(grammarAccess.getTemplateExpressionAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemplateExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemplateExpression__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TemplateExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemplateExpressionAccess().getQuotationMarkQuotationMarkQuotationMarkKeyword_4()); }

	'"""' 

{ after(grammarAccess.getTemplateExpressionAccess().getQuotationMarkQuotationMarkQuotationMarkKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__TemplateExpression__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemplateExpression__Group_3__0__Impl
	rule__TemplateExpression__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TemplateExpression__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemplateExpressionAccess().getSegmentsAssignment_3_0()); }
(rule__TemplateExpression__SegmentsAssignment_3_0)
{ after(grammarAccess.getTemplateExpressionAccess().getSegmentsAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemplateExpression__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemplateExpression__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TemplateExpression__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemplateExpressionAccess().getSegmentsAssignment_3_1()); }
(rule__TemplateExpression__SegmentsAssignment_3_1)?
{ after(grammarAccess.getTemplateExpressionAccess().getSegmentsAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExpressionTemplateSegment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionTemplateSegment__Group__0__Impl
	rule__ExpressionTemplateSegment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionTemplateSegment__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionTemplateSegmentAccess().getLeftPointingDoubleAngleQuotationMarkKeyword_0()); }

	'\u00AB' 

{ after(grammarAccess.getExpressionTemplateSegmentAccess().getLeftPointingDoubleAngleQuotationMarkKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionTemplateSegment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionTemplateSegment__Group__1__Impl
	rule__ExpressionTemplateSegment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionTemplateSegment__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionTemplateSegmentAccess().getExpressionAssignment_1()); }
(rule__ExpressionTemplateSegment__ExpressionAssignment_1)
{ after(grammarAccess.getExpressionTemplateSegmentAccess().getExpressionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionTemplateSegment__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionTemplateSegment__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionTemplateSegment__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionTemplateSegmentAccess().getRightPointingDoubleAngleQuotationMarkKeyword_2()); }

	'\u00BB' 

{ after(grammarAccess.getExpressionTemplateSegmentAccess().getRightPointingDoubleAngleQuotationMarkKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__VariableReference__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableReference__Group__0__Impl
	rule__VariableReference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getVariableReferenceAction_0()); }
(

)
{ after(grammarAccess.getVariableReferenceAccess().getVariableReferenceAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableReference__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableReference__Group__1__Impl
	rule__VariableReference__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getFeatureAssignment_1()); }
(rule__VariableReference__FeatureAssignment_1)
{ after(grammarAccess.getVariableReferenceAccess().getFeatureAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableReference__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableReference__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getGroup_2()); }
(rule__VariableReference__Group_2__0)?
{ after(grammarAccess.getVariableReferenceAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__VariableReference__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableReference__Group_2__0__Impl
	rule__VariableReference__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getLeftCurlyBracketKeyword_2_0()); }

	'{' 

{ after(grammarAccess.getVariableReferenceAccess().getLeftCurlyBracketKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableReference__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableReference__Group_2__1__Impl
	rule__VariableReference__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getStepExpressionAssignment_2_1()); }
(rule__VariableReference__StepExpressionAssignment_2_1)
{ after(grammarAccess.getVariableReferenceAccess().getStepExpressionAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableReference__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableReference__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getRightCurlyBracketKeyword_2_2()); }

	'}' 

{ after(grammarAccess.getVariableReferenceAccess().getRightCurlyBracketKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FunctionCall__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__0__Impl
	rule__FunctionCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getFunctionCallAction_0()); }
(

)
{ after(grammarAccess.getFunctionCallAccess().getFunctionCallAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__1__Impl
	rule__FunctionCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getFeatureAssignment_1()); }
(rule__FunctionCall__FeatureAssignment_1)
{ after(grammarAccess.getFunctionCallAccess().getFeatureAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__2__Impl
	rule__FunctionCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__3__Impl
	rule__FunctionCall__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getGroup_3()); }
(rule__FunctionCall__Group_3__0)?
{ after(grammarAccess.getFunctionCallAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__FunctionCall__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_3__0__Impl
	rule__FunctionCall__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getArgumentsAssignment_3_0()); }
(rule__FunctionCall__ArgumentsAssignment_3_0)
{ after(grammarAccess.getFunctionCallAccess().getArgumentsAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getGroup_3_1()); }
(rule__FunctionCall__Group_3_1__0)*
{ after(grammarAccess.getFunctionCallAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionCall__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_3_1__0__Impl
	rule__FunctionCall__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getCommaKeyword_3_1_0()); }

	',' 

{ after(grammarAccess.getFunctionCallAccess().getCommaKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getArgumentsAssignment_3_1_1()); }
(rule__FunctionCall__ArgumentsAssignment_3_1_1)
{ after(grammarAccess.getFunctionCallAccess().getArgumentsAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedVariableReference__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedVariableReference__Group__0__Impl
	rule__QualifiedVariableReference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedVariableReference__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedVariableReferenceAccess().getVariableReferenceAction_0()); }
(

)
{ after(grammarAccess.getQualifiedVariableReferenceAccess().getVariableReferenceAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedVariableReference__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedVariableReference__Group__1__Impl
	rule__QualifiedVariableReference__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedVariableReference__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedVariableReferenceAccess().getColonColonKeyword_1()); }

	'::' 

{ after(grammarAccess.getQualifiedVariableReferenceAccess().getColonColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedVariableReference__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedVariableReference__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedVariableReference__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedVariableReferenceAccess().getFeatureAssignment_2()); }
(rule__QualifiedVariableReference__FeatureAssignment_2)
{ after(grammarAccess.getQualifiedVariableReferenceAccess().getFeatureAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__QualifiedFunctionCall__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedFunctionCall__Group__0__Impl
	rule__QualifiedFunctionCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedFunctionCall__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedFunctionCallAccess().getFunctionCallAction_0()); }
(

)
{ after(grammarAccess.getQualifiedFunctionCallAccess().getFunctionCallAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedFunctionCall__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedFunctionCall__Group__1__Impl
	rule__QualifiedFunctionCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedFunctionCall__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedFunctionCallAccess().getColonColonKeyword_1()); }

	'::' 

{ after(grammarAccess.getQualifiedFunctionCallAccess().getColonColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedFunctionCall__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedFunctionCall__Group__2__Impl
	rule__QualifiedFunctionCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedFunctionCall__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedFunctionCallAccess().getFeatureAssignment_2()); }
(rule__QualifiedFunctionCall__FeatureAssignment_2)
{ after(grammarAccess.getQualifiedFunctionCallAccess().getFeatureAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedFunctionCall__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedFunctionCall__Group__3__Impl
	rule__QualifiedFunctionCall__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedFunctionCall__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedFunctionCallAccess().getLeftParenthesisKeyword_3()); }

	'(' 

{ after(grammarAccess.getQualifiedFunctionCallAccess().getLeftParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedFunctionCall__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedFunctionCall__Group__4__Impl
	rule__QualifiedFunctionCall__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedFunctionCall__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedFunctionCallAccess().getGroup_4()); }
(rule__QualifiedFunctionCall__Group_4__0)?
{ after(grammarAccess.getQualifiedFunctionCallAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedFunctionCall__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedFunctionCall__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedFunctionCall__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedFunctionCallAccess().getRightParenthesisKeyword_5()); }

	')' 

{ after(grammarAccess.getQualifiedFunctionCallAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__QualifiedFunctionCall__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedFunctionCall__Group_4__0__Impl
	rule__QualifiedFunctionCall__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedFunctionCall__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedFunctionCallAccess().getArgumentsAssignment_4_0()); }
(rule__QualifiedFunctionCall__ArgumentsAssignment_4_0)
{ after(grammarAccess.getQualifiedFunctionCallAccess().getArgumentsAssignment_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedFunctionCall__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedFunctionCall__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedFunctionCall__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedFunctionCallAccess().getGroup_4_1()); }
(rule__QualifiedFunctionCall__Group_4_1__0)*
{ after(grammarAccess.getQualifiedFunctionCallAccess().getGroup_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedFunctionCall__Group_4_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedFunctionCall__Group_4_1__0__Impl
	rule__QualifiedFunctionCall__Group_4_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedFunctionCall__Group_4_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedFunctionCallAccess().getCommaKeyword_4_1_0()); }

	',' 

{ after(grammarAccess.getQualifiedFunctionCallAccess().getCommaKeyword_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedFunctionCall__Group_4_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedFunctionCall__Group_4_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedFunctionCall__Group_4_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedFunctionCallAccess().getArgumentsAssignment_4_1_1()); }
(rule__QualifiedFunctionCall__ArgumentsAssignment_4_1_1)
{ after(grammarAccess.getQualifiedFunctionCallAccess().getArgumentsAssignment_4_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RangeStepExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeStepExpression__Group__0__Impl
	rule__RangeStepExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeStepExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeStepExpressionAccess().getAdditiveStepExpressionParserRuleCall_0()); }
	ruleAdditiveStepExpression
{ after(grammarAccess.getRangeStepExpressionAccess().getAdditiveStepExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeStepExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeStepExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeStepExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeStepExpressionAccess().getGroup_1()); }
(rule__RangeStepExpression__Group_1__0)?
{ after(grammarAccess.getRangeStepExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RangeStepExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeStepExpression__Group_1__0__Impl
	rule__RangeStepExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeStepExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeStepExpressionAccess().getRangeStepExpressionStartAction_1_0()); }
(

)
{ after(grammarAccess.getRangeStepExpressionAccess().getRangeStepExpressionStartAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeStepExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeStepExpression__Group_1__1__Impl
	rule__RangeStepExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeStepExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeStepExpressionAccess().getFullStopFullStopKeyword_1_1()); }

	'..' 

{ after(grammarAccess.getRangeStepExpressionAccess().getFullStopFullStopKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeStepExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeStepExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeStepExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeStepExpressionAccess().getEndAssignment_1_2()); }
(rule__RangeStepExpression__EndAssignment_1_2)
{ after(grammarAccess.getRangeStepExpressionAccess().getEndAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AdditiveStepExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveStepExpression__Group__0__Impl
	rule__AdditiveStepExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveStepExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveStepExpressionAccess().getNegateStepExpressionParserRuleCall_0()); }
	ruleNegateStepExpression
{ after(grammarAccess.getAdditiveStepExpressionAccess().getNegateStepExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveStepExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveStepExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveStepExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveStepExpressionAccess().getGroup_1()); }
(rule__AdditiveStepExpression__Group_1__0)*
{ after(grammarAccess.getAdditiveStepExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditiveStepExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveStepExpression__Group_1__0__Impl
	rule__AdditiveStepExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveStepExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveStepExpressionAccess().getAdditiveStepExpressionLeftOperandAction_1_0()); }
(

)
{ after(grammarAccess.getAdditiveStepExpressionAccess().getAdditiveStepExpressionLeftOperandAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveStepExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveStepExpression__Group_1__1__Impl
	rule__AdditiveStepExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveStepExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveStepExpressionAccess().getOperatorAssignment_1_1()); }
(rule__AdditiveStepExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getAdditiveStepExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveStepExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveStepExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveStepExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveStepExpressionAccess().getRightOperandAssignment_1_2()); }
(rule__AdditiveStepExpression__RightOperandAssignment_1_2)
{ after(grammarAccess.getAdditiveStepExpressionAccess().getRightOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NegateStepExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NegateStepExpression__Group_1__0__Impl
	rule__NegateStepExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NegateStepExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegateStepExpressionAccess().getNegateStepExpressionAction_1_0()); }
(

)
{ after(grammarAccess.getNegateStepExpressionAccess().getNegateStepExpressionAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NegateStepExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NegateStepExpression__Group_1__1__Impl
	rule__NegateStepExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NegateStepExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegateStepExpressionAccess().getHyphenMinusKeyword_1_1()); }

	'-' 

{ after(grammarAccess.getNegateStepExpressionAccess().getHyphenMinusKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NegateStepExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NegateStepExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NegateStepExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegateStepExpressionAccess().getOperandAssignment_1_2()); }
(rule__NegateStepExpression__OperandAssignment_1_2)
{ after(grammarAccess.getNegateStepExpressionAccess().getOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__StepN__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StepN__Group__0__Impl
	rule__StepN__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StepN__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStepNAccess().getStepNAction_0()); }
(

)
{ after(grammarAccess.getStepNAccess().getStepNAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StepN__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StepN__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StepN__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStepNAccess().getNTerminalRuleCall_1()); }
	RULE_N
{ after(grammarAccess.getStepNAccess().getNTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ArrayConstructionOperator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayConstructionOperator__Group__0__Impl
	rule__ArrayConstructionOperator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayConstructionOperator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayConstructionOperatorAccess().getLeftCurlyBracketKeyword_0()); }

	'{' 

{ after(grammarAccess.getArrayConstructionOperatorAccess().getLeftCurlyBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayConstructionOperator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayConstructionOperator__Group__1__Impl
	rule__ArrayConstructionOperator__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayConstructionOperator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayConstructionOperatorAccess().getExpressionsAssignment_1()); }
(rule__ArrayConstructionOperator__ExpressionsAssignment_1)
{ after(grammarAccess.getArrayConstructionOperatorAccess().getExpressionsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayConstructionOperator__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayConstructionOperator__Group__2__Impl
	rule__ArrayConstructionOperator__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayConstructionOperator__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayConstructionOperatorAccess().getAlternatives_2()); }
(rule__ArrayConstructionOperator__Alternatives_2)
{ after(grammarAccess.getArrayConstructionOperatorAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayConstructionOperator__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayConstructionOperator__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayConstructionOperator__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayConstructionOperatorAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getArrayConstructionOperatorAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ArrayConstructionOperator__Group_2_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayConstructionOperator__Group_2_0__0__Impl
	rule__ArrayConstructionOperator__Group_2_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayConstructionOperator__Group_2_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayConstructionOperatorAccess().getCommaKeyword_2_0_0()); }

	',' 

{ after(grammarAccess.getArrayConstructionOperatorAccess().getCommaKeyword_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayConstructionOperator__Group_2_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayConstructionOperator__Group_2_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayConstructionOperator__Group_2_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayConstructionOperatorAccess().getExpressionsAssignment_2_0_1()); }
(rule__ArrayConstructionOperator__ExpressionsAssignment_2_0_1)
{ after(grammarAccess.getArrayConstructionOperatorAccess().getExpressionsAssignment_2_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ArrayConstructionOperator__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayConstructionOperator__Group_2_1__0__Impl
	rule__ArrayConstructionOperator__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayConstructionOperator__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayConstructionOperatorAccess().getForKeyword_2_1_0()); }

	'for' 

{ after(grammarAccess.getArrayConstructionOperatorAccess().getForKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayConstructionOperator__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayConstructionOperator__Group_2_1__1__Impl
	rule__ArrayConstructionOperator__Group_2_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayConstructionOperator__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayConstructionOperatorAccess().getIterationClausesAssignment_2_1_1()); }
(rule__ArrayConstructionOperator__IterationClausesAssignment_2_1_1)
{ after(grammarAccess.getArrayConstructionOperatorAccess().getIterationClausesAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayConstructionOperator__Group_2_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayConstructionOperator__Group_2_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayConstructionOperator__Group_2_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayConstructionOperatorAccess().getGroup_2_1_2()); }
(rule__ArrayConstructionOperator__Group_2_1_2__0)*
{ after(grammarAccess.getArrayConstructionOperatorAccess().getGroup_2_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ArrayConstructionOperator__Group_2_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayConstructionOperator__Group_2_1_2__0__Impl
	rule__ArrayConstructionOperator__Group_2_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayConstructionOperator__Group_2_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayConstructionOperatorAccess().getCommaKeyword_2_1_2_0()); }

	',' 

{ after(grammarAccess.getArrayConstructionOperatorAccess().getCommaKeyword_2_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayConstructionOperator__Group_2_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayConstructionOperator__Group_2_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayConstructionOperator__Group_2_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayConstructionOperatorAccess().getIterationClausesAssignment_2_1_2_1()); }
(rule__ArrayConstructionOperator__IterationClausesAssignment_2_1_2_1)
{ after(grammarAccess.getArrayConstructionOperatorAccess().getIterationClausesAssignment_2_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ArrayConstructionIterationClause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayConstructionIterationClause__Group__0__Impl
	rule__ArrayConstructionIterationClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayConstructionIterationClause__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayConstructionIterationClauseAccess().getIterationVariableAssignment_0()); }
(rule__ArrayConstructionIterationClause__IterationVariableAssignment_0)
{ after(grammarAccess.getArrayConstructionIterationClauseAccess().getIterationVariableAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayConstructionIterationClause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayConstructionIterationClause__Group__1__Impl
	rule__ArrayConstructionIterationClause__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayConstructionIterationClause__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayConstructionIterationClauseAccess().getInKeyword_1()); }

	'in' 

{ after(grammarAccess.getArrayConstructionIterationClauseAccess().getInKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayConstructionIterationClause__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayConstructionIterationClause__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayConstructionIterationClause__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayConstructionIterationClauseAccess().getCollectionExpressionAssignment_2()); }
(rule__ArrayConstructionIterationClause__CollectionExpressionAssignment_2)
{ after(grammarAccess.getArrayConstructionIterationClauseAccess().getCollectionExpressionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ArrayConcatenationOperator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayConcatenationOperator__Group__0__Impl
	rule__ArrayConcatenationOperator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayConcatenationOperator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayConcatenationOperatorAccess().getLeftSquareBracketKeyword_0()); }

	'[' 

{ after(grammarAccess.getArrayConcatenationOperatorAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayConcatenationOperator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayConcatenationOperator__Group__1__Impl
	rule__ArrayConcatenationOperator__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayConcatenationOperator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayConcatenationOperatorAccess().getRowsAssignment_1()); }
(rule__ArrayConcatenationOperator__RowsAssignment_1)
{ after(grammarAccess.getArrayConcatenationOperatorAccess().getRowsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayConcatenationOperator__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayConcatenationOperator__Group__2__Impl
	rule__ArrayConcatenationOperator__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayConcatenationOperator__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayConcatenationOperatorAccess().getGroup_2()); }
(rule__ArrayConcatenationOperator__Group_2__0)*
{ after(grammarAccess.getArrayConcatenationOperatorAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayConcatenationOperator__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayConcatenationOperator__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayConcatenationOperator__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayConcatenationOperatorAccess().getRightSquareBracketKeyword_3()); }

	']' 

{ after(grammarAccess.getArrayConcatenationOperatorAccess().getRightSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ArrayConcatenationOperator__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayConcatenationOperator__Group_2__0__Impl
	rule__ArrayConcatenationOperator__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayConcatenationOperator__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayConcatenationOperatorAccess().getSemicolonKeyword_2_0()); }

	';' 

{ after(grammarAccess.getArrayConcatenationOperatorAccess().getSemicolonKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayConcatenationOperator__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayConcatenationOperator__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayConcatenationOperator__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayConcatenationOperatorAccess().getRowsAssignment_2_1()); }
(rule__ArrayConcatenationOperator__RowsAssignment_2_1)
{ after(grammarAccess.getArrayConcatenationOperatorAccess().getRowsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExpressionList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionList__Group__0__Impl
	rule__ExpressionList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getExpressionsAssignment_0()); }
(rule__ExpressionList__ExpressionsAssignment_0)
{ after(grammarAccess.getExpressionListAccess().getExpressionsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getGroup_1()); }
(rule__ExpressionList__Group_1__0)*
{ after(grammarAccess.getExpressionListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExpressionList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionList__Group_1__0__Impl
	rule__ExpressionList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getExpressionListAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getExpressionsAssignment_1_1()); }
(rule__ExpressionList__ExpressionsAssignment_1_1)
{ after(grammarAccess.getExpressionListAccess().getExpressionsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StructConstructionOperator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructConstructionOperator__Group__0__Impl
	rule__StructConstructionOperator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StructConstructionOperator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructConstructionOperatorAccess().getLeftCurlyBracketKeyword_0()); }

	'{' 

{ after(grammarAccess.getStructConstructionOperatorAccess().getLeftCurlyBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StructConstructionOperator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructConstructionOperator__Group__1__Impl
	rule__StructConstructionOperator__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StructConstructionOperator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructConstructionOperatorAccess().getMembersAssignment_1()); }
(rule__StructConstructionOperator__MembersAssignment_1)
{ after(grammarAccess.getStructConstructionOperatorAccess().getMembersAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StructConstructionOperator__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructConstructionOperator__Group__2__Impl
	rule__StructConstructionOperator__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StructConstructionOperator__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructConstructionOperatorAccess().getGroup_2()); }
(rule__StructConstructionOperator__Group_2__0)*
{ after(grammarAccess.getStructConstructionOperatorAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StructConstructionOperator__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructConstructionOperator__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StructConstructionOperator__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructConstructionOperatorAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getStructConstructionOperatorAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__StructConstructionOperator__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructConstructionOperator__Group_2__0__Impl
	rule__StructConstructionOperator__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StructConstructionOperator__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructConstructionOperatorAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getStructConstructionOperatorAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StructConstructionOperator__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructConstructionOperator__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StructConstructionOperator__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructConstructionOperatorAccess().getMembersAssignment_2_1()); }
(rule__StructConstructionOperator__MembersAssignment_2_1)
{ after(grammarAccess.getStructConstructionOperatorAccess().getMembersAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StructConstructionMember__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructConstructionMember__Group__0__Impl
	rule__StructConstructionMember__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StructConstructionMember__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructConstructionMemberAccess().getNameAssignment_0()); }
(rule__StructConstructionMember__NameAssignment_0)
{ after(grammarAccess.getStructConstructionMemberAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StructConstructionMember__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructConstructionMember__Group__1__Impl
	rule__StructConstructionMember__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StructConstructionMember__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructConstructionMemberAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getStructConstructionMemberAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StructConstructionMember__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StructConstructionMember__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StructConstructionMember__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructConstructionMemberAccess().getValueAssignment_2()); }
(rule__StructConstructionMember__ValueAssignment_2)
{ after(grammarAccess.getStructConstructionMemberAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__UnitConstructionOperator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitConstructionOperator__Group__0__Impl
	rule__UnitConstructionOperator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitConstructionOperator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitConstructionOperatorAccess().getUnitlitKeyword_0()); }

	'unitlit' 

{ after(grammarAccess.getUnitConstructionOperatorAccess().getUnitlitKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitConstructionOperator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitConstructionOperator__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitConstructionOperator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitConstructionOperatorAccess().getUnitAssignment_1()); }
(rule__UnitConstructionOperator__UnitAssignment_1)
{ after(grammarAccess.getUnitConstructionOperatorAccess().getUnitAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParenthesizedExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesizedExpression__Group__0__Impl
	rule__ParenthesizedExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedExpressionAccess().getLeftParenthesisKeyword_0()); }

	'(' 

{ after(grammarAccess.getParenthesizedExpressionAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthesizedExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesizedExpression__Group__1__Impl
	rule__ParenthesizedExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedExpressionAccess().getExpressionsAssignment_1()); }
(rule__ParenthesizedExpression__ExpressionsAssignment_1)
{ after(grammarAccess.getParenthesizedExpressionAccess().getExpressionsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthesizedExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesizedExpression__Group__2__Impl
	rule__ParenthesizedExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedExpressionAccess().getGroup_2()); }
(rule__ParenthesizedExpression__Group_2__0)*
{ after(grammarAccess.getParenthesizedExpressionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthesizedExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesizedExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedExpressionAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getParenthesizedExpressionAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ParenthesizedExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesizedExpression__Group_2__0__Impl
	rule__ParenthesizedExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedExpressionAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getParenthesizedExpressionAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthesizedExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesizedExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedExpressionAccess().getExpressionsAssignment_2_1()); }
(rule__ParenthesizedExpression__ExpressionsAssignment_2_1)
{ after(grammarAccess.getParenthesizedExpressionAccess().getExpressionsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EndExpression__Group__0__Impl
	rule__EndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EndExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEndExpressionAccess().getEndExpressionAction_0()); }
(

)
{ after(grammarAccess.getEndExpressionAccess().getEndExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EndExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEndExpressionAccess().getEndKeyword_1()); }

	'end' 

{ after(grammarAccess.getEndExpressionAccess().getEndKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AlgorithmExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AlgorithmExpression__Group__0__Impl
	rule__AlgorithmExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AlgorithmExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlgorithmExpressionAccess().getAlgorithmExpressionAction_0()); }
(

)
{ after(grammarAccess.getAlgorithmExpressionAccess().getAlgorithmExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AlgorithmExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AlgorithmExpression__Group__1__Impl
	rule__AlgorithmExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AlgorithmExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlgorithmExpressionAccess().getAlgorithmKeyword_1()); }

	'algorithm' 

{ after(grammarAccess.getAlgorithmExpressionAccess().getAlgorithmKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AlgorithmExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AlgorithmExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AlgorithmExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlgorithmExpressionAccess().getBodyAssignment_2()); }
(rule__AlgorithmExpression__BodyAssignment_2)
{ after(grammarAccess.getAlgorithmExpressionAccess().getBodyAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__CompoundStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompoundStatement__Group__0__Impl
	rule__CompoundStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundStatementAccess().getCompoundStatementAction_0()); }
(

)
{ after(grammarAccess.getCompoundStatementAccess().getCompoundStatementAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompoundStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompoundStatement__Group__1__Impl
	rule__CompoundStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundStatementAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getCompoundStatementAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompoundStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompoundStatement__Group__2__Impl
	rule__CompoundStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundStatementAccess().getStatementsAssignment_2()); }
(rule__CompoundStatement__StatementsAssignment_2)*
{ after(grammarAccess.getCompoundStatementAccess().getStatementsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompoundStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompoundStatement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundStatementAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getCompoundStatementAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Assignment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__0__Impl
	rule__Assignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getTargetAssignment_0()); }
(rule__Assignment__TargetAssignment_0)
{ after(grammarAccess.getAssignmentAccess().getTargetAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__1__Impl
	rule__Assignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__2__Impl
	rule__Assignment__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getAssignedExpressionAssignment_2()); }
(rule__Assignment__AssignedExpressionAssignment_2)
{ after(grammarAccess.getAssignmentAccess().getAssignedExpressionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getAssignmentAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__AssignableMemberFeatureCall__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignableMemberFeatureCall__Group__0__Impl
	rule__AssignableMemberFeatureCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignableMemberFeatureCall__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignableMemberFeatureCallAccess().getAssignablePrimaryExpressionParserRuleCall_0()); }
	ruleAssignablePrimaryExpression
{ after(grammarAccess.getAssignableMemberFeatureCallAccess().getAssignablePrimaryExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssignableMemberFeatureCall__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignableMemberFeatureCall__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignableMemberFeatureCall__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignableMemberFeatureCallAccess().getAlternatives_1()); }
(rule__AssignableMemberFeatureCall__Alternatives_1)*
{ after(grammarAccess.getAssignableMemberFeatureCallAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AssignableMemberFeatureCall__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignableMemberFeatureCall__Group_1_0__0__Impl
	rule__AssignableMemberFeatureCall__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignableMemberFeatureCall__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignableMemberFeatureCallAccess().getArrayElementAccessArrayAction_1_0_0()); }
(

)
{ after(grammarAccess.getAssignableMemberFeatureCallAccess().getArrayElementAccessArrayAction_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssignableMemberFeatureCall__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignableMemberFeatureCall__Group_1_0__1__Impl
	rule__AssignableMemberFeatureCall__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignableMemberFeatureCall__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignableMemberFeatureCallAccess().getLeftSquareBracketKeyword_1_0_1()); }

	'[' 

{ after(grammarAccess.getAssignableMemberFeatureCallAccess().getLeftSquareBracketKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssignableMemberFeatureCall__Group_1_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignableMemberFeatureCall__Group_1_0__2__Impl
	rule__AssignableMemberFeatureCall__Group_1_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignableMemberFeatureCall__Group_1_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignableMemberFeatureCallAccess().getSubscriptsAssignment_1_0_2()); }
(rule__AssignableMemberFeatureCall__SubscriptsAssignment_1_0_2)
{ after(grammarAccess.getAssignableMemberFeatureCallAccess().getSubscriptsAssignment_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssignableMemberFeatureCall__Group_1_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignableMemberFeatureCall__Group_1_0__3__Impl
	rule__AssignableMemberFeatureCall__Group_1_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignableMemberFeatureCall__Group_1_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignableMemberFeatureCallAccess().getGroup_1_0_3()); }
(rule__AssignableMemberFeatureCall__Group_1_0_3__0)*
{ after(grammarAccess.getAssignableMemberFeatureCallAccess().getGroup_1_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssignableMemberFeatureCall__Group_1_0__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignableMemberFeatureCall__Group_1_0__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignableMemberFeatureCall__Group_1_0__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignableMemberFeatureCallAccess().getRightSquareBracketKeyword_1_0_4()); }

	']' 

{ after(grammarAccess.getAssignableMemberFeatureCallAccess().getRightSquareBracketKeyword_1_0_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__AssignableMemberFeatureCall__Group_1_0_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignableMemberFeatureCall__Group_1_0_3__0__Impl
	rule__AssignableMemberFeatureCall__Group_1_0_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignableMemberFeatureCall__Group_1_0_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignableMemberFeatureCallAccess().getCommaKeyword_1_0_3_0()); }

	',' 

{ after(grammarAccess.getAssignableMemberFeatureCallAccess().getCommaKeyword_1_0_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssignableMemberFeatureCall__Group_1_0_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignableMemberFeatureCall__Group_1_0_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignableMemberFeatureCall__Group_1_0_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignableMemberFeatureCallAccess().getSubscriptsAssignment_1_0_3_1()); }
(rule__AssignableMemberFeatureCall__SubscriptsAssignment_1_0_3_1)
{ after(grammarAccess.getAssignableMemberFeatureCallAccess().getSubscriptsAssignment_1_0_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AssignableMemberFeatureCall__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignableMemberFeatureCall__Group_1_1__0__Impl
	rule__AssignableMemberFeatureCall__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignableMemberFeatureCall__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignableMemberFeatureCallAccess().getMemberVariableAccessTargetAction_1_1_0()); }
(

)
{ after(grammarAccess.getAssignableMemberFeatureCallAccess().getMemberVariableAccessTargetAction_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssignableMemberFeatureCall__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignableMemberFeatureCall__Group_1_1__1__Impl
	rule__AssignableMemberFeatureCall__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignableMemberFeatureCall__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignableMemberFeatureCallAccess().getFullStopKeyword_1_1_1()); }

	'.' 

{ after(grammarAccess.getAssignableMemberFeatureCallAccess().getFullStopKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssignableMemberFeatureCall__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignableMemberFeatureCall__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignableMemberFeatureCall__Group_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignableMemberFeatureCallAccess().getMemberVariableAssignment_1_1_2()); }
(rule__AssignableMemberFeatureCall__MemberVariableAssignment_1_1_2)
{ after(grammarAccess.getAssignableMemberFeatureCallAccess().getMemberVariableAssignment_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LocalVariableDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalVariableDeclaration__Group__0__Impl
	rule__LocalVariableDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVariableDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalVariableDeclarationAccess().getVarKeyword_0()); }

	'var' 

{ after(grammarAccess.getLocalVariableDeclarationAccess().getVarKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalVariableDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalVariableDeclaration__Group__1__Impl
	rule__LocalVariableDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVariableDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalVariableDeclarationAccess().getNameAssignment_1()); }
(rule__LocalVariableDeclaration__NameAssignment_1)
{ after(grammarAccess.getLocalVariableDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalVariableDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalVariableDeclaration__Group__2__Impl
	rule__LocalVariableDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVariableDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalVariableDeclarationAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getLocalVariableDeclarationAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalVariableDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalVariableDeclaration__Group__3__Impl
	rule__LocalVariableDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVariableDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalVariableDeclarationAccess().getInitializerAssignment_3()); }
(rule__LocalVariableDeclaration__InitializerAssignment_3)
{ after(grammarAccess.getLocalVariableDeclarationAccess().getInitializerAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalVariableDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalVariableDeclaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVariableDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalVariableDeclarationAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getLocalVariableDeclarationAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__IfStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__0__Impl
	rule__IfStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getIfKeyword_0()); }

	'if' 

{ after(grammarAccess.getIfStatementAccess().getIfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__1__Impl
	rule__IfStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__2__Impl
	rule__IfStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getConditionAssignment_2()); }
(rule__IfStatement__ConditionAssignment_2)
{ after(grammarAccess.getIfStatementAccess().getConditionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__3__Impl
	rule__IfStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__4__Impl
	rule__IfStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getThenStatementAssignment_4()); }
(rule__IfStatement__ThenStatementAssignment_4)
{ after(grammarAccess.getIfStatementAccess().getThenStatementAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getGroup_5()); }
(rule__IfStatement__Group_5__0)?
{ after(grammarAccess.getIfStatementAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__IfStatement__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group_5__0__Impl
	rule__IfStatement__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getElseKeyword_5_0()); }
(
	'else' 
)
{ after(grammarAccess.getIfStatementAccess().getElseKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getElseStatementAssignment_5_1()); }
(rule__IfStatement__ElseStatementAssignment_5_1)
{ after(grammarAccess.getIfStatementAccess().getElseStatementAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__WhileStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileStatement__Group__0__Impl
	rule__WhileStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getWhileKeyword_0()); }

	'while' 

{ after(grammarAccess.getWhileStatementAccess().getWhileKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileStatement__Group__1__Impl
	rule__WhileStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileStatement__Group__2__Impl
	rule__WhileStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getConditionAssignment_2()); }
(rule__WhileStatement__ConditionAssignment_2)
{ after(grammarAccess.getWhileStatementAccess().getConditionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileStatement__Group__3__Impl
	rule__WhileStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileStatement__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getBodyAssignment_4()); }
(rule__WhileStatement__BodyAssignment_4)
{ after(grammarAccess.getWhileStatementAccess().getBodyAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ForStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForStatement__Group__0__Impl
	rule__ForStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForStatementAccess().getForKeyword_0()); }

	'for' 

{ after(grammarAccess.getForStatementAccess().getForKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForStatement__Group__1__Impl
	rule__ForStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForStatement__Group__2__Impl
	rule__ForStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForStatementAccess().getIterationVariableAssignment_2()); }
(rule__ForStatement__IterationVariableAssignment_2)
{ after(grammarAccess.getForStatementAccess().getIterationVariableAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForStatement__Group__3__Impl
	rule__ForStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForStatementAccess().getInKeyword_3()); }

	'in' 

{ after(grammarAccess.getForStatementAccess().getInKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForStatement__Group__4__Impl
	rule__ForStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForStatementAccess().getCollectionExpressionAssignment_4()); }
(rule__ForStatement__CollectionExpressionAssignment_4)
{ after(grammarAccess.getForStatementAccess().getCollectionExpressionAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForStatement__Group__5__Impl
	rule__ForStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForStatementAccess().getRightParenthesisKeyword_5()); }

	')' 

{ after(grammarAccess.getForStatementAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForStatement__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForStatement__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForStatementAccess().getBodyAssignment_6()); }
(rule__ForStatement__BodyAssignment_6)
{ after(grammarAccess.getForStatementAccess().getBodyAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__DoWhileStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoWhileStatement__Group__0__Impl
	rule__DoWhileStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoWhileStatementAccess().getDoKeyword_0()); }

	'do' 

{ after(grammarAccess.getDoWhileStatementAccess().getDoKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DoWhileStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoWhileStatement__Group__1__Impl
	rule__DoWhileStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoWhileStatementAccess().getBodyAssignment_1()); }
(rule__DoWhileStatement__BodyAssignment_1)
{ after(grammarAccess.getDoWhileStatementAccess().getBodyAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DoWhileStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoWhileStatement__Group__2__Impl
	rule__DoWhileStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoWhileStatementAccess().getWhileKeyword_2()); }

	'while' 

{ after(grammarAccess.getDoWhileStatementAccess().getWhileKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DoWhileStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoWhileStatement__Group__3__Impl
	rule__DoWhileStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoWhileStatementAccess().getLeftParenthesisKeyword_3()); }

	'(' 

{ after(grammarAccess.getDoWhileStatementAccess().getLeftParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DoWhileStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoWhileStatement__Group__4__Impl
	rule__DoWhileStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoWhileStatementAccess().getConditionAssignment_4()); }
(rule__DoWhileStatement__ConditionAssignment_4)
{ after(grammarAccess.getDoWhileStatementAccess().getConditionAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DoWhileStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoWhileStatement__Group__5__Impl
	rule__DoWhileStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoWhileStatementAccess().getRightParenthesisKeyword_5()); }

	')' 

{ after(grammarAccess.getDoWhileStatementAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DoWhileStatement__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoWhileStatement__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileStatement__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoWhileStatementAccess().getSemicolonKeyword_6()); }

	';' 

{ after(grammarAccess.getDoWhileStatementAccess().getSemicolonKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__ContinueStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContinueStatement__Group__0__Impl
	rule__ContinueStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ContinueStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContinueStatementAccess().getContinueStatementAction_0()); }
(

)
{ after(grammarAccess.getContinueStatementAccess().getContinueStatementAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContinueStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContinueStatement__Group__1__Impl
	rule__ContinueStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ContinueStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContinueStatementAccess().getContinueKeyword_1()); }

	'continue' 

{ after(grammarAccess.getContinueStatementAccess().getContinueKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContinueStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContinueStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ContinueStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContinueStatementAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getContinueStatementAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BreakStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BreakStatement__Group__0__Impl
	rule__BreakStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BreakStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBreakStatementAccess().getBreakStatementAction_0()); }
(

)
{ after(grammarAccess.getBreakStatementAccess().getBreakStatementAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BreakStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BreakStatement__Group__1__Impl
	rule__BreakStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BreakStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBreakStatementAccess().getBreakKeyword_1()); }

	'break' 

{ after(grammarAccess.getBreakStatementAccess().getBreakKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BreakStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BreakStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BreakStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBreakStatementAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getBreakStatementAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ReturnStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnStatement__Group__0__Impl
	rule__ReturnStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getReturnKeyword_0()); }

	'return' 

{ after(grammarAccess.getReturnStatementAccess().getReturnKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnStatement__Group__1__Impl
	rule__ReturnStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getExpressionAssignment_1()); }
(rule__ReturnStatement__ExpressionAssignment_1)
{ after(grammarAccess.getReturnStatementAccess().getExpressionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getReturnStatementAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Unit__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Unit__Group__0__Impl
	rule__Unit__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Unit__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitAccess().getUnitAction_0()); }
(

)
{ after(grammarAccess.getUnitAccess().getUnitAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Unit__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Unit__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Unit__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitAccess().getAlternatives_1()); }
(rule__Unit__Alternatives_1)
{ after(grammarAccess.getUnitAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Unit__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Unit__Group_1_0__0__Impl
	rule__Unit__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Unit__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitAccess().getLeftParenthesisKeyword_1_0_0()); }

	'(' 

{ after(grammarAccess.getUnitAccess().getLeftParenthesisKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Unit__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Unit__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Unit__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitAccess().getRightParenthesisKeyword_1_0_1()); }

	')' 

{ after(grammarAccess.getUnitAccess().getRightParenthesisKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Unit__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Unit__Group_1_1__0__Impl
	rule__Unit__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Unit__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitAccess().getLeftParenthesisKeyword_1_1_0()); }

	'(' 

{ after(grammarAccess.getUnitAccess().getLeftParenthesisKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Unit__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Unit__Group_1_1__1__Impl
	rule__Unit__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Unit__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitAccess().getNumeratorAssignment_1_1_1()); }
(rule__Unit__NumeratorAssignment_1_1_1)
{ after(grammarAccess.getUnitAccess().getNumeratorAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Unit__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Unit__Group_1_1__2__Impl
	rule__Unit__Group_1_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Unit__Group_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitAccess().getGroup_1_1_2()); }
(rule__Unit__Group_1_1_2__0)?
{ after(grammarAccess.getUnitAccess().getGroup_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Unit__Group_1_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Unit__Group_1_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Unit__Group_1_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitAccess().getRightParenthesisKeyword_1_1_3()); }

	')' 

{ after(grammarAccess.getUnitAccess().getRightParenthesisKeyword_1_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Unit__Group_1_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Unit__Group_1_1_2__0__Impl
	rule__Unit__Group_1_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Unit__Group_1_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitAccess().getSolidusKeyword_1_1_2_0()); }

	'/' 

{ after(grammarAccess.getUnitAccess().getSolidusKeyword_1_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Unit__Group_1_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Unit__Group_1_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Unit__Group_1_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitAccess().getDenominatorAssignment_1_1_2_1()); }
(rule__Unit__DenominatorAssignment_1_1_2_1)
{ after(grammarAccess.getUnitAccess().getDenominatorAssignment_1_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExplicitUnit__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExplicitUnit__Group__0__Impl
	rule__ExplicitUnit__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExplicitUnit__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExplicitUnitAccess().getLeftParenthesisKeyword_0()); }

	'(' 

{ after(grammarAccess.getExplicitUnitAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExplicitUnit__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExplicitUnit__Group__1__Impl
	rule__ExplicitUnit__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExplicitUnit__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExplicitUnitAccess().getNumeratorAssignment_1()); }
(rule__ExplicitUnit__NumeratorAssignment_1)
{ after(grammarAccess.getExplicitUnitAccess().getNumeratorAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExplicitUnit__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExplicitUnit__Group__2__Impl
	rule__ExplicitUnit__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExplicitUnit__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExplicitUnitAccess().getGroup_2()); }
(rule__ExplicitUnit__Group_2__0)?
{ after(grammarAccess.getExplicitUnitAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExplicitUnit__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExplicitUnit__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExplicitUnit__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExplicitUnitAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getExplicitUnitAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ExplicitUnit__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExplicitUnit__Group_2__0__Impl
	rule__ExplicitUnit__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExplicitUnit__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExplicitUnitAccess().getSolidusKeyword_2_0()); }

	'/' 

{ after(grammarAccess.getExplicitUnitAccess().getSolidusKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExplicitUnit__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExplicitUnit__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExplicitUnit__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExplicitUnitAccess().getDenominatorAssignment_2_1()); }
(rule__ExplicitUnit__DenominatorAssignment_2_1)
{ after(grammarAccess.getExplicitUnitAccess().getDenominatorAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnitNumerator__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitNumerator__Group_0__0__Impl
	rule__UnitNumerator__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitNumerator__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitNumeratorAccess().getUnitNumeratorAction_0_0()); }
(

)
{ after(grammarAccess.getUnitNumeratorAccess().getUnitNumeratorAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitNumerator__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitNumerator__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitNumerator__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitNumeratorAccess().getONETerminalRuleCall_0_1()); }
	RULE_ONE
{ after(grammarAccess.getUnitNumeratorAccess().getONETerminalRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnitNumerator__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitNumerator__Group_1__0__Impl
	rule__UnitNumerator__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitNumerator__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitNumeratorAccess().getFactorsAssignment_1_0()); }
(rule__UnitNumerator__FactorsAssignment_1_0)
{ after(grammarAccess.getUnitNumeratorAccess().getFactorsAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitNumerator__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitNumerator__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitNumerator__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitNumeratorAccess().getGroup_1_1()); }
(rule__UnitNumerator__Group_1_1__0)*
{ after(grammarAccess.getUnitNumeratorAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnitNumerator__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitNumerator__Group_1_1__0__Impl
	rule__UnitNumerator__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitNumerator__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitNumeratorAccess().getAsteriskKeyword_1_1_0()); }

	'*' 

{ after(grammarAccess.getUnitNumeratorAccess().getAsteriskKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitNumerator__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitNumerator__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitNumerator__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitNumeratorAccess().getFactorsAssignment_1_1_1()); }
(rule__UnitNumerator__FactorsAssignment_1_1_1)
{ after(grammarAccess.getUnitNumeratorAccess().getFactorsAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnitDenominator__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitDenominator__Group_1__0__Impl
	rule__UnitDenominator__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitDenominator__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitDenominatorAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getUnitDenominatorAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitDenominator__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitDenominator__Group_1__1__Impl
	rule__UnitDenominator__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitDenominator__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitDenominatorAccess().getFactorsAssignment_1_1()); }
(rule__UnitDenominator__FactorsAssignment_1_1)
{ after(grammarAccess.getUnitDenominatorAccess().getFactorsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitDenominator__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitDenominator__Group_1__2__Impl
	rule__UnitDenominator__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitDenominator__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitDenominatorAccess().getGroup_1_2()); }
(rule__UnitDenominator__Group_1_2__0)*
{ after(grammarAccess.getUnitDenominatorAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitDenominator__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitDenominator__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitDenominator__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitDenominatorAccess().getRightParenthesisKeyword_1_3()); }

	')' 

{ after(grammarAccess.getUnitDenominatorAccess().getRightParenthesisKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__UnitDenominator__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitDenominator__Group_1_2__0__Impl
	rule__UnitDenominator__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitDenominator__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitDenominatorAccess().getAsteriskKeyword_1_2_0()); }

	'*' 

{ after(grammarAccess.getUnitDenominatorAccess().getAsteriskKeyword_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitDenominator__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitDenominator__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitDenominator__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitDenominatorAccess().getFactorsAssignment_1_2_1()); }
(rule__UnitDenominator__FactorsAssignment_1_2_1)
{ after(grammarAccess.getUnitDenominatorAccess().getFactorsAssignment_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnitFactor__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitFactor__Group__0__Impl
	rule__UnitFactor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitFactor__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitFactorAccess().getSymbolAssignment_0()); }
(rule__UnitFactor__SymbolAssignment_0)
{ after(grammarAccess.getUnitFactorAccess().getSymbolAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitFactor__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitFactor__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitFactor__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitFactorAccess().getGroup_1()); }
(rule__UnitFactor__Group_1__0)?
{ after(grammarAccess.getUnitFactorAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnitFactor__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitFactor__Group_1__0__Impl
	rule__UnitFactor__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitFactor__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitFactorAccess().getCircumflexAccentKeyword_1_0()); }

	'^' 

{ after(grammarAccess.getUnitFactorAccess().getCircumflexAccentKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitFactor__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitFactor__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitFactor__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitFactorAccess().getExponentAssignment_1_1()); }
(rule__UnitFactor__ExponentAssignment_1_1)
{ after(grammarAccess.getUnitFactorAccess().getExponentAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnitExponent__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitExponent__Group__0__Impl
	rule__UnitExponent__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExponent__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExponentAccess().getHyphenMinusKeyword_0()); }
(
	'-' 
)?
{ after(grammarAccess.getUnitExponentAccess().getHyphenMinusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitExponent__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitExponent__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitExponent__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitExponentAccess().getValidIntParserRuleCall_1()); }
	ruleValidInt
{ after(grammarAccess.getUnitExponentAccess().getValidIntParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_0()); }
	ruleValidID
{ after(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
(rule__QualifiedName__Group_1__0)*
{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_1_1()); }
	ruleValidID
{ after(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedNameWithWildcard__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedNameWithWildcard__Group__0__Impl
	rule__QualifiedNameWithWildcard__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildcard__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); }
	ruleQualifiedName
{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedNameWithWildcard__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedNameWithWildcard__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildcard__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getAlternatives_1()); }
(rule__QualifiedNameWithWildcard__Alternatives_1)?
{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedNameWithWildcard__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedNameWithWildcard__Group_1_1__0__Impl
	rule__QualifiedNameWithWildcard__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildcard__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopKeyword_1_1_0()); }

	'.' 

{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedNameWithWildcard__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedNameWithWildcard__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildcard__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getAsteriskKeyword_1_1_1()); }

	'*' 

{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getAsteriskKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Module__PackageNameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getPackageNameQualifiedNameParserRuleCall_1_0()); }
	ruleQualifiedName{ after(grammarAccess.getModuleAccess().getPackageNameQualifiedNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Module__ImportDeclarationsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getImportDeclarationsImportDeclarationParserRuleCall_2_0()); }
	ruleImportDeclaration{ after(grammarAccess.getModuleAccess().getImportDeclarationsImportDeclarationParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Module__DeclarationsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getDeclarationsDeclarationParserRuleCall_3_0()); }
	ruleDeclaration{ after(grammarAccess.getModuleAccess().getDeclarationsDeclarationParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDeclaration__ImportedNamespaceAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportDeclarationAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0()); }
	ruleQualifiedNameWithWildcard{ after(grammarAccess.getImportDeclarationAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclaration__NameAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclarationAccess().getNameValidIDParserRuleCall_0_1_0()); }
	ruleValidID{ after(grammarAccess.getTypeDeclarationAccess().getNameValidIDParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclaration__TypeSpecifierAssignment_0_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclarationAccess().getTypeSpecifierTypeSpecifierParserRuleCall_0_3_0()); }
	ruleTypeSpecifier{ after(grammarAccess.getTypeDeclarationAccess().getTypeSpecifierTypeSpecifierParserRuleCall_0_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclaration__NameAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclarationAccess().getNameValidIDParserRuleCall_1_1_0()); }
	ruleValidID{ after(grammarAccess.getTypeDeclarationAccess().getNameValidIDParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclaration__TypeSpecifierAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclarationAccess().getTypeSpecifierStructDeclarationTypeSpecifierParserRuleCall_1_2_0()); }
	ruleStructDeclarationTypeSpecifier{ after(grammarAccess.getTypeDeclarationAccess().getTypeSpecifierStructDeclarationTypeSpecifierParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StructDeclarationTypeSpecifier__TypeAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructDeclarationTypeSpecifierAccess().getTypeStructDeclarationTypeParserRuleCall_0()); }
	ruleStructDeclarationType{ after(grammarAccess.getStructDeclarationTypeSpecifierAccess().getTypeStructDeclarationTypeParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StructDeclarationType__MembersAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructDeclarationTypeAccess().getMembersStructMemberParserRuleCall_1_0()); }
	ruleStructMember{ after(grammarAccess.getStructDeclarationTypeAccess().getMembersStructMemberParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StructDeclarationType__MembersAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructDeclarationTypeAccess().getMembersStructMemberParserRuleCall_2_1_0()); }
	ruleStructMember{ after(grammarAccess.getStructDeclarationTypeAccess().getMembersStructMemberParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationDeclarationAccess().getNameValidIDParserRuleCall_1_0()); }
	ruleValidID{ after(grammarAccess.getEnumerationDeclarationAccess().getNameValidIDParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationDeclaration__LiteralDeclarationsAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationDeclarationAccess().getLiteralDeclarationsEnumerationLiteralDeclarationParserRuleCall_3_0_0()); }
	ruleEnumerationLiteralDeclaration{ after(grammarAccess.getEnumerationDeclarationAccess().getLiteralDeclarationsEnumerationLiteralDeclarationParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationDeclaration__LiteralDeclarationsAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationDeclarationAccess().getLiteralDeclarationsEnumerationLiteralDeclarationParserRuleCall_3_1_1_0()); }
	ruleEnumerationLiteralDeclaration{ after(grammarAccess.getEnumerationDeclarationAccess().getLiteralDeclarationsEnumerationLiteralDeclarationParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationLiteralDeclaration__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationLiteralDeclarationAccess().getNameValidIDParserRuleCall_0()); }
	ruleValidID{ after(grammarAccess.getEnumerationLiteralDeclarationAccess().getNameValidIDParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__KindAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getKindFunctionKindEnumRuleCall_0_0()); }
	ruleFunctionKind{ after(grammarAccess.getFunctionDeclarationAccess().getKindFunctionKindEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getNameValidIDParserRuleCall_2_0()); }
	ruleValidID{ after(grammarAccess.getFunctionDeclarationAccess().getNameValidIDParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__StaticParameterDeclarationsAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getStaticParameterDeclarationsStaticParameterDeclarationParserRuleCall_3_1_0()); }
	ruleStaticParameterDeclaration{ after(grammarAccess.getFunctionDeclarationAccess().getStaticParameterDeclarationsStaticParameterDeclarationParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__StaticParameterDeclarationsAssignment_3_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getStaticParameterDeclarationsStaticParameterDeclarationParserRuleCall_3_2_1_0()); }
	ruleStaticParameterDeclaration{ after(grammarAccess.getFunctionDeclarationAccess().getStaticParameterDeclarationsStaticParameterDeclarationParserRuleCall_3_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__InputParameterDeclarationsAssignment_5_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getInputParameterDeclarationsInputParameterDeclarationParserRuleCall_5_0_0()); }
	ruleInputParameterDeclaration{ after(grammarAccess.getFunctionDeclarationAccess().getInputParameterDeclarationsInputParameterDeclarationParserRuleCall_5_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__InputParameterDeclarationsAssignment_5_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getInputParameterDeclarationsInputParameterDeclarationParserRuleCall_5_1_1_0()); }
	ruleInputParameterDeclaration{ after(grammarAccess.getFunctionDeclarationAccess().getInputParameterDeclarationsInputParameterDeclarationParserRuleCall_5_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__OutputParameterDeclarationsAssignment_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getOutputParameterDeclarationsOutputParameterDeclarationParserRuleCall_8_0()); }
	ruleOutputParameterDeclaration{ after(grammarAccess.getFunctionDeclarationAccess().getOutputParameterDeclarationsOutputParameterDeclarationParserRuleCall_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__OutputParameterDeclarationsAssignment_9_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getOutputParameterDeclarationsOutputParameterDeclarationParserRuleCall_9_1_0()); }
	ruleOutputParameterDeclaration{ after(grammarAccess.getFunctionDeclarationAccess().getOutputParameterDeclarationsOutputParameterDeclarationParserRuleCall_9_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__ChecksAssignment_11_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getChecksCheckParserRuleCall_11_0_0()); }
	ruleCheck{ after(grammarAccess.getFunctionDeclarationAccess().getChecksCheckParserRuleCall_11_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__AssertionsAssignment_11_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getAssertionsAssertionParserRuleCall_11_1_0()); }
	ruleAssertion{ after(grammarAccess.getFunctionDeclarationAccess().getAssertionsAssertionParserRuleCall_11_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__FunctionAliasDeclarationsAssignment_11_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getFunctionAliasDeclarationsFunctionAliasDeclarationParserRuleCall_11_2_0()); }
	ruleFunctionAliasDeclaration{ after(grammarAccess.getFunctionDeclarationAccess().getFunctionAliasDeclarationsFunctionAliasDeclarationParserRuleCall_11_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__StateVariableDeclarationsAssignment_11_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getStateVariableDeclarationsStateVariableDeclarationParserRuleCall_11_3_0()); }
	ruleStateVariableDeclaration{ after(grammarAccess.getFunctionDeclarationAccess().getStateVariableDeclarationsStateVariableDeclarationParserRuleCall_11_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__ConstantDeclarationsAssignment_11_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getConstantDeclarationsConstantDeclarationParserRuleCall_11_4_0()); }
	ruleConstantDeclaration{ after(grammarAccess.getFunctionDeclarationAccess().getConstantDeclarationsConstantDeclarationParserRuleCall_11_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__EquationsAssignment_11_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getEquationsEquationParserRuleCall_11_5_0()); }
	ruleEquation{ after(grammarAccess.getFunctionDeclarationAccess().getEquationsEquationParserRuleCall_11_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StaticParameterDeclaration__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticParameterDeclarationAccess().getNameValidIDParserRuleCall_0()); }
	ruleValidID{ after(grammarAccess.getStaticParameterDeclarationAccess().getNameValidIDParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InputParameterDeclaration__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputParameterDeclarationAccess().getNameValidIDParserRuleCall_0()); }
	ruleValidID{ after(grammarAccess.getInputParameterDeclarationAccess().getNameValidIDParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OutputParameterDeclaration__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutputParameterDeclarationAccess().getNameValidIDParserRuleCall_0()); }
	ruleValidID{ after(grammarAccess.getOutputParameterDeclarationAccess().getNameValidIDParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Check__StaticArgumentsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckAccess().getStaticArgumentsExpressionParserRuleCall_1_1_0()); }
	ruleExpression{ after(grammarAccess.getCheckAccess().getStaticArgumentsExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Check__StaticArgumentsAssignment_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckAccess().getStaticArgumentsExpressionParserRuleCall_1_2_1_0()); }
	ruleExpression{ after(grammarAccess.getCheckAccess().getStaticArgumentsExpressionParserRuleCall_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Check__InputParameterTypesAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckAccess().getInputParameterTypesTypeSpecifierParserRuleCall_3_0_0()); }
	ruleTypeSpecifier{ after(grammarAccess.getCheckAccess().getInputParameterTypesTypeSpecifierParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Check__InputParameterTypesAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckAccess().getInputParameterTypesTypeSpecifierParserRuleCall_3_1_1_0()); }
	ruleTypeSpecifier{ after(grammarAccess.getCheckAccess().getInputParameterTypesTypeSpecifierParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Check__OutputParameterTypesAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckAccess().getOutputParameterTypesTypeSpecifierParserRuleCall_6_0()); }
	ruleTypeSpecifier{ after(grammarAccess.getCheckAccess().getOutputParameterTypesTypeSpecifierParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Check__OutputParameterTypesAssignment_7_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckAccess().getOutputParameterTypesTypeSpecifierParserRuleCall_7_1_0()); }
	ruleTypeSpecifier{ after(grammarAccess.getCheckAccess().getOutputParameterTypesTypeSpecifierParserRuleCall_7_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assertion__StaticAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssertionAccess().getStaticStaticKeyword_0_0()); }
(
{ before(grammarAccess.getAssertionAccess().getStaticStaticKeyword_0_0()); }

	'static' 

{ after(grammarAccess.getAssertionAccess().getStaticStaticKeyword_0_0()); }
)

{ after(grammarAccess.getAssertionAccess().getStaticStaticKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assertion__ConditionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssertionAccess().getConditionExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getAssertionAccess().getConditionExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assertion__StatusKindAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssertionAccess().getStatusKindAssertionStatusKindEnumRuleCall_4_0()); }
	ruleAssertionStatusKind{ after(grammarAccess.getAssertionAccess().getStatusKindAssertionStatusKindEnumRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assertion__MessageAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssertionAccess().getMessageExpressionParserRuleCall_5_0()); }
	ruleExpression{ after(grammarAccess.getAssertionAccess().getMessageExpressionParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StateVariableDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateVariableDeclarationAccess().getNameValidIDParserRuleCall_1_0()); }
	ruleValidID{ after(grammarAccess.getStateVariableDeclarationAccess().getNameValidIDParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclarationAccess().getNameValidIDParserRuleCall_1_0()); }
	ruleValidID{ after(grammarAccess.getConstantDeclarationAccess().getNameValidIDParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDeclaration__InitializerAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclarationAccess().getInitializerExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getConstantDeclarationAccess().getInitializerExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionAliasDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAliasDeclarationAccess().getNameValidIDParserRuleCall_1_0()); }
	ruleValidID{ after(grammarAccess.getFunctionAliasDeclarationAccess().getNameValidIDParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionAliasDeclaration__FunctionDeclarationAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAliasDeclarationAccess().getFunctionDeclarationFunctionDeclarationCrossReference_3_0()); }
(
{ before(grammarAccess.getFunctionAliasDeclarationAccess().getFunctionDeclarationFunctionDeclarationQualifiedNameParserRuleCall_3_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getFunctionAliasDeclarationAccess().getFunctionDeclarationFunctionDeclarationQualifiedNameParserRuleCall_3_0_1()); }
)
{ after(grammarAccess.getFunctionAliasDeclarationAccess().getFunctionDeclarationFunctionDeclarationCrossReference_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionAliasDeclaration__StaticArgumentsAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAliasDeclarationAccess().getStaticArgumentsExpressionParserRuleCall_4_1_0()); }
	ruleExpression{ after(grammarAccess.getFunctionAliasDeclarationAccess().getStaticArgumentsExpressionParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionAliasDeclaration__StaticArgumentsAssignment_4_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAliasDeclarationAccess().getStaticArgumentsExpressionParserRuleCall_4_2_1_0()); }
	ruleExpression{ after(grammarAccess.getFunctionAliasDeclarationAccess().getStaticArgumentsExpressionParserRuleCall_4_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Equation__InitialAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEquationAccess().getInitialInitialKeyword_0_0()); }
(
{ before(grammarAccess.getEquationAccess().getInitialInitialKeyword_0_0()); }

	'initial' 

{ after(grammarAccess.getEquationAccess().getInitialInitialKeyword_0_0()); }
)

{ after(grammarAccess.getEquationAccess().getInitialInitialKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Equation__LeftHandSideAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEquationAccess().getLeftHandSideExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getEquationAccess().getLeftHandSideExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Equation__RightHandSideAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEquationAccess().getRightHandSideExpressionParserRuleCall_4_0()); }
	ruleExpression{ after(grammarAccess.getEquationAccess().getRightHandSideExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AnonymousTypeSpecifier__TypeAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnonymousTypeSpecifierAccess().getTypeAlternatives_0()); }
(rule__AnonymousTypeSpecifier__TypeAlternatives_0)
{ after(grammarAccess.getAnonymousTypeSpecifierAccess().getTypeAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaredTypeSpecifier__TypeDeclarationAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaredTypeSpecifierAccess().getTypeDeclarationTypeDeclarationCrossReference_0()); }
(
{ before(grammarAccess.getDeclaredTypeSpecifierAccess().getTypeDeclarationTypeDeclarationQualifiedNameParserRuleCall_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getDeclaredTypeSpecifierAccess().getTypeDeclarationTypeDeclarationQualifiedNameParserRuleCall_0_1()); }
)
{ after(grammarAccess.getDeclaredTypeSpecifierAccess().getTypeDeclarationTypeDeclarationCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RealType__UnitAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealTypeAccess().getUnitUnitParserRuleCall_2_0()); }
	ruleUnit{ after(grammarAccess.getRealTypeAccess().getUnitUnitParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerType__UnitAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerTypeAccess().getUnitUnitParserRuleCall_2_0()); }
	ruleUnit{ after(grammarAccess.getIntegerTypeAccess().getUnitUnitParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexType__UnitAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComplexTypeAccess().getUnitUnitParserRuleCall_2_0()); }
	ruleUnit{ after(grammarAccess.getComplexTypeAccess().getUnitUnitParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GaussianType__UnitAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGaussianTypeAccess().getUnitUnitParserRuleCall_2_0()); }
	ruleUnit{ after(grammarAccess.getGaussianTypeAccess().getUnitUnitParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayType__ElementTypeSpecifierAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeAccess().getElementTypeSpecifierArrayTypeSpecifierParserRuleCall_0_0()); }
	ruleArrayTypeSpecifier{ after(grammarAccess.getArrayTypeAccess().getElementTypeSpecifierArrayTypeSpecifierParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayType__DimensionsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeAccess().getDimensionsArrayDimensionParserRuleCall_2_0()); }
	ruleArrayDimension{ after(grammarAccess.getArrayTypeAccess().getDimensionsArrayDimensionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayType__DimensionsAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeAccess().getDimensionsArrayDimensionParserRuleCall_3_1_0()); }
	ruleArrayDimension{ after(grammarAccess.getArrayTypeAccess().getDimensionsArrayDimensionParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AnonymousArrayTypeSpecifier__TypeAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnonymousArrayTypeSpecifierAccess().getTypePrimitiveTypeParserRuleCall_0()); }
	rulePrimitiveType{ after(grammarAccess.getAnonymousArrayTypeSpecifierAccess().getTypePrimitiveTypeParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDimension__SizeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayDimensionAccess().getSizeExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getArrayDimensionAccess().getSizeExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StructType__MembersAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructTypeAccess().getMembersStructMemberParserRuleCall_2_0()); }
	ruleStructMember{ after(grammarAccess.getStructTypeAccess().getMembersStructMemberParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StructType__MembersAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructTypeAccess().getMembersStructMemberParserRuleCall_3_1_0()); }
	ruleStructMember{ after(grammarAccess.getStructTypeAccess().getMembersStructMemberParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StructMember__TypeSpecifierAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructMemberAccess().getTypeSpecifierTypeSpecifierParserRuleCall_0_0()); }
	ruleTypeSpecifier{ after(grammarAccess.getStructMemberAccess().getTypeSpecifierTypeSpecifierParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StructMember__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructMemberAccess().getNameValidIDParserRuleCall_1_0()); }
	ruleValidID{ after(grammarAccess.getStructMemberAccess().getNameValidIDParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__ParametersAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLambdaExpressionAccess().getParametersLambdaExpressionParameterParserRuleCall_0_0_0()); }
	ruleLambdaExpressionParameter{ after(grammarAccess.getLambdaExpressionAccess().getParametersLambdaExpressionParameterParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__ParametersAssignment_0_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLambdaExpressionAccess().getParametersLambdaExpressionParameterParserRuleCall_0_1_1_0_0()); }
	ruleLambdaExpressionParameter{ after(grammarAccess.getLambdaExpressionAccess().getParametersLambdaExpressionParameterParserRuleCall_0_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__ParametersAssignment_0_1_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLambdaExpressionAccess().getParametersLambdaExpressionParameterParserRuleCall_0_1_1_1_1_0()); }
	ruleLambdaExpressionParameter{ after(grammarAccess.getLambdaExpressionAccess().getParametersLambdaExpressionParameterParserRuleCall_0_1_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpression__ExpressionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLambdaExpressionAccess().getExpressionExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getLambdaExpressionAccess().getExpressionExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LambdaExpressionParameter__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLambdaExpressionParameterAccess().getNameValidIDParserRuleCall_0()); }
	ruleValidID{ after(grammarAccess.getLambdaExpressionParameterAccess().getNameValidIDParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpression__AssignmentsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAccess().getAssignmentsLetExpressionAssignmentParserRuleCall_1_0()); }
	ruleLetExpressionAssignment{ after(grammarAccess.getLetExpressionAccess().getAssignmentsLetExpressionAssignmentParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpression__AssignmentsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAccess().getAssignmentsLetExpressionAssignmentParserRuleCall_2_1_0()); }
	ruleLetExpressionAssignment{ after(grammarAccess.getLetExpressionAccess().getAssignmentsLetExpressionAssignmentParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpression__TargetAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAccess().getTargetExpressionParserRuleCall_4_0()); }
	ruleExpression{ after(grammarAccess.getLetExpressionAccess().getTargetExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpressionAssignment__VariablesAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAssignmentAccess().getVariablesLetExpressionVariableDeclarationParserRuleCall_0_0_0()); }
	ruleLetExpressionVariableDeclaration{ after(grammarAccess.getLetExpressionAssignmentAccess().getVariablesLetExpressionVariableDeclarationParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpressionAssignment__VariablesAssignment_0_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAssignmentAccess().getVariablesLetExpressionVariableDeclarationParserRuleCall_0_1_1_0()); }
	ruleLetExpressionVariableDeclaration{ after(grammarAccess.getLetExpressionAssignmentAccess().getVariablesLetExpressionVariableDeclarationParserRuleCall_0_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpressionAssignment__VariablesAssignment_0_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAssignmentAccess().getVariablesLetExpressionVariableDeclarationParserRuleCall_0_1_2_1_0()); }
	ruleLetExpressionVariableDeclaration{ after(grammarAccess.getLetExpressionAssignmentAccess().getVariablesLetExpressionVariableDeclarationParserRuleCall_0_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpressionAssignment__AssignedExpressionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAssignmentAccess().getAssignedExpressionExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getLetExpressionAssignmentAccess().getAssignedExpressionExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpressionVariableDeclaration__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionVariableDeclarationAccess().getNameValidIDParserRuleCall_0()); }
	ruleValidID{ after(grammarAccess.getLetExpressionVariableDeclarationAccess().getNameValidIDParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__StaticAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getStaticStaticKeyword_0_0()); }
(
{ before(grammarAccess.getIfExpressionAccess().getStaticStaticKeyword_0_0()); }

	'static' 

{ after(grammarAccess.getIfExpressionAccess().getStaticStaticKeyword_0_0()); }
)

{ after(grammarAccess.getIfExpressionAccess().getStaticStaticKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__ConditionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getConditionExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getIfExpressionAccess().getConditionExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__ThenExpressionAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getThenExpressionExpressionParserRuleCall_4_0()); }
	ruleExpression{ after(grammarAccess.getIfExpressionAccess().getThenExpressionExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__ElseExpressionAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getElseExpressionExpressionParserRuleCall_6_0()); }
	ruleExpression{ after(grammarAccess.getIfExpressionAccess().getElseExpressionExpressionParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchExpression__StaticAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchExpressionAccess().getStaticStaticKeyword_0_0()); }
(
{ before(grammarAccess.getSwitchExpressionAccess().getStaticStaticKeyword_0_0()); }

	'static' 

{ after(grammarAccess.getSwitchExpressionAccess().getStaticStaticKeyword_0_0()); }
)

{ after(grammarAccess.getSwitchExpressionAccess().getStaticStaticKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchExpression__ControlExpressionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchExpressionAccess().getControlExpressionExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getSwitchExpressionAccess().getControlExpressionExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchExpression__CasesAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchExpressionAccess().getCasesSwitchCaseParserRuleCall_3_0()); }
	ruleSwitchCase{ after(grammarAccess.getSwitchExpressionAccess().getCasesSwitchCaseParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchExpression__DefaultExpressionAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchExpressionAccess().getDefaultExpressionExpressionParserRuleCall_6_0()); }
	ruleExpression{ after(grammarAccess.getSwitchExpressionAccess().getDefaultExpressionExpressionParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__CaseExpressionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchCaseAccess().getCaseExpressionImpliesExpressionParserRuleCall_1_0()); }
	ruleImpliesExpression{ after(grammarAccess.getSwitchCaseAccess().getCaseExpressionImpliesExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__ResultExpressionAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchCaseAccess().getResultExpressionExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getSwitchCaseAccess().getResultExpressionExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__OperandsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExpressionAccess().getOperandsImpliesExpressionParserRuleCall_1_2_0()); }
	ruleImpliesExpression{ after(grammarAccess.getRangeExpressionAccess().getOperandsImpliesExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RangeExpression__OperandsAssignment_1_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeExpressionAccess().getOperandsImpliesExpressionParserRuleCall_1_3_1_0()); }
	ruleImpliesExpression{ after(grammarAccess.getRangeExpressionAccess().getOperandsImpliesExpressionParserRuleCall_1_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImpliesExpressionAccess().getOperatorImpliesOperatorEnumRuleCall_1_1_0()); }
	ruleImpliesOperator{ after(grammarAccess.getImpliesExpressionAccess().getOperatorImpliesOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__RightOperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImpliesExpressionAccess().getRightOperandLogicalOrExpressionParserRuleCall_1_2_0()); }
	ruleLogicalOrExpression{ after(grammarAccess.getImpliesExpressionAccess().getRightOperandLogicalOrExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getOperatorLogicalOrOperatorEnumRuleCall_1_1_0()); }
	ruleLogicalOrOperator{ after(grammarAccess.getLogicalOrExpressionAccess().getOperatorLogicalOrOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__RightOperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getRightOperandLogicalAndExpressionParserRuleCall_1_2_0()); }
	ruleLogicalAndExpression{ after(grammarAccess.getLogicalOrExpressionAccess().getRightOperandLogicalAndExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getOperatorLogicalAndOperatorEnumRuleCall_1_1_0()); }
	ruleLogicalAndOperator{ after(grammarAccess.getLogicalAndExpressionAccess().getOperatorLogicalAndOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__RightOperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getRightOperandEqualityExpressionParserRuleCall_1_2_0()); }
	ruleEqualityExpression{ after(grammarAccess.getLogicalAndExpressionAccess().getRightOperandEqualityExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getOperatorEqualityOperatorEnumRuleCall_1_1_0()); }
	ruleEqualityOperator{ after(grammarAccess.getEqualityExpressionAccess().getOperatorEqualityOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__RightOperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getRightOperandRelationalExpressionParserRuleCall_1_2_0()); }
	ruleRelationalExpression{ after(grammarAccess.getEqualityExpressionAccess().getRightOperandRelationalExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__OperatorAssignment_1_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOperatorRelationalOperatorEnumRuleCall_1_0_0_1_0()); }
	ruleRelationalOperator{ after(grammarAccess.getRelationalExpressionAccess().getOperatorRelationalOperatorEnumRuleCall_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__RightOperandAssignment_1_0_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getRightOperandAdditiveExpressionParserRuleCall_1_0_0_2_0()); }
	ruleAdditiveExpression{ after(grammarAccess.getRelationalExpressionAccess().getRightOperandAdditiveExpressionParserRuleCall_1_0_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__TypeSpecifierAssignment_1_0_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getTypeSpecifierTypeSpecifierParserRuleCall_1_0_1_2_0()); }
	ruleTypeSpecifier{ after(grammarAccess.getRelationalExpressionAccess().getTypeSpecifierTypeSpecifierParserRuleCall_1_0_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getOperatorAdditiveOperatorEnumRuleCall_1_1_0()); }
	ruleAdditiveOperator{ after(grammarAccess.getAdditiveExpressionAccess().getOperatorAdditiveOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__RightOperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getRightOperandMultiplicativeExpressionParserRuleCall_1_2_0()); }
	ruleMultiplicativeExpression{ after(grammarAccess.getAdditiveExpressionAccess().getRightOperandMultiplicativeExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOperatorMultiplicativeOperatorEnumRuleCall_1_1_0()); }
	ruleMultiplicativeOperator{ after(grammarAccess.getMultiplicativeExpressionAccess().getOperatorMultiplicativeOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__RightOperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getRightOperandPowerExpressionParserRuleCall_1_2_0()); }
	rulePowerExpression{ after(grammarAccess.getMultiplicativeExpressionAccess().getRightOperandPowerExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerExpressionAccess().getOperatorPowerOperatorEnumRuleCall_1_1_0()); }
	rulePowerOperator{ after(grammarAccess.getPowerExpressionAccess().getOperatorPowerOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__RightOperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerExpressionAccess().getRightOperandPrefixUnaryExpressionParserRuleCall_1_2_0()); }
	rulePrefixUnaryExpression{ after(grammarAccess.getPowerExpressionAccess().getRightOperandPrefixUnaryExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixUnaryExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrefixUnaryExpressionAccess().getOperatorPrefixUnaryOperatorEnumRuleCall_1_1_0()); }
	rulePrefixUnaryOperator{ after(grammarAccess.getPrefixUnaryExpressionAccess().getOperatorPrefixUnaryOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixUnaryExpression__OperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrefixUnaryExpressionAccess().getOperandPostfixUnaryExpressionParserRuleCall_1_2_0()); }
	rulePostfixUnaryExpression{ after(grammarAccess.getPrefixUnaryExpressionAccess().getOperandPostfixUnaryExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixUnaryExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixUnaryExpressionAccess().getOperatorPostfixUnaryOperatorEnumRuleCall_1_1_0()); }
	rulePostfixUnaryOperator{ after(grammarAccess.getPostfixUnaryExpressionAccess().getOperatorPostfixUnaryOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__SubscriptsAssignment_1_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getSubscriptsArraySubscriptParserRuleCall_1_0_2_0()); }
	ruleArraySubscript{ after(grammarAccess.getMemberFeatureCallAccess().getSubscriptsArraySubscriptParserRuleCall_1_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__SubscriptsAssignment_1_0_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getSubscriptsArraySubscriptParserRuleCall_1_0_3_1_0()); }
	ruleArraySubscript{ after(grammarAccess.getMemberFeatureCallAccess().getSubscriptsArraySubscriptParserRuleCall_1_0_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__MemberVariableAssignment_1_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getMemberVariableValidIDParserRuleCall_1_1_2_0()); }
	ruleValidID{ after(grammarAccess.getMemberFeatureCallAccess().getMemberVariableValidIDParserRuleCall_1_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__FeatureAssignment_1_2_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getFeatureCallableElementCrossReference_1_2_2_0()); }
(
{ before(grammarAccess.getMemberFeatureCallAccess().getFeatureCallableElementValidIDParserRuleCall_1_2_2_0_1()); }
	ruleValidID{ after(grammarAccess.getMemberFeatureCallAccess().getFeatureCallableElementValidIDParserRuleCall_1_2_2_0_1()); }
)
{ after(grammarAccess.getMemberFeatureCallAccess().getFeatureCallableElementCrossReference_1_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__ArgumentsAssignment_1_2_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getArgumentsExpressionParserRuleCall_1_2_4_0_0()); }
	ruleExpression{ after(grammarAccess.getMemberFeatureCallAccess().getArgumentsExpressionParserRuleCall_1_2_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__ArgumentsAssignment_1_2_4_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getArgumentsExpressionParserRuleCall_1_2_4_1_1_0()); }
	ruleExpression{ after(grammarAccess.getMemberFeatureCallAccess().getArgumentsExpressionParserRuleCall_1_2_4_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__IdentifierAssignment_1_3_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getIdentifierValidIDParserRuleCall_1_3_2_0()); }
	ruleValidID{ after(grammarAccess.getMemberFeatureCallAccess().getIdentifierValidIDParserRuleCall_1_3_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__IterationVariablesAssignment_1_3_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getIterationVariablesIterationVariableDeclarationParserRuleCall_1_3_4_0()); }
	ruleIterationVariableDeclaration{ after(grammarAccess.getMemberFeatureCallAccess().getIterationVariablesIterationVariableDeclarationParserRuleCall_1_3_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__IterationVariablesAssignment_1_3_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getIterationVariablesIterationVariableDeclarationParserRuleCall_1_3_5_1_0()); }
	ruleIterationVariableDeclaration{ after(grammarAccess.getMemberFeatureCallAccess().getIterationVariablesIterationVariableDeclarationParserRuleCall_1_3_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__AccumulatorAssignment_1_3_6_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getAccumulatorIterationAccumulatorParserRuleCall_1_3_6_1_0()); }
	ruleIterationAccumulator{ after(grammarAccess.getMemberFeatureCallAccess().getAccumulatorIterationAccumulatorParserRuleCall_1_3_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__BreakConditionAssignment_1_3_7_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getBreakConditionExpressionParserRuleCall_1_3_7_1_0()); }
	ruleExpression{ after(grammarAccess.getMemberFeatureCallAccess().getBreakConditionExpressionParserRuleCall_1_3_7_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MemberFeatureCall__ExpressionAssignment_1_3_9
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberFeatureCallAccess().getExpressionExpressionParserRuleCall_1_3_9_0()); }
	ruleExpression{ after(grammarAccess.getMemberFeatureCallAccess().getExpressionExpressionParserRuleCall_1_3_9_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IterationAccumulator__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterationAccumulatorAccess().getNameValidIDParserRuleCall_0_0()); }
	ruleValidID{ after(grammarAccess.getIterationAccumulatorAccess().getNameValidIDParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IterationAccumulator__InitializerAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterationAccumulatorAccess().getInitializerExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getIterationAccumulatorAccess().getInitializerExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IterationVariableDeclaration__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterationVariableDeclarationAccess().getNameValidIDParserRuleCall_0()); }
	ruleValidID{ after(grammarAccess.getIterationVariableDeclarationAccess().getNameValidIDParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArraySubscript__SliceAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArraySubscriptAccess().getSliceColonKeyword_0_0()); }
(
{ before(grammarAccess.getArraySubscriptAccess().getSliceColonKeyword_0_0()); }

	':' 

{ after(grammarAccess.getArraySubscriptAccess().getSliceColonKeyword_0_0()); }
)

{ after(grammarAccess.getArraySubscriptAccess().getSliceColonKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArraySubscript__ExpressionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArraySubscriptAccess().getExpressionExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getArraySubscriptAccess().getExpressionExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RealLiteral__DataAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealLiteralAccess().getDataRealDataParserRuleCall_0_0()); }
	ruleRealData{ after(grammarAccess.getRealLiteralAccess().getDataRealDataParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RealLiteral__UnitAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealLiteralAccess().getUnitUnitParserRuleCall_1_0()); }
	ruleUnit{ after(grammarAccess.getRealLiteralAccess().getUnitUnitParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerLiteral__DataAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerLiteralAccess().getDataIntegerDataParserRuleCall_0_0()); }
	ruleIntegerData{ after(grammarAccess.getIntegerLiteralAccess().getDataIntegerDataParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerLiteral__UnitAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerLiteralAccess().getUnitUnitParserRuleCall_1_0()); }
	ruleUnit{ after(grammarAccess.getIntegerLiteralAccess().getUnitUnitParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__TrueAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanLiteralAccess().getTrueTrueKeyword_1_0_0()); }
(
{ before(grammarAccess.getBooleanLiteralAccess().getTrueTrueKeyword_1_0_0()); }

	'true' 

{ after(grammarAccess.getBooleanLiteralAccess().getTrueTrueKeyword_1_0_0()); }
)

{ after(grammarAccess.getBooleanLiteralAccess().getTrueTrueKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__TextAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringLiteralAccess().getTextSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getStringLiteralAccess().getTextSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TemplateExpression__SegmentsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemplateExpressionAccess().getSegmentsConstantTemplateSegmentParserRuleCall_2_0()); }
	ruleConstantTemplateSegment{ after(grammarAccess.getTemplateExpressionAccess().getSegmentsConstantTemplateSegmentParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TemplateExpression__SegmentsAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemplateExpressionAccess().getSegmentsExpressionTemplateSegmentParserRuleCall_3_0_0()); }
	ruleExpressionTemplateSegment{ after(grammarAccess.getTemplateExpressionAccess().getSegmentsExpressionTemplateSegmentParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TemplateExpression__SegmentsAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemplateExpressionAccess().getSegmentsConstantTemplateSegmentParserRuleCall_3_1_0()); }
	ruleConstantTemplateSegment{ after(grammarAccess.getTemplateExpressionAccess().getSegmentsConstantTemplateSegmentParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantTemplateSegment__TextAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantTemplateSegmentAccess().getTextConstantStringParserRuleCall_0()); }
	ruleConstantString{ after(grammarAccess.getConstantTemplateSegmentAccess().getTextConstantStringParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionTemplateSegment__ExpressionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionTemplateSegmentAccess().getExpressionExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getExpressionTemplateSegmentAccess().getExpressionExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__FeatureAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getFeatureCallableElementCrossReference_1_0()); }
(
{ before(grammarAccess.getVariableReferenceAccess().getFeatureCallableElementValidIDParserRuleCall_1_0_1()); }
	ruleValidID{ after(grammarAccess.getVariableReferenceAccess().getFeatureCallableElementValidIDParserRuleCall_1_0_1()); }
)
{ after(grammarAccess.getVariableReferenceAccess().getFeatureCallableElementCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__StepExpressionAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getStepExpressionStepExpressionParserRuleCall_2_1_0()); }
	ruleStepExpression{ after(grammarAccess.getVariableReferenceAccess().getStepExpressionStepExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__FeatureAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getFeatureCallableElementCrossReference_1_0()); }
(
{ before(grammarAccess.getFunctionCallAccess().getFeatureCallableElementValidIDParserRuleCall_1_0_1()); }
	ruleValidID{ after(grammarAccess.getFunctionCallAccess().getFeatureCallableElementValidIDParserRuleCall_1_0_1()); }
)
{ after(grammarAccess.getFunctionCallAccess().getFeatureCallableElementCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__ArgumentsAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getArgumentsExpressionParserRuleCall_3_0_0()); }
	ruleExpression{ after(grammarAccess.getFunctionCallAccess().getArgumentsExpressionParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__ArgumentsAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getArgumentsExpressionParserRuleCall_3_1_1_0()); }
	ruleExpression{ after(grammarAccess.getFunctionCallAccess().getArgumentsExpressionParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedVariableReference__FeatureAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedVariableReferenceAccess().getFeatureCallableElementCrossReference_2_0()); }
(
{ before(grammarAccess.getQualifiedVariableReferenceAccess().getFeatureCallableElementQualifiedNameParserRuleCall_2_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getQualifiedVariableReferenceAccess().getFeatureCallableElementQualifiedNameParserRuleCall_2_0_1()); }
)
{ after(grammarAccess.getQualifiedVariableReferenceAccess().getFeatureCallableElementCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedFunctionCall__FeatureAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedFunctionCallAccess().getFeatureCallableElementCrossReference_2_0()); }
(
{ before(grammarAccess.getQualifiedFunctionCallAccess().getFeatureCallableElementQualifiedNameParserRuleCall_2_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getQualifiedFunctionCallAccess().getFeatureCallableElementQualifiedNameParserRuleCall_2_0_1()); }
)
{ after(grammarAccess.getQualifiedFunctionCallAccess().getFeatureCallableElementCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedFunctionCall__ArgumentsAssignment_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedFunctionCallAccess().getArgumentsExpressionParserRuleCall_4_0_0()); }
	ruleExpression{ after(grammarAccess.getQualifiedFunctionCallAccess().getArgumentsExpressionParserRuleCall_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedFunctionCall__ArgumentsAssignment_4_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedFunctionCallAccess().getArgumentsExpressionParserRuleCall_4_1_1_0()); }
	ruleExpression{ after(grammarAccess.getQualifiedFunctionCallAccess().getArgumentsExpressionParserRuleCall_4_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RangeStepExpression__EndAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeStepExpressionAccess().getEndAdditiveStepExpressionParserRuleCall_1_2_0()); }
	ruleAdditiveStepExpression{ after(grammarAccess.getRangeStepExpressionAccess().getEndAdditiveStepExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveStepExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveStepExpressionAccess().getOperatorAdditiveOperatorEnumRuleCall_1_1_0()); }
	ruleAdditiveOperator{ after(grammarAccess.getAdditiveStepExpressionAccess().getOperatorAdditiveOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveStepExpression__RightOperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveStepExpressionAccess().getRightOperandNegateStepExpressionParserRuleCall_1_2_0()); }
	ruleNegateStepExpression{ after(grammarAccess.getAdditiveStepExpressionAccess().getRightOperandNegateStepExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NegateStepExpression__OperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegateStepExpressionAccess().getOperandPrimitiveStepExpressionParserRuleCall_1_2_0()); }
	rulePrimitiveStepExpression{ after(grammarAccess.getNegateStepExpressionAccess().getOperandPrimitiveStepExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StepLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStepLiteralAccess().getValueValidIntParserRuleCall_0()); }
	ruleValidInt{ after(grammarAccess.getStepLiteralAccess().getValueValidIntParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayConstructionOperator__ExpressionsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayConstructionOperatorAccess().getExpressionsExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getArrayConstructionOperatorAccess().getExpressionsExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayConstructionOperator__ExpressionsAssignment_2_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayConstructionOperatorAccess().getExpressionsExpressionParserRuleCall_2_0_1_0()); }
	ruleExpression{ after(grammarAccess.getArrayConstructionOperatorAccess().getExpressionsExpressionParserRuleCall_2_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayConstructionOperator__IterationClausesAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayConstructionOperatorAccess().getIterationClausesArrayConstructionIterationClauseParserRuleCall_2_1_1_0()); }
	ruleArrayConstructionIterationClause{ after(grammarAccess.getArrayConstructionOperatorAccess().getIterationClausesArrayConstructionIterationClauseParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayConstructionOperator__IterationClausesAssignment_2_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayConstructionOperatorAccess().getIterationClausesArrayConstructionIterationClauseParserRuleCall_2_1_2_1_0()); }
	ruleArrayConstructionIterationClause{ after(grammarAccess.getArrayConstructionOperatorAccess().getIterationClausesArrayConstructionIterationClauseParserRuleCall_2_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayConstructionIterationClause__IterationVariableAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayConstructionIterationClauseAccess().getIterationVariableIterationVariableDeclarationParserRuleCall_0_0()); }
	ruleIterationVariableDeclaration{ after(grammarAccess.getArrayConstructionIterationClauseAccess().getIterationVariableIterationVariableDeclarationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayConstructionIterationClause__CollectionExpressionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayConstructionIterationClauseAccess().getCollectionExpressionExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getArrayConstructionIterationClauseAccess().getCollectionExpressionExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayConcatenationOperator__RowsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayConcatenationOperatorAccess().getRowsExpressionListParserRuleCall_1_0()); }
	ruleExpressionList{ after(grammarAccess.getArrayConcatenationOperatorAccess().getRowsExpressionListParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayConcatenationOperator__RowsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayConcatenationOperatorAccess().getRowsExpressionListParserRuleCall_2_1_0()); }
	ruleExpressionList{ after(grammarAccess.getArrayConcatenationOperatorAccess().getRowsExpressionListParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__ExpressionsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getExpressionsExpressionParserRuleCall_0_0()); }
	ruleExpression{ after(grammarAccess.getExpressionListAccess().getExpressionsExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__ExpressionsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getExpressionsExpressionParserRuleCall_1_1_0()); }
	ruleExpression{ after(grammarAccess.getExpressionListAccess().getExpressionsExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StructConstructionOperator__MembersAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructConstructionOperatorAccess().getMembersStructConstructionMemberParserRuleCall_1_0()); }
	ruleStructConstructionMember{ after(grammarAccess.getStructConstructionOperatorAccess().getMembersStructConstructionMemberParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StructConstructionOperator__MembersAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructConstructionOperatorAccess().getMembersStructConstructionMemberParserRuleCall_2_1_0()); }
	ruleStructConstructionMember{ after(grammarAccess.getStructConstructionOperatorAccess().getMembersStructConstructionMemberParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StructConstructionMember__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructConstructionMemberAccess().getNameValidIDParserRuleCall_0_0()); }
	ruleValidID{ after(grammarAccess.getStructConstructionMemberAccess().getNameValidIDParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StructConstructionMember__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructConstructionMemberAccess().getValueExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getStructConstructionMemberAccess().getValueExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitConstructionOperator__UnitAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitConstructionOperatorAccess().getUnitExplicitUnitParserRuleCall_1_0()); }
	ruleExplicitUnit{ after(grammarAccess.getUnitConstructionOperatorAccess().getUnitExplicitUnitParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__ExpressionsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedExpressionAccess().getExpressionsExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getParenthesizedExpressionAccess().getExpressionsExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__ExpressionsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedExpressionAccess().getExpressionsExpressionParserRuleCall_2_1_0()); }
	ruleExpression{ after(grammarAccess.getParenthesizedExpressionAccess().getExpressionsExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AlgorithmExpression__BodyAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlgorithmExpressionAccess().getBodyCompoundStatementParserRuleCall_2_0()); }
	ruleCompoundStatement{ after(grammarAccess.getAlgorithmExpressionAccess().getBodyCompoundStatementParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundStatement__StatementsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundStatementAccess().getStatementsStatementParserRuleCall_2_0()); }
	ruleStatement{ after(grammarAccess.getCompoundStatementAccess().getStatementsStatementParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__TargetAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getTargetAssignableMemberFeatureCallParserRuleCall_0_0()); }
	ruleAssignableMemberFeatureCall{ after(grammarAccess.getAssignmentAccess().getTargetAssignableMemberFeatureCallParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__AssignedExpressionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getAssignedExpressionExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getAssignmentAccess().getAssignedExpressionExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignableMemberFeatureCall__SubscriptsAssignment_1_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignableMemberFeatureCallAccess().getSubscriptsArraySubscriptParserRuleCall_1_0_2_0()); }
	ruleArraySubscript{ after(grammarAccess.getAssignableMemberFeatureCallAccess().getSubscriptsArraySubscriptParserRuleCall_1_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignableMemberFeatureCall__SubscriptsAssignment_1_0_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignableMemberFeatureCallAccess().getSubscriptsArraySubscriptParserRuleCall_1_0_3_1_0()); }
	ruleArraySubscript{ after(grammarAccess.getAssignableMemberFeatureCallAccess().getSubscriptsArraySubscriptParserRuleCall_1_0_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignableMemberFeatureCall__MemberVariableAssignment_1_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignableMemberFeatureCallAccess().getMemberVariableValidIDParserRuleCall_1_1_2_0()); }
	ruleValidID{ after(grammarAccess.getAssignableMemberFeatureCallAccess().getMemberVariableValidIDParserRuleCall_1_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVariableDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalVariableDeclarationAccess().getNameValidIDParserRuleCall_1_0()); }
	ruleValidID{ after(grammarAccess.getLocalVariableDeclarationAccess().getNameValidIDParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVariableDeclaration__InitializerAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalVariableDeclarationAccess().getInitializerExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getLocalVariableDeclarationAccess().getInitializerExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__ConditionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getConditionExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getIfStatementAccess().getConditionExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__ThenStatementAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getThenStatementStatementParserRuleCall_4_0()); }
	ruleStatement{ after(grammarAccess.getIfStatementAccess().getThenStatementStatementParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__ElseStatementAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getElseStatementStatementParserRuleCall_5_1_0()); }
	ruleStatement{ after(grammarAccess.getIfStatementAccess().getElseStatementStatementParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__ConditionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getConditionExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getWhileStatementAccess().getConditionExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__BodyAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getBodyStatementParserRuleCall_4_0()); }
	ruleStatement{ after(grammarAccess.getWhileStatementAccess().getBodyStatementParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__IterationVariableAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForStatementAccess().getIterationVariableIterationVariableDeclarationParserRuleCall_2_0()); }
	ruleIterationVariableDeclaration{ after(grammarAccess.getForStatementAccess().getIterationVariableIterationVariableDeclarationParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__CollectionExpressionAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForStatementAccess().getCollectionExpressionExpressionParserRuleCall_4_0()); }
	ruleExpression{ after(grammarAccess.getForStatementAccess().getCollectionExpressionExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__BodyAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForStatementAccess().getBodyStatementParserRuleCall_6_0()); }
	ruleStatement{ after(grammarAccess.getForStatementAccess().getBodyStatementParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileStatement__BodyAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoWhileStatementAccess().getBodyStatementParserRuleCall_1_0()); }
	ruleStatement{ after(grammarAccess.getDoWhileStatementAccess().getBodyStatementParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileStatement__ConditionAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoWhileStatementAccess().getConditionExpressionParserRuleCall_4_0()); }
	ruleExpression{ after(grammarAccess.getDoWhileStatementAccess().getConditionExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__ExpressionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getExpressionExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getReturnStatementAccess().getExpressionExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Unit__NumeratorAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitAccess().getNumeratorUnitNumeratorParserRuleCall_1_1_1_0()); }
	ruleUnitNumerator{ after(grammarAccess.getUnitAccess().getNumeratorUnitNumeratorParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Unit__DenominatorAssignment_1_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitAccess().getDenominatorUnitDenominatorParserRuleCall_1_1_2_1_0()); }
	ruleUnitDenominator{ after(grammarAccess.getUnitAccess().getDenominatorUnitDenominatorParserRuleCall_1_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Unit__NumeratorAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitAccess().getNumeratorImplicitUnitNumeratorParserRuleCall_1_2_0()); }
	ruleImplicitUnitNumerator{ after(grammarAccess.getUnitAccess().getNumeratorImplicitUnitNumeratorParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExplicitUnit__NumeratorAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExplicitUnitAccess().getNumeratorUnitNumeratorParserRuleCall_1_0()); }
	ruleUnitNumerator{ after(grammarAccess.getExplicitUnitAccess().getNumeratorUnitNumeratorParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExplicitUnit__DenominatorAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExplicitUnitAccess().getDenominatorUnitDenominatorParserRuleCall_2_1_0()); }
	ruleUnitDenominator{ after(grammarAccess.getExplicitUnitAccess().getDenominatorUnitDenominatorParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitNumerator__FactorsAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitNumeratorAccess().getFactorsUnitFactorParserRuleCall_1_0_0()); }
	ruleUnitFactor{ after(grammarAccess.getUnitNumeratorAccess().getFactorsUnitFactorParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitNumerator__FactorsAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitNumeratorAccess().getFactorsUnitFactorParserRuleCall_1_1_1_0()); }
	ruleUnitFactor{ after(grammarAccess.getUnitNumeratorAccess().getFactorsUnitFactorParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitDenominator__FactorsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitDenominatorAccess().getFactorsUnitFactorParserRuleCall_0_0()); }
	ruleUnitFactor{ after(grammarAccess.getUnitDenominatorAccess().getFactorsUnitFactorParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitDenominator__FactorsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitDenominatorAccess().getFactorsUnitFactorParserRuleCall_1_1_0()); }
	ruleUnitFactor{ after(grammarAccess.getUnitDenominatorAccess().getFactorsUnitFactorParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitDenominator__FactorsAssignment_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitDenominatorAccess().getFactorsUnitFactorParserRuleCall_1_2_1_0()); }
	ruleUnitFactor{ after(grammarAccess.getUnitDenominatorAccess().getFactorsUnitFactorParserRuleCall_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitFactor__SymbolAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitFactorAccess().getSymbolValidIDParserRuleCall_0_0()); }
	ruleValidID{ after(grammarAccess.getUnitFactorAccess().getSymbolValidIDParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitFactor__ExponentAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitFactorAccess().getExponentUnitExponentParserRuleCall_1_1_0()); }
	ruleUnitExponent{ after(grammarAccess.getUnitFactorAccess().getExponentUnitExponentParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_N : 'n';

RULE_IJ : ('i'|'j');

RULE_E : ('e'|'E');

RULE_EXP : RULE_E ('0'..'9')+;

RULE_EXPIJ : RULE_EXP RULE_IJ;

RULE_ONE : '1';

RULE_INT : ('0'..'9')+;

RULE_ID : '_'? ('a'..'z'|'A'..'Z') ('0'..'9'|'_'|'a'..'z'|'A'..'Z')*;

RULE_STRING : '"' (~(('\\'|'"'))|'\\' ('\''|'"'|'?'|'\\'|'a'|'b'|'f'|'n'|'r'|'t'|'v'))* '"';

RULE_CONSTANT_STRING : '\u00AD';

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


