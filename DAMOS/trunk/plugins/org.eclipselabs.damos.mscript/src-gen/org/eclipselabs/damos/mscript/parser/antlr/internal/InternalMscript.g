/*
* generated by Xtext
*/
grammar InternalMscript;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipselabs.damos.mscript.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipselabs.damos.mscript.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipselabs.damos.mscript.services.MscriptGrammarAccess;

}

@parser::members {

 	private MscriptGrammarAccess grammarAccess;
 	
    public InternalMscriptParser(TokenStream input, MscriptGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Module";	
   	}
   	
   	@Override
   	protected MscriptGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModule
entryRuleModule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModuleRule()); }
	 iv_ruleModule=ruleModule 
	 { $current=$iv_ruleModule.current; } 
	 EOF 
;

// Rule Module
ruleModule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='package' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getModuleAccess().getPackageKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getPackageNameQualifiedNameParserRuleCall_1_0()); 
	    }
		lv_packageName_1_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		set(
       			$current, 
       			"packageName",
        		lv_packageName_1_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getImportDeclarationsImportDeclarationParserRuleCall_2_0()); 
	    }
		lv_importDeclarations_2_0=ruleImportDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		add(
       			$current, 
       			"importDeclarations",
        		lv_importDeclarations_2_0, 
        		"ImportDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getDeclarationsDeclarationParserRuleCall_3_0()); 
	    }
		lv_declarations_3_0=ruleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_3_0, 
        		"Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleImportDeclaration
entryRuleImportDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportDeclarationRule()); }
	 iv_ruleImportDeclaration=ruleImportDeclaration 
	 { $current=$iv_ruleImportDeclaration.current; } 
	 EOF 
;

// Rule ImportDeclaration
ruleImportDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportDeclarationAccess().getImportKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImportDeclarationAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0()); 
	    }
		lv_importedNamespace_1_0=ruleQualifiedNameWithWildcard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportDeclarationRule());
	        }
       		set(
       			$current, 
       			"importedNamespace",
        		lv_importedNamespace_1_0, 
        		"QualifiedNameWithWildcard");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDeclaration
entryRuleDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclarationRule()); }
	 iv_ruleDeclaration=ruleDeclaration 
	 { $current=$iv_ruleDeclaration.current; } 
	 EOF 
;

// Rule Declaration
ruleDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getTypeDeclarationParserRuleCall_0()); 
    }
    this_TypeDeclaration_0=ruleTypeDeclaration
    { 
        $current = $this_TypeDeclaration_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getEnumerationDeclarationParserRuleCall_1()); 
    }
    this_EnumerationDeclaration_1=ruleEnumerationDeclaration
    { 
        $current = $this_EnumerationDeclaration_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getFunctionDeclarationParserRuleCall_2()); 
    }
    this_FunctionDeclaration_2=ruleFunctionDeclaration
    { 
        $current = $this_FunctionDeclaration_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getUnitDeclarationParserRuleCall_3()); 
    }
    this_UnitDeclaration_3=ruleUnitDeclaration
    { 
        $current = $this_UnitDeclaration_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTypeDeclaration
entryRuleTypeDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeDeclarationRule()); }
	 iv_ruleTypeDeclaration=ruleTypeDeclaration 
	 { $current=$iv_ruleTypeDeclaration.current; } 
	 EOF 
;

// Rule TypeDeclaration
ruleTypeDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='type' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTypeDeclarationAccess().getTypeKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeDeclarationAccess().getNameValidIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeDeclarationAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeDeclarationAccess().getTypeSpecifierTypeSpecifierParserRuleCall_3_0()); 
	    }
		lv_typeSpecifier_3_0=ruleTypeSpecifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeDeclarationRule());
	        }
       		set(
       			$current, 
       			"typeSpecifier",
        		lv_typeSpecifier_3_0, 
        		"TypeSpecifier");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleUnitDeclaration
entryRuleUnitDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnitDeclarationRule()); }
	 iv_ruleUnitDeclaration=ruleUnitDeclaration 
	 { $current=$iv_ruleUnitDeclaration.current; } 
	 EOF 
;

// Rule UnitDeclaration
ruleUnitDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getUnitDeclarationAccess().getBaseUnitDeclarationParserRuleCall()); 
    }
    this_BaseUnitDeclaration_0=ruleBaseUnitDeclaration
    { 
        $current = $this_BaseUnitDeclaration_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleBaseUnitDeclaration
entryRuleBaseUnitDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBaseUnitDeclarationRule()); }
	 iv_ruleBaseUnitDeclaration=ruleBaseUnitDeclaration 
	 { $current=$iv_ruleBaseUnitDeclaration.current; } 
	 EOF 
;

// Rule BaseUnitDeclaration
ruleBaseUnitDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='unit' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBaseUnitDeclarationAccess().getUnitKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBaseUnitDeclarationAccess().getNameValidIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBaseUnitDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleEnumerationDeclaration
entryRuleEnumerationDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumerationDeclarationRule()); }
	 iv_ruleEnumerationDeclaration=ruleEnumerationDeclaration 
	 { $current=$iv_ruleEnumerationDeclaration.current; } 
	 EOF 
;

// Rule EnumerationDeclaration
ruleEnumerationDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='enum' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEnumerationDeclarationAccess().getEnumKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumerationDeclarationAccess().getNameValidIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumerationDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEnumerationDeclarationAccess().getLeftCurlyBracketKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getEnumerationDeclarationAccess().getLiteralDeclarationsEnumerationLiteralDeclarationParserRuleCall_3_0_0()); 
	    }
		lv_literalDeclarations_3_0=ruleEnumerationLiteralDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumerationDeclarationRule());
	        }
       		add(
       			$current, 
       			"literalDeclarations",
        		lv_literalDeclarations_3_0, 
        		"EnumerationLiteralDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getEnumerationDeclarationAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumerationDeclarationAccess().getLiteralDeclarationsEnumerationLiteralDeclarationParserRuleCall_3_1_1_0()); 
	    }
		lv_literalDeclarations_5_0=ruleEnumerationLiteralDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumerationDeclarationRule());
	        }
       		add(
       			$current, 
       			"literalDeclarations",
        		lv_literalDeclarations_5_0, 
        		"EnumerationLiteralDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getEnumerationDeclarationAccess().getCommaKeyword_3_2());
    }
)?)?	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getEnumerationDeclarationAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleEnumerationLiteralDeclaration
entryRuleEnumerationLiteralDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumerationLiteralDeclarationRule()); }
	 iv_ruleEnumerationLiteralDeclaration=ruleEnumerationLiteralDeclaration 
	 { $current=$iv_ruleEnumerationLiteralDeclaration.current; } 
	 EOF 
;

// Rule EnumerationLiteralDeclaration
ruleEnumerationLiteralDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumerationLiteralDeclarationAccess().getNameValidIDParserRuleCall_0()); 
	    }
		lv_name_0_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumerationLiteralDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleFunctionDeclaration
entryRuleFunctionDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionDeclarationRule()); }
	 iv_ruleFunctionDeclaration=ruleFunctionDeclaration 
	 { $current=$iv_ruleFunctionDeclaration.current; } 
	 EOF 
;

// Rule FunctionDeclaration
ruleFunctionDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getKindFunctionKindEnumRuleCall_0_0()); 
	    }
		lv_kind_0_0=ruleFunctionKind		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		set(
       			$current, 
       			"kind",
        		lv_kind_0_0, 
        		"FunctionKind");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_1='function' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunctionDeclarationAccess().getFunctionKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getNameValidIDParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='<' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctionDeclarationAccess().getLessThanSignKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getStaticParameterDeclarationsStaticParameterDeclarationParserRuleCall_3_1_0()); 
	    }
		lv_staticParameterDeclarations_4_0=ruleStaticParameterDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		add(
       			$current, 
       			"staticParameterDeclarations",
        		lv_staticParameterDeclarations_4_0, 
        		"StaticParameterDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFunctionDeclarationAccess().getCommaKeyword_3_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getStaticParameterDeclarationsStaticParameterDeclarationParserRuleCall_3_2_1_0()); 
	    }
		lv_staticParameterDeclarations_6_0=ruleStaticParameterDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		add(
       			$current, 
       			"staticParameterDeclarations",
        		lv_staticParameterDeclarations_6_0, 
        		"StaticParameterDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_7='>' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getFunctionDeclarationAccess().getGreaterThanSignKeyword_3_3());
    }
)?	otherlv_8='(' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getFunctionDeclarationAccess().getLeftParenthesisKeyword_4());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getInputParameterDeclarationsInputParameterDeclarationParserRuleCall_5_0_0()); 
	    }
		lv_inputParameterDeclarations_9_0=ruleInputParameterDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		add(
       			$current, 
       			"inputParameterDeclarations",
        		lv_inputParameterDeclarations_9_0, 
        		"InputParameterDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getFunctionDeclarationAccess().getCommaKeyword_5_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getInputParameterDeclarationsInputParameterDeclarationParserRuleCall_5_1_1_0()); 
	    }
		lv_inputParameterDeclarations_11_0=ruleInputParameterDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		add(
       			$current, 
       			"inputParameterDeclarations",
        		lv_inputParameterDeclarations_11_0, 
        		"InputParameterDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_12=')' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getFunctionDeclarationAccess().getRightParenthesisKeyword_6());
    }
	otherlv_13='->' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getFunctionDeclarationAccess().getHyphenMinusGreaterThanSignKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getOutputParameterDeclarationsOutputParameterDeclarationParserRuleCall_8_0()); 
	    }
		lv_outputParameterDeclarations_14_0=ruleOutputParameterDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		add(
       			$current, 
       			"outputParameterDeclarations",
        		lv_outputParameterDeclarations_14_0, 
        		"OutputParameterDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_15=',' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getFunctionDeclarationAccess().getCommaKeyword_9_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getOutputParameterDeclarationsOutputParameterDeclarationParserRuleCall_9_1_0()); 
	    }
		lv_outputParameterDeclarations_16_0=ruleOutputParameterDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		add(
       			$current, 
       			"outputParameterDeclarations",
        		lv_outputParameterDeclarations_16_0, 
        		"OutputParameterDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_17='{' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getFunctionDeclarationAccess().getLeftCurlyBracketKeyword_10());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getChecksCheckParserRuleCall_11_0_0()); 
	    }
		lv_checks_18_0=ruleCheck		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		add(
       			$current, 
       			"checks",
        		lv_checks_18_0, 
        		"Check");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getAssertionsAssertionParserRuleCall_11_1_0()); 
	    }
		lv_assertions_19_0=ruleAssertion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		add(
       			$current, 
       			"assertions",
        		lv_assertions_19_0, 
        		"Assertion");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getFunctionAliasDeclarationsFunctionAliasDeclarationParserRuleCall_11_2_0()); 
	    }
		lv_functionAliasDeclarations_20_0=ruleFunctionAliasDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		add(
       			$current, 
       			"functionAliasDeclarations",
        		lv_functionAliasDeclarations_20_0, 
        		"FunctionAliasDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getStateVariableDeclarationsStateVariableDeclarationParserRuleCall_11_3_0()); 
	    }
		lv_stateVariableDeclarations_21_0=ruleStateVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		add(
       			$current, 
       			"stateVariableDeclarations",
        		lv_stateVariableDeclarations_21_0, 
        		"StateVariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getConstantDeclarationsConstantDeclarationParserRuleCall_11_4_0()); 
	    }
		lv_constantDeclarations_22_0=ruleConstantDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		add(
       			$current, 
       			"constantDeclarations",
        		lv_constantDeclarations_22_0, 
        		"ConstantDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getEquationsEquationParserRuleCall_11_5_0()); 
	    }
		lv_equations_23_0=ruleEquation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		add(
       			$current, 
       			"equations",
        		lv_equations_23_0, 
        		"Equation");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_24='}' 
    {
    	newLeafNode(otherlv_24, grammarAccess.getFunctionDeclarationAccess().getRightCurlyBracketKeyword_12());
    }
)
;





// Entry rule entryRuleStaticParameterDeclaration
entryRuleStaticParameterDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStaticParameterDeclarationRule()); }
	 iv_ruleStaticParameterDeclaration=ruleStaticParameterDeclaration 
	 { $current=$iv_ruleStaticParameterDeclaration.current; } 
	 EOF 
;

// Rule StaticParameterDeclaration
ruleStaticParameterDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getStaticParameterDeclarationAccess().getNameValidIDParserRuleCall_0()); 
	    }
		lv_name_0_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStaticParameterDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleInputParameterDeclaration
entryRuleInputParameterDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInputParameterDeclarationRule()); }
	 iv_ruleInputParameterDeclaration=ruleInputParameterDeclaration 
	 { $current=$iv_ruleInputParameterDeclaration.current; } 
	 EOF 
;

// Rule InputParameterDeclaration
ruleInputParameterDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getInputParameterDeclarationAccess().getNameValidIDParserRuleCall_0()); 
	    }
		lv_name_0_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInputParameterDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleOutputParameterDeclaration
entryRuleOutputParameterDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOutputParameterDeclarationRule()); }
	 iv_ruleOutputParameterDeclaration=ruleOutputParameterDeclaration 
	 { $current=$iv_ruleOutputParameterDeclaration.current; } 
	 EOF 
;

// Rule OutputParameterDeclaration
ruleOutputParameterDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getOutputParameterDeclarationAccess().getNameValidIDParserRuleCall_0()); 
	    }
		lv_name_0_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOutputParameterDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleCheck
entryRuleCheck returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCheckRule()); }
	 iv_ruleCheck=ruleCheck 
	 { $current=$iv_ruleCheck.current; } 
	 EOF 
;

// Rule Check
ruleCheck returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='check' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCheckAccess().getCheckKeyword_0());
    }
(	otherlv_1='<' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCheckAccess().getLessThanSignKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCheckAccess().getStaticArgumentsExpressionParserRuleCall_1_1_0()); 
	    }
		lv_staticArguments_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCheckRule());
	        }
       		add(
       			$current, 
       			"staticArguments",
        		lv_staticArguments_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCheckAccess().getCommaKeyword_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCheckAccess().getStaticArgumentsExpressionParserRuleCall_1_2_1_0()); 
	    }
		lv_staticArguments_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCheckRule());
	        }
       		add(
       			$current, 
       			"staticArguments",
        		lv_staticArguments_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5='>' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getCheckAccess().getGreaterThanSignKeyword_1_3());
    }
)?	otherlv_6='(' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getCheckAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getCheckAccess().getInputParameterTypesTypeSpecifierParserRuleCall_3_0_0()); 
	    }
		lv_inputParameterTypes_7_0=ruleTypeSpecifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCheckRule());
	        }
       		add(
       			$current, 
       			"inputParameterTypes",
        		lv_inputParameterTypes_7_0, 
        		"TypeSpecifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getCheckAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCheckAccess().getInputParameterTypesTypeSpecifierParserRuleCall_3_1_1_0()); 
	    }
		lv_inputParameterTypes_9_0=ruleTypeSpecifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCheckRule());
	        }
       		add(
       			$current, 
       			"inputParameterTypes",
        		lv_inputParameterTypes_9_0, 
        		"TypeSpecifier");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_10=')' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getCheckAccess().getRightParenthesisKeyword_4());
    }
	otherlv_11='->' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getCheckAccess().getHyphenMinusGreaterThanSignKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCheckAccess().getOutputParameterTypesTypeSpecifierParserRuleCall_6_0()); 
	    }
		lv_outputParameterTypes_12_0=ruleTypeSpecifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCheckRule());
	        }
       		add(
       			$current, 
       			"outputParameterTypes",
        		lv_outputParameterTypes_12_0, 
        		"TypeSpecifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_13=',' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getCheckAccess().getCommaKeyword_7_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCheckAccess().getOutputParameterTypesTypeSpecifierParserRuleCall_7_1_0()); 
	    }
		lv_outputParameterTypes_14_0=ruleTypeSpecifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCheckRule());
	        }
       		add(
       			$current, 
       			"outputParameterTypes",
        		lv_outputParameterTypes_14_0, 
        		"TypeSpecifier");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAssertion
entryRuleAssertion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssertionRule()); }
	 iv_ruleAssertion=ruleAssertion 
	 { $current=$iv_ruleAssertion.current; } 
	 EOF 
;

// Rule Assertion
ruleAssertion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_static_0_0=	'static' 
    {
        newLeafNode(lv_static_0_0, grammarAccess.getAssertionAccess().getStaticStaticKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAssertionRule());
	        }
       		setWithLastConsumed($current, "static", true, "static");
	    }

)
)?	otherlv_1='assert' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAssertionAccess().getAssertKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssertionAccess().getConditionExpressionParserRuleCall_2_0()); 
	    }
		lv_condition_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssertionRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAssertionAccess().getColonKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssertionAccess().getStatusKindAssertionStatusKindEnumRuleCall_4_0()); 
	    }
		lv_statusKind_4_0=ruleAssertionStatusKind		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssertionRule());
	        }
       		set(
       			$current, 
       			"statusKind",
        		lv_statusKind_4_0, 
        		"AssertionStatusKind");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAssertionAccess().getMessageExpressionParserRuleCall_5_0()); 
	    }
		lv_message_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssertionRule());
	        }
       		set(
       			$current, 
       			"message",
        		lv_message_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleStateVariableDeclaration
entryRuleStateVariableDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateVariableDeclarationRule()); }
	 iv_ruleStateVariableDeclaration=ruleStateVariableDeclaration 
	 { $current=$iv_ruleStateVariableDeclaration.current; } 
	 EOF 
;

// Rule StateVariableDeclaration
ruleStateVariableDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='var' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStateVariableDeclarationAccess().getVarKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStateVariableDeclarationAccess().getNameValidIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleConstantDeclaration
entryRuleConstantDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantDeclarationRule()); }
	 iv_ruleConstantDeclaration=ruleConstantDeclaration 
	 { $current=$iv_ruleConstantDeclaration.current; } 
	 EOF 
;

// Rule ConstantDeclaration
ruleConstantDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='const' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConstantDeclarationAccess().getConstKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantDeclarationAccess().getNameValidIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConstantDeclarationAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantDeclarationAccess().getInitializerExpressionParserRuleCall_3_0()); 
	    }
		lv_initializer_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantDeclarationRule());
	        }
       		set(
       			$current, 
       			"initializer",
        		lv_initializer_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFunctionAliasDeclaration
entryRuleFunctionAliasDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionAliasDeclarationRule()); }
	 iv_ruleFunctionAliasDeclaration=ruleFunctionAliasDeclaration 
	 { $current=$iv_ruleFunctionAliasDeclaration.current; } 
	 EOF 
;

// Rule FunctionAliasDeclaration
ruleFunctionAliasDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='function' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFunctionAliasDeclarationAccess().getFunctionKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAliasDeclarationAccess().getNameValidIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionAliasDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFunctionAliasDeclarationAccess().getEqualsSignKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionAliasDeclarationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFunctionAliasDeclarationAccess().getFunctionDeclarationFunctionDeclarationCrossReference_3_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4='<' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFunctionAliasDeclarationAccess().getLessThanSignKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAliasDeclarationAccess().getStaticArgumentsExpressionParserRuleCall_4_1_0()); 
	    }
		lv_staticArguments_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionAliasDeclarationRule());
	        }
       		add(
       			$current, 
       			"staticArguments",
        		lv_staticArguments_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFunctionAliasDeclarationAccess().getCommaKeyword_4_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAliasDeclarationAccess().getStaticArgumentsExpressionParserRuleCall_4_2_1_0()); 
	    }
		lv_staticArguments_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionAliasDeclarationRule());
	        }
       		add(
       			$current, 
       			"staticArguments",
        		lv_staticArguments_7_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_8='>' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getFunctionAliasDeclarationAccess().getGreaterThanSignKeyword_4_3());
    }
)?)
;





// Entry rule entryRuleEquation
entryRuleEquation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEquationRule()); }
	 iv_ruleEquation=ruleEquation 
	 { $current=$iv_ruleEquation.current; } 
	 EOF 
;

// Rule Equation
ruleEquation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_initial_0_0=	'initial' 
    {
        newLeafNode(lv_initial_0_0, grammarAccess.getEquationAccess().getInitialInitialKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEquationRule());
	        }
       		setWithLastConsumed($current, "initial", true, "initial");
	    }

)
)?	otherlv_1='eq' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEquationAccess().getEqKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEquationAccess().getLeftHandSideExpressionParserRuleCall_2_0()); 
	    }
		lv_leftHandSide_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEquationRule());
	        }
       		set(
       			$current, 
       			"leftHandSide",
        		lv_leftHandSide_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getEquationAccess().getEqualsSignKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEquationAccess().getRightHandSideExpressionParserRuleCall_4_0()); 
	    }
		lv_rightHandSide_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEquationRule());
	        }
       		set(
       			$current, 
       			"rightHandSide",
        		lv_rightHandSide_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTypeSpecifier
entryRuleTypeSpecifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeSpecifierRule()); }
	 iv_ruleTypeSpecifier=ruleTypeSpecifier 
	 { $current=$iv_ruleTypeSpecifier.current; } 
	 EOF 
;

// Rule TypeSpecifier
ruleTypeSpecifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeSpecifierAccess().getAnonymousTypeSpecifierParserRuleCall_0()); 
    }
    this_AnonymousTypeSpecifier_0=ruleAnonymousTypeSpecifier
    { 
        $current = $this_AnonymousTypeSpecifier_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeSpecifierAccess().getDeclaredTypeSpecifierParserRuleCall_1()); 
    }
    this_DeclaredTypeSpecifier_1=ruleDeclaredTypeSpecifier
    { 
        $current = $this_DeclaredTypeSpecifier_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAnonymousTypeSpecifier
entryRuleAnonymousTypeSpecifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnonymousTypeSpecifierRule()); }
	 iv_ruleAnonymousTypeSpecifier=ruleAnonymousTypeSpecifier 
	 { $current=$iv_ruleAnonymousTypeSpecifier.current; } 
	 EOF 
;

// Rule AnonymousTypeSpecifier
ruleAnonymousTypeSpecifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnonymousTypeSpecifierAccess().getTypeAnonymousArrayTypeParserRuleCall_0_0()); 
	    }
		lv_type_0_1=ruleAnonymousArrayType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnonymousTypeSpecifierRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_1, 
        		"AnonymousArrayType");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getAnonymousTypeSpecifierAccess().getTypeDeclaredArrayTypeParserRuleCall_0_1()); 
	    }
		lv_type_0_2=ruleDeclaredArrayType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnonymousTypeSpecifierRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_2, 
        		"DeclaredArrayType");
	        afterParserOrEnumRuleCall();
	    }

)

)
)
;





// Entry rule entryRuleDeclaredTypeSpecifier
entryRuleDeclaredTypeSpecifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclaredTypeSpecifierRule()); }
	 iv_ruleDeclaredTypeSpecifier=ruleDeclaredTypeSpecifier 
	 { $current=$iv_ruleDeclaredTypeSpecifier.current; } 
	 EOF 
;

// Rule DeclaredTypeSpecifier
ruleDeclaredTypeSpecifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeclaredTypeSpecifierRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getDeclaredTypeSpecifierAccess().getTypeDeclarationTypeDeclarationCrossReference_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRulePrimitiveType
entryRulePrimitiveType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimitiveTypeRule()); }
	 iv_rulePrimitiveType=rulePrimitiveType 
	 { $current=$iv_rulePrimitiveType.current; } 
	 EOF 
;

// Rule PrimitiveType
rulePrimitiveType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPrimitiveTypeAccess().getNumericTypeParserRuleCall_0()); 
    }
    this_NumericType_0=ruleNumericType
    { 
        $current = $this_NumericType_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimitiveTypeAccess().getBooleanTypeParserRuleCall_1()); 
    }
    this_BooleanType_1=ruleBooleanType
    { 
        $current = $this_BooleanType_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimitiveTypeAccess().getStringTypeParserRuleCall_2()); 
    }
    this_StringType_2=ruleStringType
    { 
        $current = $this_StringType_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNumericType
entryRuleNumericType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumericTypeRule()); }
	 iv_ruleNumericType=ruleNumericType 
	 { $current=$iv_ruleNumericType.current; } 
	 EOF 
;

// Rule NumericType
ruleNumericType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNumericTypeAccess().getRealTypeParserRuleCall_0()); 
    }
    this_RealType_0=ruleRealType
    { 
        $current = $this_RealType_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumericTypeAccess().getIntegerTypeParserRuleCall_1()); 
    }
    this_IntegerType_1=ruleIntegerType
    { 
        $current = $this_IntegerType_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumericTypeAccess().getComplexTypeParserRuleCall_2()); 
    }
    this_ComplexType_2=ruleComplexType
    { 
        $current = $this_ComplexType_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumericTypeAccess().getGaussianTypeParserRuleCall_3()); 
    }
    this_GaussianType_3=ruleGaussianType
    { 
        $current = $this_GaussianType_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleRealType
entryRuleRealType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRealTypeRule()); }
	 iv_ruleRealType=ruleRealType 
	 { $current=$iv_ruleRealType.current; } 
	 EOF 
;

// Rule RealType
ruleRealType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getRealTypeAccess().getRealTypeAction_0(),
            $current);
    }
)	otherlv_1='real' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRealTypeAccess().getRealKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRealTypeAccess().getUnitUnitWithWildcardParserRuleCall_2_0()); 
	    }
		lv_unit_2_0=ruleUnitWithWildcard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRealTypeRule());
	        }
       		set(
       			$current, 
       			"unit",
        		lv_unit_2_0, 
        		"UnitWithWildcard");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleIntegerType
entryRuleIntegerType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerTypeRule()); }
	 iv_ruleIntegerType=ruleIntegerType 
	 { $current=$iv_ruleIntegerType.current; } 
	 EOF 
;

// Rule IntegerType
ruleIntegerType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getIntegerTypeAccess().getIntegerTypeAction_0(),
            $current);
    }
)	otherlv_1='int' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIntegerTypeAccess().getIntKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIntegerTypeAccess().getUnitUnitWithWildcardParserRuleCall_2_0()); 
	    }
		lv_unit_2_0=ruleUnitWithWildcard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntegerTypeRule());
	        }
       		set(
       			$current, 
       			"unit",
        		lv_unit_2_0, 
        		"UnitWithWildcard");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleComplexType
entryRuleComplexType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComplexTypeRule()); }
	 iv_ruleComplexType=ruleComplexType 
	 { $current=$iv_ruleComplexType.current; } 
	 EOF 
;

// Rule ComplexType
ruleComplexType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getComplexTypeAccess().getComplexTypeAction_0(),
            $current);
    }
)	otherlv_1='complex' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getComplexTypeAccess().getComplexKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getComplexTypeAccess().getUnitUnitWithWildcardParserRuleCall_2_0()); 
	    }
		lv_unit_2_0=ruleUnitWithWildcard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComplexTypeRule());
	        }
       		set(
       			$current, 
       			"unit",
        		lv_unit_2_0, 
        		"UnitWithWildcard");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleGaussianType
entryRuleGaussianType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGaussianTypeRule()); }
	 iv_ruleGaussianType=ruleGaussianType 
	 { $current=$iv_ruleGaussianType.current; } 
	 EOF 
;

// Rule GaussianType
ruleGaussianType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getGaussianTypeAccess().getGaussianTypeAction_0(),
            $current);
    }
)	otherlv_1='gaussian' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGaussianTypeAccess().getGaussianKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGaussianTypeAccess().getUnitUnitWithWildcardParserRuleCall_2_0()); 
	    }
		lv_unit_2_0=ruleUnitWithWildcard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGaussianTypeRule());
	        }
       		set(
       			$current, 
       			"unit",
        		lv_unit_2_0, 
        		"UnitWithWildcard");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBooleanType
entryRuleBooleanType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanTypeRule()); }
	 iv_ruleBooleanType=ruleBooleanType 
	 { $current=$iv_ruleBooleanType.current; } 
	 EOF 
;

// Rule BooleanType
ruleBooleanType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBooleanTypeAccess().getBooleanTypeAction_0(),
            $current);
    }
)	otherlv_1='boolean' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBooleanTypeAccess().getBooleanKeyword_1());
    }
)
;





// Entry rule entryRuleStringType
entryRuleStringType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringTypeRule()); }
	 iv_ruleStringType=ruleStringType 
	 { $current=$iv_ruleStringType.current; } 
	 EOF 
;

// Rule StringType
ruleStringType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStringTypeAccess().getStringTypeAction_0(),
            $current);
    }
)	otherlv_1='string' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStringTypeAccess().getStringKeyword_1());
    }
)
;





// Entry rule entryRuleAnonymousArrayType
entryRuleAnonymousArrayType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnonymousArrayTypeRule()); }
	 iv_ruleAnonymousArrayType=ruleAnonymousArrayType 
	 { $current=$iv_ruleAnonymousArrayType.current; } 
	 EOF 
;

// Rule AnonymousArrayType
ruleAnonymousArrayType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getAnonymousArrayTypeAccess().getPrimitiveTypeParserRuleCall_0_0()); 
    }
    this_PrimitiveType_0=rulePrimitiveType
    { 
        $current = $this_PrimitiveType_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAnonymousArrayTypeAccess().getCompositeTypeParserRuleCall_0_1()); 
    }
    this_CompositeType_1=ruleCompositeType
    { 
        $current = $this_CompositeType_1.current; 
        afterParserOrEnumRuleCall();
    }
)((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAnonymousArrayTypeAccess().getAnonymousArrayTypeElementTypeAction_1_0(),
            $current);
    }
)	otherlv_3='[' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAnonymousArrayTypeAccess().getLeftSquareBracketKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnonymousArrayTypeAccess().getDimensionsArrayDimensionParserRuleCall_1_2_0()); 
	    }
		lv_dimensions_4_0=ruleArrayDimension		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnonymousArrayTypeRule());
	        }
       		add(
       			$current, 
       			"dimensions",
        		lv_dimensions_4_0, 
        		"ArrayDimension");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAnonymousArrayTypeAccess().getCommaKeyword_1_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnonymousArrayTypeAccess().getDimensionsArrayDimensionParserRuleCall_1_3_1_0()); 
	    }
		lv_dimensions_6_0=ruleArrayDimension		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnonymousArrayTypeRule());
	        }
       		add(
       			$current, 
       			"dimensions",
        		lv_dimensions_6_0, 
        		"ArrayDimension");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_7=']' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getAnonymousArrayTypeAccess().getRightSquareBracketKeyword_1_4());
    }
)?)
;





// Entry rule entryRuleDeclaredArrayType
entryRuleDeclaredArrayType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclaredArrayTypeRule()); }
	 iv_ruleDeclaredArrayType=ruleDeclaredArrayType 
	 { $current=$iv_ruleDeclaredArrayType.current; } 
	 EOF 
;

// Rule DeclaredArrayType
ruleDeclaredArrayType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeclaredArrayTypeRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getDeclaredArrayTypeAccess().getElementTypeDeclarationTypeDeclarationCrossReference_0_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDeclaredArrayTypeAccess().getLeftSquareBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclaredArrayTypeAccess().getDimensionsArrayDimensionParserRuleCall_2_0()); 
	    }
		lv_dimensions_2_0=ruleArrayDimension		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclaredArrayTypeRule());
	        }
       		add(
       			$current, 
       			"dimensions",
        		lv_dimensions_2_0, 
        		"ArrayDimension");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDeclaredArrayTypeAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclaredArrayTypeAccess().getDimensionsArrayDimensionParserRuleCall_3_1_0()); 
	    }
		lv_dimensions_4_0=ruleArrayDimension		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclaredArrayTypeRule());
	        }
       		add(
       			$current, 
       			"dimensions",
        		lv_dimensions_4_0, 
        		"ArrayDimension");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDeclaredArrayTypeAccess().getRightSquareBracketKeyword_4());
    }
)
;





// Entry rule entryRuleArrayDimension
entryRuleArrayDimension returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayDimensionRule()); }
	 iv_ruleArrayDimension=ruleArrayDimension 
	 { $current=$iv_ruleArrayDimension.current; } 
	 EOF 
;

// Rule ArrayDimension
ruleArrayDimension returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getArrayDimensionAccess().getArrayDimensionAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayDimensionAccess().getSizeExpressionParserRuleCall_1_0()); 
	    }
		lv_size_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayDimensionRule());
	        }
       		set(
       			$current, 
       			"size",
        		lv_size_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleCompositeType
entryRuleCompositeType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompositeTypeRule()); }
	 iv_ruleCompositeType=ruleCompositeType 
	 { $current=$iv_ruleCompositeType.current; } 
	 EOF 
;

// Rule CompositeType
ruleCompositeType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCompositeTypeAccess().getRecordTypeParserRuleCall_0()); 
    }
    this_RecordType_0=ruleRecordType
    { 
        $current = $this_RecordType_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCompositeTypeAccess().getUnionTypeParserRuleCall_1()); 
    }
    this_UnionType_1=ruleUnionType
    { 
        $current = $this_UnionType_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleRecordType
entryRuleRecordType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRecordTypeRule()); }
	 iv_ruleRecordType=ruleRecordType 
	 { $current=$iv_ruleRecordType.current; } 
	 EOF 
;

// Rule RecordType
ruleRecordType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getRecordTypeAccess().getLabelValidIDParserRuleCall_0_0_0()); 
	    }
		lv_label_0_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordTypeRule());
	        }
       		set(
       			$current, 
       			"label",
        		lv_label_0_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_anyLabel_1_0=	'?' 
    {
        newLeafNode(lv_anyLabel_1_0, grammarAccess.getRecordTypeAccess().getAnyLabelQuestionMarkKeyword_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRecordTypeRule());
	        }
       		setWithLastConsumed($current, "anyLabel", true, "?");
	    }

)
))?	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRecordTypeAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecordTypeAccess().getMemberListsCompositeTypeMemberListParserRuleCall_2_0()); 
	    }
		lv_memberLists_3_0=ruleCompositeTypeMemberList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordTypeRule());
	        }
       		add(
       			$current, 
       			"memberLists",
        		lv_memberLists_3_0, 
        		"CompositeTypeMemberList");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRecordTypeAccess().getSemicolonKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecordTypeAccess().getMemberListsCompositeTypeMemberListParserRuleCall_3_1_0()); 
	    }
		lv_memberLists_5_0=ruleCompositeTypeMemberList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordTypeRule());
	        }
       		add(
       			$current, 
       			"memberLists",
        		lv_memberLists_5_0, 
        		"CompositeTypeMemberList");
	        afterParserOrEnumRuleCall();
	    }

)
))*(	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRecordTypeAccess().getSemicolonKeyword_4());
    }
)?	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getRecordTypeAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleUnionType
entryRuleUnionType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnionTypeRule()); }
	 iv_ruleUnionType=ruleUnionType 
	 { $current=$iv_ruleUnionType.current; } 
	 EOF 
;

// Rule UnionType
ruleUnionType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='union' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUnionTypeAccess().getUnionKeyword_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getUnionTypeAccess().getLabelValidIDParserRuleCall_1_0_0()); 
	    }
		lv_label_1_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnionTypeRule());
	        }
       		set(
       			$current, 
       			"label",
        		lv_label_1_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_anyLabel_2_0=	'?' 
    {
        newLeafNode(lv_anyLabel_2_0, grammarAccess.getUnionTypeAccess().getAnyLabelQuestionMarkKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnionTypeRule());
	        }
       		setWithLastConsumed($current, "anyLabel", true, "?");
	    }

)
))?	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getUnionTypeAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnionTypeAccess().getMemberListsCompositeTypeMemberListParserRuleCall_3_0()); 
	    }
		lv_memberLists_4_0=ruleCompositeTypeMemberList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnionTypeRule());
	        }
       		add(
       			$current, 
       			"memberLists",
        		lv_memberLists_4_0, 
        		"CompositeTypeMemberList");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getUnionTypeAccess().getSemicolonKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnionTypeAccess().getMemberListsCompositeTypeMemberListParserRuleCall_4_1_0()); 
	    }
		lv_memberLists_6_0=ruleCompositeTypeMemberList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnionTypeRule());
	        }
       		add(
       			$current, 
       			"memberLists",
        		lv_memberLists_6_0, 
        		"CompositeTypeMemberList");
	        afterParserOrEnumRuleCall();
	    }

)
))*(	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getUnionTypeAccess().getSemicolonKeyword_5());
    }
)?	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getUnionTypeAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleCompositeTypeMemberList
entryRuleCompositeTypeMemberList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompositeTypeMemberListRule()); }
	 iv_ruleCompositeTypeMemberList=ruleCompositeTypeMemberList 
	 { $current=$iv_ruleCompositeTypeMemberList.current; } 
	 EOF 
;

// Rule CompositeTypeMemberList
ruleCompositeTypeMemberList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getCompositeTypeMemberListAccess().getTypeSpecifierTypeSpecifierParserRuleCall_0_0()); 
	    }
		lv_typeSpecifier_0_0=ruleTypeSpecifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompositeTypeMemberListRule());
	        }
       		set(
       			$current, 
       			"typeSpecifier",
        		lv_typeSpecifier_0_0, 
        		"TypeSpecifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCompositeTypeMemberListAccess().getMembersCompositeTypeMemberParserRuleCall_1_0()); 
	    }
		lv_members_1_0=ruleCompositeTypeMember		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompositeTypeMemberListRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_1_0, 
        		"CompositeTypeMember");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCompositeTypeMemberListAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCompositeTypeMemberListAccess().getMembersCompositeTypeMemberParserRuleCall_2_1_0()); 
	    }
		lv_members_3_0=ruleCompositeTypeMember		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompositeTypeMemberListRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_3_0, 
        		"CompositeTypeMember");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleCompositeTypeMember
entryRuleCompositeTypeMember returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompositeTypeMemberRule()); }
	 iv_ruleCompositeTypeMember=ruleCompositeTypeMember 
	 { $current=$iv_ruleCompositeTypeMember.current; } 
	 EOF 
;

// Rule CompositeTypeMember
ruleCompositeTypeMember returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getCompositeTypeMemberAccess().getNameValidIDParserRuleCall_0()); 
	    }
		lv_name_0_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompositeTypeMemberRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getLambdaExpressionParserRuleCall_0()); 
    }
    this_LambdaExpression_0=ruleLambdaExpression
    { 
        $current = $this_LambdaExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getLetExpressionParserRuleCall_1()); 
    }
    this_LetExpression_1=ruleLetExpression
    { 
        $current = $this_LetExpression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getIfExpressionParserRuleCall_2()); 
    }
    this_IfExpression_2=ruleIfExpression
    { 
        $current = $this_IfExpression_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getSwitchExpressionParserRuleCall_3()); 
    }
    this_SwitchExpression_3=ruleSwitchExpression
    { 
        $current = $this_SwitchExpression_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getInspectExpressionParserRuleCall_4()); 
    }
    this_InspectExpression_4=ruleInspectExpression
    { 
        $current = $this_InspectExpression_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getUnionConstructionOperatorParserRuleCall_5()); 
    }
    this_UnionConstructionOperator_5=ruleUnionConstructionOperator
    { 
        $current = $this_UnionConstructionOperator_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getRangeExpressionParserRuleCall_6()); 
    }
    this_RangeExpression_6=ruleRangeExpression
    { 
        $current = $this_RangeExpression_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLambdaExpression
entryRuleLambdaExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLambdaExpressionRule()); }
	 iv_ruleLambdaExpression=ruleLambdaExpression 
	 { $current=$iv_ruleLambdaExpression.current; } 
	 EOF 
;

// Rule LambdaExpression
ruleLambdaExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getLambdaExpressionAccess().getParametersLambdaExpressionParameterParserRuleCall_0_0_0()); 
	    }
		lv_parameters_0_0=ruleLambdaExpressionParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLambdaExpressionRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_0_0, 
        		"LambdaExpressionParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLambdaExpressionAccess().getLeftParenthesisKeyword_0_1_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getLambdaExpressionAccess().getParametersLambdaExpressionParameterParserRuleCall_0_1_1_0_0()); 
	    }
		lv_parameters_2_0=ruleLambdaExpressionParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLambdaExpressionRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_2_0, 
        		"LambdaExpressionParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLambdaExpressionAccess().getCommaKeyword_0_1_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLambdaExpressionAccess().getParametersLambdaExpressionParameterParserRuleCall_0_1_1_1_1_0()); 
	    }
		lv_parameters_4_0=ruleLambdaExpressionParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLambdaExpressionRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_4_0, 
        		"LambdaExpressionParameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getLambdaExpressionAccess().getRightParenthesisKeyword_0_1_2());
    }
))	otherlv_6='->' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getLambdaExpressionAccess().getHyphenMinusGreaterThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLambdaExpressionAccess().getExpressionExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLambdaExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_7_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLambdaExpressionParameter
entryRuleLambdaExpressionParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLambdaExpressionParameterRule()); }
	 iv_ruleLambdaExpressionParameter=ruleLambdaExpressionParameter 
	 { $current=$iv_ruleLambdaExpressionParameter.current; } 
	 EOF 
;

// Rule LambdaExpressionParameter
ruleLambdaExpressionParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getLambdaExpressionParameterAccess().getNameValidIDParserRuleCall_0()); 
	    }
		lv_name_0_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLambdaExpressionParameterRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleLetExpression
entryRuleLetExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLetExpressionRule()); }
	 iv_ruleLetExpression=ruleLetExpression 
	 { $current=$iv_ruleLetExpression.current; } 
	 EOF 
;

// Rule LetExpression
ruleLetExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='let' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLetExpressionAccess().getLetKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLetExpressionAccess().getAssignmentsLetExpressionAssignmentParserRuleCall_1_0()); 
	    }
		lv_assignments_1_0=ruleLetExpressionAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLetExpressionRule());
	        }
       		add(
       			$current, 
       			"assignments",
        		lv_assignments_1_0, 
        		"LetExpressionAssignment");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLetExpressionAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLetExpressionAccess().getAssignmentsLetExpressionAssignmentParserRuleCall_2_1_0()); 
	    }
		lv_assignments_3_0=ruleLetExpressionAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLetExpressionRule());
	        }
       		add(
       			$current, 
       			"assignments",
        		lv_assignments_3_0, 
        		"LetExpressionAssignment");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4='in' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLetExpressionAccess().getInKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLetExpressionAccess().getTargetExpressionParserRuleCall_4_0()); 
	    }
		lv_target_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLetExpressionRule());
	        }
       		set(
       			$current, 
       			"target",
        		lv_target_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLetExpressionAssignment
entryRuleLetExpressionAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLetExpressionAssignmentRule()); }
	 iv_ruleLetExpressionAssignment=ruleLetExpressionAssignment 
	 { $current=$iv_ruleLetExpressionAssignment.current; } 
	 EOF 
;

// Rule LetExpressionAssignment
ruleLetExpressionAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getLetExpressionAssignmentAccess().getVariablesLetExpressionVariableDeclarationParserRuleCall_0_0_0()); 
	    }
		lv_variables_0_0=ruleLetExpressionVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLetExpressionAssignmentRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_0_0, 
        		"LetExpressionVariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLetExpressionAssignmentAccess().getLeftParenthesisKeyword_0_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLetExpressionAssignmentAccess().getVariablesLetExpressionVariableDeclarationParserRuleCall_0_1_1_0()); 
	    }
		lv_variables_2_0=ruleLetExpressionVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLetExpressionAssignmentRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_2_0, 
        		"LetExpressionVariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLetExpressionAssignmentAccess().getCommaKeyword_0_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLetExpressionAssignmentAccess().getVariablesLetExpressionVariableDeclarationParserRuleCall_0_1_2_1_0()); 
	    }
		lv_variables_4_0=ruleLetExpressionVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLetExpressionAssignmentRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_4_0, 
        		"LetExpressionVariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))+	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getLetExpressionAssignmentAccess().getRightParenthesisKeyword_0_1_3());
    }
))	otherlv_6='=' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getLetExpressionAssignmentAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLetExpressionAssignmentAccess().getAssignedExpressionExpressionParserRuleCall_2_0()); 
	    }
		lv_assignedExpression_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLetExpressionAssignmentRule());
	        }
       		set(
       			$current, 
       			"assignedExpression",
        		lv_assignedExpression_7_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLetExpressionVariableDeclaration
entryRuleLetExpressionVariableDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLetExpressionVariableDeclarationRule()); }
	 iv_ruleLetExpressionVariableDeclaration=ruleLetExpressionVariableDeclaration 
	 { $current=$iv_ruleLetExpressionVariableDeclaration.current; } 
	 EOF 
;

// Rule LetExpressionVariableDeclaration
ruleLetExpressionVariableDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getLetExpressionVariableDeclarationAccess().getNameValidIDParserRuleCall_0()); 
	    }
		lv_name_0_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLetExpressionVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleIfExpression
entryRuleIfExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfExpressionRule()); }
	 iv_ruleIfExpression=ruleIfExpression 
	 { $current=$iv_ruleIfExpression.current; } 
	 EOF 
;

// Rule IfExpression
ruleIfExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_static_0_0=	'static' 
    {
        newLeafNode(lv_static_0_0, grammarAccess.getIfExpressionAccess().getStaticStaticKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIfExpressionRule());
	        }
       		setWithLastConsumed($current, "static", true, "static");
	    }

)
)?	otherlv_1='if' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIfExpressionAccess().getIfKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfExpressionAccess().getConditionExpressionParserRuleCall_2_0()); 
	    }
		lv_condition_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfExpressionRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='then' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIfExpressionAccess().getThenKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfExpressionAccess().getThenExpressionExpressionParserRuleCall_4_0()); 
	    }
		lv_thenExpression_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfExpressionRule());
	        }
       		set(
       			$current, 
       			"thenExpression",
        		lv_thenExpression_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='else' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getIfExpressionAccess().getElseKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfExpressionAccess().getElseExpressionExpressionParserRuleCall_6_0()); 
	    }
		lv_elseExpression_6_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfExpressionRule());
	        }
       		set(
       			$current, 
       			"elseExpression",
        		lv_elseExpression_6_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSwitchExpression
entryRuleSwitchExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSwitchExpressionRule()); }
	 iv_ruleSwitchExpression=ruleSwitchExpression 
	 { $current=$iv_ruleSwitchExpression.current; } 
	 EOF 
;

// Rule SwitchExpression
ruleSwitchExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_static_0_0=	'static' 
    {
        newLeafNode(lv_static_0_0, grammarAccess.getSwitchExpressionAccess().getStaticStaticKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSwitchExpressionRule());
	        }
       		setWithLastConsumed($current, "static", true, "static");
	    }

)
)?	otherlv_1='switch' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSwitchExpressionAccess().getSwitchKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchExpressionAccess().getControlExpressionExpressionParserRuleCall_2_0()); 
	    }
		lv_controlExpression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchExpressionRule());
	        }
       		set(
       			$current, 
       			"controlExpression",
        		lv_controlExpression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchExpressionAccess().getCasesSwitchCaseParserRuleCall_3_0()); 
	    }
		lv_cases_3_0=ruleSwitchCase		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchExpressionRule());
	        }
       		add(
       			$current, 
       			"cases",
        		lv_cases_3_0, 
        		"SwitchCase");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='default' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSwitchExpressionAccess().getDefaultKeyword_4());
    }
	otherlv_5=':' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSwitchExpressionAccess().getColonKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchExpressionAccess().getDefaultExpressionExpressionParserRuleCall_6_0()); 
	    }
		lv_defaultExpression_6_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchExpressionRule());
	        }
       		set(
       			$current, 
       			"defaultExpression",
        		lv_defaultExpression_6_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSwitchCase
entryRuleSwitchCase returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSwitchCaseRule()); }
	 iv_ruleSwitchCase=ruleSwitchCase 
	 { $current=$iv_ruleSwitchCase.current; } 
	 EOF 
;

// Rule SwitchCase
ruleSwitchCase returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='case' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSwitchCaseAccess().getCaseKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchCaseAccess().getCaseExpressionImpliesExpressionParserRuleCall_1_0()); 
	    }
		lv_caseExpression_1_0=ruleImpliesExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchCaseRule());
	        }
       		set(
       			$current, 
       			"caseExpression",
        		lv_caseExpression_1_0, 
        		"ImpliesExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSwitchCaseAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchCaseAccess().getResultExpressionExpressionParserRuleCall_3_0()); 
	    }
		lv_resultExpression_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchCaseRule());
	        }
       		set(
       			$current, 
       			"resultExpression",
        		lv_resultExpression_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleInspectExpression
entryRuleInspectExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInspectExpressionRule()); }
	 iv_ruleInspectExpression=ruleInspectExpression 
	 { $current=$iv_ruleInspectExpression.current; } 
	 EOF 
;

// Rule InspectExpression
ruleInspectExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='inspect' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInspectExpressionAccess().getInspectKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInspectExpressionAccess().getUnionExpressionExpressionParserRuleCall_1_0()); 
	    }
		lv_unionExpression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInspectExpressionRule());
	        }
       		set(
       			$current, 
       			"unionExpression",
        		lv_unionExpression_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)((	'when' 
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getInspectExpressionAccess().getWhenClausesInspectWhenClauseParserRuleCall_2_0()); 
	    }
		lv_whenClauses_2_0=ruleInspectWhenClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInspectExpressionRule());
	        }
       		add(
       			$current, 
       			"whenClauses",
        		lv_whenClauses_2_0, 
        		"InspectWhenClause");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleInspectWhenClause
entryRuleInspectWhenClause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInspectWhenClauseRule()); }
	 iv_ruleInspectWhenClause=ruleInspectWhenClause 
	 { $current=$iv_ruleInspectWhenClause.current; } 
	 EOF 
;

// Rule InspectWhenClause
ruleInspectWhenClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((	'when' 
)=>	otherlv_0='when' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInspectWhenClauseAccess().getWhenKeyword_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getInspectWhenClauseAccess().getNameValidIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInspectWhenClauseRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInspectWhenClauseAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInspectWhenClauseAccess().getExpressionExpressionParserRuleCall_3_0()); 
	    }
		lv_expression_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInspectWhenClauseRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleRangeExpression
entryRuleRangeExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRangeExpressionRule()); }
	 iv_ruleRangeExpression=ruleRangeExpression 
	 { $current=$iv_ruleRangeExpression.current; } 
	 EOF 
;

// Rule RangeExpression
ruleRangeExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRangeExpressionAccess().getImpliesExpressionParserRuleCall_0()); 
    }
    this_ImpliesExpression_0=ruleImpliesExpression
    { 
        $current = $this_ImpliesExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getRangeExpressionAccess().getRangeExpressionOperandsAction_1_0(),
            $current);
    }
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRangeExpressionAccess().getColonKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRangeExpressionAccess().getOperandsImpliesExpressionParserRuleCall_1_2_0()); 
	    }
		lv_operands_3_0=ruleImpliesExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRangeExpressionRule());
	        }
       		add(
       			$current, 
       			"operands",
        		lv_operands_3_0, 
        		"ImpliesExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRangeExpressionAccess().getColonKeyword_1_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRangeExpressionAccess().getOperandsImpliesExpressionParserRuleCall_1_3_1_0()); 
	    }
		lv_operands_5_0=ruleImpliesExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRangeExpressionRule());
	        }
       		add(
       			$current, 
       			"operands",
        		lv_operands_5_0, 
        		"ImpliesExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)?)
;





// Entry rule entryRuleImpliesExpression
entryRuleImpliesExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImpliesExpressionRule()); }
	 iv_ruleImpliesExpression=ruleImpliesExpression 
	 { $current=$iv_ruleImpliesExpression.current; } 
	 EOF 
;

// Rule ImpliesExpression
ruleImpliesExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getImpliesExpressionAccess().getLogicalOrExpressionParserRuleCall_0()); 
    }
    this_LogicalOrExpression_0=ruleLogicalOrExpression
    { 
        $current = $this_LogicalOrExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getImpliesExpressionAccess().getImpliesExpressionLeftOperandAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getImpliesExpressionAccess().getOperatorImpliesOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleImpliesOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImpliesExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"ImpliesOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getImpliesExpressionAccess().getRightOperandLogicalOrExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleLogicalOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImpliesExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"LogicalOrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleLogicalOrExpression
entryRuleLogicalOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalOrExpressionRule()); }
	 iv_ruleLogicalOrExpression=ruleLogicalOrExpression 
	 { $current=$iv_ruleLogicalOrExpression.current; } 
	 EOF 
;

// Rule LogicalOrExpression
ruleLogicalOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getLogicalAndExpressionParserRuleCall_0()); 
    }
    this_LogicalAndExpression_0=ruleLogicalAndExpression
    { 
        $current = $this_LogicalAndExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getLogicalOrExpressionAccess().getLogicalOrExpressionLeftOperandAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getOperatorLogicalOrOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleLogicalOrOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalOrExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"LogicalOrOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getRightOperandLogicalAndExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleLogicalAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalOrExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"LogicalAndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleLogicalAndExpression
entryRuleLogicalAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalAndExpressionRule()); }
	 iv_ruleLogicalAndExpression=ruleLogicalAndExpression 
	 { $current=$iv_ruleLogicalAndExpression.current; } 
	 EOF 
;

// Rule LogicalAndExpression
ruleLogicalAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getEqualityExpressionParserRuleCall_0()); 
    }
    this_EqualityExpression_0=ruleEqualityExpression
    { 
        $current = $this_EqualityExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getLogicalAndExpressionAccess().getLogicalAndExpressionLeftOperandAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getOperatorLogicalAndOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleLogicalAndOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalAndExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"LogicalAndOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getRightOperandEqualityExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleEqualityExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalAndExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"EqualityExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEqualityExpressionRule()); }
	 iv_ruleEqualityExpression=ruleEqualityExpression 
	 { $current=$iv_ruleEqualityExpression.current; } 
	 EOF 
;

// Rule EqualityExpression
ruleEqualityExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); 
    }
    this_RelationalExpression_0=ruleRelationalExpression
    { 
        $current = $this_RelationalExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLeftOperandAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEqualityExpressionAccess().getOperatorEqualityOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleEqualityOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"EqualityOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRightOperandRelationalExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleRelationalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"RelationalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationalExpressionRule()); }
	 iv_ruleRelationalExpression=ruleRelationalExpression 
	 { $current=$iv_ruleRelationalExpression.current; } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getAdditiveExpressionParserRuleCall_0()); 
    }
    this_AdditiveExpression_0=ruleAdditiveExpression
    { 
        $current = $this_AdditiveExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleRelationalOperator
)
)(
(
ruleAdditiveExpression
)
))
    |((
)	'is' 
(
(
ruleTypeSpecifier
)
))))=>(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLeftOperandAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getOperatorRelationalOperatorEnumRuleCall_1_0_0_1_0()); 
	    }
		lv_operator_2_0=ruleRelationalOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"RelationalOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRightOperandAdditiveExpressionParserRuleCall_1_0_0_2_0()); 
	    }
		lv_rightOperand_3_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationalExpressionAccess().getTypeTestExpressionExpressionAction_1_0_1_0(),
            $current);
    }
)	otherlv_5='is' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRelationalExpressionAccess().getIsKeyword_1_0_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getTypeSpecifierTypeSpecifierParserRuleCall_1_0_1_2_0()); 
	    }
		lv_typeSpecifier_6_0=ruleTypeSpecifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"typeSpecifier",
        		lv_typeSpecifier_6_0, 
        		"TypeSpecifier");
	        afterParserOrEnumRuleCall();
	    }

)
))))?)
;





// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditiveExpressionRule()); }
	 iv_ruleAdditiveExpression=ruleAdditiveExpression 
	 { $current=$iv_ruleAdditiveExpression.current; } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); 
    }
    this_MultiplicativeExpression_0=ruleMultiplicativeExpression
    { 
        $current = $this_MultiplicativeExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftOperandAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getOperatorAdditiveOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleAdditiveOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"AdditiveOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getRightOperandMultiplicativeExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleMultiplicativeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"MultiplicativeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicativeExpressionRule()); }
	 iv_ruleMultiplicativeExpression=ruleMultiplicativeExpression 
	 { $current=$iv_ruleMultiplicativeExpression.current; } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getPowerExpressionParserRuleCall_0()); 
    }
    this_PowerExpression_0=rulePowerExpression
    { 
        $current = $this_PowerExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftOperandAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getOperatorMultiplicativeOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleMultiplicativeOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"MultiplicativeOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getRightOperandPowerExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=rulePowerExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"PowerExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulePowerExpression
entryRulePowerExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPowerExpressionRule()); }
	 iv_rulePowerExpression=rulePowerExpression 
	 { $current=$iv_rulePowerExpression.current; } 
	 EOF 
;

// Rule PowerExpression
rulePowerExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPowerExpressionAccess().getPrefixUnaryExpressionParserRuleCall_0()); 
    }
    this_PrefixUnaryExpression_0=rulePrefixUnaryExpression
    { 
        $current = $this_PrefixUnaryExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPowerExpressionAccess().getPowerExpressionLeftOperandAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPowerExpressionAccess().getOperatorPowerOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=rulePowerOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPowerExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"PowerOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPowerExpressionAccess().getRightOperandPrefixUnaryExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=rulePrefixUnaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPowerExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"PrefixUnaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRulePrefixUnaryExpression
entryRulePrefixUnaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrefixUnaryExpressionRule()); }
	 iv_rulePrefixUnaryExpression=rulePrefixUnaryExpression 
	 { $current=$iv_rulePrefixUnaryExpression.current; } 
	 EOF 
;

// Rule PrefixUnaryExpression
rulePrefixUnaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPrefixUnaryExpressionAccess().getUnitConversionExpressionParserRuleCall_0()); 
    }
    this_UnitConversionExpression_0=ruleUnitConversionExpression
    { 
        $current = $this_UnitConversionExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrefixUnaryExpressionAccess().getUnaryExpressionAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPrefixUnaryExpressionAccess().getOperatorPrefixUnaryOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=rulePrefixUnaryOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrefixUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"PrefixUnaryOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPrefixUnaryExpressionAccess().getOperandUnitConversionExpressionParserRuleCall_1_2_0()); 
	    }
		lv_operand_3_0=ruleUnitConversionExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrefixUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_3_0, 
        		"UnitConversionExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleUnitConversionExpression
entryRuleUnitConversionExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnitConversionExpressionRule()); }
	 iv_ruleUnitConversionExpression=ruleUnitConversionExpression 
	 { $current=$iv_ruleUnitConversionExpression.current; } 
	 EOF 
;

// Rule UnitConversionExpression
ruleUnitConversionExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getUnitConversionExpressionAccess().getPostfixUnaryExpressionParserRuleCall_0()); 
    }
    this_PostfixUnaryExpression_0=rulePostfixUnaryExpression
    { 
        $current = $this_PostfixUnaryExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getUnitConversionExpressionAccess().getUnitConversionExpressionOperandAction_1_0(),
            $current);
    }
)	otherlv_2='as' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUnitConversionExpressionAccess().getAsKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnitConversionExpressionAccess().getUnitExplicitUnitParserRuleCall_1_2_0()); 
	    }
		lv_unit_3_0=ruleExplicitUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnitConversionExpressionRule());
	        }
       		set(
       			$current, 
       			"unit",
        		lv_unit_3_0, 
        		"ExplicitUnit");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRulePostfixUnaryExpression
entryRulePostfixUnaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPostfixUnaryExpressionRule()); }
	 iv_rulePostfixUnaryExpression=rulePostfixUnaryExpression 
	 { $current=$iv_rulePostfixUnaryExpression.current; } 
	 EOF 
;

// Rule PostfixUnaryExpression
rulePostfixUnaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getPostfixUnaryExpressionAccess().getQualifiedFunctionCallParserRuleCall_0_0()); 
    }
    this_QualifiedFunctionCall_0=ruleQualifiedFunctionCall
    { 
        $current = $this_QualifiedFunctionCall_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPostfixUnaryExpressionAccess().getMemberAccessParserRuleCall_0_1()); 
    }
    this_MemberAccess_1=ruleMemberAccess
    { 
        $current = $this_MemberAccess_1.current; 
        afterParserOrEnumRuleCall();
    }
)((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPostfixUnaryExpressionAccess().getUnaryExpressionOperandAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPostfixUnaryExpressionAccess().getOperatorPostfixUnaryOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_3_0=rulePostfixUnaryOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPostfixUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_3_0, 
        		"PostfixUnaryOperator");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleMemberAccess
entryRuleMemberAccess returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMemberAccessRule()); }
	 iv_ruleMemberAccess=ruleMemberAccess 
	 { $current=$iv_ruleMemberAccess.current; } 
	 EOF 
;

// Rule MemberAccess
ruleMemberAccess returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMemberAccessAccess().getFunctionCallParserRuleCall_0()); 
    }
    this_FunctionCall_0=ruleFunctionCall
    { 
        $current = $this_FunctionCall_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMemberAccessAccess().getArrayElementAccessArrayAction_1_0_0(),
            $current);
    }
)	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMemberAccessAccess().getLeftSquareBracketKeyword_1_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMemberAccessAccess().getSubscriptsArraySubscriptParserRuleCall_1_0_2_0()); 
	    }
		lv_subscripts_3_0=ruleArraySubscript		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMemberAccessRule());
	        }
       		add(
       			$current, 
       			"subscripts",
        		lv_subscripts_3_0, 
        		"ArraySubscript");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMemberAccessAccess().getCommaKeyword_1_0_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMemberAccessAccess().getSubscriptsArraySubscriptParserRuleCall_1_0_3_1_0()); 
	    }
		lv_subscripts_5_0=ruleArraySubscript		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMemberAccessRule());
	        }
       		add(
       			$current, 
       			"subscripts",
        		lv_subscripts_5_0, 
        		"ArraySubscript");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6=']' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMemberAccessAccess().getRightSquareBracketKeyword_1_0_4());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMemberAccessAccess().getMemberVariableAccessTargetAction_1_1_0(),
            $current);
    }
)	otherlv_8='.' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getMemberAccessAccess().getFullStopKeyword_1_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMemberAccessAccess().getMemberVariableValidIDParserRuleCall_1_1_2_0()); 
	    }
		lv_memberVariable_9_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMemberAccessRule());
	        }
       		set(
       			$current, 
       			"memberVariable",
        		lv_memberVariable_9_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getMemberAccessAccess().getFunctionCallArgumentsAction_1_2_0(),
            $current);
    }
)	otherlv_11='.' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getMemberAccessAccess().getFullStopKeyword_1_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMemberAccessAccess().getTargetFeatureReferenceParserRuleCall_1_2_2_0()); 
	    }
		lv_target_12_0=ruleFeatureReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMemberAccessRule());
	        }
       		set(
       			$current, 
       			"target",
        		lv_target_12_0, 
        		"FeatureReference");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_13='(' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getMemberAccessAccess().getLeftParenthesisKeyword_1_2_3());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getMemberAccessAccess().getArgumentsExpressionParserRuleCall_1_2_4_0_0()); 
	    }
		lv_arguments_14_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMemberAccessRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_14_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_15=',' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getMemberAccessAccess().getCommaKeyword_1_2_4_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMemberAccessAccess().getArgumentsExpressionParserRuleCall_1_2_4_1_1_0()); 
	    }
		lv_arguments_16_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMemberAccessRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_16_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_17=')' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getMemberAccessAccess().getRightParenthesisKeyword_1_2_5());
    }
))*)
;





// Entry rule entryRuleFunctionCall
entryRuleFunctionCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionCallRule()); }
	 iv_ruleFunctionCall=ruleFunctionCall 
	 { $current=$iv_ruleFunctionCall.current; } 
	 EOF 
;

// Rule FunctionCall
ruleFunctionCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFunctionCallAccess().getPrimaryExpressionParserRuleCall_0()); 
    }
    this_PrimaryExpression_0=rulePrimaryExpression
    { 
        $current = $this_PrimaryExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getFunctionCallAccess().getFunctionCallTargetAction_1_0(),
            $current);
    }
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionCallAccess().getArgumentsExpressionParserRuleCall_1_2_0_0()); 
	    }
		lv_arguments_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionCallRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFunctionCallAccess().getCommaKeyword_1_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionCallAccess().getArgumentsExpressionParserRuleCall_1_2_1_1_0()); 
	    }
		lv_arguments_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionCallRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_1_3());
    }
)?)
;





// Entry rule entryRuleIterationVariableDeclaration
entryRuleIterationVariableDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIterationVariableDeclarationRule()); }
	 iv_ruleIterationVariableDeclaration=ruleIterationVariableDeclaration 
	 { $current=$iv_ruleIterationVariableDeclaration.current; } 
	 EOF 
;

// Rule IterationVariableDeclaration
ruleIterationVariableDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getIterationVariableDeclarationAccess().getNameValidIDParserRuleCall_0()); 
	    }
		lv_name_0_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIterationVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleArraySubscript
entryRuleArraySubscript returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArraySubscriptRule()); }
	 iv_ruleArraySubscript=ruleArraySubscript 
	 { $current=$iv_ruleArraySubscript.current; } 
	 EOF 
;

// Rule ArraySubscript
ruleArraySubscript returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_slice_0_0=	':' 
    {
        newLeafNode(lv_slice_0_0, grammarAccess.getArraySubscriptAccess().getSliceColonKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArraySubscriptRule());
	        }
       		setWithLastConsumed($current, "slice", true, ":");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getArraySubscriptAccess().getExpressionExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArraySubscriptRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current; } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_0()); 
    }
    this_Literal_0=ruleLiteral
    { 
        $current = $this_Literal_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getTemplateExpressionParserRuleCall_1()); 
    }
    this_TemplateExpression_1=ruleTemplateExpression
    { 
        $current = $this_TemplateExpression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getFeatureReferenceParserRuleCall_2()); 
    }
    this_FeatureReference_2=ruleFeatureReference
    { 
        $current = $this_FeatureReference_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getUnitConstructionOperatorParserRuleCall_3()); 
    }
    this_UnitConstructionOperator_3=ruleUnitConstructionOperator
    { 
        $current = $this_UnitConstructionOperator_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getArrayConstructionOperatorParserRuleCall_4()); 
    }
    this_ArrayConstructionOperator_4=ruleArrayConstructionOperator
    { 
        $current = $this_ArrayConstructionOperator_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getArrayConcatenationOperatorParserRuleCall_5()); 
    }
    this_ArrayConcatenationOperator_5=ruleArrayConcatenationOperator
    { 
        $current = $this_ArrayConcatenationOperator_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getRecordConstructionOperatorParserRuleCall_6()); 
    }
    this_RecordConstructionOperator_6=ruleRecordConstructionOperator
    { 
        $current = $this_RecordConstructionOperator_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getParenthesizedExpressionParserRuleCall_7()); 
    }
    this_ParenthesizedExpression_7=ruleParenthesizedExpression
    { 
        $current = $this_ParenthesizedExpression_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getEndExpressionParserRuleCall_8()); 
    }
    this_EndExpression_8=ruleEndExpression
    { 
        $current = $this_EndExpression_8.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getAlgorithmExpressionParserRuleCall_9()); 
    }
    this_AlgorithmExpression_9=ruleAlgorithmExpression
    { 
        $current = $this_AlgorithmExpression_9.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current; } 
	 EOF 
;

// Rule Literal
ruleLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getNumericLiteralParserRuleCall_0()); 
    }
    this_NumericLiteral_0=ruleNumericLiteral
    { 
        $current = $this_NumericLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_1()); 
    }
    this_BooleanLiteral_1=ruleBooleanLiteral
    { 
        $current = $this_BooleanLiteral_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_2()); 
    }
    this_StringLiteral_2=ruleStringLiteral
    { 
        $current = $this_StringLiteral_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNumericLiteral
entryRuleNumericLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumericLiteralRule()); }
	 iv_ruleNumericLiteral=ruleNumericLiteral 
	 { $current=$iv_ruleNumericLiteral.current; } 
	 EOF 
;

// Rule NumericLiteral
ruleNumericLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNumericLiteralAccess().getIntegerLiteralParserRuleCall_0()); 
    }
    this_IntegerLiteral_0=ruleIntegerLiteral
    { 
        $current = $this_IntegerLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumericLiteralAccess().getRealLiteralParserRuleCall_1()); 
    }
    this_RealLiteral_1=ruleRealLiteral
    { 
        $current = $this_RealLiteral_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleRealLiteral
entryRuleRealLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRealLiteralRule()); }
	 iv_ruleRealLiteral=ruleRealLiteral 
	 { $current=$iv_ruleRealLiteral.current; } 
	 EOF 
;

// Rule RealLiteral
ruleRealLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRealLiteralAccess().getDataRealDataParserRuleCall_0_0()); 
	    }
		lv_data_0_0=ruleRealData		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRealLiteralRule());
	        }
       		set(
       			$current, 
       			"data",
        		lv_data_0_0, 
        		"RealData");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRealLiteralAccess().getUnitUnitParserRuleCall_1_0()); 
	    }
		lv_unit_1_0=ruleUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRealLiteralRule());
	        }
       		set(
       			$current, 
       			"unit",
        		lv_unit_1_0, 
        		"Unit");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleRealData
entryRuleRealData returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getRealDataRule()); } 
	 iv_ruleRealData=ruleRealData 
	 { $current=$iv_ruleRealData.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule RealData
ruleRealData returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRealDataAccess().getValidIntParserRuleCall_0()); 
    }
    this_ValidInt_0=ruleValidInt    {
		$current.merge(this_ValidInt_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
((
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRealDataAccess().getFullStopKeyword_1_0_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getRealDataAccess().getValidIntParserRuleCall_1_0_1()); 
    }
    this_ValidInt_2=ruleValidInt    {
		$current.merge(this_ValidInt_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(    this_IJ_3=RULE_IJ    {
		$current.merge(this_IJ_3);
    }

    { 
    newLeafNode(this_IJ_3, grammarAccess.getRealDataAccess().getIJTerminalRuleCall_1_0_2_0()); 
    }

    |    this_EXPIJ_4=RULE_EXPIJ    {
		$current.merge(this_EXPIJ_4);
    }

    { 
    newLeafNode(this_EXPIJ_4, grammarAccess.getRealDataAccess().getEXPIJTerminalRuleCall_1_0_2_1()); 
    }

    |(    this_E_5=RULE_E    {
		$current.merge(this_E_5);
    }

    { 
    newLeafNode(this_E_5, grammarAccess.getRealDataAccess().getETerminalRuleCall_1_0_2_2_0()); 
    }
(
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRealDataAccess().getPlusSignKeyword_1_0_2_2_1_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRealDataAccess().getHyphenMinusKeyword_1_0_2_2_1_1()); 
    }
)
    { 
        newCompositeNode(grammarAccess.getRealDataAccess().getValidIntParserRuleCall_1_0_2_2_2()); 
    }
    this_ValidInt_8=ruleValidInt    {
		$current.merge(this_ValidInt_8);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(    this_IJ_9=RULE_IJ    {
		$current.merge(this_IJ_9);
    }

    { 
    newLeafNode(this_IJ_9, grammarAccess.getRealDataAccess().getIJTerminalRuleCall_1_0_2_2_3()); 
    }
)?))?)
    |(    this_EXPIJ_10=RULE_EXPIJ    {
		$current.merge(this_EXPIJ_10);
    }

    { 
    newLeafNode(this_EXPIJ_10, grammarAccess.getRealDataAccess().getEXPIJTerminalRuleCall_1_1_0()); 
    }

    |(    this_E_11=RULE_E    {
		$current.merge(this_E_11);
    }

    { 
    newLeafNode(this_E_11, grammarAccess.getRealDataAccess().getETerminalRuleCall_1_1_1_0()); 
    }
(
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRealDataAccess().getPlusSignKeyword_1_1_1_1_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRealDataAccess().getHyphenMinusKeyword_1_1_1_1_1()); 
    }
)
    { 
        newCompositeNode(grammarAccess.getRealDataAccess().getValidIntParserRuleCall_1_1_1_2()); 
    }
    this_ValidInt_14=ruleValidInt    {
		$current.merge(this_ValidInt_14);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(    this_IJ_15=RULE_IJ    {
		$current.merge(this_IJ_15);
    }

    { 
    newLeafNode(this_IJ_15, grammarAccess.getRealDataAccess().getIJTerminalRuleCall_1_1_1_3()); 
    }
)?))))
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleIntegerLiteral
entryRuleIntegerLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerLiteralRule()); }
	 iv_ruleIntegerLiteral=ruleIntegerLiteral 
	 { $current=$iv_ruleIntegerLiteral.current; } 
	 EOF 
;

// Rule IntegerLiteral
ruleIntegerLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getIntegerLiteralAccess().getDataIntegerDataParserRuleCall_0_0()); 
	    }
		lv_data_0_0=ruleIntegerData		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntegerLiteralRule());
	        }
       		set(
       			$current, 
       			"data",
        		lv_data_0_0, 
        		"IntegerData");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIntegerLiteralAccess().getUnitUnitParserRuleCall_1_0()); 
	    }
		lv_unit_1_0=ruleUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntegerLiteralRule());
	        }
       		set(
       			$current, 
       			"unit",
        		lv_unit_1_0, 
        		"Unit");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleIntegerData
entryRuleIntegerData returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getIntegerDataRule()); } 
	 iv_ruleIntegerData=ruleIntegerData 
	 { $current=$iv_ruleIntegerData.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule IntegerData
ruleIntegerData returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getIntegerDataAccess().getValidIntParserRuleCall_0()); 
    }
    this_ValidInt_0=ruleValidInt    {
		$current.merge(this_ValidInt_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(    this_IJ_1=RULE_IJ    {
		$current.merge(this_IJ_1);
    }

    { 
    newLeafNode(this_IJ_1, grammarAccess.getIntegerDataAccess().getIJTerminalRuleCall_1()); 
    }
)?)
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanLiteralRule()); }
	 iv_ruleBooleanLiteral=ruleBooleanLiteral 
	 { $current=$iv_ruleBooleanLiteral.current; } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0(),
            $current);
    }
)((
(
		lv_true_1_0=	'true' 
    {
        newLeafNode(lv_true_1_0, grammarAccess.getBooleanLiteralAccess().getTrueTrueKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanLiteralRule());
	        }
       		setWithLastConsumed($current, "true", true, "true");
	    }

)
)
    |	otherlv_2='false' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1_1());
    }
))
;





// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); }
	 iv_ruleStringLiteral=ruleStringLiteral 
	 { $current=$iv_ruleStringLiteral.current; } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_text_0_0=RULE_STRING
		{
			newLeafNode(lv_text_0_0, grammarAccess.getStringLiteralAccess().getTextSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"text",
        		lv_text_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleTemplateExpression
entryRuleTemplateExpression returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getTemplateExpressionRule()); }
	 iv_ruleTemplateExpression=ruleTemplateExpression 
	 { $current=$iv_ruleTemplateExpression.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule TemplateExpression
ruleTemplateExpression returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTemplateExpressionAccess().getTemplateExpressionAction_0(),
            $current);
    }
)	otherlv_1='"""' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTemplateExpressionAccess().getQuotationMarkQuotationMarkQuotationMarkKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTemplateExpressionAccess().getSegmentsConstantTemplateSegmentParserRuleCall_2_0()); 
	    }
		lv_segments_2_0=ruleConstantTemplateSegment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemplateExpressionRule());
	        }
       		add(
       			$current, 
       			"segments",
        		lv_segments_2_0, 
        		"ConstantTemplateSegment");
	        afterParserOrEnumRuleCall();
	    }

)
)?((
(
		{ 
	        newCompositeNode(grammarAccess.getTemplateExpressionAccess().getSegmentsExpressionTemplateSegmentParserRuleCall_3_0_0()); 
	    }
		lv_segments_3_0=ruleExpressionTemplateSegment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemplateExpressionRule());
	        }
       		add(
       			$current, 
       			"segments",
        		lv_segments_3_0, 
        		"ExpressionTemplateSegment");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTemplateExpressionAccess().getSegmentsConstantTemplateSegmentParserRuleCall_3_1_0()); 
	    }
		lv_segments_4_0=ruleConstantTemplateSegment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemplateExpressionRule());
	        }
       		add(
       			$current, 
       			"segments",
        		lv_segments_4_0, 
        		"ConstantTemplateSegment");
	        afterParserOrEnumRuleCall();
	    }

)
)?)*	otherlv_5='"""' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTemplateExpressionAccess().getQuotationMarkQuotationMarkQuotationMarkKeyword_4());
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleConstantTemplateSegment
entryRuleConstantTemplateSegment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantTemplateSegmentRule()); }
	 iv_ruleConstantTemplateSegment=ruleConstantTemplateSegment 
	 { $current=$iv_ruleConstantTemplateSegment.current; } 
	 EOF 
;

// Rule ConstantTemplateSegment
ruleConstantTemplateSegment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantTemplateSegmentAccess().getTextConstantStringParserRuleCall_0()); 
	    }
		lv_text_0_0=ruleConstantString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantTemplateSegmentRule());
	        }
       		set(
       			$current, 
       			"text",
        		lv_text_0_0, 
        		"ConstantString");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleConstantString
entryRuleConstantString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantStringRule()); } 
	 iv_ruleConstantString=ruleConstantString 
	 { $current=$iv_ruleConstantString.current.getText(); }  
	 EOF 
;

// Rule ConstantString
ruleConstantString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_CONSTANT_STRING_0=RULE_CONSTANT_STRING    {
		$current.merge(this_CONSTANT_STRING_0);
    }

    { 
    newLeafNode(this_CONSTANT_STRING_0, grammarAccess.getConstantStringAccess().getCONSTANT_STRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getConstantStringAccess().getIDTerminalRuleCall_1()); 
    }

    |    this_ANY_OTHER_2=RULE_ANY_OTHER    {
		$current.merge(this_ANY_OTHER_2);
    }

    { 
    newLeafNode(this_ANY_OTHER_2, grammarAccess.getConstantStringAccess().getANY_OTHERTerminalRuleCall_2()); 
    }
)+
    ;





// Entry rule entryRuleExpressionTemplateSegment
entryRuleExpressionTemplateSegment returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getExpressionTemplateSegmentRule()); }
	 iv_ruleExpressionTemplateSegment=ruleExpressionTemplateSegment 
	 { $current=$iv_ruleExpressionTemplateSegment.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ExpressionTemplateSegment
ruleExpressionTemplateSegment returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT");
    }
    @after { leaveRule(); }:
(	otherlv_0='\u00AB' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExpressionTemplateSegmentAccess().getLeftPointingDoubleAngleQuotationMarkKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionTemplateSegmentAccess().getExpressionExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionTemplateSegmentRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='\u00BB' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExpressionTemplateSegmentAccess().getRightPointingDoubleAngleQuotationMarkKeyword_2());
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleFeatureReference
entryRuleFeatureReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFeatureReferenceRule()); }
	 iv_ruleFeatureReference=ruleFeatureReference 
	 { $current=$iv_ruleFeatureReference.current; } 
	 EOF 
;

// Rule FeatureReference
ruleFeatureReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFeatureReferenceAccess().getFeatureReferenceAction_0(),
            $current);
    }
)((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFeatureReferenceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFeatureReferenceAccess().getFeatureCallableElementCrossReference_1_0_0()); 
	    }
		ruleValidIDWithUnit		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFeatureReferenceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFeatureReferenceAccess().getFeatureCallableElementCrossReference_1_1_0_0()); 
	    }
		ruleValidID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFeatureReferenceAccess().getLeftCurlyBracketKeyword_1_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFeatureReferenceAccess().getStepExpressionStepExpressionParserRuleCall_1_1_2_0()); 
	    }
		lv_stepExpression_4_0=ruleStepExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureReferenceRule());
	        }
       		set(
       			$current, 
       			"stepExpression",
        		lv_stepExpression_4_0, 
        		"StepExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFeatureReferenceAccess().getRightCurlyBracketKeyword_1_1_3());
    }
)))
;





// Entry rule entryRuleQualifiedFunctionCall
entryRuleQualifiedFunctionCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedFunctionCallRule()); }
	 iv_ruleQualifiedFunctionCall=ruleQualifiedFunctionCall 
	 { $current=$iv_ruleQualifiedFunctionCall.current; } 
	 EOF 
;

// Rule QualifiedFunctionCall
ruleQualifiedFunctionCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQualifiedFunctionCallAccess().getQualifiedFeatureReferenceParserRuleCall_0()); 
    }
    this_QualifiedFeatureReference_0=ruleQualifiedFeatureReference
    { 
        $current = $this_QualifiedFeatureReference_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getQualifiedFunctionCallAccess().getFunctionCallTargetAction_1_0(),
            $current);
    }
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getQualifiedFunctionCallAccess().getLeftParenthesisKeyword_1_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getQualifiedFunctionCallAccess().getArgumentsExpressionParserRuleCall_1_2_0_0()); 
	    }
		lv_arguments_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQualifiedFunctionCallRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getQualifiedFunctionCallAccess().getCommaKeyword_1_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQualifiedFunctionCallAccess().getArgumentsExpressionParserRuleCall_1_2_1_1_0()); 
	    }
		lv_arguments_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQualifiedFunctionCallRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getQualifiedFunctionCallAccess().getRightParenthesisKeyword_1_3());
    }
)?)
;





// Entry rule entryRuleQualifiedFeatureReference
entryRuleQualifiedFeatureReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedFeatureReferenceRule()); }
	 iv_ruleQualifiedFeatureReference=ruleQualifiedFeatureReference 
	 { $current=$iv_ruleQualifiedFeatureReference.current; } 
	 EOF 
;

// Rule QualifiedFeatureReference
ruleQualifiedFeatureReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getQualifiedFeatureReferenceAccess().getFeatureReferenceAction_0(),
            $current);
    }
)	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getQualifiedFeatureReferenceAccess().getFullStopKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getQualifiedFeatureReferenceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getQualifiedFeatureReferenceAccess().getFeatureCallableElementCrossReference_2_0()); 
	    }
		ruleQualifiedNameWithUnit		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleStepExpression
entryRuleStepExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStepExpressionRule()); }
	 iv_ruleStepExpression=ruleStepExpression 
	 { $current=$iv_ruleStepExpression.current; } 
	 EOF 
;

// Rule StepExpression
ruleStepExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getStepExpressionAccess().getRangeStepExpressionParserRuleCall()); 
    }
    this_RangeStepExpression_0=ruleRangeStepExpression
    { 
        $current = $this_RangeStepExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleRangeStepExpression
entryRuleRangeStepExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRangeStepExpressionRule()); }
	 iv_ruleRangeStepExpression=ruleRangeStepExpression 
	 { $current=$iv_ruleRangeStepExpression.current; } 
	 EOF 
;

// Rule RangeStepExpression
ruleRangeStepExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRangeStepExpressionAccess().getAdditiveStepExpressionParserRuleCall_0()); 
    }
    this_AdditiveStepExpression_0=ruleAdditiveStepExpression
    { 
        $current = $this_AdditiveStepExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRangeStepExpressionAccess().getRangeStepExpressionStartAction_1_0(),
            $current);
    }
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRangeStepExpressionAccess().getColonKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRangeStepExpressionAccess().getEndAdditiveStepExpressionParserRuleCall_1_2_0()); 
	    }
		lv_end_3_0=ruleAdditiveStepExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRangeStepExpressionRule());
	        }
       		set(
       			$current, 
       			"end",
        		lv_end_3_0, 
        		"AdditiveStepExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleAdditiveStepExpression
entryRuleAdditiveStepExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditiveStepExpressionRule()); }
	 iv_ruleAdditiveStepExpression=ruleAdditiveStepExpression 
	 { $current=$iv_ruleAdditiveStepExpression.current; } 
	 EOF 
;

// Rule AdditiveStepExpression
ruleAdditiveStepExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAdditiveStepExpressionAccess().getNegateStepExpressionParserRuleCall_0()); 
    }
    this_NegateStepExpression_0=ruleNegateStepExpression
    { 
        $current = $this_NegateStepExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAdditiveStepExpressionAccess().getAdditiveStepExpressionLeftOperandAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveStepExpressionAccess().getOperatorAdditiveOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleAdditiveOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveStepExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"AdditiveOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveStepExpressionAccess().getRightOperandNegateStepExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleNegateStepExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveStepExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"NegateStepExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleNegateStepExpression
entryRuleNegateStepExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNegateStepExpressionRule()); }
	 iv_ruleNegateStepExpression=ruleNegateStepExpression 
	 { $current=$iv_ruleNegateStepExpression.current; } 
	 EOF 
;

// Rule NegateStepExpression
ruleNegateStepExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNegateStepExpressionAccess().getPrimitiveStepExpressionParserRuleCall_0()); 
    }
    this_PrimitiveStepExpression_0=rulePrimitiveStepExpression
    { 
        $current = $this_PrimitiveStepExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNegateStepExpressionAccess().getNegateStepExpressionAction_1_0(),
            $current);
    }
)	otherlv_2='-' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNegateStepExpressionAccess().getHyphenMinusKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNegateStepExpressionAccess().getOperandPrimitiveStepExpressionParserRuleCall_1_2_0()); 
	    }
		lv_operand_3_0=rulePrimitiveStepExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNegateStepExpressionRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_3_0, 
        		"PrimitiveStepExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRulePrimitiveStepExpression
entryRulePrimitiveStepExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimitiveStepExpressionRule()); }
	 iv_rulePrimitiveStepExpression=rulePrimitiveStepExpression 
	 { $current=$iv_rulePrimitiveStepExpression.current; } 
	 EOF 
;

// Rule PrimitiveStepExpression
rulePrimitiveStepExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPrimitiveStepExpressionAccess().getStepLiteralParserRuleCall_0()); 
    }
    this_StepLiteral_0=ruleStepLiteral
    { 
        $current = $this_StepLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimitiveStepExpressionAccess().getStepNParserRuleCall_1()); 
    }
    this_StepN_1=ruleStepN
    { 
        $current = $this_StepN_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleStepLiteral
entryRuleStepLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStepLiteralRule()); }
	 iv_ruleStepLiteral=ruleStepLiteral 
	 { $current=$iv_ruleStepLiteral.current; } 
	 EOF 
;

// Rule StepLiteral
ruleStepLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getStepLiteralAccess().getValueValidIntParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleValidInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStepLiteralRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"ValidInt");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleStepN
entryRuleStepN returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStepNRule()); }
	 iv_ruleStepN=ruleStepN 
	 { $current=$iv_ruleStepN.current; } 
	 EOF 
;

// Rule StepN
ruleStepN returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStepNAccess().getStepNAction_0(),
            $current);
    }
)this_N_1=RULE_N
    { 
    newLeafNode(this_N_1, grammarAccess.getStepNAccess().getNTerminalRuleCall_1()); 
    }
)
;





// Entry rule entryRuleArrayConstructionOperator
entryRuleArrayConstructionOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayConstructionOperatorRule()); }
	 iv_ruleArrayConstructionOperator=ruleArrayConstructionOperator 
	 { $current=$iv_ruleArrayConstructionOperator.current; } 
	 EOF 
;

// Rule ArrayConstructionOperator
ruleArrayConstructionOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getArrayConstructionOperatorAccess().getLeftCurlyBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayConstructionOperatorAccess().getExpressionsExpressionParserRuleCall_1_0()); 
	    }
		lv_expressions_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayConstructionOperatorRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getArrayConstructionOperatorAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayConstructionOperatorAccess().getExpressionsExpressionParserRuleCall_2_1_0()); 
	    }
		lv_expressions_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayConstructionOperatorRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getArrayConstructionOperatorAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleArrayConcatenationOperator
entryRuleArrayConcatenationOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayConcatenationOperatorRule()); }
	 iv_ruleArrayConcatenationOperator=ruleArrayConcatenationOperator 
	 { $current=$iv_ruleArrayConcatenationOperator.current; } 
	 EOF 
;

// Rule ArrayConcatenationOperator
ruleArrayConcatenationOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getArrayConcatenationOperatorAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayConcatenationOperatorAccess().getRowsExpressionListParserRuleCall_1_0()); 
	    }
		lv_rows_1_0=ruleExpressionList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayConcatenationOperatorRule());
	        }
       		add(
       			$current, 
       			"rows",
        		lv_rows_1_0, 
        		"ExpressionList");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getArrayConcatenationOperatorAccess().getSemicolonKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayConcatenationOperatorAccess().getRowsExpressionListParserRuleCall_2_1_0()); 
	    }
		lv_rows_3_0=ruleExpressionList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayConcatenationOperatorRule());
	        }
       		add(
       			$current, 
       			"rows",
        		lv_rows_3_0, 
        		"ExpressionList");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getArrayConcatenationOperatorAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleExpressionList
entryRuleExpressionList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionListRule()); }
	 iv_ruleExpressionList=ruleExpressionList 
	 { $current=$iv_ruleExpressionList.current; } 
	 EOF 
;

// Rule ExpressionList
ruleExpressionList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionListAccess().getExpressionsExpressionParserRuleCall_0_0()); 
	    }
		lv_expressions_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionListRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExpressionListAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionListAccess().getExpressionsExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expressions_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionListRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleRecordConstructionOperator
entryRuleRecordConstructionOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRecordConstructionOperatorRule()); }
	 iv_ruleRecordConstructionOperator=ruleRecordConstructionOperator 
	 { $current=$iv_ruleRecordConstructionOperator.current; } 
	 EOF 
;

// Rule RecordConstructionOperator
ruleRecordConstructionOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRecordConstructionOperatorAccess().getLabelValidIDParserRuleCall_0_0()); 
	    }
		lv_label_0_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordConstructionOperatorRule());
	        }
       		set(
       			$current, 
       			"label",
        		lv_label_0_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRecordConstructionOperatorAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecordConstructionOperatorAccess().getMembersRecordConstructionMemberParserRuleCall_2_0()); 
	    }
		lv_members_2_0=ruleRecordConstructionMember		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordConstructionOperatorRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_2_0, 
        		"RecordConstructionMember");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRecordConstructionOperatorAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecordConstructionOperatorAccess().getMembersRecordConstructionMemberParserRuleCall_3_1_0()); 
	    }
		lv_members_4_0=ruleRecordConstructionMember		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordConstructionOperatorRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_4_0, 
        		"RecordConstructionMember");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRecordConstructionOperatorAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleRecordConstructionMember
entryRuleRecordConstructionMember returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRecordConstructionMemberRule()); }
	 iv_ruleRecordConstructionMember=ruleRecordConstructionMember 
	 { $current=$iv_ruleRecordConstructionMember.current; } 
	 EOF 
;

// Rule RecordConstructionMember
ruleRecordConstructionMember returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRecordConstructionMemberAccess().getNameValidIDParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordConstructionMemberRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRecordConstructionMemberAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecordConstructionMemberAccess().getValueExpressionParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordConstructionMemberRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleUnionConstructionOperator
entryRuleUnionConstructionOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnionConstructionOperatorRule()); }
	 iv_ruleUnionConstructionOperator=ruleUnionConstructionOperator 
	 { $current=$iv_ruleUnionConstructionOperator.current; } 
	 EOF 
;

// Rule UnionConstructionOperator
ruleUnionConstructionOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='new' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUnionConstructionOperatorAccess().getNewKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnionConstructionOperatorAccess().getTypeSpecifierUnionTypeSpecifierParserRuleCall_1_0()); 
	    }
		lv_typeSpecifier_1_0=ruleUnionTypeSpecifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnionConstructionOperatorRule());
	        }
       		set(
       			$current, 
       			"typeSpecifier",
        		lv_typeSpecifier_1_0, 
        		"UnionTypeSpecifier");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='with' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUnionConstructionOperatorAccess().getWithKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnionConstructionOperatorRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getUnionConstructionOperatorAccess().getMemberCompositeTypeMemberCrossReference_3_0()); 
	    }
		ruleValidID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getUnionConstructionOperatorAccess().getEqualsSignKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnionConstructionOperatorAccess().getValueExpressionParserRuleCall_5_0()); 
	    }
		lv_value_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnionConstructionOperatorRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleUnionTypeSpecifier
entryRuleUnionTypeSpecifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnionTypeSpecifierRule()); }
	 iv_ruleUnionTypeSpecifier=ruleUnionTypeSpecifier 
	 { $current=$iv_ruleUnionTypeSpecifier.current; } 
	 EOF 
;

// Rule UnionTypeSpecifier
ruleUnionTypeSpecifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getUnionTypeSpecifierAccess().getAnonymousUnionTypeSpecifierParserRuleCall_0()); 
    }
    this_AnonymousUnionTypeSpecifier_0=ruleAnonymousUnionTypeSpecifier
    { 
        $current = $this_AnonymousUnionTypeSpecifier_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getUnionTypeSpecifierAccess().getDeclaredTypeSpecifierParserRuleCall_1()); 
    }
    this_DeclaredTypeSpecifier_1=ruleDeclaredTypeSpecifier
    { 
        $current = $this_DeclaredTypeSpecifier_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAnonymousUnionTypeSpecifier
entryRuleAnonymousUnionTypeSpecifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnonymousUnionTypeSpecifierRule()); }
	 iv_ruleAnonymousUnionTypeSpecifier=ruleAnonymousUnionTypeSpecifier 
	 { $current=$iv_ruleAnonymousUnionTypeSpecifier.current; } 
	 EOF 
;

// Rule AnonymousUnionTypeSpecifier
ruleAnonymousUnionTypeSpecifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnonymousUnionTypeSpecifierAccess().getTypeUnionTypeParserRuleCall_0()); 
	    }
		lv_type_0_0=ruleUnionType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnonymousUnionTypeSpecifierRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"UnionType");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleUnitConstructionOperator
entryRuleUnitConstructionOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnitConstructionOperatorRule()); }
	 iv_ruleUnitConstructionOperator=ruleUnitConstructionOperator 
	 { $current=$iv_ruleUnitConstructionOperator.current; } 
	 EOF 
;

// Rule UnitConstructionOperator
ruleUnitConstructionOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='unit' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUnitConstructionOperatorAccess().getUnitKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnitConstructionOperatorAccess().getUnitExplicitUnitParserRuleCall_1_0()); 
	    }
		lv_unit_1_0=ruleExplicitUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnitConstructionOperatorRule());
	        }
       		set(
       			$current, 
       			"unit",
        		lv_unit_1_0, 
        		"ExplicitUnit");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleParenthesizedExpression
entryRuleParenthesizedExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParenthesizedExpressionRule()); }
	 iv_ruleParenthesizedExpression=ruleParenthesizedExpression 
	 { $current=$iv_ruleParenthesizedExpression.current; } 
	 EOF 
;

// Rule ParenthesizedExpression
ruleParenthesizedExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParenthesizedExpressionAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParenthesizedExpressionAccess().getExpressionsExpressionParserRuleCall_1_0()); 
	    }
		lv_expressions_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParenthesizedExpressionRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParenthesizedExpressionAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParenthesizedExpressionAccess().getExpressionsExpressionParserRuleCall_2_1_0()); 
	    }
		lv_expressions_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParenthesizedExpressionRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getParenthesizedExpressionAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleEndExpression
entryRuleEndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEndExpressionRule()); }
	 iv_ruleEndExpression=ruleEndExpression 
	 { $current=$iv_ruleEndExpression.current; } 
	 EOF 
;

// Rule EndExpression
ruleEndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getEndExpressionAccess().getEndExpressionAction_0(),
            $current);
    }
)	otherlv_1='end' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEndExpressionAccess().getEndKeyword_1());
    }
)
;





// Entry rule entryRuleAlgorithmExpression
entryRuleAlgorithmExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAlgorithmExpressionRule()); }
	 iv_ruleAlgorithmExpression=ruleAlgorithmExpression 
	 { $current=$iv_ruleAlgorithmExpression.current; } 
	 EOF 
;

// Rule AlgorithmExpression
ruleAlgorithmExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAlgorithmExpressionAccess().getAlgorithmExpressionAction_0(),
            $current);
    }
)	otherlv_1='algorithm' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAlgorithmExpressionAccess().getAlgorithmKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAlgorithmExpressionAccess().getBodyCompoundStatementParserRuleCall_2_0()); 
	    }
		lv_body_2_0=ruleCompoundStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAlgorithmExpressionRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_2_0, 
        		"CompoundStatement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleCompoundStatement
entryRuleCompoundStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompoundStatementRule()); }
	 iv_ruleCompoundStatement=ruleCompoundStatement 
	 { $current=$iv_ruleCompoundStatement.current; } 
	 EOF 
;

// Rule CompoundStatement
ruleCompoundStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getCompoundStatementAccess().getCompoundStatementAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCompoundStatementAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCompoundStatementAccess().getStatementsStatementParserRuleCall_2_0()); 
	    }
		lv_statements_2_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompoundStatementRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_2_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCompoundStatementAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getCompoundStatementParserRuleCall_0()); 
    }
    this_CompoundStatement_0=ruleCompoundStatement
    { 
        $current = $this_CompoundStatement_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getAssignmentParserRuleCall_1()); 
    }
    this_Assignment_1=ruleAssignment
    { 
        $current = $this_Assignment_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getLocalVariableDeclarationParserRuleCall_2()); 
    }
    this_LocalVariableDeclaration_2=ruleLocalVariableDeclaration
    { 
        $current = $this_LocalVariableDeclaration_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_3()); 
    }
    this_IfStatement_3=ruleIfStatement
    { 
        $current = $this_IfStatement_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getWhileStatementParserRuleCall_4()); 
    }
    this_WhileStatement_4=ruleWhileStatement
    { 
        $current = $this_WhileStatement_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getDoWhileStatementParserRuleCall_5()); 
    }
    this_DoWhileStatement_5=ruleDoWhileStatement
    { 
        $current = $this_DoWhileStatement_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getForStatementParserRuleCall_6()); 
    }
    this_ForStatement_6=ruleForStatement
    { 
        $current = $this_ForStatement_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getContinueStatementParserRuleCall_7()); 
    }
    this_ContinueStatement_7=ruleContinueStatement
    { 
        $current = $this_ContinueStatement_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getBreakStatementParserRuleCall_8()); 
    }
    this_BreakStatement_8=ruleBreakStatement
    { 
        $current = $this_BreakStatement_8.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getReturnStatementParserRuleCall_9()); 
    }
    this_ReturnStatement_9=ruleReturnStatement
    { 
        $current = $this_ReturnStatement_9.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	 iv_ruleAssignment=ruleAssignment 
	 { $current=$iv_ruleAssignment.current; } 
	 EOF 
;

// Rule Assignment
ruleAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getTargetAssignableMemberFeatureReferenceParserRuleCall_0_0()); 
	    }
		lv_target_0_0=ruleAssignableMemberFeatureReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"target",
        		lv_target_0_0, 
        		"AssignableMemberFeatureReference");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getAssignedExpressionExpressionParserRuleCall_2_0()); 
	    }
		lv_assignedExpression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"assignedExpression",
        		lv_assignedExpression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAssignmentAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleAssignableMemberFeatureReference
entryRuleAssignableMemberFeatureReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignableMemberFeatureReferenceRule()); }
	 iv_ruleAssignableMemberFeatureReference=ruleAssignableMemberFeatureReference 
	 { $current=$iv_ruleAssignableMemberFeatureReference.current; } 
	 EOF 
;

// Rule AssignableMemberFeatureReference
ruleAssignableMemberFeatureReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAssignableMemberFeatureReferenceAccess().getAssignablePrimaryExpressionParserRuleCall_0()); 
    }
    this_AssignablePrimaryExpression_0=ruleAssignablePrimaryExpression
    { 
        $current = $this_AssignablePrimaryExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAssignableMemberFeatureReferenceAccess().getArrayElementAccessArrayAction_1_0_0(),
            $current);
    }
)	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAssignableMemberFeatureReferenceAccess().getLeftSquareBracketKeyword_1_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignableMemberFeatureReferenceAccess().getSubscriptsArraySubscriptParserRuleCall_1_0_2_0()); 
	    }
		lv_subscripts_3_0=ruleArraySubscript		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignableMemberFeatureReferenceRule());
	        }
       		add(
       			$current, 
       			"subscripts",
        		lv_subscripts_3_0, 
        		"ArraySubscript");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAssignableMemberFeatureReferenceAccess().getCommaKeyword_1_0_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignableMemberFeatureReferenceAccess().getSubscriptsArraySubscriptParserRuleCall_1_0_3_1_0()); 
	    }
		lv_subscripts_5_0=ruleArraySubscript		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignableMemberFeatureReferenceRule());
	        }
       		add(
       			$current, 
       			"subscripts",
        		lv_subscripts_5_0, 
        		"ArraySubscript");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6=']' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAssignableMemberFeatureReferenceAccess().getRightSquareBracketKeyword_1_0_4());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAssignableMemberFeatureReferenceAccess().getMemberVariableAccessTargetAction_1_1_0(),
            $current);
    }
)	otherlv_8='.' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getAssignableMemberFeatureReferenceAccess().getFullStopKeyword_1_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignableMemberFeatureReferenceAccess().getMemberVariableValidIDParserRuleCall_1_1_2_0()); 
	    }
		lv_memberVariable_9_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignableMemberFeatureReferenceRule());
	        }
       		set(
       			$current, 
       			"memberVariable",
        		lv_memberVariable_9_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)))*)
;





// Entry rule entryRuleAssignablePrimaryExpression
entryRuleAssignablePrimaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignablePrimaryExpressionRule()); }
	 iv_ruleAssignablePrimaryExpression=ruleAssignablePrimaryExpression 
	 { $current=$iv_ruleAssignablePrimaryExpression.current; } 
	 EOF 
;

// Rule AssignablePrimaryExpression
ruleAssignablePrimaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAssignablePrimaryExpressionAccess().getFeatureReferenceParserRuleCall_0()); 
    }
    this_FeatureReference_0=ruleFeatureReference
    { 
        $current = $this_FeatureReference_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAssignablePrimaryExpressionAccess().getParenthesizedExpressionParserRuleCall_1()); 
    }
    this_ParenthesizedExpression_1=ruleParenthesizedExpression
    { 
        $current = $this_ParenthesizedExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLocalVariableDeclaration
entryRuleLocalVariableDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocalVariableDeclarationRule()); }
	 iv_ruleLocalVariableDeclaration=ruleLocalVariableDeclaration 
	 { $current=$iv_ruleLocalVariableDeclaration.current; } 
	 EOF 
;

// Rule LocalVariableDeclaration
ruleLocalVariableDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='var' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLocalVariableDeclarationAccess().getVarKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalVariableDeclarationAccess().getNameValidIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLocalVariableDeclarationAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalVariableDeclarationAccess().getInitializerExpressionParserRuleCall_3_0()); 
	    }
		lv_initializer_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"initializer",
        		lv_initializer_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLocalVariableDeclarationAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleIfStatement
entryRuleIfStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfStatementRule()); }
	 iv_ruleIfStatement=ruleIfStatement 
	 { $current=$iv_ruleIfStatement.current; } 
	 EOF 
;

// Rule IfStatement
ruleIfStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIfStatementAccess().getIfKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getConditionExpressionParserRuleCall_2_0()); 
	    }
		lv_condition_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getThenStatementStatementParserRuleCall_4_0()); 
	    }
		lv_thenStatement_4_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"thenStatement",
        		lv_thenStatement_4_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'else' 
)=>	otherlv_5='else' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getIfStatementAccess().getElseKeyword_5_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getElseStatementStatementParserRuleCall_5_1_0()); 
	    }
		lv_elseStatement_6_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"elseStatement",
        		lv_elseStatement_6_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleWhileStatement
entryRuleWhileStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWhileStatementRule()); }
	 iv_ruleWhileStatement=ruleWhileStatement 
	 { $current=$iv_ruleWhileStatement.current; } 
	 EOF 
;

// Rule WhileStatement
ruleWhileStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='while' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWhileStatementAccess().getWhileKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileStatementAccess().getConditionExpressionParserRuleCall_2_0()); 
	    }
		lv_condition_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileStatementRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileStatementAccess().getBodyStatementParserRuleCall_4_0()); 
	    }
		lv_body_4_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileStatementRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_4_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleForStatement
entryRuleForStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForStatementRule()); }
	 iv_ruleForStatement=ruleForStatement 
	 { $current=$iv_ruleForStatement.current; } 
	 EOF 
;

// Rule ForStatement
ruleForStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='for' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getForStatementAccess().getForKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForStatementAccess().getIterationVariableIterationVariableDeclarationParserRuleCall_2_0()); 
	    }
		lv_iterationVariable_2_0=ruleIterationVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForStatementRule());
	        }
       		set(
       			$current, 
       			"iterationVariable",
        		lv_iterationVariable_2_0, 
        		"IterationVariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='in' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getForStatementAccess().getInKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForStatementAccess().getCollectionExpressionExpressionParserRuleCall_4_0()); 
	    }
		lv_collectionExpression_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForStatementRule());
	        }
       		set(
       			$current, 
       			"collectionExpression",
        		lv_collectionExpression_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForStatementAccess().getBodyStatementParserRuleCall_6_0()); 
	    }
		lv_body_6_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForStatementRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_6_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDoWhileStatement
entryRuleDoWhileStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDoWhileStatementRule()); }
	 iv_ruleDoWhileStatement=ruleDoWhileStatement 
	 { $current=$iv_ruleDoWhileStatement.current; } 
	 EOF 
;

// Rule DoWhileStatement
ruleDoWhileStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='do' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDoWhileStatementAccess().getDoKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDoWhileStatementAccess().getBodyStatementParserRuleCall_1_0()); 
	    }
		lv_body_1_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoWhileStatementRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_1_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='while' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDoWhileStatementAccess().getWhileKeyword_2());
    }
	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDoWhileStatementAccess().getLeftParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDoWhileStatementAccess().getConditionExpressionParserRuleCall_4_0()); 
	    }
		lv_condition_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoWhileStatementRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDoWhileStatementAccess().getRightParenthesisKeyword_5());
    }
	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDoWhileStatementAccess().getSemicolonKeyword_6());
    }
)
;





// Entry rule entryRuleContinueStatement
entryRuleContinueStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getContinueStatementRule()); }
	 iv_ruleContinueStatement=ruleContinueStatement 
	 { $current=$iv_ruleContinueStatement.current; } 
	 EOF 
;

// Rule ContinueStatement
ruleContinueStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getContinueStatementAccess().getContinueStatementAction_0(),
            $current);
    }
)	otherlv_1='continue' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getContinueStatementAccess().getContinueKeyword_1());
    }
	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getContinueStatementAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleBreakStatement
entryRuleBreakStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBreakStatementRule()); }
	 iv_ruleBreakStatement=ruleBreakStatement 
	 { $current=$iv_ruleBreakStatement.current; } 
	 EOF 
;

// Rule BreakStatement
ruleBreakStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBreakStatementAccess().getBreakStatementAction_0(),
            $current);
    }
)	otherlv_1='break' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBreakStatementAccess().getBreakKeyword_1());
    }
	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBreakStatementAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleReturnStatement
entryRuleReturnStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReturnStatementRule()); }
	 iv_ruleReturnStatement=ruleReturnStatement 
	 { $current=$iv_ruleReturnStatement.current; } 
	 EOF 
;

// Rule ReturnStatement
ruleReturnStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='return' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getReturnStatementAccess().getReturnKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReturnStatementAccess().getExpressionExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReturnStatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getReturnStatementAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleUnit
entryRuleUnit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnitRule()); }
	 iv_ruleUnit=ruleUnit 
	 { $current=$iv_ruleUnit.current; } 
	 EOF 
;

// Rule Unit
ruleUnit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUnitAccess().getLeftCurlyBracketKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnitAccess().getNumeratorUnitNumeratorParserRuleCall_0_1_0()); 
	    }
		lv_numerator_1_0=ruleUnitNumerator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnitRule());
	        }
       		set(
       			$current, 
       			"numerator",
        		lv_numerator_1_0, 
        		"UnitNumerator");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='/' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUnitAccess().getSolidusKeyword_0_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnitAccess().getDenominatorUnitDenominatorParserRuleCall_0_2_1_0()); 
	    }
		lv_denominator_3_0=ruleUnitDenominator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnitRule());
	        }
       		set(
       			$current, 
       			"denominator",
        		lv_denominator_3_0, 
        		"UnitDenominator");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getUnitAccess().getRightCurlyBracketKeyword_0_3());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getUnitAccess().getNumeratorImplicitUnitNumeratorParserRuleCall_1_0()); 
	    }
		lv_numerator_5_0=ruleImplicitUnitNumerator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnitRule());
	        }
       		set(
       			$current, 
       			"numerator",
        		lv_numerator_5_0, 
        		"ImplicitUnitNumerator");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleUnitWithWildcard
entryRuleUnitWithWildcard returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnitWithWildcardRule()); }
	 iv_ruleUnitWithWildcard=ruleUnitWithWildcard 
	 { $current=$iv_ruleUnitWithWildcard.current; } 
	 EOF 
;

// Rule UnitWithWildcard
ruleUnitWithWildcard returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnitWithWildcardAccess().getUnitAction_0_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnitWithWildcardAccess().getLeftCurlyBracketKeyword_0_1());
    }
	otherlv_2='?' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUnitWithWildcardAccess().getQuestionMarkKeyword_0_2());
    }
	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getUnitWithWildcardAccess().getRightCurlyBracketKeyword_0_3());
    }
)
    |(	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getUnitWithWildcardAccess().getLeftCurlyBracketKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnitWithWildcardAccess().getNumeratorUnitNumeratorParserRuleCall_1_1_0()); 
	    }
		lv_numerator_5_0=ruleUnitNumerator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnitWithWildcardRule());
	        }
       		set(
       			$current, 
       			"numerator",
        		lv_numerator_5_0, 
        		"UnitNumerator");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6='/' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getUnitWithWildcardAccess().getSolidusKeyword_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnitWithWildcardAccess().getDenominatorUnitDenominatorParserRuleCall_1_2_1_0()); 
	    }
		lv_denominator_7_0=ruleUnitDenominator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnitWithWildcardRule());
	        }
       		set(
       			$current, 
       			"denominator",
        		lv_denominator_7_0, 
        		"UnitDenominator");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getUnitWithWildcardAccess().getRightCurlyBracketKeyword_1_3());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getUnitWithWildcardAccess().getNumeratorImplicitUnitNumeratorParserRuleCall_2_0()); 
	    }
		lv_numerator_9_0=ruleImplicitUnitNumerator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnitWithWildcardRule());
	        }
       		set(
       			$current, 
       			"numerator",
        		lv_numerator_9_0, 
        		"ImplicitUnitNumerator");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExplicitUnit
entryRuleExplicitUnit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExplicitUnitRule()); }
	 iv_ruleExplicitUnit=ruleExplicitUnit 
	 { $current=$iv_ruleExplicitUnit.current; } 
	 EOF 
;

// Rule ExplicitUnit
ruleExplicitUnit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExplicitUnitAccess().getLeftCurlyBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExplicitUnitAccess().getNumeratorUnitNumeratorParserRuleCall_1_0()); 
	    }
		lv_numerator_1_0=ruleUnitNumerator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExplicitUnitRule());
	        }
       		set(
       			$current, 
       			"numerator",
        		lv_numerator_1_0, 
        		"UnitNumerator");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='/' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExplicitUnitAccess().getSolidusKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExplicitUnitAccess().getDenominatorUnitDenominatorParserRuleCall_2_1_0()); 
	    }
		lv_denominator_3_0=ruleUnitDenominator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExplicitUnitRule());
	        }
       		set(
       			$current, 
       			"denominator",
        		lv_denominator_3_0, 
        		"UnitDenominator");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getExplicitUnitAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleUnitNumerator
entryRuleUnitNumerator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnitNumeratorRule()); }
	 iv_ruleUnitNumerator=ruleUnitNumerator 
	 { $current=$iv_ruleUnitNumerator.current; } 
	 EOF 
;

// Rule UnitNumerator
ruleUnitNumerator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnitNumeratorAccess().getUnitNumeratorAction_0_0(),
            $current);
    }
)this_ONE_1=RULE_ONE
    { 
    newLeafNode(this_ONE_1, grammarAccess.getUnitNumeratorAccess().getONETerminalRuleCall_0_1()); 
    }
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getUnitNumeratorAccess().getFactorsUnitFactorParserRuleCall_1_0_0()); 
	    }
		lv_factors_2_0=ruleUnitFactor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnitNumeratorRule());
	        }
       		add(
       			$current, 
       			"factors",
        		lv_factors_2_0, 
        		"UnitFactor");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='*' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getUnitNumeratorAccess().getAsteriskKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnitNumeratorAccess().getFactorsUnitFactorParserRuleCall_1_1_1_0()); 
	    }
		lv_factors_4_0=ruleUnitFactor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnitNumeratorRule());
	        }
       		add(
       			$current, 
       			"factors",
        		lv_factors_4_0, 
        		"UnitFactor");
	        afterParserOrEnumRuleCall();
	    }

)
))*))
;





// Entry rule entryRuleImplicitUnitNumerator
entryRuleImplicitUnitNumerator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImplicitUnitNumeratorRule()); }
	 iv_ruleImplicitUnitNumerator=ruleImplicitUnitNumerator 
	 { $current=$iv_ruleImplicitUnitNumerator.current; } 
	 EOF 
;

// Rule ImplicitUnitNumerator
ruleImplicitUnitNumerator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getImplicitUnitNumeratorAccess().getUnitNumeratorAction(),
            $current);
    }
)
;





// Entry rule entryRuleUnitDenominator
entryRuleUnitDenominator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnitDenominatorRule()); }
	 iv_ruleUnitDenominator=ruleUnitDenominator 
	 { $current=$iv_ruleUnitDenominator.current; } 
	 EOF 
;

// Rule UnitDenominator
ruleUnitDenominator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getUnitDenominatorAccess().getFactorsUnitFactorParserRuleCall_0_0()); 
	    }
		lv_factors_0_0=ruleUnitFactor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnitDenominatorRule());
	        }
       		add(
       			$current, 
       			"factors",
        		lv_factors_0_0, 
        		"UnitFactor");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnitDenominatorAccess().getLeftParenthesisKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnitDenominatorAccess().getFactorsUnitFactorParserRuleCall_1_1_0()); 
	    }
		lv_factors_2_0=ruleUnitFactor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnitDenominatorRule());
	        }
       		add(
       			$current, 
       			"factors",
        		lv_factors_2_0, 
        		"UnitFactor");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='*' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getUnitDenominatorAccess().getAsteriskKeyword_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnitDenominatorAccess().getFactorsUnitFactorParserRuleCall_1_2_1_0()); 
	    }
		lv_factors_4_0=ruleUnitFactor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnitDenominatorRule());
	        }
       		add(
       			$current, 
       			"factors",
        		lv_factors_4_0, 
        		"UnitFactor");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getUnitDenominatorAccess().getRightParenthesisKeyword_1_3());
    }
))
;





// Entry rule entryRuleUnitFactor
entryRuleUnitFactor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnitFactorRule()); }
	 iv_ruleUnitFactor=ruleUnitFactor 
	 { $current=$iv_ruleUnitFactor.current; } 
	 EOF 
;

// Rule UnitFactor
ruleUnitFactor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getUnitFactorAccess().getSymbolNameValidIDParserRuleCall_0_0()); 
	    }
		lv_symbolName_0_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnitFactorRule());
	        }
       		set(
       			$current, 
       			"symbolName",
        		lv_symbolName_0_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='^' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnitFactorAccess().getCircumflexAccentKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnitFactorAccess().getExponentUnitExponentParserRuleCall_1_1_0()); 
	    }
		lv_exponent_2_0=ruleUnitExponent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnitFactorRule());
	        }
       		set(
       			$current, 
       			"exponent",
        		lv_exponent_2_0, 
        		"UnitExponent");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleUnitExponent
entryRuleUnitExponent returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnitExponentRule()); } 
	 iv_ruleUnitExponent=ruleUnitExponent 
	 { $current=$iv_ruleUnitExponent.current.getText(); }  
	 EOF 
;

// Rule UnitExponent
ruleUnitExponent returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnitExponentAccess().getHyphenMinusKeyword_0()); 
    }
)?
    { 
        newCompositeNode(grammarAccess.getUnitExponentAccess().getValidIntParserRuleCall_1()); 
    }
    this_ValidInt_1=ruleValidInt    {
		$current.merge(this_ValidInt_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_0()); 
    }
    this_ValidID_0=ruleValidID    {
		$current.merge(this_ValidID_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_1_1()); 
    }
    this_ValidID_2=ruleValidID    {
		$current.merge(this_ValidID_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleQualifiedNameWithUnit
entryRuleQualifiedNameWithUnit returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameWithUnitRule()); } 
	 iv_ruleQualifiedNameWithUnit=ruleQualifiedNameWithUnit 
	 { $current=$iv_ruleQualifiedNameWithUnit.current.getText(); }  
	 EOF 
;

// Rule QualifiedNameWithUnit
ruleQualifiedNameWithUnit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQualifiedNameWithUnitAccess().getValidIDWithUnitParserRuleCall_0()); 
    }
    this_ValidIDWithUnit_0=ruleValidIDWithUnit    {
		$current.merge(this_ValidIDWithUnit_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameWithUnitAccess().getFullStopKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getQualifiedNameWithUnitAccess().getValidIDWithUnitParserRuleCall_1_1()); 
    }
    this_ValidIDWithUnit_2=ruleValidIDWithUnit    {
		$current.merge(this_ValidIDWithUnit_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameWithWildcardRule()); } 
	 iv_ruleQualifiedNameWithWildcard=ruleQualifiedNameWithWildcard 
	 { $current=$iv_ruleQualifiedNameWithWildcard.current.getText(); }  
	 EOF 
;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); 
    }
    this_QualifiedName_0=ruleQualifiedName    {
		$current.merge(this_QualifiedName_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='.*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1_0()); 
    }

    |(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopKeyword_1_1_0()); 
    }

	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getAsteriskKeyword_1_1_1()); 
    }
))?)
    ;





// Entry rule entryRuleValidInt
entryRuleValidInt returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getValidIntRule()); } 
	 iv_ruleValidInt=ruleValidInt 
	 { $current=$iv_ruleValidInt.current.getText(); }  
	 EOF 
;

// Rule ValidInt
ruleValidInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ONE_0=RULE_ONE    {
		$current.merge(this_ONE_0);
    }

    { 
    newLeafNode(this_ONE_0, grammarAccess.getValidIntAccess().getONETerminalRuleCall_0()); 
    }

    |    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getValidIntAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleValidID
entryRuleValidID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getValidIDRule()); } 
	 iv_ruleValidID=ruleValidID 
	 { $current=$iv_ruleValidID.current.getText(); }  
	 EOF 
;

// Rule ValidID
ruleValidID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_N_0=RULE_N    {
		$current.merge(this_N_0);
    }

    { 
    newLeafNode(this_N_0, grammarAccess.getValidIDAccess().getNTerminalRuleCall_0()); 
    }

    |    this_IJ_1=RULE_IJ    {
		$current.merge(this_IJ_1);
    }

    { 
    newLeafNode(this_IJ_1, grammarAccess.getValidIDAccess().getIJTerminalRuleCall_1()); 
    }

    |    this_E_2=RULE_E    {
		$current.merge(this_E_2);
    }

    { 
    newLeafNode(this_E_2, grammarAccess.getValidIDAccess().getETerminalRuleCall_2()); 
    }

    |    this_EXP_3=RULE_EXP    {
		$current.merge(this_EXP_3);
    }

    { 
    newLeafNode(this_EXP_3, grammarAccess.getValidIDAccess().getEXPTerminalRuleCall_3()); 
    }

    |    this_EXPIJ_4=RULE_EXPIJ    {
		$current.merge(this_EXPIJ_4);
    }

    { 
    newLeafNode(this_EXPIJ_4, grammarAccess.getValidIDAccess().getEXPIJTerminalRuleCall_4()); 
    }

    |    this_ID_5=RULE_ID    {
		$current.merge(this_ID_5);
    }

    { 
    newLeafNode(this_ID_5, grammarAccess.getValidIDAccess().getIDTerminalRuleCall_5()); 
    }
)
    ;





// Entry rule entryRuleValidIDWithUnit
entryRuleValidIDWithUnit returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getValidIDWithUnitRule()); } 
	 iv_ruleValidIDWithUnit=ruleValidIDWithUnit 
	 { $current=$iv_ruleValidIDWithUnit.current.getText(); }  
	 EOF 
;

// Rule ValidIDWithUnit
ruleValidIDWithUnit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getValidIDWithUnitAccess().getValidIDParserRuleCall_0()); 
    }
    this_ValidID_0=ruleValidID    {
		$current.merge(this_ValidID_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw='unit' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getValidIDWithUnitAccess().getUnitKeyword_1()); 
    }
)
    ;





// Rule FunctionKind
ruleFunctionKind returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='stateful' 
	{
        $current = grammarAccess.getFunctionKindAccess().getStatefulEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getFunctionKindAccess().getStatefulEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='continuous' 
	{
        $current = grammarAccess.getFunctionKindAccess().getContinuousEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getFunctionKindAccess().getContinuousEnumLiteralDeclaration_1()); 
    }
));



// Rule AssertionStatusKind
ruleAssertionStatusKind returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='info' 
	{
        $current = grammarAccess.getAssertionStatusKindAccess().getInfoEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAssertionStatusKindAccess().getInfoEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='warning' 
	{
        $current = grammarAccess.getAssertionStatusKindAccess().getWarningEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getAssertionStatusKindAccess().getWarningEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='error' 
	{
        $current = grammarAccess.getAssertionStatusKindAccess().getErrorEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getAssertionStatusKindAccess().getErrorEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='fatal' 
	{
        $current = grammarAccess.getAssertionStatusKindAccess().getFatalEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getAssertionStatusKindAccess().getFatalEnumLiteralDeclaration_3()); 
    }
));



// Rule ImpliesOperator
ruleImpliesOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='=>' 
	{
        $current = grammarAccess.getImpliesOperatorAccess().getImpliesEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getImpliesOperatorAccess().getImpliesEnumLiteralDeclaration()); 
    }
);



// Rule LogicalOrOperator
ruleLogicalOrOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='||' 
	{
        $current = grammarAccess.getLogicalOrOperatorAccess().getLogicalOrEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getLogicalOrOperatorAccess().getLogicalOrEnumLiteralDeclaration()); 
    }
);



// Rule LogicalAndOperator
ruleLogicalAndOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='&&' 
	{
        $current = grammarAccess.getLogicalAndOperatorAccess().getLogicalAndEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getLogicalAndOperatorAccess().getLogicalAndEnumLiteralDeclaration()); 
    }
);



// Rule EqualityOperator
ruleEqualityOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='==' 
	{
        $current = grammarAccess.getEqualityOperatorAccess().getEqualToEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getEqualityOperatorAccess().getEqualToEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='!=' 
	{
        $current = grammarAccess.getEqualityOperatorAccess().getNotEqualToEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getEqualityOperatorAccess().getNotEqualToEnumLiteralDeclaration_1()); 
    }
));



// Rule RelationalOperator
ruleRelationalOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='<' 
	{
        $current = grammarAccess.getRelationalOperatorAccess().getLessThanEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getRelationalOperatorAccess().getLessThanEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='<=' 
	{
        $current = grammarAccess.getRelationalOperatorAccess().getLessThanOrEqualToEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getRelationalOperatorAccess().getLessThanOrEqualToEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='>' 
	{
        $current = grammarAccess.getRelationalOperatorAccess().getGreaterThanEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getRelationalOperatorAccess().getGreaterThanEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='>=' 
	{
        $current = grammarAccess.getRelationalOperatorAccess().getGreaterThanOrEqualToEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getRelationalOperatorAccess().getGreaterThanOrEqualToEnumLiteralDeclaration_3()); 
    }
));



// Rule AdditiveOperator
ruleAdditiveOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='+' 
	{
        $current = grammarAccess.getAdditiveOperatorAccess().getAddEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAdditiveOperatorAccess().getAddEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='-' 
	{
        $current = grammarAccess.getAdditiveOperatorAccess().getSubtractEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getAdditiveOperatorAccess().getSubtractEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='.+' 
	{
        $current = grammarAccess.getAdditiveOperatorAccess().getElementWiseAddEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getAdditiveOperatorAccess().getElementWiseAddEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='.-' 
	{
        $current = grammarAccess.getAdditiveOperatorAccess().getElementWiseSubtractEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getAdditiveOperatorAccess().getElementWiseSubtractEnumLiteralDeclaration_3()); 
    }
));



// Rule MultiplicativeOperator
ruleMultiplicativeOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='*' 
	{
        $current = grammarAccess.getMultiplicativeOperatorAccess().getMultiplyEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getMultiplicativeOperatorAccess().getMultiplyEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='/' 
	{
        $current = grammarAccess.getMultiplicativeOperatorAccess().getDivideEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getMultiplicativeOperatorAccess().getDivideEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='%' 
	{
        $current = grammarAccess.getMultiplicativeOperatorAccess().getModuloEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getMultiplicativeOperatorAccess().getModuloEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='.*' 
	{
        $current = grammarAccess.getMultiplicativeOperatorAccess().getElementWiseMultiplyEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getMultiplicativeOperatorAccess().getElementWiseMultiplyEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='./' 
	{
        $current = grammarAccess.getMultiplicativeOperatorAccess().getElementWiseDivideEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getMultiplicativeOperatorAccess().getElementWiseDivideEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='.%' 
	{
        $current = grammarAccess.getMultiplicativeOperatorAccess().getElementWiseModuloEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getMultiplicativeOperatorAccess().getElementWiseModuloEnumLiteralDeclaration_5()); 
    }
));



// Rule PowerOperator
rulePowerOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='^' 
	{
        $current = grammarAccess.getPowerOperatorAccess().getPowerEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getPowerOperatorAccess().getPowerEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='.^' 
	{
        $current = grammarAccess.getPowerOperatorAccess().getElementWisePowerEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getPowerOperatorAccess().getElementWisePowerEnumLiteralDeclaration_1()); 
    }
));



// Rule PrefixUnaryOperator
rulePrefixUnaryOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='-' 
	{
        $current = grammarAccess.getPrefixUnaryOperatorAccess().getNegateEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getPrefixUnaryOperatorAccess().getNegateEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='!' 
	{
        $current = grammarAccess.getPrefixUnaryOperatorAccess().getLogicalNotEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getPrefixUnaryOperatorAccess().getLogicalNotEnumLiteralDeclaration_1()); 
    }
));



// Rule PostfixUnaryOperator
rulePostfixUnaryOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='\'' 
	{
        $current = grammarAccess.getPostfixUnaryOperatorAccess().getDerivativeEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getPostfixUnaryOperatorAccess().getDerivativeEnumLiteralDeclaration()); 
    }
);



RULE_N : 'n';

RULE_IJ : ('i'|'j');

RULE_E : ('e'|'E');

RULE_EXP : RULE_E ('0'..'9')+;

RULE_EXPIJ : RULE_EXP RULE_IJ;

RULE_ONE : '1';

RULE_INT : ('0'..'9')+;

RULE_ID : '_'? ('a'..'z'|'A'..'Z') ('0'..'9'|'_'|'a'..'z'|'A'..'Z')*;

RULE_STRING : '"' (~(('\\'|'"'))|'\\' ('\''|'"'|'?'|'\\'|'a'|'b'|'f'|'n'|'r'|'t'|'v'))* '"';

RULE_CONSTANT_STRING : '\u00AD';

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


