/*
 * generated by Xtext
 */
package org.eclipselabs.damos.mscript.scoping;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.scoping.impl.SimpleScope;
import org.eclipselabs.damos.mscript.CompoundStatement;
import org.eclipselabs.damos.mscript.ConstantDeclaration;
import org.eclipselabs.damos.mscript.ForStatement;
import org.eclipselabs.damos.mscript.FunctionAliasDeclaration;
import org.eclipselabs.damos.mscript.FunctionDeclaration;
import org.eclipselabs.damos.mscript.InspectWhenClause;
import org.eclipselabs.damos.mscript.LambdaExpression;
import org.eclipselabs.damos.mscript.LetExpression;
import org.eclipselabs.damos.mscript.LetExpressionAssignment;
import org.eclipselabs.damos.mscript.LocalVariableDeclaration;
import org.eclipselabs.damos.mscript.MscriptPackage;
import org.eclipselabs.damos.mscript.ParameterDeclaration;
import org.eclipselabs.damos.mscript.StateVariableDeclaration;
import org.eclipselabs.damos.mscript.Statement;
import org.eclipselabs.damos.mscript.Type;
import org.eclipselabs.damos.mscript.UnionConstructionOperator;
import org.eclipselabs.damos.mscript.UnionType;
import org.eclipselabs.damos.mscript.VariableDeclaration;

public class MscriptScopeProvider extends AbstractDeclarativeScopeProvider {

	public IScope scope_DataType(EObject context, EReference reference) {
		return new SimpleScope(Scopes.selectCompatible(getDelegate().getScope(context, reference).getAllElements(),
				MscriptPackage.eINSTANCE.getType()));
	}

	public IScope scope_CallableElement(EObject context, EReference reference) {
		List<EObject> elements = new ArrayList<EObject>();
		
		EObject element = context; 
		EObject container = context.eContainer();
		while (container != null) {
			if (container instanceof LetExpression) {
				LetExpression letExpression = (LetExpression) container;
				for (LetExpressionAssignment assignment : letExpression.getAssignments()) {
					for (VariableDeclaration variable : assignment.getVariables()) {
						elements.add(variable);
					}
				}
			} else if (container instanceof LambdaExpression) {
				LambdaExpression lambdaExpression = (LambdaExpression) container;
				elements.addAll(lambdaExpression.getParameters());
			} else if (container instanceof InspectWhenClause) {
				elements.add(container);
			} else if (container instanceof FunctionDeclaration) {
				FunctionDeclaration functionDeclaration = (FunctionDeclaration) container;
				
				for (ConstantDeclaration constantDeclaration : functionDeclaration.getConstantDeclarations()) {
					elements.add(constantDeclaration);
				}

				for (StateVariableDeclaration stateVariableDeclaration : functionDeclaration.getStateVariableDeclarations()) {
					elements.add(stateVariableDeclaration);
				}

				for (FunctionAliasDeclaration functionAliasDeclaration : functionDeclaration.getFunctionAliasDeclarations()) {
					elements.add(functionAliasDeclaration);
				}

				for (ParameterDeclaration parameterDeclaration : functionDeclaration.getConstantInputParameterDeclarations()) {
					elements.add(parameterDeclaration);
				}
				
				for (ParameterDeclaration parameterDeclaration : functionDeclaration.getNonConstantInputParameterDeclarations()) {
					elements.add(parameterDeclaration);
				}
				
				for (ParameterDeclaration parameterDeclaration : functionDeclaration.getOutputParameterDeclarations()) {
					elements.add(parameterDeclaration);
				}

				elements.add(functionDeclaration);
			} else if (container instanceof ForStatement) {
				ForStatement forStatement = (ForStatement) container;
				VariableDeclaration iterationVariable = forStatement.getIterationVariable();
				if (iterationVariable != null) {
					elements.add(iterationVariable);
				}
			} else if (container instanceof CompoundStatement) {
				CompoundStatement compoundStatement = (CompoundStatement) container;
				for (Statement statement : compoundStatement.getStatements()) {
					if (statement == element) {
						break;
					}
					if (statement instanceof LocalVariableDeclaration) {
						elements.add(statement);
					}
				}
			}
			element = container;
			container = container.eContainer();
		}
		
		Iterable<IEObjectDescription> parentElements = getDelegate().getScope(context, reference).getAllElements();
		Iterable<IEObjectDescription> filteredParentElements = Scopes.selectCompatible(parentElements, MscriptPackage.eINSTANCE.getCallableElement());
		return Scopes.scopeFor(elements, new SimpleScope(filteredParentElements));
	}

	public IScope scope_UnionConstructionOperator_member(UnionConstructionOperator context, EReference reference) {
		if (isResolved(context.getTypeSpecifier())) {
			Type type = context.getTypeSpecifier().getType();
			if (isResolved(type) && type instanceof UnionType) {
				return Scopes.scopeFor(((UnionType) type).getMembers());
			}
		}
		return Scopes.scopeFor(Collections.<EObject>emptyList());
	}
	
	public IScope scope_UnitSymbol(EObject context, EReference reference) {
		Iterable<IEObjectDescription> parentElements = getDelegate().getScope(context, reference).getAllElements();
		Iterable<IEObjectDescription> filteredParentElements = Scopes.selectCompatible(parentElements, MscriptPackage.eINSTANCE.getUnitSymbol());
		return new SimpleScope(filteredParentElements);
	}

	private boolean isResolved(EObject eObject) {
		return eObject != null && !eObject.eIsProxy();
	}
	
}
