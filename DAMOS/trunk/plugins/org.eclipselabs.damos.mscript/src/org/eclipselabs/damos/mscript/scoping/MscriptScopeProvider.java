/*
 * generated by Xtext
 */
package org.eclipselabs.damos.mscript.scoping;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipselabs.damos.mscript.Compound;
import org.eclipselabs.damos.mscript.ForStatement;
import org.eclipselabs.damos.mscript.FunctionDeclaration;
import org.eclipselabs.damos.mscript.FunctionObjectDeclaration;
import org.eclipselabs.damos.mscript.IterationCall;
import org.eclipselabs.damos.mscript.LetExpression;
import org.eclipselabs.damos.mscript.LetExpressionAssignment;
import org.eclipselabs.damos.mscript.LocalVariableDeclaration;
import org.eclipselabs.damos.mscript.ParameterDeclaration;
import org.eclipselabs.damos.mscript.StateVariableDeclaration;
import org.eclipselabs.damos.mscript.Statement;
import org.eclipselabs.damos.mscript.VariableDeclaration;

public class MscriptScopeProvider extends AbstractDeclarativeScopeProvider {

	public IScope scope_CallableElement(EObject context, EReference reference) {
		List<EObject> elements = new ArrayList<EObject>();
		
		EObject element = context; 
		EObject container = context.eContainer();
		while (container != null) {
			if (container instanceof LetExpression) {
				LetExpression letExpression = (LetExpression) container;
				for (LetExpressionAssignment assignment : letExpression.getAssignments()) {
					for (VariableDeclaration variable : assignment.getVariables()) {
						elements.add(variable);
					}
				}
			} else if (container instanceof IterationCall) {
				IterationCall iterationCall = (IterationCall) container;
				elements.add(iterationCall.getAccumulator());
				elements.addAll(iterationCall.getIterationVariables());
			} else if (container instanceof FunctionDeclaration) {
				FunctionDeclaration functionDeclaration = (FunctionDeclaration) container;

				for (StateVariableDeclaration stateVariableDeclaration : functionDeclaration.getStateVariableDeclarations()) {
					elements.add(stateVariableDeclaration);
				}

				for (FunctionObjectDeclaration functionObjectDeclaration : functionDeclaration.getFunctionObjectDeclarations()) {
					elements.add(functionObjectDeclaration);
				}

				for (ParameterDeclaration parameterDeclaration : functionDeclaration.getTemplateParameterDeclarations()) {
					elements.add(parameterDeclaration);
				}
				
				for (ParameterDeclaration parameterDeclaration : functionDeclaration.getInputParameterDeclarations()) {
					elements.add(parameterDeclaration);
				}
				
				for (ParameterDeclaration parameterDeclaration : functionDeclaration.getOutputParameterDeclarations()) {
					elements.add(parameterDeclaration);
				}

				elements.add(functionDeclaration);
			} else if (container instanceof ForStatement) {
				ForStatement forStatement = (ForStatement) container;
				VariableDeclaration iterationVariable = forStatement.getIterationVariable();
				if (iterationVariable != null) {
					elements.add(iterationVariable);
				}
			} else if (container instanceof Compound) {
				Compound compound = (Compound) container;
				for (Statement statement : compound.getStatements()) {
					if (statement == element) {
						break;
					}
					if (statement instanceof LocalVariableDeclaration) {
						elements.add(statement);
					}
				}
			}
			element = container;
			container = container.eContainer();
		}
		
		return Scopes.scopeFor(elements, getDelegate().getScope(context, reference));
	}

}
