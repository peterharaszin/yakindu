/*
* generated by Xtext
*/

package org.eclipselabs.damos.simulation.simulationmodel.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipselabs.damos.mscript.services.MscriptGrammarAccess;

@Singleton
public class SimulationModelGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SimulationModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimulationModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSimulationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cQualifiedNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQualifiedNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cQualifiedNameAssignment_1.eContents().get(0);
		private final Keyword cUsingKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExecutionModelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cExecutionModelExecutionModelCrossReference_3_0 = (CrossReference)cExecutionModelAssignment_3.eContents().get(0);
		private final RuleCall cExecutionModelExecutionModelQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cExecutionModelExecutionModelCrossReference_3_0.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_4 = (UnorderedGroup)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cUnorderedGroup_4.eContents().get(0);
		private final Keyword cFragmentKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Assignment cTopLevelFragmentAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final CrossReference cTopLevelFragmentFragmentCrossReference_4_0_1_0 = (CrossReference)cTopLevelFragmentAssignment_4_0_1.eContents().get(0);
		private final RuleCall cTopLevelFragmentFragmentQualifiedNameParserRuleCall_4_0_1_0_1 = (RuleCall)cTopLevelFragmentFragmentCrossReference_4_0_1_0.eContents().get(1);
		private final Group cGroup_4_1 = (Group)cUnorderedGroup_4.eContents().get(1);
		private final Keyword cSimulationTimeKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cSimulationTimeAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cSimulationTimeExpressionParserRuleCall_4_1_1_0 = (RuleCall)cSimulationTimeAssignment_4_1_1.eContents().get(0);
		private final Assignment cSolverConfigurationAssignment_4_2 = (Assignment)cUnorderedGroup_4.eContents().get(2);
		private final RuleCall cSolverConfigurationSolverConfigurationParserRuleCall_4_2_0 = (RuleCall)cSolverConfigurationAssignment_4_2.eContents().get(0);
		
		//SimulationModel:
		//	"simulation" qualifiedName=QualifiedName "using" executionModel=[ExecutionModel|QualifiedName] ("fragment"
		//	topLevelFragment=[Fragment|QualifiedName] & ("simulationTime" simulationTime=Expression)? &
		//	solverConfiguration=SolverConfiguration);
		public ParserRule getRule() { return rule; }

		//"simulation" qualifiedName=QualifiedName "using" executionModel=[ExecutionModel|QualifiedName] ("fragment"
		//topLevelFragment=[Fragment|QualifiedName] & ("simulationTime" simulationTime=Expression)? &
		//solverConfiguration=SolverConfiguration)
		public Group getGroup() { return cGroup; }

		//"simulation"
		public Keyword getSimulationKeyword_0() { return cSimulationKeyword_0; }

		//qualifiedName=QualifiedName
		public Assignment getQualifiedNameAssignment_1() { return cQualifiedNameAssignment_1; }

		//QualifiedName
		public RuleCall getQualifiedNameQualifiedNameParserRuleCall_1_0() { return cQualifiedNameQualifiedNameParserRuleCall_1_0; }

		//"using"
		public Keyword getUsingKeyword_2() { return cUsingKeyword_2; }

		//executionModel=[ExecutionModel|QualifiedName]
		public Assignment getExecutionModelAssignment_3() { return cExecutionModelAssignment_3; }

		//[ExecutionModel|QualifiedName]
		public CrossReference getExecutionModelExecutionModelCrossReference_3_0() { return cExecutionModelExecutionModelCrossReference_3_0; }

		//QualifiedName
		public RuleCall getExecutionModelExecutionModelQualifiedNameParserRuleCall_3_0_1() { return cExecutionModelExecutionModelQualifiedNameParserRuleCall_3_0_1; }

		//"fragment" topLevelFragment=[Fragment|QualifiedName] & ("simulationTime" simulationTime=Expression)? &
		//solverConfiguration=SolverConfiguration
		public UnorderedGroup getUnorderedGroup_4() { return cUnorderedGroup_4; }

		//"fragment" topLevelFragment=[Fragment|QualifiedName]
		public Group getGroup_4_0() { return cGroup_4_0; }

		//"fragment"
		public Keyword getFragmentKeyword_4_0_0() { return cFragmentKeyword_4_0_0; }

		//topLevelFragment=[Fragment|QualifiedName]
		public Assignment getTopLevelFragmentAssignment_4_0_1() { return cTopLevelFragmentAssignment_4_0_1; }

		//[Fragment|QualifiedName]
		public CrossReference getTopLevelFragmentFragmentCrossReference_4_0_1_0() { return cTopLevelFragmentFragmentCrossReference_4_0_1_0; }

		//QualifiedName
		public RuleCall getTopLevelFragmentFragmentQualifiedNameParserRuleCall_4_0_1_0_1() { return cTopLevelFragmentFragmentQualifiedNameParserRuleCall_4_0_1_0_1; }

		//("simulationTime" simulationTime=Expression)?
		public Group getGroup_4_1() { return cGroup_4_1; }

		//"simulationTime"
		public Keyword getSimulationTimeKeyword_4_1_0() { return cSimulationTimeKeyword_4_1_0; }

		//simulationTime=Expression
		public Assignment getSimulationTimeAssignment_4_1_1() { return cSimulationTimeAssignment_4_1_1; }

		//Expression
		public RuleCall getSimulationTimeExpressionParserRuleCall_4_1_1_0() { return cSimulationTimeExpressionParserRuleCall_4_1_1_0; }

		//solverConfiguration=SolverConfiguration
		public Assignment getSolverConfigurationAssignment_4_2() { return cSolverConfigurationAssignment_4_2; }

		//SolverConfiguration
		public RuleCall getSolverConfigurationSolverConfigurationParserRuleCall_4_2_0() { return cSolverConfigurationSolverConfigurationParserRuleCall_4_2_0; }
	}

	public class SolverConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SolverConfiguration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSolverKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeSolverTypeCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeSolverTypeQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cTypeSolverTypeCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArgumentsSolverArgumentParserRuleCall_2_1_0 = (RuleCall)cArgumentsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//SolverConfiguration:
		//	"solver" type=[SolverType|QualifiedName] ("{" arguments+=SolverArgument+ "}")?;
		public ParserRule getRule() { return rule; }

		//"solver" type=[SolverType|QualifiedName] ("{" arguments+=SolverArgument+ "}")?
		public Group getGroup() { return cGroup; }

		//"solver"
		public Keyword getSolverKeyword_0() { return cSolverKeyword_0; }

		//type=[SolverType|QualifiedName]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//[SolverType|QualifiedName]
		public CrossReference getTypeSolverTypeCrossReference_1_0() { return cTypeSolverTypeCrossReference_1_0; }

		//QualifiedName
		public RuleCall getTypeSolverTypeQualifiedNameParserRuleCall_1_0_1() { return cTypeSolverTypeQualifiedNameParserRuleCall_1_0_1; }

		//("{" arguments+=SolverArgument+ "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//arguments+=SolverArgument+
		public Assignment getArgumentsAssignment_2_1() { return cArgumentsAssignment_2_1; }

		//SolverArgument
		public RuleCall getArgumentsSolverArgumentParserRuleCall_2_1_0() { return cArgumentsSolverArgumentParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}

	public class SolverArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SolverArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cParameterSolverParameterCrossReference_0_0 = (CrossReference)cParameterAssignment_0.eContents().get(0);
		private final RuleCall cParameterSolverParameterValidParameterNameParserRuleCall_0_0_1 = (RuleCall)cParameterSolverParameterCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueLiteralParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//SolverArgument:
		//	parameter=[SolverParameter|ValidParameterName] "=" value=Literal;
		public ParserRule getRule() { return rule; }

		//parameter=[SolverParameter|ValidParameterName] "=" value=Literal
		public Group getGroup() { return cGroup; }

		//parameter=[SolverParameter|ValidParameterName]
		public Assignment getParameterAssignment_0() { return cParameterAssignment_0; }

		//[SolverParameter|ValidParameterName]
		public CrossReference getParameterSolverParameterCrossReference_0_0() { return cParameterSolverParameterCrossReference_0_0; }

		//ValidParameterName
		public RuleCall getParameterSolverParameterValidParameterNameParserRuleCall_0_0_1() { return cParameterSolverParameterValidParameterNameParserRuleCall_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=Literal
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Literal
		public RuleCall getValueLiteralParserRuleCall_2_0() { return cValueLiteralParserRuleCall_2_0; }
	}

	public class ValidParameterNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValidParameterName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ValidParameterName:
		//	N | E | ID;
		public ParserRule getRule() { return rule; }

		//N | E | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//N
		public RuleCall getNTerminalRuleCall_0() { return cNTerminalRuleCall_0; }

		//E
		public RuleCall getETerminalRuleCall_1() { return cETerminalRuleCall_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }
	}
	
	
	private SimulationModelElements pSimulationModel;
	private SolverConfigurationElements pSolverConfiguration;
	private SolverArgumentElements pSolverArgument;
	private ValidParameterNameElements pValidParameterName;
	
	private final GrammarProvider grammarProvider;

	private MscriptGrammarAccess gaMscript;

	@Inject
	public SimulationModelGrammarAccess(GrammarProvider grammarProvider,
		MscriptGrammarAccess gaMscript) {
		this.grammarProvider = grammarProvider;
		this.gaMscript = gaMscript;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public MscriptGrammarAccess getMscriptGrammarAccess() {
		return gaMscript;
	}

	
	//SimulationModel:
	//	"simulation" qualifiedName=QualifiedName "using" executionModel=[ExecutionModel|QualifiedName] ("fragment"
	//	topLevelFragment=[Fragment|QualifiedName] & ("simulationTime" simulationTime=Expression)? &
	//	solverConfiguration=SolverConfiguration);
	public SimulationModelElements getSimulationModelAccess() {
		return (pSimulationModel != null) ? pSimulationModel : (pSimulationModel = new SimulationModelElements());
	}
	
	public ParserRule getSimulationModelRule() {
		return getSimulationModelAccess().getRule();
	}

	//SolverConfiguration:
	//	"solver" type=[SolverType|QualifiedName] ("{" arguments+=SolverArgument+ "}")?;
	public SolverConfigurationElements getSolverConfigurationAccess() {
		return (pSolverConfiguration != null) ? pSolverConfiguration : (pSolverConfiguration = new SolverConfigurationElements());
	}
	
	public ParserRule getSolverConfigurationRule() {
		return getSolverConfigurationAccess().getRule();
	}

	//SolverArgument:
	//	parameter=[SolverParameter|ValidParameterName] "=" value=Literal;
	public SolverArgumentElements getSolverArgumentAccess() {
		return (pSolverArgument != null) ? pSolverArgument : (pSolverArgument = new SolverArgumentElements());
	}
	
	public ParserRule getSolverArgumentRule() {
		return getSolverArgumentAccess().getRule();
	}

	//ValidParameterName:
	//	N | E | ID;
	public ValidParameterNameElements getValidParameterNameAccess() {
		return (pValidParameterName != null) ? pValidParameterName : (pValidParameterName = new ValidParameterNameElements());
	}
	
	public ParserRule getValidParameterNameRule() {
		return getValidParameterNameAccess().getRule();
	}

	//Module:
	//	definitions+=Definition*;
	public MscriptGrammarAccess.ModuleElements getModuleAccess() {
		return gaMscript.getModuleAccess();
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}

	//Definition:
	//	DataTypeDefinition | FunctionDefinition;
	public MscriptGrammarAccess.DefinitionElements getDefinitionAccess() {
		return gaMscript.getDefinitionAccess();
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}

	/// *
	// * DataTypeDefinition
	// * / DataTypeDefinition:
	//	EnumerationDefinition | StructDefinition | TypedefDeclaration;
	public MscriptGrammarAccess.DataTypeDefinitionElements getDataTypeDefinitionAccess() {
		return gaMscript.getDataTypeDefinitionAccess();
	}
	
	public ParserRule getDataTypeDefinitionRule() {
		return getDataTypeDefinitionAccess().getRule();
	}

	/// *
	// * Enumeration
	// * / EnumerationDefinition:
	//	"enum" name=ValidID "{" (literalDeclarations+=EnumerationLiteralDeclaration (","
	//	literalDeclarations+=EnumerationLiteralDeclaration)*)? "}";
	public MscriptGrammarAccess.EnumerationDefinitionElements getEnumerationDefinitionAccess() {
		return gaMscript.getEnumerationDefinitionAccess();
	}
	
	public ParserRule getEnumerationDefinitionRule() {
		return getEnumerationDefinitionAccess().getRule();
	}

	//EnumerationLiteralDeclaration:
	//	name=ValidID;
	public MscriptGrammarAccess.EnumerationLiteralDeclarationElements getEnumerationLiteralDeclarationAccess() {
		return gaMscript.getEnumerationLiteralDeclarationAccess();
	}
	
	public ParserRule getEnumerationLiteralDeclarationRule() {
		return getEnumerationLiteralDeclarationAccess().getRule();
	}

	/// *
	// * Typedef
	// * / TypedefDeclaration:
	//	"typedef" typeSpecifier=DataTypeSpecifier name=ValidID;
	public MscriptGrammarAccess.TypedefDeclarationElements getTypedefDeclarationAccess() {
		return gaMscript.getTypedefDeclarationAccess();
	}
	
	public ParserRule getTypedefDeclarationRule() {
		return getTypedefDeclarationAccess().getRule();
	}

	/// *
	// * Struct
	// * / StructDefinition:
	//	"struct" name=ValidID "{" memberDeclarations+=StructMemberDeclaration* "}";
	public MscriptGrammarAccess.StructDefinitionElements getStructDefinitionAccess() {
		return gaMscript.getStructDefinitionAccess();
	}
	
	public ParserRule getStructDefinitionRule() {
		return getStructDefinitionAccess().getRule();
	}

	//StructMemberDeclaration:
	//	typeSpecifier=DataTypeSpecifier name=ValidID;
	public MscriptGrammarAccess.StructMemberDeclarationElements getStructMemberDeclarationAccess() {
		return gaMscript.getStructMemberDeclarationAccess();
	}
	
	public ParserRule getStructMemberDeclarationRule() {
		return getStructMemberDeclarationAccess().getRule();
	}

	/// *
	// * Function
	// * / FunctionDefinition:
	//	kind=FunctionKind? "func" name=ValidID ("<" templateParameterDeclarations+=TemplateParameterDeclaration (","
	//	templateParameterDeclarations+=TemplateParameterDeclaration)* ">")? "("
	//	(inputParameterDeclarations+=InputParameterDeclaration ("," inputParameterDeclarations+=InputParameterDeclaration)*)?
	//	")" "->" outputParameterDeclarations+=OutputParameterDeclaration (","
	//	outputParameterDeclarations+=OutputParameterDeclaration)* "{" (checks+=Check | assertions+=Assertion |
	//	functionObjectDeclarations+=FunctionObjectDeclaration | stateVariableDeclarations+=StateVariableDeclaration |
	//	constantDeclarations+=ConstantDeclaration | equations+=Equation)* "}";
	public MscriptGrammarAccess.FunctionDefinitionElements getFunctionDefinitionAccess() {
		return gaMscript.getFunctionDefinitionAccess();
	}
	
	public ParserRule getFunctionDefinitionRule() {
		return getFunctionDefinitionAccess().getRule();
	}

	//enum FunctionKind:
	//	Stateful="stateful" | Continuous="continuous";
	public MscriptGrammarAccess.FunctionKindElements getFunctionKindAccess() {
		return gaMscript.getFunctionKindAccess();
	}
	
	public EnumRule getFunctionKindRule() {
		return getFunctionKindAccess().getRule();
	}

	//TemplateParameterDeclaration:
	//	name=ValidID;
	public MscriptGrammarAccess.TemplateParameterDeclarationElements getTemplateParameterDeclarationAccess() {
		return gaMscript.getTemplateParameterDeclarationAccess();
	}
	
	public ParserRule getTemplateParameterDeclarationRule() {
		return getTemplateParameterDeclarationAccess().getRule();
	}

	//InputParameterDeclaration:
	//	name=ValidID;
	public MscriptGrammarAccess.InputParameterDeclarationElements getInputParameterDeclarationAccess() {
		return gaMscript.getInputParameterDeclarationAccess();
	}
	
	public ParserRule getInputParameterDeclarationRule() {
		return getInputParameterDeclarationAccess().getRule();
	}

	//OutputParameterDeclaration:
	//	name=ValidID;
	public MscriptGrammarAccess.OutputParameterDeclarationElements getOutputParameterDeclarationAccess() {
		return gaMscript.getOutputParameterDeclarationAccess();
	}
	
	public ParserRule getOutputParameterDeclarationRule() {
		return getOutputParameterDeclarationAccess().getRule();
	}

	//Check:
	//	"check" ("<" templateArguments+=Expression ("," templateArguments+=Expression)* ">")? "("
	//	(inputParameterTypes+=DataTypeSpecifier ("," inputParameterTypes+=DataTypeSpecifier)*)? ")" "->"
	//	outputParameterTypes+=DataTypeSpecifier ("," outputParameterTypes+=DataTypeSpecifier)*;
	public MscriptGrammarAccess.CheckElements getCheckAccess() {
		return gaMscript.getCheckAccess();
	}
	
	public ParserRule getCheckRule() {
		return getCheckAccess().getRule();
	}

	//enum AssertionStatusKind:
	//	Info="info" | Warning="warning" | Error="error" | Fatal="fatal";
	public MscriptGrammarAccess.AssertionStatusKindElements getAssertionStatusKindAccess() {
		return gaMscript.getAssertionStatusKindAccess();
	}
	
	public EnumRule getAssertionStatusKindRule() {
		return getAssertionStatusKindAccess().getRule();
	}

	//Assertion:
	//	static?="static"? "assert" condition=Expression ":" statusKind=AssertionStatusKind message=Expression;
	public MscriptGrammarAccess.AssertionElements getAssertionAccess() {
		return gaMscript.getAssertionAccess();
	}
	
	public ParserRule getAssertionRule() {
		return getAssertionAccess().getRule();
	}

	//StateVariableDeclaration:
	//	"var" name=ValidID;
	public MscriptGrammarAccess.StateVariableDeclarationElements getStateVariableDeclarationAccess() {
		return gaMscript.getStateVariableDeclarationAccess();
	}
	
	public ParserRule getStateVariableDeclarationRule() {
		return getStateVariableDeclarationAccess().getRule();
	}

	//ConstantDeclaration:
	//	"const" name=ValidID "=" initializer=Expression;
	public MscriptGrammarAccess.ConstantDeclarationElements getConstantDeclarationAccess() {
		return gaMscript.getConstantDeclarationAccess();
	}
	
	public ParserRule getConstantDeclarationRule() {
		return getConstantDeclarationAccess().getRule();
	}

	//FunctionObjectDeclaration:
	//	"fob" functionName=[FunctionDefinition|QualifiedName] ("<" templateArguments+=Expression (","
	//	templateArguments+=Expression)* ">")? name=ValidID;
	public MscriptGrammarAccess.FunctionObjectDeclarationElements getFunctionObjectDeclarationAccess() {
		return gaMscript.getFunctionObjectDeclarationAccess();
	}
	
	public ParserRule getFunctionObjectDeclarationRule() {
		return getFunctionObjectDeclarationAccess().getRule();
	}

	//Equation:
	//	initial?="initial"? "eq" leftHandSide=Expression "=" rightHandSide=Expression;
	public MscriptGrammarAccess.EquationElements getEquationAccess() {
		return gaMscript.getEquationAccess();
	}
	
	public ParserRule getEquationRule() {
		return getEquationAccess().getRule();
	}

	/// *
	// * Data type specifier
	// * / DataTypeSpecifier:
	//	definedType=(PrimitiveType | ArrayType) | type=[DataType|QualifiedName];
	public MscriptGrammarAccess.DataTypeSpecifierElements getDataTypeSpecifierAccess() {
		return gaMscript.getDataTypeSpecifierAccess();
	}
	
	public ParserRule getDataTypeSpecifierRule() {
		return getDataTypeSpecifierAccess().getRule();
	}

	//PrimitiveType:
	//	NumericType | BooleanType | StringType;
	public MscriptGrammarAccess.PrimitiveTypeElements getPrimitiveTypeAccess() {
		return gaMscript.getPrimitiveTypeAccess();
	}
	
	public ParserRule getPrimitiveTypeRule() {
		return getPrimitiveTypeAccess().getRule();
	}

	//NumericType:
	//	RealType | IntegerType | ComplexType | GaussianType;
	public MscriptGrammarAccess.NumericTypeElements getNumericTypeAccess() {
		return gaMscript.getNumericTypeAccess();
	}
	
	public ParserRule getNumericTypeRule() {
		return getNumericTypeAccess().getRule();
	}

	//RealType:
	//	{RealType} "real" unit=Unit;
	public MscriptGrammarAccess.RealTypeElements getRealTypeAccess() {
		return gaMscript.getRealTypeAccess();
	}
	
	public ParserRule getRealTypeRule() {
		return getRealTypeAccess().getRule();
	}

	//IntegerType:
	//	{IntegerType} "int" unit=Unit;
	public MscriptGrammarAccess.IntegerTypeElements getIntegerTypeAccess() {
		return gaMscript.getIntegerTypeAccess();
	}
	
	public ParserRule getIntegerTypeRule() {
		return getIntegerTypeAccess().getRule();
	}

	//ComplexType:
	//	{ComplexType} "complex" unit=Unit;
	public MscriptGrammarAccess.ComplexTypeElements getComplexTypeAccess() {
		return gaMscript.getComplexTypeAccess();
	}
	
	public ParserRule getComplexTypeRule() {
		return getComplexTypeAccess().getRule();
	}

	//GaussianType:
	//	{GaussianType} "gauss" unit=Unit;
	public MscriptGrammarAccess.GaussianTypeElements getGaussianTypeAccess() {
		return gaMscript.getGaussianTypeAccess();
	}
	
	public ParserRule getGaussianTypeRule() {
		return getGaussianTypeAccess().getRule();
	}

	//BooleanType:
	//	{BooleanType} "bool";
	public MscriptGrammarAccess.BooleanTypeElements getBooleanTypeAccess() {
		return gaMscript.getBooleanTypeAccess();
	}
	
	public ParserRule getBooleanTypeRule() {
		return getBooleanTypeAccess().getRule();
	}

	//StringType:
	//	{StringType} "string";
	public MscriptGrammarAccess.StringTypeElements getStringTypeAccess() {
		return gaMscript.getStringTypeAccess();
	}
	
	public ParserRule getStringTypeRule() {
		return getStringTypeAccess().getRule();
	}

	//ArrayType:
	//	TensorType | => (definedElementType=(BooleanType | StringType) | elementType=[DataType]) "["
	//	dimensions+=ArrayDimension ("," dimensions+=ArrayDimension)* "]";
	public MscriptGrammarAccess.ArrayTypeElements getArrayTypeAccess() {
		return gaMscript.getArrayTypeAccess();
	}
	
	public ParserRule getArrayTypeRule() {
		return getArrayTypeAccess().getRule();
	}

	//TensorType:
	//	definedElementType=NumericType "[" dimensions+=ArrayDimension ("," dimensions+=ArrayDimension)* "]";
	public MscriptGrammarAccess.TensorTypeElements getTensorTypeAccess() {
		return gaMscript.getTensorTypeAccess();
	}
	
	public ParserRule getTensorTypeRule() {
		return getTensorTypeAccess().getRule();
	}

	//ArrayDimension:
	//	{ArrayDimension} size=Expression?;
	public MscriptGrammarAccess.ArrayDimensionElements getArrayDimensionAccess() {
		return gaMscript.getArrayDimensionAccess();
	}
	
	public ParserRule getArrayDimensionRule() {
		return getArrayDimensionAccess().getRule();
	}

	/// *
	// * Expressions
	// * / Expression:
	//	LetExpression | IfExpression | SwitchExpression | RangeExpression;
	public MscriptGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaMscript.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//LetExpression:
	//	"let" variableDeclarations+=LetExpressionVariableDeclaration (","
	//	variableDeclarations+=LetExpressionVariableDeclaration)* "in" targetExpression=Expression;
	public MscriptGrammarAccess.LetExpressionElements getLetExpressionAccess() {
		return gaMscript.getLetExpressionAccess();
	}
	
	public ParserRule getLetExpressionRule() {
		return getLetExpressionAccess().getRule();
	}

	//LetExpressionVariableDeclaration:
	//	(parts+=LetExpressionVariableDeclarationPart | "(" parts+=LetExpressionVariableDeclarationPart (","
	//	parts+=LetExpressionVariableDeclarationPart)+ ")") "=" assignedExpression=Expression;
	public MscriptGrammarAccess.LetExpressionVariableDeclarationElements getLetExpressionVariableDeclarationAccess() {
		return gaMscript.getLetExpressionVariableDeclarationAccess();
	}
	
	public ParserRule getLetExpressionVariableDeclarationRule() {
		return getLetExpressionVariableDeclarationAccess().getRule();
	}

	//LetExpressionVariableDeclarationPart:
	//	name=ValidID;
	public MscriptGrammarAccess.LetExpressionVariableDeclarationPartElements getLetExpressionVariableDeclarationPartAccess() {
		return gaMscript.getLetExpressionVariableDeclarationPartAccess();
	}
	
	public ParserRule getLetExpressionVariableDeclarationPartRule() {
		return getLetExpressionVariableDeclarationPartAccess().getRule();
	}

	//IfExpression:
	//	static?="static"? "if" condition=Expression "then" thenExpression=Expression "else" elseExpression=Expression;
	public MscriptGrammarAccess.IfExpressionElements getIfExpressionAccess() {
		return gaMscript.getIfExpressionAccess();
	}
	
	public ParserRule getIfExpressionRule() {
		return getIfExpressionAccess().getRule();
	}

	//SwitchExpression:
	//	static?="static"? "switch" controlExpression=Expression cases+=SwitchCase* "default" ":" defaultExpression=Expression;
	public MscriptGrammarAccess.SwitchExpressionElements getSwitchExpressionAccess() {
		return gaMscript.getSwitchExpressionAccess();
	}
	
	public ParserRule getSwitchExpressionRule() {
		return getSwitchExpressionAccess().getRule();
	}

	//SwitchCase:
	//	"case" caseExpression=ImpliesExpression ":" resultExpression=Expression;
	public MscriptGrammarAccess.SwitchCaseElements getSwitchCaseAccess() {
		return gaMscript.getSwitchCaseAccess();
	}
	
	public ParserRule getSwitchCaseRule() {
		return getSwitchCaseAccess().getRule();
	}

	//RangeExpression returns Expression:
	//	ImpliesExpression ({RangeExpression.operands+=current} ":" operands+=ImpliesExpression (":"
	//	operands+=ImpliesExpression)?)?;
	public MscriptGrammarAccess.RangeExpressionElements getRangeExpressionAccess() {
		return gaMscript.getRangeExpressionAccess();
	}
	
	public ParserRule getRangeExpressionRule() {
		return getRangeExpressionAccess().getRule();
	}

	//ImpliesExpression returns Expression:
	//	LogicalOrExpression ({ImpliesExpression.leftOperand=current} "=>" rightOperand=LogicalOrExpression)?;
	public MscriptGrammarAccess.ImpliesExpressionElements getImpliesExpressionAccess() {
		return gaMscript.getImpliesExpressionAccess();
	}
	
	public ParserRule getImpliesExpressionRule() {
		return getImpliesExpressionAccess().getRule();
	}

	//LogicalOrExpression returns Expression:
	//	LogicalAndExpression ({LogicalOrExpression.leftOperand=current} "||" rightOperand=LogicalAndExpression)*;
	public MscriptGrammarAccess.LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return gaMscript.getLogicalOrExpressionAccess();
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}

	//LogicalAndExpression returns Expression:
	//	EqualityExpression ({LogicalAndExpression.leftOperand=current} "&&" rightOperand=EqualityExpression)*;
	public MscriptGrammarAccess.LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return gaMscript.getLogicalAndExpressionAccess();
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}

	//EqualityExpression returns Expression:
	//	RelationalExpression ({EqualityExpression.leftOperand=current} operator=EqualityOperator
	//	rightOperand=RelationalExpression)*;
	public MscriptGrammarAccess.EqualityExpressionElements getEqualityExpressionAccess() {
		return gaMscript.getEqualityExpressionAccess();
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}

	//enum EqualityOperator:
	//	EqualTo="==" | NotEqualTo="!=";
	public MscriptGrammarAccess.EqualityOperatorElements getEqualityOperatorAccess() {
		return gaMscript.getEqualityOperatorAccess();
	}
	
	public EnumRule getEqualityOperatorRule() {
		return getEqualityOperatorAccess().getRule();
	}

	//RelationalExpression returns Expression:
	//	AdditiveExpression => ({RelationalExpression.leftOperand=current} operator=RelationalOperator
	//	rightOperand=AdditiveExpression | {TypeTestExpression.expression=current} "is" typeSpecifier=DataTypeSpecifier)?;
	public MscriptGrammarAccess.RelationalExpressionElements getRelationalExpressionAccess() {
		return gaMscript.getRelationalExpressionAccess();
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}

	//enum RelationalOperator:
	//	LessThan="<" | LessThanOrEqualTo="<=" | GreaterThan=">" | GreaterThanOrEqualTo=">=";
	public MscriptGrammarAccess.RelationalOperatorElements getRelationalOperatorAccess() {
		return gaMscript.getRelationalOperatorAccess();
	}
	
	public EnumRule getRelationalOperatorRule() {
		return getRelationalOperatorAccess().getRule();
	}

	//AdditiveExpression returns Expression:
	//	MultiplicativeExpression ({AdditiveExpression.leftOperand=current} operator=AdditiveOperator
	//	rightOperand=MultiplicativeExpression)*;
	public MscriptGrammarAccess.AdditiveExpressionElements getAdditiveExpressionAccess() {
		return gaMscript.getAdditiveExpressionAccess();
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	//enum AdditiveOperator:
	//	Add="+" | Subtract="-";
	public MscriptGrammarAccess.AdditiveOperatorElements getAdditiveOperatorAccess() {
		return gaMscript.getAdditiveOperatorAccess();
	}
	
	public EnumRule getAdditiveOperatorRule() {
		return getAdditiveOperatorAccess().getRule();
	}

	//MultiplicativeExpression returns Expression:
	//	PowerExpression ({MultiplicativeExpression.leftOperand=current} operator=MultiplicativeOperator
	//	rightOperand=PowerExpression)*;
	public MscriptGrammarAccess.MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return gaMscript.getMultiplicativeExpressionAccess();
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}

	//enum MultiplicativeOperator:
	//	Multiply="*" | Divide="/" | ElementWiseMultiply=".*" | ElementWiseDivide="./";
	public MscriptGrammarAccess.MultiplicativeOperatorElements getMultiplicativeOperatorAccess() {
		return gaMscript.getMultiplicativeOperatorAccess();
	}
	
	public EnumRule getMultiplicativeOperatorRule() {
		return getMultiplicativeOperatorAccess().getRule();
	}

	//PowerExpression returns Expression:
	//	UnaryExpression ({PowerExpression.operand=current} operator=PowerOperator exponent=UnaryExpression)?;
	public MscriptGrammarAccess.PowerExpressionElements getPowerExpressionAccess() {
		return gaMscript.getPowerExpressionAccess();
	}
	
	public ParserRule getPowerExpressionRule() {
		return getPowerExpressionAccess().getRule();
	}

	//enum PowerOperator:
	//	Power="^" | ElementWisePower=".^";
	public MscriptGrammarAccess.PowerOperatorElements getPowerOperatorAccess() {
		return gaMscript.getPowerOperatorAccess();
	}
	
	public EnumRule getPowerOperatorRule() {
		return getPowerOperatorAccess().getRule();
	}

	//UnaryExpression returns Expression:
	//	PostfixExpression | {UnaryExpression} operator=UnaryOperator operand=PostfixExpression;
	public MscriptGrammarAccess.UnaryExpressionElements getUnaryExpressionAccess() {
		return gaMscript.getUnaryExpressionAccess();
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}

	//enum UnaryOperator:
	//	Negate="-" | LogicalNot="!";
	public MscriptGrammarAccess.UnaryOperatorElements getUnaryOperatorAccess() {
		return gaMscript.getUnaryOperatorAccess();
	}
	
	public EnumRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}

	//PostfixExpression returns Expression:
	//	ArrayElementAccess ({PostfixExpression.operand=current} operator=PostfixOperator)?;
	public MscriptGrammarAccess.PostfixExpressionElements getPostfixExpressionAccess() {
		return gaMscript.getPostfixExpressionAccess();
	}
	
	public ParserRule getPostfixExpressionRule() {
		return getPostfixExpressionAccess().getRule();
	}

	//enum PostfixOperator:
	//	Derivative="\'";
	public MscriptGrammarAccess.PostfixOperatorElements getPostfixOperatorAccess() {
		return gaMscript.getPostfixOperatorAccess();
	}
	
	public EnumRule getPostfixOperatorRule() {
		return getPostfixOperatorAccess().getRule();
	}

	//ArrayElementAccess returns Expression:
	//	MemberFeatureCall ({ArrayElementAccess.array=current} "[" subscripts+=ArraySubscript ("," subscripts+=ArraySubscript)*
	//	"]")*;
	public MscriptGrammarAccess.ArrayElementAccessElements getArrayElementAccessAccess() {
		return gaMscript.getArrayElementAccessAccess();
	}
	
	public ParserRule getArrayElementAccessRule() {
		return getArrayElementAccessAccess().getRule();
	}

	//MemberFeatureCall returns Expression:
	//	PrimaryExpression ({MemberVariableAccess.target=current} "." memberVariable=[CallableElement|ValidID] |
	//	{FunctionCall.arguments+=current} "." feature=[CallableElement|ValidID] "(" (arguments+=Expression (","
	//	arguments+=Expression)*)? ")" | {IterationCall.target=current} "." identifier=ValidID "(" variables+=IterationVariable
	//	("," variables+=IterationVariable)* (";" accumulator=IterationAccumulator)? (";" breakCondition=Expression)? "|"
	//	expression=Expression ")")*;
	public MscriptGrammarAccess.MemberFeatureCallElements getMemberFeatureCallAccess() {
		return gaMscript.getMemberFeatureCallAccess();
	}
	
	public ParserRule getMemberFeatureCallRule() {
		return getMemberFeatureCallAccess().getRule();
	}

	//AssignableMemberFeatureCall returns Expression:
	//	AssignablePrimaryExpression ({MemberVariableAccess.target=current} "." memberVariable=[CallableElement|ValidID])*;
	public MscriptGrammarAccess.AssignableMemberFeatureCallElements getAssignableMemberFeatureCallAccess() {
		return gaMscript.getAssignableMemberFeatureCallAccess();
	}
	
	public ParserRule getAssignableMemberFeatureCallRule() {
		return getAssignableMemberFeatureCallAccess().getRule();
	}

	//IterationVariable:
	//	name=ValidID;
	public MscriptGrammarAccess.IterationVariableElements getIterationVariableAccess() {
		return gaMscript.getIterationVariableAccess();
	}
	
	public ParserRule getIterationVariableRule() {
		return getIterationVariableAccess().getRule();
	}

	//IterationAccumulator:
	//	name=ValidID "=" initializer=Expression;
	public MscriptGrammarAccess.IterationAccumulatorElements getIterationAccumulatorAccess() {
		return gaMscript.getIterationAccumulatorAccess();
	}
	
	public ParserRule getIterationAccumulatorRule() {
		return getIterationAccumulatorAccess().getRule();
	}

	//ArraySubscript:
	//	slice?=":" | expression=Expression;
	public MscriptGrammarAccess.ArraySubscriptElements getArraySubscriptAccess() {
		return gaMscript.getArraySubscriptAccess();
	}
	
	public ParserRule getArraySubscriptRule() {
		return getArraySubscriptAccess().getRule();
	}

	//PrimaryExpression returns Expression:
	//	Literal | FeatureCall | UnitConstructionOperator | ArrayConstructionOperator | ArrayConcatenationOperator |
	//	ParenthesizedExpression | EndExpression | AlgorithmExpression;
	public MscriptGrammarAccess.PrimaryExpressionElements getPrimaryExpressionAccess() {
		return gaMscript.getPrimaryExpressionAccess();
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//AssignablePrimaryExpression returns Expression:
	//	FeatureCall | ParenthesizedExpression;
	public MscriptGrammarAccess.AssignablePrimaryExpressionElements getAssignablePrimaryExpressionAccess() {
		return gaMscript.getAssignablePrimaryExpressionAccess();
	}
	
	public ParserRule getAssignablePrimaryExpressionRule() {
		return getAssignablePrimaryExpressionAccess().getRule();
	}

	//Literal:
	//	NumericLiteral | BooleanLiteral | StringLiteral;
	public MscriptGrammarAccess.LiteralElements getLiteralAccess() {
		return gaMscript.getLiteralAccess();
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//NumericLiteral:
	//	IntegerLiteral | RealLiteral;
	public MscriptGrammarAccess.NumericLiteralElements getNumericLiteralAccess() {
		return gaMscript.getNumericLiteralAccess();
	}
	
	public ParserRule getNumericLiteralRule() {
		return getNumericLiteralAccess().getRule();
	}

	//RealLiteral:
	//	data=RealData unit=Unit;
	public MscriptGrammarAccess.RealLiteralElements getRealLiteralAccess() {
		return gaMscript.getRealLiteralAccess();
	}
	
	public ParserRule getRealLiteralRule() {
		return getRealLiteralAccess().getRule();
	}

	//RealData hidden():
	//	ValidInt ("." ValidInt (IJ | EXPIJ | E ("+" | "-") ValidInt IJ?)? | (EXPIJ | E ("+" | "-") ValidInt IJ?));
	public MscriptGrammarAccess.RealDataElements getRealDataAccess() {
		return gaMscript.getRealDataAccess();
	}
	
	public ParserRule getRealDataRule() {
		return getRealDataAccess().getRule();
	}

	//IntegerLiteral:
	//	data=IntegerData unit=Unit;
	public MscriptGrammarAccess.IntegerLiteralElements getIntegerLiteralAccess() {
		return gaMscript.getIntegerLiteralAccess();
	}
	
	public ParserRule getIntegerLiteralRule() {
		return getIntegerLiteralAccess().getRule();
	}

	//IntegerData hidden():
	//	ValidInt IJ?;
	public MscriptGrammarAccess.IntegerDataElements getIntegerDataAccess() {
		return gaMscript.getIntegerDataAccess();
	}
	
	public ParserRule getIntegerDataRule() {
		return getIntegerDataAccess().getRule();
	}

	//BooleanLiteral:
	//	{BooleanLiteral} (true?="true" | "false");
	public MscriptGrammarAccess.BooleanLiteralElements getBooleanLiteralAccess() {
		return gaMscript.getBooleanLiteralAccess();
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//StringLiteral:
	//	value=STRING;
	public MscriptGrammarAccess.StringLiteralElements getStringLiteralAccess() {
		return gaMscript.getStringLiteralAccess();
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//FeatureCall returns Expression:
	//	VariableAccess | FunctionCall;
	public MscriptGrammarAccess.FeatureCallElements getFeatureCallAccess() {
		return gaMscript.getFeatureCallAccess();
	}
	
	public ParserRule getFeatureCallRule() {
		return getFeatureCallAccess().getRule();
	}

	//VariableAccess returns Expression:
	//	{VariableAccess} feature=[CallableElement|QualifiedName] ("{" stepExpression=StepExpression "}")?;
	public MscriptGrammarAccess.VariableAccessElements getVariableAccessAccess() {
		return gaMscript.getVariableAccessAccess();
	}
	
	public ParserRule getVariableAccessRule() {
		return getVariableAccessAccess().getRule();
	}

	//FunctionCall returns Expression:
	//	{FunctionCall} feature=[CallableElement|QualifiedName] "(" (arguments+=Expression ("," arguments+=Expression)*)? ")";
	public MscriptGrammarAccess.FunctionCallElements getFunctionCallAccess() {
		return gaMscript.getFunctionCallAccess();
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}

	//StepExpression:
	//	RangeStepExpression;
	public MscriptGrammarAccess.StepExpressionElements getStepExpressionAccess() {
		return gaMscript.getStepExpressionAccess();
	}
	
	public ParserRule getStepExpressionRule() {
		return getStepExpressionAccess().getRule();
	}

	//RangeStepExpression returns StepExpression:
	//	AdditiveStepExpression ({RangeStepExpression.start=current} ".." end=AdditiveStepExpression)?;
	public MscriptGrammarAccess.RangeStepExpressionElements getRangeStepExpressionAccess() {
		return gaMscript.getRangeStepExpressionAccess();
	}
	
	public ParserRule getRangeStepExpressionRule() {
		return getRangeStepExpressionAccess().getRule();
	}

	//AdditiveStepExpression returns StepExpression:
	//	NegateStepExpression ({AdditiveStepExpression.leftOperand=current} operator=AdditiveOperator
	//	rightOperand=NegateStepExpression)*;
	public MscriptGrammarAccess.AdditiveStepExpressionElements getAdditiveStepExpressionAccess() {
		return gaMscript.getAdditiveStepExpressionAccess();
	}
	
	public ParserRule getAdditiveStepExpressionRule() {
		return getAdditiveStepExpressionAccess().getRule();
	}

	//NegateStepExpression returns StepExpression:
	//	PrimitiveStepExpression | {NegateStepExpression} "-" operand=PrimitiveStepExpression;
	public MscriptGrammarAccess.NegateStepExpressionElements getNegateStepExpressionAccess() {
		return gaMscript.getNegateStepExpressionAccess();
	}
	
	public ParserRule getNegateStepExpressionRule() {
		return getNegateStepExpressionAccess().getRule();
	}

	//PrimitiveStepExpression returns StepExpression:
	//	StepLiteral | StepN;
	public MscriptGrammarAccess.PrimitiveStepExpressionElements getPrimitiveStepExpressionAccess() {
		return gaMscript.getPrimitiveStepExpressionAccess();
	}
	
	public ParserRule getPrimitiveStepExpressionRule() {
		return getPrimitiveStepExpressionAccess().getRule();
	}

	//StepLiteral:
	//	value=ValidInt;
	public MscriptGrammarAccess.StepLiteralElements getStepLiteralAccess() {
		return gaMscript.getStepLiteralAccess();
	}
	
	public ParserRule getStepLiteralRule() {
		return getStepLiteralAccess().getRule();
	}

	//StepN:
	//	{StepN} N;
	public MscriptGrammarAccess.StepNElements getStepNAccess() {
		return gaMscript.getStepNAccess();
	}
	
	public ParserRule getStepNRule() {
		return getStepNAccess().getRule();
	}

	//ArrayConstructionOperator:
	//	"{" expressions+=Expression (("," expressions+=Expression)* | "for" iterationClauses+=ArrayConstructionIterationClause
	//	("," iterationClauses+=ArrayConstructionIterationClause)*) "}";
	public MscriptGrammarAccess.ArrayConstructionOperatorElements getArrayConstructionOperatorAccess() {
		return gaMscript.getArrayConstructionOperatorAccess();
	}
	
	public ParserRule getArrayConstructionOperatorRule() {
		return getArrayConstructionOperatorAccess().getRule();
	}

	//ArrayConstructionIterationClause:
	//	variableName=ValidID "in" collectionExpression=Expression;
	public MscriptGrammarAccess.ArrayConstructionIterationClauseElements getArrayConstructionIterationClauseAccess() {
		return gaMscript.getArrayConstructionIterationClauseAccess();
	}
	
	public ParserRule getArrayConstructionIterationClauseRule() {
		return getArrayConstructionIterationClauseAccess().getRule();
	}

	//ArrayConcatenationOperator:
	//	"[" rows+=ExpressionList (";" rows+=ExpressionList)* "]";
	public MscriptGrammarAccess.ArrayConcatenationOperatorElements getArrayConcatenationOperatorAccess() {
		return gaMscript.getArrayConcatenationOperatorAccess();
	}
	
	public ParserRule getArrayConcatenationOperatorRule() {
		return getArrayConcatenationOperatorAccess().getRule();
	}

	//ExpressionList:
	//	expressions+=Expression ("," expressions+=Expression)*;
	public MscriptGrammarAccess.ExpressionListElements getExpressionListAccess() {
		return gaMscript.getExpressionListAccess();
	}
	
	public ParserRule getExpressionListRule() {
		return getExpressionListAccess().getRule();
	}

	//UnitConstructionOperator:
	//	"$" unit=ExplicitUnit;
	public MscriptGrammarAccess.UnitConstructionOperatorElements getUnitConstructionOperatorAccess() {
		return gaMscript.getUnitConstructionOperatorAccess();
	}
	
	public ParserRule getUnitConstructionOperatorRule() {
		return getUnitConstructionOperatorAccess().getRule();
	}

	//ParenthesizedExpression:
	//	"(" expressions+=Expression ("," expressions+=Expression)* ")";
	public MscriptGrammarAccess.ParenthesizedExpressionElements getParenthesizedExpressionAccess() {
		return gaMscript.getParenthesizedExpressionAccess();
	}
	
	public ParserRule getParenthesizedExpressionRule() {
		return getParenthesizedExpressionAccess().getRule();
	}

	//EndExpression:
	//	{EndExpression} "end";
	public MscriptGrammarAccess.EndExpressionElements getEndExpressionAccess() {
		return gaMscript.getEndExpressionAccess();
	}
	
	public ParserRule getEndExpressionRule() {
		return getEndExpressionAccess().getRule();
	}

	//AlgorithmExpression returns Expression:
	//	{AlgorithmExpression} "algo" body=Compound;
	public MscriptGrammarAccess.AlgorithmExpressionElements getAlgorithmExpressionAccess() {
		return gaMscript.getAlgorithmExpressionAccess();
	}
	
	public ParserRule getAlgorithmExpressionRule() {
		return getAlgorithmExpressionAccess().getRule();
	}

	//Compound:
	//	{Compound} "{" statements+=Statement* "}";
	public MscriptGrammarAccess.CompoundElements getCompoundAccess() {
		return gaMscript.getCompoundAccess();
	}
	
	public ParserRule getCompoundRule() {
		return getCompoundAccess().getRule();
	}

	//Statement:
	//	Compound | Assignment | VariableDeclaration | IfStatement | WhileStatement | DoWhileStatement | ForStatement |
	//	ContinueStatement | BreakStatement | ReturnStatement;
	public MscriptGrammarAccess.StatementElements getStatementAccess() {
		return gaMscript.getStatementAccess();
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//Assignment:
	//	target=AssignableMemberFeatureCall "=" expression=Expression ";";
	public MscriptGrammarAccess.AssignmentElements getAssignmentAccess() {
		return gaMscript.getAssignmentAccess();
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//VariableDeclaration:
	//	"var" name=ValidID "=" initializer=Expression ";";
	public MscriptGrammarAccess.VariableDeclarationElements getVariableDeclarationAccess() {
		return gaMscript.getVariableDeclarationAccess();
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	//IfStatement:
	//	"if" "(" condition=Expression ")" thenStatement=Statement ("else" elseStatement=Statement)?;
	public MscriptGrammarAccess.IfStatementElements getIfStatementAccess() {
		return gaMscript.getIfStatementAccess();
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}

	//WhileStatement:
	//	"while" "(" condition=Expression ")" body=Statement;
	public MscriptGrammarAccess.WhileStatementElements getWhileStatementAccess() {
		return gaMscript.getWhileStatementAccess();
	}
	
	public ParserRule getWhileStatementRule() {
		return getWhileStatementAccess().getRule();
	}

	//ForStatement:
	//	"for" "(" ("var" declaredIterationVariable=IterationVariable | iterationVariable=[CallableElement|ValidID]) "in"
	//	collectionExpression=Expression ("while" condition=Expression)? ")" body=Statement;
	public MscriptGrammarAccess.ForStatementElements getForStatementAccess() {
		return gaMscript.getForStatementAccess();
	}
	
	public ParserRule getForStatementRule() {
		return getForStatementAccess().getRule();
	}

	//DoWhileStatement:
	//	"do" body=Statement "while" "(" condition=Expression ")" ";";
	public MscriptGrammarAccess.DoWhileStatementElements getDoWhileStatementAccess() {
		return gaMscript.getDoWhileStatementAccess();
	}
	
	public ParserRule getDoWhileStatementRule() {
		return getDoWhileStatementAccess().getRule();
	}

	//ContinueStatement:
	//	{ContinueStatement} "continue" ";";
	public MscriptGrammarAccess.ContinueStatementElements getContinueStatementAccess() {
		return gaMscript.getContinueStatementAccess();
	}
	
	public ParserRule getContinueStatementRule() {
		return getContinueStatementAccess().getRule();
	}

	//BreakStatement:
	//	{BreakStatement} "break" ";";
	public MscriptGrammarAccess.BreakStatementElements getBreakStatementAccess() {
		return gaMscript.getBreakStatementAccess();
	}
	
	public ParserRule getBreakStatementRule() {
		return getBreakStatementAccess().getRule();
	}

	//ReturnStatement:
	//	"return" expression=Expression ";";
	public MscriptGrammarAccess.ReturnStatementElements getReturnStatementAccess() {
		return gaMscript.getReturnStatementAccess();
	}
	
	public ParserRule getReturnStatementRule() {
		return getReturnStatementAccess().getRule();
	}

	/// *
	// * Unit expressions
	// * / Unit:
	//	{Unit} ("(" ")" | "(" numerator=UnitNumerator ("/" denominator=UnitDenominator)? ")" |
	//	numerator=ImplicitUnitNumerator);
	public MscriptGrammarAccess.UnitElements getUnitAccess() {
		return gaMscript.getUnitAccess();
	}
	
	public ParserRule getUnitRule() {
		return getUnitAccess().getRule();
	}

	//ExplicitUnit returns Unit:
	//	"(" numerator=UnitNumerator ("/" denominator=UnitDenominator)? ")";
	public MscriptGrammarAccess.ExplicitUnitElements getExplicitUnitAccess() {
		return gaMscript.getExplicitUnitAccess();
	}
	
	public ParserRule getExplicitUnitRule() {
		return getExplicitUnitAccess().getRule();
	}

	//UnitNumerator:
	//	{UnitNumerator} ONE | factors+=UnitFactor ("*" factors+=UnitFactor)*;
	public MscriptGrammarAccess.UnitNumeratorElements getUnitNumeratorAccess() {
		return gaMscript.getUnitNumeratorAccess();
	}
	
	public ParserRule getUnitNumeratorRule() {
		return getUnitNumeratorAccess().getRule();
	}

	//ImplicitUnitNumerator returns UnitNumerator:
	//	{UnitNumerator};
	public MscriptGrammarAccess.ImplicitUnitNumeratorElements getImplicitUnitNumeratorAccess() {
		return gaMscript.getImplicitUnitNumeratorAccess();
	}
	
	public ParserRule getImplicitUnitNumeratorRule() {
		return getImplicitUnitNumeratorAccess().getRule();
	}

	//UnitDenominator:
	//	factors+=UnitFactor | "(" factors+=UnitFactor ("*" factors+=UnitFactor)* ")";
	public MscriptGrammarAccess.UnitDenominatorElements getUnitDenominatorAccess() {
		return gaMscript.getUnitDenominatorAccess();
	}
	
	public ParserRule getUnitDenominatorRule() {
		return getUnitDenominatorAccess().getRule();
	}

	//UnitFactor:
	//	symbol=ValidID ("^" exponent=UnitExponent)?;
	public MscriptGrammarAccess.UnitFactorElements getUnitFactorAccess() {
		return gaMscript.getUnitFactorAccess();
	}
	
	public ParserRule getUnitFactorRule() {
		return getUnitFactorAccess().getRule();
	}

	//UnitExponent returns ecore::EInt:
	//	"-"? ValidInt;
	public MscriptGrammarAccess.UnitExponentElements getUnitExponentAccess() {
		return gaMscript.getUnitExponentAccess();
	}
	
	public ParserRule getUnitExponentRule() {
		return getUnitExponentAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("::" ValidID)*;
	public MscriptGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaMscript.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//ValidInt returns ecore::EInt:
	//	ONE | INT;
	public MscriptGrammarAccess.ValidIntElements getValidIntAccess() {
		return gaMscript.getValidIntAccess();
	}
	
	public ParserRule getValidIntRule() {
		return getValidIntAccess().getRule();
	}

	//ValidID:
	//	N | IJ | E | EXPIJ | ID;
	public MscriptGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaMscript.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	/// *
	// * Terminals
	// * / terminal N:
	//	"n";
	public TerminalRule getNRule() {
		return gaMscript.getNRule();
	} 

	//terminal IJ:
	//	"i" | "j";
	public TerminalRule getIJRule() {
		return gaMscript.getIJRule();
	} 

	//terminal E:
	//	"e" | "E";
	public TerminalRule getERule() {
		return gaMscript.getERule();
	} 

	//terminal EXPIJ:
	//	E "0".."9"+ IJ?;
	public TerminalRule getEXPIJRule() {
		return gaMscript.getEXPIJRule();
	} 

	//terminal ONE:
	//	"1";
	public TerminalRule getONERule() {
		return gaMscript.getONERule();
	} 

	//terminal INT:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaMscript.getINTRule();
	} 

	//terminal ID:
	//	"_"* ("a".."z" | "A".."Z") ("0".."9" | "_" | "a".."z" | "A".."Z")*;
	public TerminalRule getIDRule() {
		return gaMscript.getIDRule();
	} 

	//terminal STRING:
	//	"\"" (!("\\" | "\"") | "\\" ("\'" | "\"" | "?" | "\\" | "a" | "b" | "f" | "n" | "r" | "t" | "v"))* "\"";
	public TerminalRule getSTRINGRule() {
		return gaMscript.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaMscript.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaMscript.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaMscript.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaMscript.getANY_OTHERRule();
	} 
}
