/**
 * Copyright (c) 2010 committers of YAKINDU and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     committers of YAKINDU - initial API and implementation
 */
import statechart;
import expressions;

extension org::yakindu::sct::codegenerator::base::extensions::Extensions;


// TODO: extensions are somehow redundant...
Effect getEntryActionExpression(State this) : 
    this.getEnterReaction() != null ? this.getEnterReaction().effect : null;

Reaction getEnterReaction(State this) :
	this.localReactions.typeSelect(Reaction).trigger.typeSelect(EnterEvent).first().eContainer;
 
//=== no do action anymore ===  
// Reaction getDoActionExpression(State this) : 
//    this.do != null ? parseActionExpression(this.do) : null;
    
Effect getExitActionExpression(State this) : 
    this.getExitReaction() != null ? this.getExitReaction().effect : null;

Reaction getExitReaction(State this) :
	this.localReactions.typeSelect(Reaction).trigger.typeSelect(ExitEvent).first().eContainer;

String getId(State this):
  getId(this.eContainer) + "_STATE_" + this.name; // name is unique within region, so use this within the identifier

boolean isSimpleState(State this) : 
  	this.subRegions.isEmpty;

boolean isCompoundState(State this) : 
	!this.subRegions.isEmpty;
	
	
// rename to hasEnterAction 
boolean hasEntryAction(State this) : 
    getEnterReaction() != null;
    
   
//===== no do actions any more === 
// boolean hasDoAction(State this) : 
//     this.do!= null && !this.do.matches("");
    
boolean hasExitAction(State this) : 
    getExitReaction() != null;
    
List[Region] getNestedRegions(State this):
   {}.addAll(subRegions).addAll(subRegions.getNestedRegions()).flatten();

boolean hasRegions(State this) : !subRegions.isEmpty;

	