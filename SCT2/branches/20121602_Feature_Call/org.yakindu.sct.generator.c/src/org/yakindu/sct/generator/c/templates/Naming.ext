import ecore;
import base;
import sgraph;
import stext;
import sexec;
import sgen; 


extension org::yakindu::sct::generator::c::templates::Constants;
extension org::eclipse::xtend::util::stdlib::elementprops;

//TODO Workaround (WA) for error in Typesystem
String getNameWA(Declaration this) : this.metaType.getProperty("name").toString();
String getNameWA(Vertex this) : this.metaType.getProperty("name").toString();

 
// TODO: move to other extension
Void setGeneratorEntry(emf::EObject obj, GeneratorEntry entry):
	JAVA org.yakindu.sct.generator.c.GeneratorEntryAccess.setGeneratorEntry(org.eclipse.emf.ecore.EObject, org.yakindu.sct.model.sgen.GeneratorEntry);
GeneratorEntry getGeneratorEntry(emf::EObject obj):
	JAVA org.yakindu.sct.generator.c.GeneratorEntryAccess.getGeneratorEntry(org.eclipse.emf.ecore.EObject);
GeneratorEntry genEntry(Object obj) : getGeneratorEntry(((EObject)obj).eRootContainer);
Object setGenEntry(Object obj, GeneratorEntry genEntry) : setGeneratorEntry(((EObject)obj).eRootContainer,genEntry) -> "";
 

ExecutionFlow getExecutionFlow(InterfaceScope this) : ((ExecutionFlow)this.eContainer);
ExecutionFlow getExecutionFlow(InternalScope this) : ((ExecutionFlow)this.eContainer);

String scName(Expression statement) : ((ExecutionFlow)statement.eRootContainer).name;
String scName(Object this) : ((ExecutionFlow)((EObject)this).eRootContainer).name.toFirstLower();
String ScName(Object this) : ((ExecutionFlow)((EObject)this).eRootContainer).name.toFirstUpper();

List[EventDefinition] declaredEvents(ExecutionFlow flow) : flow.scopes.declarations.typeSelect(EventDefinition);
List[TimeEvent] declaredTimerEvents(ExecutionFlow flow) : flow.scopes.declarations.typeSelect(TimeEvent);
List[VariableDefinition] declaredVariables(ExecutionFlow flow) : flow.scopes.declarations.typeSelect(VariableDefinition);

String test(NamedElement obj) : "";
String StName(Object this) : ((ExecutionFlow)((EObject)this).eRootContainer).name.toFirstUpper() + "Statemachine";
String STNAME(Object this) : ((ExecutionFlow)((EObject)this).eRootContainer).name.toUpperCase() + "STATEMACHINE";
String stName(Object this) : ((ExecutionFlow)((EObject)this).eRootContainer).name.toFirstLower() + "Statemachine";


String EvName(Object this) : ((ExecutionFlow)((EObject)this).eRootContainer).name.toFirstUpper() + "Event";
String EVNAME(Object this) : ((ExecutionFlow)((EObject)this).eRootContainer).name.toUpperCase() + "EVENT";

/* This is from sgraph! This should not be used within code generation */
String StateEnumName(RegularState state) : 
	"_"+ state.getNameWA(); /* ??? */
  
String StateEnumName(ExecutionState state) :
	"_"+state.simpleName;


cached String functionName(Step step) : 
	(step.isEffect()) ? step.actionFunctionName() : (
	(step.isReactionCheck()) ? step.checkFunctionName() : (
	(step.isEntryAction()) ? step.entryActionFunctionName() : ( 
	(step.isExitAction()) ? step.exitActionFunctionName() : (
	(step.isEnterSequence()) ? step.enterSequenceFunctionName() : ( 
	(step.isExitSequence()) ? step.exitSequenceFunctionName() : ( 
	(step.isReactSequence()) ? step.reactSequenceFunctionName() : (
	(step.isShallowEnterSequence()) ? step.shallowEnterSequenceFunctionName() : (
	(step.isDeepEnterSequence()) ? step.deepEnterSequenceFunctionName() : (
	" !! unknown function type !!" )))))))));


ExecutionState state(Step this) : (ExecutionState) this.eContainer;
ExecutionScope scope(Step this) : (ExecutionScope) this.eContainer;

boolean isEffect(Step step) : Reaction.isInstance(step.eContainer) ;
boolean isReactionCheck(Step step) : Reaction.isInstance(step.eContainer) && Check.isInstance(step);
boolean isEntryAction(Step step) : ExecutionState.isInstance(step.eContainer) && step.state().entryAction == step;
boolean isExitAction(Step step) : ExecutionState.isInstance(step.eContainer) && step.state().exitAction == step;
boolean isEnterSequence(Step step) : ExecutionScope.isInstance(step.eContainer) && step.scope().enterSequence == step;
boolean isExitSequence(Step step) : ExecutionScope.isInstance(step.eContainer) && step.scope().exitSequence == step;
boolean isReactSequence(Step step) : Sequence.isInstance(step) && step.name == "react";
boolean isDeepEnterSequence(Step step) : Sequence.isInstance(step) && step.name == "deepEnterSequence";
boolean isShallowEnterSequence(Step step) : Sequence.isInstance(step) && step.name == "shallowEnterSequence";


/* If this is a singleton, we do not need any additional information for the 
	statemachine or the interfaces */
String handleAddition(Object this) :
	(isSingleton() == true) ? "" : StName() + "* " + this.statemachineHandleName();

String handleAdditionComma(Object this) :
	(isSingleton() == true) ? "" : StName() + "* " + this.statemachineHandleName() + ", ";


String handleInterfaceAddition(Scope this) :
	(isSingleton() == true) ? "" : this.interfaceClassName() + "* handle";

String handleInterfaceAdditionComma(Scope this) :
	(isSingleton() == true) ? "" : this.interfaceClassName() + "* handle, ";


/* Function Naming */
String actionFunctionName(Step this) :  
	  this.stName() + "_actions_" + this.getStateName() + "_" + this.getReactionName();

String checkFunctionName(Step this) :  
	  this.stName() + "_condition_" + this.getStateName() + "_" + this.getReactionName();

String entryActionFunctionName(Step this) :  
	  this.stName() + "_entryActions_" + this.getStateName();
	  
String exitActionFunctionName(Step this) :  
	  this.stName() + "_exitActions_" + this.getStateName();
	  
String enterSequenceFunctionName(Step this) :  
	  this.stName() + "_enterSequence_" + this.getStateName();
	  
String exitSequenceFunctionName(Step this) :  
	  this.stName() + "_exitSequence_" + this.getStateName();

String shallowEnterSequenceFunctionName(Step this) :  
	  this.stName() + "_shallowEnterSequence_" + this.getStateName();

String deepEnterSequenceFunctionName(Step this) :  
	  this.stName() + "_deepEnterSequence_" + this.getStateName();

String reactSequenceFunctionName(Step this) :  
	  this.stName() + "_react_" + this.getStateName();

/* for some reason, this is handled completely different */ 
String reactFunctionName(sexec::Reaction this) :  
	  this.stName() + "_react_" + this.getStateName();

String reactFunctionName(ExecutionNode this) :  
	  this.stName() + "_react_" + this.getStateName();
 


//-- Function Definition and Declaration */
String actionFunction(Step this) :  
	  this.actionFunctionName() + "("+ handleAddition() + ")";

/* TODO: */
String checkFunction(Step this) :  
	  this.checkFunctionName() + "("+ handleAddition() + ")";

String entryActionFunction(Step this) :  
	  this.entryActionFunctionName() + "("+ handleAddition() + ")";
 
String exitActionFunction(Step this) :  
	  this.exitActionFunctionName() + "("+ handleAddition() + ")";
 
String enterSequenceFunction(Step this) :  
	  this.enterSequenceFunctionName() + "("+ handleAddition() + ")";

String exitSequenceFunction(Step this) :  
	  this.exitSequenceFunctionName() + "("+ handleAddition() + ")";

String shallowEnterFunction(Step this) :  
	  this.shallowEnterSequenceFunctionName() + "("+ handleAddition() + ")";

String deepEnterFunction(Step this) :  
	  this.deepEnterSequenceFunctionName() + "("+ handleAddition() + ")";

/* for some reason, this is handled completely different */ 
String reactFunction(sexec::Reaction this) :  
	  this.reactFunctionName() + "("+ handleAddition() + ")";

String reactFunction(ExecutionNode this) :  
	  this.reactFunctionName() + "("+ handleAddition() + ")";

String getName(VariableDefinition this): name.toFirstLower();

String getStateName(Step this) : this.eContainer.getStateName(); 
String getStateName(emf::EObject this) : (this.eContainer != null)?this.eContainer.getStateName():"unkown";
String getStateName(ExecutionEntry this) : this.getStateFqn();
String getStateName(ExecutionState this) : this.getStateFqn();
String getStateName(ExecutionRegion this) : 
	if (ExecutionState.isInstance(superScope)) 
	then (
		getStateName((ExecutionState)superScope)+getNullSafeRegionName()
	) else 
		"Region"+getNullSafeRegionName();

String getStateFqn(Void element) :
	"";
String getStateFqn(emf::EObject element) :
	element.eContainer.getStateFqn();
String getStateFqn(ExecutionScope this) :
	(this.superScope.getStateFqn()==""?"":this.superScope.getStateFqn()+"_")+this.name;
String getStateFqn(ExecutionState this) :
	(this.superScope.getStateFqn()==""?"":this.superScope.getStateFqn()+"_")+this.simpleName;


private String getNullSafeRegionName(ExecutionRegion this) :
	if (name == null)
	then (
		if (ExecutionScope.isInstance(superScope))
		then
			superScope.subScopes.indexOf(this)
		else "DefaultRegion"
	)
	else name.replaceAll(" ","").toFirstUpper();

String getReactionName(Object this) : "uknown";
String getReactionName(Check this) : this.eContainer.getReactionName(); 
String getReactionName(sexec::Reaction this) : this.name;
String getReactionName(ExecutionState this) : "sequence";

/* interface naming information */

String interfaceName(Scope this) : "unknownScope";
String interfaceClassName(Scope this) : "unknownScope";
String interfaceObjectName(Scope this) : "unknownScope";

String statemachineHandleName(Object this) : ((ExecutionFlow)((EObject)this).eRootContainer).name.toFirstLower()+"_handle";

String interfaceName(InterfaceScope this) : this.getExecutionFlow().name.toFirstLower() + ((this.name == null) ? "_if" : "_if_" + this.name);
String interfaceClassName(InterfaceScope this) : this.getExecutionFlow().name.toFirstUpper() + "If" + ((this.name == null)?"":this.name.toFirstUpper());
String interfaceObjectName(InterfaceScope this) : "iface" + ((this.name == null)?"":this.name.toFirstUpper());

String interfaceName(InternalScope this) : this.getExecutionFlow().name.toFirstLower() + "internal";
String interfaceClassName(InternalScope this) : this.getExecutionFlow().name.toFirstUpper() + "Internal";
String interfaceObjectName(InternalScope this) : "ifaceInternal";

/* Event name information  */
String getEventEnumName(TimeEvent this) : "ev_" + this.name.toFirstLower();
String getEventEnumName(Event this) : "ev_" + this.eContainer.getScopeName() + "_" + this.getNameWA().toFirstLower();
String getEventEnumName(EventDefinition this) : "ev_" + this.eContainer.getScopeName() + "_" + name; //.toFirstLower();
String getEventEnumName(FeatureCall this) : feature.getEventEnumName();
String getEventEnumName(types::Feature this) : "/* EventEnum requested, but got Feature: "+this+" */";
String getEventEnumName(Expression this) : "/* EventEnum requested, but got Expression: "+this+" */";

String getEventName(Event this) : this.eContainer.getScopeName().toFirstUpper() + this.getNameWA().toFirstUpper();
String getEventName(EventDefinition this) : name.toFirstUpper();
String getEventName(FeatureCall this) : feature.getEventName();
String getEventName(base::NamedElement this) : "/* Event expected, but got NamedElement: "+this+" */";
String getEventName(TypedElementReferenceExpression this) : reference.getEventName();
String getEventName(types::Event this) : this.eContainer.getScopeName().toFirstUpper() + this.name.toFirstUpper();
String getEventName(types::Feature this) : "/* Event expected, but got Feature: "+this+" */";
String getEventName(Expression this) : "/* Event expected, but got Expression: "+this+" */";

String getInterfaceName(EventRaisingExpression this) :
	"iface" + (( this.event.getEvent().eContainer.getScopeName() == "default")?"":this.event.getEvent().eContainer.getScopeName().toFirstUpper());

EventDefinition getEvent(Expression e) : null;
EventDefinition getEvent(NamedElement e) : null;
EventDefinition getEvent(FeatureCall this) : feature.getEvent();
EventDefinition getEvent(TypedElementReferenceExpression this) : reference.getEvent();
EventDefinition getEvent(EventDefinition this) : this;

String getScopeName(emf::EObject eo) :
	"<scope not defined for "+eo+">";

String getScopeName(InternalScope inScope) :
 	"internal";
 	
String getScopeName(InterfaceScope ifScope) :
	(ifScope.name == null)?"default":ifScope.name;

String getLicenseHeader(Object this) :
	if this.genEntry().getFeatureConfiguration(getLicenseFeature())!=null
		&& this.genEntry().getFeatureConfiguration(getLicenseFeature()).getParameterValue(getLicenseText()) != null then
		"/**" + this.genEntry().getFeatureConfiguration(getLicenseFeature()).getParameterValue(getLicenseText()).getStringValue()+"*/"
	else 
		null;
		
String getLicenseHeaderPlain(Object this) :
	if this.genEntry().getFeatureConfiguration(getLicenseFeature())!=null
		&& this.genEntry().getFeatureConfiguration(getLicenseFeature()).getParameterValue(getLicenseText()) != null then
		this.genEntry().getFeatureConfiguration(getLicenseFeature()).getParameterValue(getLicenseText()).getStringValue()
	else 
		null;

Boolean isSingleton(Object this) : (
	(this.genEntry().getFeatureConfiguration(getCCodeFeature()) != null) ? (
      (this.genEntry().getFeatureConfiguration(getCCodeFeature()).getParameterValue(getSingleton()) != null) ?
       this.genEntry().getFeatureConfiguration(getCCodeFeature()).getParameterValue(getSingleton()).getBooleanValue()
     : getSingletonDefault())
     : getSingletonDefault());

String getDebugFeatureValue(Object this) :
(
 (this.genEntry().getFeatureConfiguration(getYacopFeature()) != null) ? (
  (this.genEntry().getFeatureConfiguration(getYacopFeature()).getParameterValue(getDebugFeature()) != null) ?
       this.genEntry().getFeatureConfiguration(getYacopFeature()).getParameterValue(getDebugFeature()).getStringValue()
     : "") 
  : "" 
); 

Boolean isDebugCout(Object this) : (getDebugFeatureValue() == debugTypeCout());
Boolean isDebugCandera(Object this) : (getDebugFeatureValue() == debugTypeCandera());
 
String getComment(Step this) :
	if comment!=null then
		"//"+comment
	else
		null;
