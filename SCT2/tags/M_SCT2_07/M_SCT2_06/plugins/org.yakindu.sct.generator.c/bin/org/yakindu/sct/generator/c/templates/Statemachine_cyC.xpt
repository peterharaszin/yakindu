«REM»

Templates for the main statechart c file.

@auther joern seger

«ENDREM»

«IMPORT sexec»
«IMPORT stext»
«IMPORT sgraph»


«DEFINE file FOR ExecutionFlow»

«FILE 'Statemachine_cy.c'»
#include <stdlib.h>
#include "definition.h"
#include "Statemachine_cy.h"

void statemachine_cy_init(Statemachine_cy* handle, uint16_t maxStates,
		uint16_t maxEvents, Timer* timer, EventPool* eventPool) {

	statemachineBase_init((StatemachineBase*) handle, maxStates, timer);
	eventSet_init(&handle->eventSet, maxEvents);

	/* This is only a place for the pointers to the actual Events */
	handle->eventList = malloc(sizeof(_Event*) * maxEvents);

	/* eventPool must be initialized at this point */
	handle->eventPool = eventPool;

}


void statemachine_cy_init_staticData(Statemachine_cy* handle,
		uint16_t maxEvents, Timer* timer, uint32_t* staticStateData,
		boolean* staticEventSet, _Event** staticListPtr, EventPool* eventPool) {
	statemachineBase_init_staticData((StatemachineBase*) handle,
			staticStateData, timer);
	eventSet_init_staticData(&handle->eventSet, maxEvents, staticEventSet);

	/* Hand out event List */
	handle->eventList = staticListPtr;

	/* eventPool must be initialized at this point */
	handle->eventPool = eventPool;

}

void statemachine_cy_exit(Statemachine_cy* handle) {

	uint32_t i;
	// the active events, which are not been handled need to be freed
	for (i = 0; i < handle->eventSet.maxEvents; ++i) {
		if (eventSet_check(&handle->eventSet, i))
			eventPool_freeEvent(handle->eventPool, handle->eventList[i]);
	}

	if (handle->base.isStaticData == bool_false)
		free(handle->eventList);

	eventSet_exit(&handle->eventSet);
	statemachineBase_exit((StatemachineBase*) handle);

}

void statemachine_cy_runCycle(Statemachine_cy* handle) {

	/* call internal cycle */
	statemachine_cy__runCycle(handle);

	/* cleanup all events */
	eventSet_clean(&handle->eventSet);

}

void statemachine_cy_setEvent(Statemachine_cy* handle, _Event* ev) {

	eventSet_set(&handle->eventSet,ev->id);
	handle->eventList[ev->id] = ev;

}

boolean statemachine_cy_eventWaiting(Statemachine_cy* handle) {

	return eventSet_isAny(&handle->eventSet);
}


«ENDFILE»

«ENDDEFINE»
