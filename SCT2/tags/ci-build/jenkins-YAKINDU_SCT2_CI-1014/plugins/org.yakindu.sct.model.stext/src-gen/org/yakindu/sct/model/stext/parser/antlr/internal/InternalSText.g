/*
* generated by Xtext
*/
grammar InternalSText;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.yakindu.sct.model.stext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.yakindu.sct.model.stext.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.yakindu.sct.model.stext.services.STextGrammarAccess;

}

@parser::members {

 	private STextGrammarAccess grammarAccess;
 	
    public InternalSTextParser(TokenStream input, STextGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Root";	
   	}
   	
   	@Override
   	protected STextGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleRoot
entryRuleRoot returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRootRule()); }
	 iv_ruleRoot=ruleRoot 
	 { $current=$iv_ruleRoot.current; } 
	 EOF 
;

// Rule Root
ruleRoot returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getRootAccess().getRootsDefRootParserRuleCall_0()); 
	    }
		lv_roots_0_0=ruleDefRoot		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRootRule());
	        }
       		add(
       			$current, 
       			"roots",
        		lv_roots_0_0, 
        		"DefRoot");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleDefRoot
entryRuleDefRoot returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefRootRule()); }
	 iv_ruleDefRoot=ruleDefRoot 
	 { $current=$iv_ruleDefRoot.current; } 
	 EOF 
;

// Rule DefRoot
ruleDefRoot returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDefRootAccess().getStatechartRootParserRuleCall_0()); 
    }
    this_StatechartRoot_0=ruleStatechartRoot
    { 
        $current = $this_StatechartRoot_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDefRootAccess().getStateRootParserRuleCall_1()); 
    }
    this_StateRoot_1=ruleStateRoot
    { 
        $current = $this_StateRoot_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDefRootAccess().getTransitionRootParserRuleCall_2()); 
    }
    this_TransitionRoot_2=ruleTransitionRoot
    { 
        $current = $this_TransitionRoot_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleStatechartRoot
entryRuleStatechartRoot returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatechartRootRule()); }
	 iv_ruleStatechartRoot=ruleStatechartRoot 
	 { $current=$iv_ruleStatechartRoot.current; } 
	 EOF 
;

// Rule StatechartRoot
ruleStatechartRoot returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@@statechart@@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStatechartRootAccess().getStatechartKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatechartRootAccess().getDefStatechartSpecificationParserRuleCall_1_0()); 
	    }
		lv_def_1_0=ruleStatechartSpecification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatechartRootRule());
	        }
       		set(
       			$current, 
       			"def",
        		lv_def_1_0, 
        		"StatechartSpecification");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleStateRoot
entryRuleStateRoot returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateRootRule()); }
	 iv_ruleStateRoot=ruleStateRoot 
	 { $current=$iv_ruleStateRoot.current; } 
	 EOF 
;

// Rule StateRoot
ruleStateRoot returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@@state@@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStateRootAccess().getStateKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStateRootAccess().getDefStateSpecificationParserRuleCall_1_0()); 
	    }
		lv_def_1_0=ruleStateSpecification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateRootRule());
	        }
       		set(
       			$current, 
       			"def",
        		lv_def_1_0, 
        		"StateSpecification");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTransitionRoot
entryRuleTransitionRoot returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransitionRootRule()); }
	 iv_ruleTransitionRoot=ruleTransitionRoot 
	 { $current=$iv_ruleTransitionRoot.current; } 
	 EOF 
;

// Rule TransitionRoot
ruleTransitionRoot returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@@transition@@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTransitionRootAccess().getTransitionKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionRootAccess().getDefTransitionSpecificationParserRuleCall_1_0()); 
	    }
		lv_def_1_0=ruleTransitionSpecification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRootRule());
	        }
       		set(
       			$current, 
       			"def",
        		lv_def_1_0, 
        		"TransitionSpecification");
	        afterParserOrEnumRuleCall();
	    }

)
))
;







// Entry rule entryRuleStatechartSpecification
entryRuleStatechartSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatechartSpecificationRule()); }
	 iv_ruleStatechartSpecification=ruleStatechartSpecification 
	 { $current=$iv_ruleStatechartSpecification.current; } 
	 EOF 
;

// Rule StatechartSpecification
ruleStatechartSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStatechartSpecificationAccess().getStatechartSpecificationAction_0(),
            $current);
    }
)(	otherlv_1='namespace' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStatechartSpecificationAccess().getNamespaceKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatechartSpecificationAccess().getNamespaceFQNParserRuleCall_1_1_0()); 
	    }
		lv_namespace_2_0=ruleFQN		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatechartSpecificationRule());
	        }
       		set(
       			$current, 
       			"namespace",
        		lv_namespace_2_0, 
        		"FQN");
	        afterParserOrEnumRuleCall();
	    }

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getStatechartSpecificationAccess().getScopesStatechartScopeParserRuleCall_2_0()); 
	    }
		lv_scopes_3_0=ruleStatechartScope		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatechartSpecificationRule());
	        }
       		add(
       			$current, 
       			"scopes",
        		lv_scopes_3_0, 
        		"StatechartScope");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleStateSpecification
entryRuleStateSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateSpecificationRule()); }
	 iv_ruleStateSpecification=ruleStateSpecification 
	 { $current=$iv_ruleStateSpecification.current; } 
	 EOF 
;

// Rule StateSpecification
ruleStateSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getStateSpecificationAccess().getScopeStateScopeParserRuleCall_0()); 
	    }
		lv_scope_0_0=ruleStateScope		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateSpecificationRule());
	        }
       		set(
       			$current, 
       			"scope",
        		lv_scope_0_0, 
        		"StateScope");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleTransitionSpecification
entryRuleTransitionSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransitionSpecificationRule()); }
	 iv_ruleTransitionSpecification=ruleTransitionSpecification 
	 { $current=$iv_ruleTransitionSpecification.current; } 
	 EOF 
;

// Rule TransitionSpecification
ruleTransitionSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionSpecificationAccess().getReactionTransitionReactionParserRuleCall_0()); 
	    }
		lv_reaction_0_0=ruleTransitionReaction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionSpecificationRule());
	        }
       		set(
       			$current, 
       			"reaction",
        		lv_reaction_0_0, 
        		"TransitionReaction");
	        afterParserOrEnumRuleCall();
	    }

)
)
;







// Entry rule entryRuleStateScope
entryRuleStateScope returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateScopeRule()); }
	 iv_ruleStateScope=ruleStateScope 
	 { $current=$iv_ruleStateScope.current; } 
	 EOF 
;

// Rule StateScope
ruleStateScope returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStateScopeAccess().getSimpleScopeAction_0(),
            $current);
    }
)(
(
(
		{ 
	        newCompositeNode(grammarAccess.getStateScopeAccess().getDeclarationsLocalReactionParserRuleCall_1_0_0()); 
	    }
		lv_declarations_1_1=ruleLocalReaction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateScopeRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_1_1, 
        		"LocalReaction");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getStateScopeAccess().getDeclarationsEntrypointParserRuleCall_1_0_1()); 
	    }
		lv_declarations_1_2=ruleEntrypoint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateScopeRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_1_2, 
        		"Entrypoint");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getStateScopeAccess().getDeclarationsExitpointParserRuleCall_1_0_2()); 
	    }
		lv_declarations_1_3=ruleExitpoint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateScopeRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_1_3, 
        		"Exitpoint");
	        afterParserOrEnumRuleCall();
	    }

)

)
)*)
;





// Entry rule entryRuleStatechartScope
entryRuleStatechartScope returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatechartScopeRule()); }
	 iv_ruleStatechartScope=ruleStatechartScope 
	 { $current=$iv_ruleStatechartScope.current; } 
	 EOF 
;

// Rule StatechartScope
ruleStatechartScope returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStatechartScopeAccess().getInterfaceScopeParserRuleCall_0()); 
    }
    this_InterfaceScope_0=ruleInterfaceScope
    { 
        $current = $this_InterfaceScope_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatechartScopeAccess().getInternalScopeParserRuleCall_1()); 
    }
    this_InternalScope_1=ruleInternalScope
    { 
        $current = $this_InternalScope_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;







// Entry rule entryRuleInterfaceScope
entryRuleInterfaceScope returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterfaceScopeRule()); }
	 iv_ruleInterfaceScope=ruleInterfaceScope 
	 { $current=$iv_ruleInterfaceScope.current; } 
	 EOF 
;

// Rule InterfaceScope
ruleInterfaceScope returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getInterfaceScopeAccess().getInterfaceScopeAction_0(),
            $current);
    }
)	otherlv_1='interface' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInterfaceScopeAccess().getInterfaceKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getInterfaceScopeAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInterfaceScopeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)?	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getInterfaceScopeAccess().getColonKeyword_3());
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceScopeAccess().getDeclarationsEventDeclarartionParserRuleCall_4_0_0()); 
	    }
		lv_declarations_4_1=ruleEventDeclarartion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceScopeRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_4_1, 
        		"EventDeclarartion");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getInterfaceScopeAccess().getDeclarationsVariableDeclarationParserRuleCall_4_0_1()); 
	    }
		lv_declarations_4_2=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceScopeRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_4_2, 
        		"VariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getInterfaceScopeAccess().getDeclarationsOperationDeclarationParserRuleCall_4_0_2()); 
	    }
		lv_declarations_4_3=ruleOperationDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceScopeRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_4_3, 
        		"OperationDeclaration");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getInterfaceScopeAccess().getDeclarationsEntrypointParserRuleCall_4_0_3()); 
	    }
		lv_declarations_4_4=ruleEntrypoint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceScopeRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_4_4, 
        		"Entrypoint");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getInterfaceScopeAccess().getDeclarationsExitpointParserRuleCall_4_0_4()); 
	    }
		lv_declarations_4_5=ruleExitpoint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceScopeRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_4_5, 
        		"Exitpoint");
	        afterParserOrEnumRuleCall();
	    }

)

)
)*)
;





// Entry rule entryRuleInternalScope
entryRuleInternalScope returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInternalScopeRule()); }
	 iv_ruleInternalScope=ruleInternalScope 
	 { $current=$iv_ruleInternalScope.current; } 
	 EOF 
;

// Rule InternalScope
ruleInternalScope returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getInternalScopeAccess().getInternalScopeAction_0(),
            $current);
    }
)	otherlv_1='internal' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInternalScopeAccess().getInternalKeyword_1());
    }
	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInternalScopeAccess().getColonKeyword_2());
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getInternalScopeAccess().getDeclarationsEventDeclarartionParserRuleCall_3_0_0()); 
	    }
		lv_declarations_3_1=ruleEventDeclarartion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInternalScopeRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_3_1, 
        		"EventDeclarartion");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getInternalScopeAccess().getDeclarationsVariableDeclarationParserRuleCall_3_0_1()); 
	    }
		lv_declarations_3_2=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInternalScopeRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_3_2, 
        		"VariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getInternalScopeAccess().getDeclarationsOperationDeclarationParserRuleCall_3_0_2()); 
	    }
		lv_declarations_3_3=ruleOperationDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInternalScopeRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_3_3, 
        		"OperationDeclaration");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getInternalScopeAccess().getDeclarationsLocalReactionParserRuleCall_3_0_3()); 
	    }
		lv_declarations_3_4=ruleLocalReaction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInternalScopeRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_3_4, 
        		"LocalReaction");
	        afterParserOrEnumRuleCall();
	    }

)

)
)*)
;







// Entry rule entryRuleEventDeclarartion
entryRuleEventDeclarartion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEventDeclarartionRule()); }
	 iv_ruleEventDeclarartion=ruleEventDeclarartion 
	 { $current=$iv_ruleEventDeclarartion.current; } 
	 EOF 
;

// Rule EventDeclarartion
ruleEventDeclarartion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getEventDeclarartionAccess().getEventDefinitionParserRuleCall()); 
    }
    this_EventDefinition_0=ruleEventDefinition
    { 
        $current = $this_EventDefinition_0.current; 
        afterParserOrEnumRuleCall();
    }

;







// Entry rule entryRuleEventDefinition
entryRuleEventDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEventDefinitionRule()); }
	 iv_ruleEventDefinition=ruleEventDefinition 
	 { $current=$iv_ruleEventDefinition.current; } 
	 EOF 
;

// Rule EventDefinition
ruleEventDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEventDefinitionAccess().getDirectionDirectionEnumRuleCall_0_0()); 
	    }
		lv_direction_0_0=ruleDirection		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventDefinitionRule());
	        }
       		set(
       			$current, 
       			"direction",
        		lv_direction_0_0, 
        		"Direction");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_1='event' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEventDefinitionAccess().getEventKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getEventDefinitionAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEventDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)(	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getEventDefinitionAccess().getColonKeyword_3_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEventDefinitionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getEventDefinitionAccess().getTypeTypeCrossReference_3_1_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getEventDefinitionAccess().getDerivationEventDerivationParserRuleCall_4_0()); 
	    }
		lv_derivation_5_0=ruleEventDerivation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventDefinitionRule());
	        }
       		set(
       			$current, 
       			"derivation",
        		lv_derivation_5_0, 
        		"EventDerivation");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleEventDerivation
entryRuleEventDerivation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEventDerivationRule()); }
	 iv_ruleEventDerivation=ruleEventDerivation 
	 { $current=$iv_ruleEventDerivation.current; } 
	 EOF 
;

// Rule EventDerivation
ruleEventDerivation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='=' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEventDerivationAccess().getEqualsSignKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEventDerivationAccess().getConditionExpressionParserRuleCall_1_0()); 
	    }
		lv_condition_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventDerivationRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEventDerivationAccess().getColonKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEventDerivationAccess().getValueExpressionParserRuleCall_2_1_0()); 
	    }
		lv_value_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventDerivationRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	 iv_ruleVariableDeclaration=ruleVariableDeclaration 
	 { $current=$iv_ruleVariableDeclaration.current; } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getVariableDefinitionParserRuleCall()); 
    }
    this_VariableDefinition_0=ruleVariableDefinition
    { 
        $current = $this_VariableDefinition_0.current; 
        afterParserOrEnumRuleCall();
    }

;







// Entry rule entryRuleVariableDefinition
entryRuleVariableDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableDefinitionRule()); }
	 iv_ruleVariableDefinition=ruleVariableDefinition 
	 { $current=$iv_ruleVariableDefinition.current; } 
	 EOF 
;

// Rule VariableDefinition
ruleVariableDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getVariableDefinitionAccess().getVariableDefinitionAction_0(),
            $current);
    }
)	otherlv_1='var' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVariableDefinitionAccess().getVarKeyword_1());
    }
(

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getVariableDefinitionAccess().getUnorderedGroup_2());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getVariableDefinitionAccess().getUnorderedGroup_2(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getVariableDefinitionAccess().getUnorderedGroup_2(), 0);
	 				}
					({true}?=>(
(
		lv_readonly_3_0=	'readonly' 
    {
        newLeafNode(lv_readonly_3_0, grammarAccess.getVariableDefinitionAccess().getReadonlyReadonlyKeyword_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableDefinitionRule());
	        }
       		setWithLastConsumed($current, "readonly", true, "readonly");
	    }

)
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getVariableDefinitionAccess().getUnorderedGroup_2());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getVariableDefinitionAccess().getUnorderedGroup_2(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getVariableDefinitionAccess().getUnorderedGroup_2(), 1);
	 				}
					({true}?=>(
(
		lv_external_4_0=	'external' 
    {
        newLeafNode(lv_external_4_0, grammarAccess.getVariableDefinitionAccess().getExternalExternalKeyword_2_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableDefinitionRule());
	        }
       		setWithLastConsumed($current, "external", true, "external");
	    }

)
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getVariableDefinitionAccess().getUnorderedGroup_2());
	 				}
 				)
			)  

		)*	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getVariableDefinitionAccess().getUnorderedGroup_2());
	}

)(
(
		lv_name_5_0=RULE_ID
		{
			newLeafNode(lv_name_5_0, grammarAccess.getVariableDefinitionAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_5_0, 
        		"ID");
	    }

)
)	otherlv_6=':' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getVariableDefinitionAccess().getColonKeyword_4());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableDefinitionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getVariableDefinitionAccess().getTypeTypeCrossReference_5_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_8='=' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getVariableDefinitionAccess().getEqualsSignKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDefinitionAccess().getInitialValueExpressionParserRuleCall_6_1_0()); 
	    }
		lv_initialValue_9_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDefinitionRule());
	        }
       		set(
       			$current, 
       			"initialValue",
        		lv_initialValue_9_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleOperationDeclaration
entryRuleOperationDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperationDeclarationRule()); }
	 iv_ruleOperationDeclaration=ruleOperationDeclaration 
	 { $current=$iv_ruleOperationDeclaration.current; } 
	 EOF 
;

// Rule OperationDeclaration
ruleOperationDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getOperationDeclarationAccess().getOperationDefinitionParserRuleCall()); 
    }
    this_OperationDefinition_0=ruleOperationDefinition
    { 
        $current = $this_OperationDefinition_0.current; 
        afterParserOrEnumRuleCall();
    }

;







// Entry rule entryRuleOperationDefinition
entryRuleOperationDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperationDefinitionRule()); }
	 iv_ruleOperationDefinition=ruleOperationDefinition 
	 { $current=$iv_ruleOperationDefinition.current; } 
	 EOF 
;

// Rule OperationDefinition
ruleOperationDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getOperationDefinitionAccess().getOperationDefinitionAction_0(),
            $current);
    }
)	otherlv_1='operation' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOperationDefinitionAccess().getOperationKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getOperationDefinitionAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperationDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getOperationDefinitionAccess().getLeftParenthesisKeyword_3());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getOperationDefinitionAccess().getParametersParameterParserRuleCall_4_0_0()); 
	    }
		lv_parameters_4_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationDefinitionRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_4_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getOperationDefinitionAccess().getCommaKeyword_4_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOperationDefinitionAccess().getParametersParameterParserRuleCall_4_1_1_0()); 
	    }
		lv_parameters_6_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationDefinitionRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_6_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getOperationDefinitionAccess().getRightParenthesisKeyword_5());
    }
(	otherlv_8=':' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getOperationDefinitionAccess().getColonKeyword_6_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperationDefinitionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getOperationDefinitionAccess().getTypeTypeCrossReference_6_1_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParameterAccess().getColonKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getTypeTypeCrossReference_2_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleEntrypoint
entryRuleEntrypoint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEntrypointRule()); }
	 iv_ruleEntrypoint=ruleEntrypoint 
	 { $current=$iv_ruleEntrypoint.current; } 
	 EOF 
;

// Rule Entrypoint
ruleEntrypoint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getEntrypointAccess().getEntrypointAction_0(),
            $current);
    }
)	otherlv_1='entrypoint' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEntrypointAccess().getEntrypointKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getEntrypointAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEntrypointRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleExitpoint
entryRuleExitpoint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExitpointRule()); }
	 iv_ruleExitpoint=ruleExitpoint 
	 { $current=$iv_ruleExitpoint.current; } 
	 EOF 
;

// Rule Exitpoint
ruleExitpoint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getExitpointAccess().getExitpointAction_0(),
            $current);
    }
)	otherlv_1='exitpoint' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExitpointAccess().getExitpointKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getExitpointAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExitpointRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleFQN
entryRuleFQN returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFQNRule()); } 
	 iv_ruleFQN=ruleFQN 
	 { $current=$iv_ruleFQN.current.getText(); }  
	 EOF 
;

// Rule FQN
ruleFQN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getFQNAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFQNAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;







// Entry rule entryRuleLocalReaction
entryRuleLocalReaction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocalReactionRule()); }
	 iv_ruleLocalReaction=ruleLocalReaction 
	 { $current=$iv_ruleLocalReaction.current; } 
	 EOF 
;

// Rule LocalReaction
ruleLocalReaction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLocalReactionAccess().getTriggerReactionTriggerParserRuleCall_0_0()); 
	    }
		lv_trigger_0_0=ruleReactionTrigger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalReactionRule());
	        }
       		set(
       			$current, 
       			"trigger",
        		lv_trigger_0_0, 
        		"ReactionTrigger");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'/' 
(
(
ruleReactionEffect
)
)))=>(	otherlv_1='/' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLocalReactionAccess().getSolidusKeyword_1_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalReactionAccess().getEffectReactionEffectParserRuleCall_1_0_1_0()); 
	    }
		lv_effect_2_0=ruleReactionEffect		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalReactionRule());
	        }
       		set(
       			$current, 
       			"effect",
        		lv_effect_2_0, 
        		"ReactionEffect");
	        afterParserOrEnumRuleCall();
	    }

)
)))(	otherlv_3='#' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLocalReactionAccess().getNumberSignKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalReactionAccess().getPropertiesReactionPropertiesParserRuleCall_2_1_0()); 
	    }
		lv_properties_4_0=ruleReactionProperties		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalReactionRule());
	        }
       		set(
       			$current, 
       			"properties",
        		lv_properties_4_0, 
        		"ReactionProperties");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleTransitionReaction
entryRuleTransitionReaction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransitionReactionRule()); }
	 iv_ruleTransitionReaction=ruleTransitionReaction 
	 { $current=$iv_ruleTransitionReaction.current; } 
	 EOF 
;

// Rule TransitionReaction
ruleTransitionReaction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTransitionReactionAccess().getTransitionReactionAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionReactionAccess().getTriggerReactionTriggerParserRuleCall_1_0()); 
	    }
		lv_trigger_1_0=ruleReactionTrigger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionReactionRule());
	        }
       		set(
       			$current, 
       			"trigger",
        		lv_trigger_1_0, 
        		"ReactionTrigger");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_2='/' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTransitionReactionAccess().getSolidusKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionReactionAccess().getEffectReactionEffectParserRuleCall_2_1_0()); 
	    }
		lv_effect_3_0=ruleReactionEffect		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionReactionRule());
	        }
       		set(
       			$current, 
       			"effect",
        		lv_effect_3_0, 
        		"ReactionEffect");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_4='#' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTransitionReactionAccess().getNumberSignKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionReactionAccess().getPropertiesReactionPropertiesParserRuleCall_3_1_0()); 
	    }
		lv_properties_5_0=ruleReactionProperties		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionReactionRule());
	        }
       		set(
       			$current, 
       			"properties",
        		lv_properties_5_0, 
        		"ReactionProperties");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleReactionTrigger
entryRuleReactionTrigger returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReactionTriggerRule()); }
	 iv_ruleReactionTrigger=ruleReactionTrigger 
	 { $current=$iv_ruleReactionTrigger.current; } 
	 EOF 
;

// Rule ReactionTrigger
ruleReactionTrigger returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getReactionTriggerAccess().getReactionTriggerAction_0(),
            $current);
    }
)(((
(
		{ 
	        newCompositeNode(grammarAccess.getReactionTriggerAccess().getTriggersEventSpecParserRuleCall_1_0_0_0()); 
	    }
		lv_triggers_1_0=ruleEventSpec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReactionTriggerRule());
	        }
       		add(
       			$current, 
       			"triggers",
        		lv_triggers_1_0, 
        		"EventSpec");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getReactionTriggerAccess().getCommaKeyword_1_0_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReactionTriggerAccess().getTriggersEventSpecParserRuleCall_1_0_1_1_0()); 
	    }
		lv_triggers_3_0=ruleEventSpec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReactionTriggerRule());
	        }
       		add(
       			$current, 
       			"triggers",
        		lv_triggers_3_0, 
        		"EventSpec");
	        afterParserOrEnumRuleCall();
	    }

)
))*(((	'[' 
)=>	otherlv_4='[' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getReactionTriggerAccess().getLeftSquareBracketKeyword_1_0_2_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getReactionTriggerAccess().getGuardExpressionExpressionParserRuleCall_1_0_2_1_0()); 
	    }
		lv_guardExpression_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReactionTriggerRule());
	        }
       		set(
       			$current, 
       			"guardExpression",
        		lv_guardExpression_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=']' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getReactionTriggerAccess().getRightSquareBracketKeyword_1_0_2_2());
    }
)?)
    |(	otherlv_7='[' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getReactionTriggerAccess().getLeftSquareBracketKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReactionTriggerAccess().getGuardExpressionExpressionParserRuleCall_1_1_1_0()); 
	    }
		lv_guardExpression_8_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReactionTriggerRule());
	        }
       		set(
       			$current, 
       			"guardExpression",
        		lv_guardExpression_8_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9=']' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getReactionTriggerAccess().getRightSquareBracketKeyword_1_1_2());
    }
)))
;





// Entry rule entryRuleReactionEffect
entryRuleReactionEffect returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReactionEffectRule()); }
	 iv_ruleReactionEffect=ruleReactionEffect 
	 { $current=$iv_ruleReactionEffect.current; } 
	 EOF 
;

// Rule ReactionEffect
ruleReactionEffect returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getReactionEffectAccess().getReactionEffectAction_0(),
            $current);
    }
)(
(
(
		{ 
	        newCompositeNode(grammarAccess.getReactionEffectAccess().getActionsExpressionParserRuleCall_1_0_0()); 
	    }
		lv_actions_1_1=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReactionEffectRule());
	        }
       		add(
       			$current, 
       			"actions",
        		lv_actions_1_1, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getReactionEffectAccess().getActionsEventRaisingExpressionParserRuleCall_1_0_1()); 
	    }
		lv_actions_1_2=ruleEventRaisingExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReactionEffectRule());
	        }
       		add(
       			$current, 
       			"actions",
        		lv_actions_1_2, 
        		"EventRaisingExpression");
	        afterParserOrEnumRuleCall();
	    }

)

)
)(((	';' 
)=>	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getReactionEffectAccess().getSemicolonKeyword_2_0());
    }
)(
(
(
		{ 
	        newCompositeNode(grammarAccess.getReactionEffectAccess().getActionsExpressionParserRuleCall_2_1_0_0()); 
	    }
		lv_actions_3_1=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReactionEffectRule());
	        }
       		add(
       			$current, 
       			"actions",
        		lv_actions_3_1, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getReactionEffectAccess().getActionsEventRaisingExpressionParserRuleCall_2_1_0_1()); 
	    }
		lv_actions_3_2=ruleEventRaisingExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReactionEffectRule());
	        }
       		add(
       			$current, 
       			"actions",
        		lv_actions_3_2, 
        		"EventRaisingExpression");
	        afterParserOrEnumRuleCall();
	    }

)

)
))*)
;





// Entry rule entryRuleReactionProperties
entryRuleReactionProperties returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReactionPropertiesRule()); }
	 iv_ruleReactionProperties=ruleReactionProperties 
	 { $current=$iv_ruleReactionProperties.current; } 
	 EOF 
;

// Rule ReactionProperties
ruleReactionProperties returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getReactionPropertiesAccess().getReactionPropertiesAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getReactionPropertiesAccess().getPropertiesReactionPropertyParserRuleCall_1_0()); 
	    }
		lv_properties_1_0=ruleReactionProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReactionPropertiesRule());
	        }
       		add(
       			$current, 
       			"properties",
        		lv_properties_1_0, 
        		"ReactionProperty");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleReactionProperty
entryRuleReactionProperty returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReactionPropertyRule()); }
	 iv_ruleReactionProperty=ruleReactionProperty 
	 { $current=$iv_ruleReactionProperty.current; } 
	 EOF 
;

// Rule ReactionProperty
ruleReactionProperty returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getReactionPropertyAccess().getEntryPointSpecParserRuleCall_0()); 
    }
    this_EntryPointSpec_0=ruleEntryPointSpec
    { 
        $current = $this_EntryPointSpec_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getReactionPropertyAccess().getExitPointSpecParserRuleCall_1()); 
    }
    this_ExitPointSpec_1=ruleExitPointSpec
    { 
        $current = $this_ExitPointSpec_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleEntryPointSpec
entryRuleEntryPointSpec returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEntryPointSpecRule()); }
	 iv_ruleEntryPointSpec=ruleEntryPointSpec 
	 { $current=$iv_ruleEntryPointSpec.current; } 
	 EOF 
;

// Rule EntryPointSpec
ruleEntryPointSpec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='>' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEntryPointSpecAccess().getGreaterThanSignKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEntryPointSpecRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getEntryPointSpecAccess().getEntrypointEntrypointCrossReference_1_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExitPointSpec
entryRuleExitPointSpec returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExitPointSpecRule()); }
	 iv_ruleExitPointSpec=ruleExitPointSpec 
	 { $current=$iv_ruleExitPointSpec.current; } 
	 EOF 
;

// Rule ExitPointSpec
ruleExitPointSpec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getExitPointSpecRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getExitPointSpecAccess().getExitpointExitpointCrossReference_0_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='>' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExitPointSpecAccess().getGreaterThanSignKeyword_1());
    }
)
;





// Entry rule entryRuleEventSpec
entryRuleEventSpec returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEventSpecRule()); }
	 iv_ruleEventSpec=ruleEventSpec 
	 { $current=$iv_ruleEventSpec.current; } 
	 EOF 
;

// Rule EventSpec
ruleEventSpec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEventSpecAccess().getRegularEventSpecParserRuleCall_0()); 
    }
    this_RegularEventSpec_0=ruleRegularEventSpec
    { 
        $current = $this_RegularEventSpec_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getEventSpecAccess().getTimeEventSpecParserRuleCall_1()); 
    }
    this_TimeEventSpec_1=ruleTimeEventSpec
    { 
        $current = $this_TimeEventSpec_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getEventSpecAccess().getBuiltinEventSpecParserRuleCall_2()); 
    }
    this_BuiltinEventSpec_2=ruleBuiltinEventSpec
    { 
        $current = $this_BuiltinEventSpec_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleRegularEventSpec
entryRuleRegularEventSpec returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRegularEventSpecRule()); }
	 iv_ruleRegularEventSpec=ruleRegularEventSpec 
	 { $current=$iv_ruleRegularEventSpec.current; } 
	 EOF 
;

// Rule RegularEventSpec
ruleRegularEventSpec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getRegularEventSpecAccess().getEventFeatureCallParserRuleCall_0()); 
	    }
		lv_event_0_0=ruleFeatureCall		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRegularEventSpecRule());
	        }
       		set(
       			$current, 
       			"event",
        		lv_event_0_0, 
        		"FeatureCall");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleTimeEventSpec
entryRuleTimeEventSpec returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTimeEventSpecRule()); }
	 iv_ruleTimeEventSpec=ruleTimeEventSpec 
	 { $current=$iv_ruleTimeEventSpec.current; } 
	 EOF 
;

// Rule TimeEventSpec
ruleTimeEventSpec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTimeEventSpecAccess().getTypeTimeEventTypeEnumRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleTimeEventType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimeEventSpecRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"TimeEventType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_value_1_0=RULE_INT
		{
			newLeafNode(lv_value_1_0, grammarAccess.getTimeEventSpecAccess().getValueINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTimeEventSpecRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"INT");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTimeEventSpecAccess().getUnitTimeUnitEnumRuleCall_2_0()); 
	    }
		lv_unit_2_0=ruleTimeUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimeEventSpecRule());
	        }
       		set(
       			$current, 
       			"unit",
        		lv_unit_2_0, 
        		"TimeUnit");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleBuiltinEventSpec
entryRuleBuiltinEventSpec returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBuiltinEventSpecRule()); }
	 iv_ruleBuiltinEventSpec=ruleBuiltinEventSpec 
	 { $current=$iv_ruleBuiltinEventSpec.current; } 
	 EOF 
;

// Rule BuiltinEventSpec
ruleBuiltinEventSpec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBuiltinEventSpecAccess().getEntryEventParserRuleCall_0()); 
    }
    this_EntryEvent_0=ruleEntryEvent
    { 
        $current = $this_EntryEvent_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuiltinEventSpecAccess().getExitEventParserRuleCall_1()); 
    }
    this_ExitEvent_1=ruleExitEvent
    { 
        $current = $this_ExitEvent_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuiltinEventSpecAccess().getOnCycleEventParserRuleCall_2()); 
    }
    this_OnCycleEvent_2=ruleOnCycleEvent
    { 
        $current = $this_OnCycleEvent_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuiltinEventSpecAccess().getAlwaysEventParserRuleCall_3()); 
    }
    this_AlwaysEvent_3=ruleAlwaysEvent
    { 
        $current = $this_AlwaysEvent_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuiltinEventSpecAccess().getDefaultEventParserRuleCall_4()); 
    }
    this_DefaultEvent_4=ruleDefaultEvent
    { 
        $current = $this_DefaultEvent_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleEntryEvent
entryRuleEntryEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEntryEventRule()); }
	 iv_ruleEntryEvent=ruleEntryEvent 
	 { $current=$iv_ruleEntryEvent.current; } 
	 EOF 
;

// Rule EntryEvent
ruleEntryEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getEntryEventAccess().getEntryEventAction_0(),
            $current);
    }
)	otherlv_1='entry' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEntryEventAccess().getEntryKeyword_1());
    }
)
;





// Entry rule entryRuleExitEvent
entryRuleExitEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExitEventRule()); }
	 iv_ruleExitEvent=ruleExitEvent 
	 { $current=$iv_ruleExitEvent.current; } 
	 EOF 
;

// Rule ExitEvent
ruleExitEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getExitEventAccess().getExitEventAction_0(),
            $current);
    }
)	otherlv_1='exit' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExitEventAccess().getExitKeyword_1());
    }
)
;





// Entry rule entryRuleOnCycleEvent
entryRuleOnCycleEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOnCycleEventRule()); }
	 iv_ruleOnCycleEvent=ruleOnCycleEvent 
	 { $current=$iv_ruleOnCycleEvent.current; } 
	 EOF 
;

// Rule OnCycleEvent
ruleOnCycleEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getOnCycleEventAccess().getOnCycleEventAction_0(),
            $current);
    }
)	otherlv_1='oncycle' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOnCycleEventAccess().getOncycleKeyword_1());
    }
)
;





// Entry rule entryRuleAlwaysEvent
entryRuleAlwaysEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAlwaysEventRule()); }
	 iv_ruleAlwaysEvent=ruleAlwaysEvent 
	 { $current=$iv_ruleAlwaysEvent.current; } 
	 EOF 
;

// Rule AlwaysEvent
ruleAlwaysEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAlwaysEventAccess().getAlwaysEventAction_0(),
            $current);
    }
)	otherlv_1='always' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAlwaysEventAccess().getAlwaysKeyword_1());
    }
)
;





// Entry rule entryRuleDefaultEvent
entryRuleDefaultEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefaultEventRule()); }
	 iv_ruleDefaultEvent=ruleDefaultEvent 
	 { $current=$iv_ruleDefaultEvent.current; } 
	 EOF 
;

// Rule DefaultEvent
ruleDefaultEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDefaultEventAccess().getDefaultEventAction_0(),
            $current);
    }
)(	otherlv_1='default' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDefaultEventAccess().getDefaultKeyword_1_0());
    }

    |	otherlv_2='else' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDefaultEventAccess().getElseKeyword_1_1());
    }
))
;





// Entry rule entryRuleEventRaisingExpression
entryRuleEventRaisingExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEventRaisingExpressionRule()); }
	 iv_ruleEventRaisingExpression=ruleEventRaisingExpression 
	 { $current=$iv_ruleEventRaisingExpression.current; } 
	 EOF 
;

// Rule EventRaisingExpression
ruleEventRaisingExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getEventRaisingExpressionAccess().getEventRaisingExpressionAction_0(),
            $current);
    }
)	otherlv_1='raise' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEventRaisingExpressionAccess().getRaiseKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEventRaisingExpressionAccess().getEventFeatureCallParserRuleCall_2_0()); 
	    }
		lv_event_2_0=ruleFeatureCall		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventRaisingExpressionRule());
	        }
       		set(
       			$current, 
       			"event",
        		lv_event_2_0, 
        		"FeatureCall");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getEventRaisingExpressionAccess().getColonKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEventRaisingExpressionAccess().getValueExpressionParserRuleCall_3_1_0()); 
	    }
		lv_value_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventRaisingExpressionRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;







// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall()); 
    }
    this_AssignmentExpression_0=ruleAssignmentExpression
    { 
        $current = $this_AssignmentExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleAssignmentExpression
entryRuleAssignmentExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentExpressionRule()); }
	 iv_ruleAssignmentExpression=ruleAssignmentExpression 
	 { $current=$iv_ruleAssignmentExpression.current; } 
	 EOF 
;

// Rule AssignmentExpression
ruleAssignmentExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_0()); 
    }
    this_ConditionalExpression_0=ruleConditionalExpression
    { 
        $current = $this_ConditionalExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionVarRefAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getOperatorAssignmentOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleAssignmentOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"AssignmentOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getExpressionConditionalExpressionParserRuleCall_1_2_0()); 
	    }
		lv_expression_3_0=ruleConditionalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"ConditionalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleConditionalExpression
entryRuleConditionalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionalExpressionRule()); }
	 iv_ruleConditionalExpression=ruleConditionalExpression 
	 { $current=$iv_ruleConditionalExpression.current; } 
	 EOF 
;

// Rule ConditionalExpression
ruleConditionalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getConditionalExpressionAccess().getLogicalOrExpressionParserRuleCall_0()); 
    }
    this_LogicalOrExpression_0=ruleLogicalOrExpression
    { 
        $current = $this_LogicalOrExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getConditionalExpressionAccess().getConditionalExpressionConditionAction_1_0(),
            $current);
    }
)	otherlv_2='?' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalExpressionAccess().getTrueCaseLogicalOrExpressionParserRuleCall_1_2_0()); 
	    }
		lv_trueCase_3_0=ruleLogicalOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
	        }
       		set(
       			$current, 
       			"trueCase",
        		lv_trueCase_3_0, 
        		"LogicalOrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalExpressionAccess().getFalseCaseLogicalOrExpressionParserRuleCall_1_4_0()); 
	    }
		lv_falseCase_5_0=ruleLogicalOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
	        }
       		set(
       			$current, 
       			"falseCase",
        		lv_falseCase_5_0, 
        		"LogicalOrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleLogicalOrExpression
entryRuleLogicalOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalOrExpressionRule()); }
	 iv_ruleLogicalOrExpression=ruleLogicalOrExpression 
	 { $current=$iv_ruleLogicalOrExpression.current; } 
	 EOF 
;

// Rule LogicalOrExpression
ruleLogicalOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getLogicalAndExpressionParserRuleCall_0()); 
    }
    this_LogicalAndExpression_0=ruleLogicalAndExpression
    { 
        $current = $this_LogicalAndExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getLogicalOrExpressionAccess().getLogicalOrExpressionLeftOperandAction_1_0(),
            $current);
    }
)	otherlv_2='||' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLogicalOrExpressionAccess().getVerticalLineVerticalLineKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getRightOperandLogicalAndExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleLogicalAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalOrExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"LogicalAndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleLogicalAndExpression
entryRuleLogicalAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalAndExpressionRule()); }
	 iv_ruleLogicalAndExpression=ruleLogicalAndExpression 
	 { $current=$iv_ruleLogicalAndExpression.current; } 
	 EOF 
;

// Rule LogicalAndExpression
ruleLogicalAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getLogicalNotExpressionParserRuleCall_0()); 
    }
    this_LogicalNotExpression_0=ruleLogicalNotExpression
    { 
        $current = $this_LogicalNotExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getLogicalAndExpressionAccess().getLogicalAndExpressionLeftOperandAction_1_0(),
            $current);
    }
)	otherlv_2='&&' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLogicalAndExpressionAccess().getAmpersandAmpersandKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getRightOperandLogicalNotExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleLogicalNotExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalAndExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"LogicalNotExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleLogicalNotExpression
entryRuleLogicalNotExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalNotExpressionRule()); }
	 iv_ruleLogicalNotExpression=ruleLogicalNotExpression 
	 { $current=$iv_ruleLogicalNotExpression.current; } 
	 EOF 
;

// Rule LogicalNotExpression
ruleLogicalNotExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLogicalNotExpressionAccess().getBitwiseXorExpressionParserRuleCall_0()); 
    }
    this_BitwiseXorExpression_0=ruleBitwiseXorExpression
    { 
        $current = $this_BitwiseXorExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLogicalNotExpressionAccess().getLogicalNotExpressionAction_1_0(),
            $current);
    }
)	otherlv_2='!' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLogicalNotExpressionAccess().getExclamationMarkKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalNotExpressionAccess().getOperandBitwiseXorExpressionParserRuleCall_1_2_0()); 
	    }
		lv_operand_3_0=ruleBitwiseXorExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalNotExpressionRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_3_0, 
        		"BitwiseXorExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleBitwiseXorExpression
entryRuleBitwiseXorExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBitwiseXorExpressionRule()); }
	 iv_ruleBitwiseXorExpression=ruleBitwiseXorExpression 
	 { $current=$iv_ruleBitwiseXorExpression.current; } 
	 EOF 
;

// Rule BitwiseXorExpression
ruleBitwiseXorExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBitwiseXorExpressionAccess().getBitwiseOrExpressionParserRuleCall_0()); 
    }
    this_BitwiseOrExpression_0=ruleBitwiseOrExpression
    { 
        $current = $this_BitwiseOrExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBitwiseXorExpressionAccess().getBitwiseXorExpressionLeftOperandAction_1_0(),
            $current);
    }
)	otherlv_2='^' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBitwiseXorExpressionAccess().getCircumflexAccentKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBitwiseXorExpressionAccess().getRightOperandBitwiseOrExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleBitwiseOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitwiseXorExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"BitwiseOrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBitwiseOrExpression
entryRuleBitwiseOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBitwiseOrExpressionRule()); }
	 iv_ruleBitwiseOrExpression=ruleBitwiseOrExpression 
	 { $current=$iv_ruleBitwiseOrExpression.current; } 
	 EOF 
;

// Rule BitwiseOrExpression
ruleBitwiseOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBitwiseOrExpressionAccess().getBitwiseAndExpressionParserRuleCall_0()); 
    }
    this_BitwiseAndExpression_0=ruleBitwiseAndExpression
    { 
        $current = $this_BitwiseAndExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBitwiseOrExpressionAccess().getBitwiseOrExpressionLeftOperandAction_1_0(),
            $current);
    }
)	otherlv_2='|' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBitwiseOrExpressionAccess().getVerticalLineKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBitwiseOrExpressionAccess().getRightOperandBitwiseAndExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleBitwiseAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitwiseOrExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"BitwiseAndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBitwiseAndExpression
entryRuleBitwiseAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBitwiseAndExpressionRule()); }
	 iv_ruleBitwiseAndExpression=ruleBitwiseAndExpression 
	 { $current=$iv_ruleBitwiseAndExpression.current; } 
	 EOF 
;

// Rule BitwiseAndExpression
ruleBitwiseAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBitwiseAndExpressionAccess().getLogicalRelationExpressionParserRuleCall_0()); 
    }
    this_LogicalRelationExpression_0=ruleLogicalRelationExpression
    { 
        $current = $this_LogicalRelationExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBitwiseAndExpressionAccess().getBitwiseAndExpressionLeftOperandAction_1_0(),
            $current);
    }
)	otherlv_2='&' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBitwiseAndExpressionAccess().getAmpersandKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBitwiseAndExpressionAccess().getRightOperandLogicalRelationExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleLogicalRelationExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitwiseAndExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"LogicalRelationExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleLogicalRelationExpression
entryRuleLogicalRelationExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalRelationExpressionRule()); }
	 iv_ruleLogicalRelationExpression=ruleLogicalRelationExpression 
	 { $current=$iv_ruleLogicalRelationExpression.current; } 
	 EOF 
;

// Rule LogicalRelationExpression
ruleLogicalRelationExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLogicalRelationExpressionAccess().getShiftExpressionParserRuleCall_0()); 
    }
    this_ShiftExpression_0=ruleShiftExpression
    { 
        $current = $this_ShiftExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getLogicalRelationExpressionAccess().getLogicalRelationExpressionLeftOperandAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalRelationExpressionAccess().getOperatorRelationalOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleRelationalOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalRelationExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"RelationalOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalRelationExpressionAccess().getRightOperandShiftExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleShiftExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalRelationExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"ShiftExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleShiftExpression
entryRuleShiftExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getShiftExpressionRule()); }
	 iv_ruleShiftExpression=ruleShiftExpression 
	 { $current=$iv_ruleShiftExpression.current; } 
	 EOF 
;

// Rule ShiftExpression
ruleShiftExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getShiftExpressionAccess().getNumericalAddSubtractExpressionParserRuleCall_0()); 
    }
    this_NumericalAddSubtractExpression_0=ruleNumericalAddSubtractExpression
    { 
        $current = $this_NumericalAddSubtractExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getShiftExpressionAccess().getShiftExpressionLeftOperandAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getShiftExpressionAccess().getOperatorShiftOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleShiftOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShiftExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"ShiftOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getShiftExpressionAccess().getRightOperandNumericalAddSubtractExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleNumericalAddSubtractExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShiftExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"NumericalAddSubtractExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleNumericalAddSubtractExpression
entryRuleNumericalAddSubtractExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumericalAddSubtractExpressionRule()); }
	 iv_ruleNumericalAddSubtractExpression=ruleNumericalAddSubtractExpression 
	 { $current=$iv_ruleNumericalAddSubtractExpression.current; } 
	 EOF 
;

// Rule NumericalAddSubtractExpression
ruleNumericalAddSubtractExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNumericalAddSubtractExpressionAccess().getNumericalMultiplyDivideExpressionParserRuleCall_0()); 
    }
    this_NumericalMultiplyDivideExpression_0=ruleNumericalMultiplyDivideExpression
    { 
        $current = $this_NumericalMultiplyDivideExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getNumericalAddSubtractExpressionAccess().getNumericalAddSubtractExpressionLeftOperandAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNumericalAddSubtractExpressionAccess().getOperatorAdditiveOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleAdditiveOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumericalAddSubtractExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"AdditiveOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNumericalAddSubtractExpressionAccess().getRightOperandNumericalMultiplyDivideExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleNumericalMultiplyDivideExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumericalAddSubtractExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"NumericalMultiplyDivideExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleNumericalMultiplyDivideExpression
entryRuleNumericalMultiplyDivideExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumericalMultiplyDivideExpressionRule()); }
	 iv_ruleNumericalMultiplyDivideExpression=ruleNumericalMultiplyDivideExpression 
	 { $current=$iv_ruleNumericalMultiplyDivideExpression.current; } 
	 EOF 
;

// Rule NumericalMultiplyDivideExpression
ruleNumericalMultiplyDivideExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getNumericalUnaryExpressionParserRuleCall_0()); 
    }
    this_NumericalUnaryExpression_0=ruleNumericalUnaryExpression
    { 
        $current = $this_NumericalUnaryExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getNumericalMultiplyDivideExpressionAccess().getNumericalMultiplyDivideExpressionLeftOperandAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getOperatorMultiplicativeOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleMultiplicativeOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumericalMultiplyDivideExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"MultiplicativeOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getRightOperandNumericalUnaryExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleNumericalUnaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumericalMultiplyDivideExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"NumericalUnaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleNumericalUnaryExpression
entryRuleNumericalUnaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumericalUnaryExpressionRule()); }
	 iv_ruleNumericalUnaryExpression=ruleNumericalUnaryExpression 
	 { $current=$iv_ruleNumericalUnaryExpression.current; } 
	 EOF 
;

// Rule NumericalUnaryExpression
ruleNumericalUnaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNumericalUnaryExpressionAccess().getPrimaryExpressionParserRuleCall_0()); 
    }
    this_PrimaryExpression_0=rulePrimaryExpression
    { 
        $current = $this_PrimaryExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNumericalUnaryExpressionAccess().getNumericalUnaryExpressionAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNumericalUnaryExpressionAccess().getOperatorUnaryOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleUnaryOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumericalUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"UnaryOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNumericalUnaryExpressionAccess().getOperandPrimaryExpressionParserRuleCall_1_2_0()); 
	    }
		lv_operand_3_0=rulePrimaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumericalUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_3_0, 
        		"PrimaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current; } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getPrimitiveValueExpressionParserRuleCall_0()); 
    }
    this_PrimitiveValueExpression_0=rulePrimitiveValueExpression
    { 
        $current = $this_PrimitiveValueExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getFeatureCallParserRuleCall_1()); 
    }
    this_FeatureCall_1=ruleFeatureCall
    { 
        $current = $this_FeatureCall_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getActiveStateReferenceExpressionParserRuleCall_2()); 
    }
    this_ActiveStateReferenceExpression_2=ruleActiveStateReferenceExpression
    { 
        $current = $this_ActiveStateReferenceExpression_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getEventValueReferenceExpressionParserRuleCall_3()); 
    }
    this_EventValueReferenceExpression_3=ruleEventValueReferenceExpression
    { 
        $current = $this_EventValueReferenceExpression_3.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_4_0());
    }

    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getExpressionParserRuleCall_4_1()); 
    }
    this_Expression_5=ruleExpression
    { 
        $current = $this_Expression_5.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_4_2());
    }
))
;





// Entry rule entryRulePrimitiveValueExpression
entryRulePrimitiveValueExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimitiveValueExpressionRule()); }
	 iv_rulePrimitiveValueExpression=rulePrimitiveValueExpression 
	 { $current=$iv_rulePrimitiveValueExpression.current; } 
	 EOF 
;

// Rule PrimitiveValueExpression
rulePrimitiveValueExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimitiveValueExpressionAccess().getPrimitiveValueExpressionAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimitiveValueExpressionAccess().getValueLiteralParserRuleCall_1_0()); 
	    }
		lv_value_1_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimitiveValueExpressionRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFeatureCall
entryRuleFeatureCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFeatureCallRule()); }
	 iv_ruleFeatureCall=ruleFeatureCall 
	 { $current=$iv_ruleFeatureCall.current; } 
	 EOF 
;

// Rule FeatureCall
ruleFeatureCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFeatureCallAccess().getTypedElementReferenceExpressionParserRuleCall_0()); 
    }
    this_TypedElementReferenceExpression_0=ruleTypedElementReferenceExpression
    { 
        $current = $this_TypedElementReferenceExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getFeatureCallAccess().getFeatureCallOwnerAction_1_0(),
            $current);
    }
)	otherlv_2='.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFeatureCallAccess().getFullStopKeyword_1_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFeatureCallRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getFeatureCallAccess().getFeatureFeatureCrossReference_1_2_0()); 
	}

)
)(((
(
	'(' 
 

)
)=>
(
		lv_operationCall_4_0=	'(' 
    {
        newLeafNode(lv_operationCall_4_0, grammarAccess.getFeatureCallAccess().getOperationCallLeftParenthesisKeyword_1_3_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFeatureCallRule());
	        }
       		setWithLastConsumed($current, "operationCall", true, "(");
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getFeatureCallAccess().getArgsExpressionParserRuleCall_1_3_1_0_0()); 
	    }
		lv_args_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureCallRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFeatureCallAccess().getCommaKeyword_1_3_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFeatureCallAccess().getArgsExpressionParserRuleCall_1_3_1_1_1_0()); 
	    }
		lv_args_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureCallRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_7_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getFeatureCallAccess().getRightParenthesisKeyword_1_3_2());
    }
)?)*)
;





// Entry rule entryRuleTypedElementReferenceExpression
entryRuleTypedElementReferenceExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypedElementReferenceExpressionRule()); }
	 iv_ruleTypedElementReferenceExpression=ruleTypedElementReferenceExpression 
	 { $current=$iv_ruleTypedElementReferenceExpression.current; } 
	 EOF 
;

// Rule TypedElementReferenceExpression
ruleTypedElementReferenceExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypedElementReferenceExpressionAccess().getTypedElementReferenceExpressionAction_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypedElementReferenceExpressionRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getTypedElementReferenceExpressionAccess().getReferenceNamedElementCrossReference_1_0()); 
	}

)
)(((
(
	'(' 
 

)
)=>
(
		lv_operationCall_2_0=	'(' 
    {
        newLeafNode(lv_operationCall_2_0, grammarAccess.getTypedElementReferenceExpressionAccess().getOperationCallLeftParenthesisKeyword_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypedElementReferenceExpressionRule());
	        }
       		setWithLastConsumed($current, "operationCall", true, "(");
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getTypedElementReferenceExpressionAccess().getArgsExpressionParserRuleCall_2_1_0_0()); 
	    }
		lv_args_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypedElementReferenceExpressionRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTypedElementReferenceExpressionAccess().getCommaKeyword_2_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypedElementReferenceExpressionAccess().getArgsExpressionParserRuleCall_2_1_1_1_0()); 
	    }
		lv_args_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypedElementReferenceExpressionRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTypedElementReferenceExpressionAccess().getRightParenthesisKeyword_2_2());
    }
)?)
;





// Entry rule entryRuleEventValueReferenceExpression
entryRuleEventValueReferenceExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEventValueReferenceExpressionRule()); }
	 iv_ruleEventValueReferenceExpression=ruleEventValueReferenceExpression 
	 { $current=$iv_ruleEventValueReferenceExpression.current; } 
	 EOF 
;

// Rule EventValueReferenceExpression
ruleEventValueReferenceExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getEventValueReferenceExpressionAccess().getEventValueReferenceExpressionAction_0(),
            $current);
    }
)	otherlv_1='valueof' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEventValueReferenceExpressionAccess().getValueofKeyword_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEventValueReferenceExpressionAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEventValueReferenceExpressionAccess().getValueFeatureCallParserRuleCall_3_0()); 
	    }
		lv_value_3_0=ruleFeatureCall		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventValueReferenceExpressionRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"FeatureCall");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getEventValueReferenceExpressionAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleActiveStateReferenceExpression
entryRuleActiveStateReferenceExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActiveStateReferenceExpressionRule()); }
	 iv_ruleActiveStateReferenceExpression=ruleActiveStateReferenceExpression 
	 { $current=$iv_ruleActiveStateReferenceExpression.current; } 
	 EOF 
;

// Rule ActiveStateReferenceExpression
ruleActiveStateReferenceExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getActiveStateReferenceExpressionAccess().getActiveStateReferenceExpressionAction_0(),
            $current);
    }
)	otherlv_1='active' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getActiveStateReferenceExpressionAccess().getActiveKeyword_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getActiveStateReferenceExpressionAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getActiveStateReferenceExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getActiveStateReferenceExpressionAccess().getValueStateCrossReference_3_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getActiveStateReferenceExpressionAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current; } 
	 EOF 
;

// Rule Literal
ruleLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getBoolLiteralParserRuleCall_0()); 
    }
    this_BoolLiteral_0=ruleBoolLiteral
    { 
        $current = $this_BoolLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getIntLiteralParserRuleCall_1()); 
    }
    this_IntLiteral_1=ruleIntLiteral
    { 
        $current = $this_IntLiteral_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getHexLiteralParserRuleCall_2()); 
    }
    this_HexLiteral_2=ruleHexLiteral
    { 
        $current = $this_HexLiteral_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getRealLiteralParserRuleCall_3()); 
    }
    this_RealLiteral_3=ruleRealLiteral
    { 
        $current = $this_RealLiteral_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_4()); 
    }
    this_StringLiteral_4=ruleStringLiteral
    { 
        $current = $this_StringLiteral_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBoolLiteral
entryRuleBoolLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBoolLiteralRule()); }
	 iv_ruleBoolLiteral=ruleBoolLiteral 
	 { $current=$iv_ruleBoolLiteral.current; } 
	 EOF 
;

// Rule BoolLiteral
ruleBoolLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBoolLiteralAccess().getBoolLiteralAction_0(),
            $current);
    }
)(
(
		lv_value_1_0=RULE_BOOL
		{
			newLeafNode(lv_value_1_0, grammarAccess.getBoolLiteralAccess().getValueBOOLTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBoolLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"BOOL");
	    }

)
))
;





// Entry rule entryRuleIntLiteral
entryRuleIntLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntLiteralRule()); }
	 iv_ruleIntLiteral=ruleIntLiteral 
	 { $current=$iv_ruleIntLiteral.current; } 
	 EOF 
;

// Rule IntLiteral
ruleIntLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getIntLiteralAccess().getIntLiteralAction_0(),
            $current);
    }
)(
(
		lv_value_1_0=RULE_INT
		{
			newLeafNode(lv_value_1_0, grammarAccess.getIntLiteralAccess().getValueINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"INT");
	    }

)
))
;





// Entry rule entryRuleRealLiteral
entryRuleRealLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRealLiteralRule()); }
	 iv_ruleRealLiteral=ruleRealLiteral 
	 { $current=$iv_ruleRealLiteral.current; } 
	 EOF 
;

// Rule RealLiteral
ruleRealLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getRealLiteralAccess().getRealLiteralAction_0(),
            $current);
    }
)(
(
		lv_value_1_0=RULE_FLOAT
		{
			newLeafNode(lv_value_1_0, grammarAccess.getRealLiteralAccess().getValueFLOATTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRealLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"FLOAT");
	    }

)
))
;





// Entry rule entryRuleHexLiteral
entryRuleHexLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHexLiteralRule()); }
	 iv_ruleHexLiteral=ruleHexLiteral 
	 { $current=$iv_ruleHexLiteral.current; } 
	 EOF 
;

// Rule HexLiteral
ruleHexLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getHexLiteralAccess().getHexLiteralAction_0(),
            $current);
    }
)(
(
		lv_value_1_0=RULE_HEX
		{
			newLeafNode(lv_value_1_0, grammarAccess.getHexLiteralAccess().getValueHEXTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHexLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"HEX");
	    }

)
))
;





// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); }
	 iv_ruleStringLiteral=ruleStringLiteral 
	 { $current=$iv_ruleStringLiteral.current; } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStringLiteralAccess().getStringLiteralAction_0(),
            $current);
    }
)(
(
		lv_value_1_0=RULE_STRING
		{
			newLeafNode(lv_value_1_0, grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"STRING");
	    }

)
))
;





// Rule Direction
ruleDirection returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='local' 
	{
        $current = grammarAccess.getDirectionAccess().getLOCALEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getDirectionAccess().getLOCALEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='in' 
	{
        $current = grammarAccess.getDirectionAccess().getINEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getDirectionAccess().getINEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='out' 
	{
        $current = grammarAccess.getDirectionAccess().getOUTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getDirectionAccess().getOUTEnumLiteralDeclaration_2()); 
    }
));



// Rule TimeEventType
ruleTimeEventType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='after' 
	{
        $current = grammarAccess.getTimeEventTypeAccess().getAfterEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getTimeEventTypeAccess().getAfterEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='every' 
	{
        $current = grammarAccess.getTimeEventTypeAccess().getEveryEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getTimeEventTypeAccess().getEveryEnumLiteralDeclaration_1()); 
    }
));



// Rule AssignmentOperator
ruleAssignmentOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getAssignEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAssignmentOperatorAccess().getAssignEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='*=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getMultAssignEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getAssignmentOperatorAccess().getMultAssignEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='/=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getDivAssignEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getAssignmentOperatorAccess().getDivAssignEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='%=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getModAssignEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getAssignmentOperatorAccess().getModAssignEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='+=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getAddAssignEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getAssignmentOperatorAccess().getAddAssignEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='-=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getSubAssignEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getAssignmentOperatorAccess().getSubAssignEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='<<=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getLeftShiftAssignEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getAssignmentOperatorAccess().getLeftShiftAssignEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='>>=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getRightShiftAssignEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getAssignmentOperatorAccess().getRightShiftAssignEnumLiteralDeclaration_7()); 
    }
)
    |(	enumLiteral_8='&=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getAndAssignEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getAssignmentOperatorAccess().getAndAssignEnumLiteralDeclaration_8()); 
    }
)
    |(	enumLiteral_9='^=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getXorAssignEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_9, grammarAccess.getAssignmentOperatorAccess().getXorAssignEnumLiteralDeclaration_9()); 
    }
)
    |(	enumLiteral_10='|=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getOrAssignEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_10, grammarAccess.getAssignmentOperatorAccess().getOrAssignEnumLiteralDeclaration_10()); 
    }
));



// Rule ShiftOperator
ruleShiftOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='<<' 
	{
        $current = grammarAccess.getShiftOperatorAccess().getLeftEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getShiftOperatorAccess().getLeftEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='>>' 
	{
        $current = grammarAccess.getShiftOperatorAccess().getRightEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getShiftOperatorAccess().getRightEnumLiteralDeclaration_1()); 
    }
));



// Rule AdditiveOperator
ruleAdditiveOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='+' 
	{
        $current = grammarAccess.getAdditiveOperatorAccess().getPlusEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAdditiveOperatorAccess().getPlusEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='-' 
	{
        $current = grammarAccess.getAdditiveOperatorAccess().getMinusEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getAdditiveOperatorAccess().getMinusEnumLiteralDeclaration_1()); 
    }
));



// Rule MultiplicativeOperator
ruleMultiplicativeOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='*' 
	{
        $current = grammarAccess.getMultiplicativeOperatorAccess().getMulEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getMultiplicativeOperatorAccess().getMulEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='/' 
	{
        $current = grammarAccess.getMultiplicativeOperatorAccess().getDivEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getMultiplicativeOperatorAccess().getDivEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='%' 
	{
        $current = grammarAccess.getMultiplicativeOperatorAccess().getModEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getMultiplicativeOperatorAccess().getModEnumLiteralDeclaration_2()); 
    }
));



// Rule UnaryOperator
ruleUnaryOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='+' 
	{
        $current = grammarAccess.getUnaryOperatorAccess().getPositiveEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getUnaryOperatorAccess().getPositiveEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='-' 
	{
        $current = grammarAccess.getUnaryOperatorAccess().getNegativeEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getUnaryOperatorAccess().getNegativeEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='~' 
	{
        $current = grammarAccess.getUnaryOperatorAccess().getComplementEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getUnaryOperatorAccess().getComplementEnumLiteralDeclaration_2()); 
    }
));



// Rule RelationalOperator
ruleRelationalOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='<' 
	{
        $current = grammarAccess.getRelationalOperatorAccess().getSmallerEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getRelationalOperatorAccess().getSmallerEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='<=' 
	{
        $current = grammarAccess.getRelationalOperatorAccess().getSmallerEqualEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getRelationalOperatorAccess().getSmallerEqualEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='>' 
	{
        $current = grammarAccess.getRelationalOperatorAccess().getGreaterEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getRelationalOperatorAccess().getGreaterEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='>=' 
	{
        $current = grammarAccess.getRelationalOperatorAccess().getGreaterEqualEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getRelationalOperatorAccess().getGreaterEqualEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='==' 
	{
        $current = grammarAccess.getRelationalOperatorAccess().getEqualsEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getRelationalOperatorAccess().getEqualsEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='!=' 
	{
        $current = grammarAccess.getRelationalOperatorAccess().getNotEqualsEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getRelationalOperatorAccess().getNotEqualsEnumLiteralDeclaration_5()); 
    }
));



// Rule TimeUnit
ruleTimeUnit returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='s' 
	{
        $current = grammarAccess.getTimeUnitAccess().getSecondEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getTimeUnitAccess().getSecondEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='ms' 
	{
        $current = grammarAccess.getTimeUnitAccess().getMillisecondEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getTimeUnitAccess().getMillisecondEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='us' 
	{
        $current = grammarAccess.getTimeUnitAccess().getMicrosecondEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getTimeUnitAccess().getMicrosecondEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='ns' 
	{
        $current = grammarAccess.getTimeUnitAccess().getNanosecondEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getTimeUnitAccess().getNanosecondEnumLiteralDeclaration_3()); 
    }
));



RULE_BOOL : ('true'|'false'|'yes'|'no');

RULE_HEX : '0' ('x'|'X') ('0'..'9'|'a'..'f'|'A'..'F')+;

RULE_FLOAT : RULE_INT '.' RULE_INT ('e' ('-'|'+') RULE_INT)? ('f'|'F'|'d'|'D')?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


