«REM»

Templates for the main statechart cpp file.

@auther joern seger

«ENDREM»

«IMPORT sexec»
«IMPORT stext»
«IMPORT sgraph»

«EXTENSION org::yakindu::sct::generator::cpp::templates::Expression»
«EXTENSION org::yakindu::sct::generator::cpp::templates::Naming»


«DEFINE file FOR ExecutionFlow»

«FILE 'main_ev.cpp'»
#include <cstdio>
#include <iostream>
#include "«StNameEv()».h"
#include "«EvName()».h"
#include "DummyTimer.h"

int main()
{
	Timer* timer;

	char* stateName[6] = {"State1", "State2", "State3", "State4", "State5", "State6"};
	«StNameEv()» machine(timer = new DummyTimer);

	// initialize the initial states 
	machine.init();
	
	/* Example code 
	// create one event and enqueue it 
	Event e = createEvent<Event1>();
	machine.queueEvent(e);

	// run the cycle 
	machine.runCycle();

	// check the state 
	std::cout << stateName[machine.getState(0)] << "\n";
	assert( strcmp(stateName[machine.getState(0)], "State3") == 0);

	e = createEvent<Event2>();
	machine.queueEvent(e);

	machine.runCycle();

	std::cout << stateName[machine.getState(0)] << "\n";
	assert( strcmp(stateName[machine.getState(0)], "State1") == 0);

	// does event queuing work?
	e = createEvent<Event1>();
	machine.queueEvent(e);
	e = createEvent<Event3>();
	machine.queueEvent(e);

	machine.runCycle();

	std::cout << stateName[machine.getState(0)] << "\n";
	assert( strcmp(stateName[machine.getState(0)], "State3") == 0);

	// run second cycle
	machine.runCycle();

	std::cout << stateName[machine.getState(0)] << "\n";
	assert( strcmp(stateName[machine.getState(0)], "State4") == 0);

	e = createEvent<Event4>();
	machine.queueEvent(e);

	machine.runCycle();

	std::cout << stateName[machine.getState(0)] << "\n";
	assert( strcmp(stateName[machine.getState(0)], "State3") == 0);

	e = createEvent<Event3>();
	machine.queueEvent(e);

	machine.runCycle();

	std::cout << stateName[machine.getState(0)] << "\n";
	assert( strcmp(stateName[machine.getState(0)], "State4") == 0);

	e = createEvent<Event5>();
	machine.queueEvent(e);

	machine.runCycle();

	std::cout << stateName[machine.getState(0)] << "\n";
	assert( strcmp(stateName[machine.getState(0)], "State1") == 0);

	*/
	
	delete timer;
	return(0);
	
}

«ENDFILE»

«ENDDEFINE»