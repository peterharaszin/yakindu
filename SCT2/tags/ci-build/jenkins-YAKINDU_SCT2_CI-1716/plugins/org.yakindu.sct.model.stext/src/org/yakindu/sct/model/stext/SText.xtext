grammar org.yakindu.sct.model.stext.SText with org.eclipse.xtext.common.Terminals

generate stext "http://www.yakindu.org/sct/statechart/SText"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

import "http://www.yakindu.org/sct/sgraph/2.0.0" as sgraph
import "http://www.yakindu.org/base/types/2.0.0" as types
import "http://www.yakindu.org/base/base/2.0.0" as base

/* ---- root rules ----
These root rules are not relevant for the grammar integration in the statechart. They just integrate the different start rules consistently 
into a single grammar. 
*/
Root:
	(roots+=DefRoot)*;

DefRoot:
	StatechartRoot | StateRoot | TransitionRoot;

StatechartRoot:
	'@@statechart@@' def=StatechartSpecification;

StateRoot:
	'@@state@@' def=StateSpecification;

TransitionRoot:
	'@@transition@@' def=TransitionSpecification;

	/* ---- start rules ----
Define the starting points used by the statechart integration. These rules hook in the concrete rules of the specific grammar.
*/
ScopedElement returns sgraph::ScopedElement: 
	StatechartSpecification
;


StatechartSpecification:
	{StatechartSpecification}
	('namespace' namespace=FQN)?
	(scopes+=StatechartScope)*;

StateSpecification:
	scope=StateScope;

TransitionSpecification:
	reaction=TransitionReaction;

	/* ---- scope rules ----
Defines different kinds of scopes that contain element definitions. Scopes are used for element definitions in statechart, regions, and state 
*/
Scope returns sgraph::Scope:
	(StateScope |StatechartScope);


	// a SimpleScope is used for states and regions
StateScope returns sgraph::Scope:
	{SimpleScope} (declarations+=(LocalReaction /* | Entrypoint | Exitpoint */ ))*;

	// defines the poosible scopes for statecharts
StatechartScope:
	InterfaceScope | InternalScope;

NamedInterfaceScope returns base::NamedElement:
	InterfaceScope
;

InterfaceScope:
	{InterfaceScope} 'interface' (name=XID)? ':' (declarations+=(
		EventDeclarartion 
		| VariableDeclaration 
		| OperationDeclaration 
//		| Entrypoint 
//		| Exitpoint
	))*;

InternalScope :
	{InternalScope} 'internal' ':' (declarations+=(EventDeclarartion | VariableDeclaration | OperationDeclaration | LocalReaction))*;

	/* ---- declarations ----
a definition is a top level element of a definition scope. */
Declaration returns sgraph::Declaration:
		EventDeclarartion 
		| VariableDeclaration 
		| OperationDeclaration 
		| LocalReaction 
//		| Entrypoint 
//		| Exitpoint
;

/* ---- event definition ---- */
EventDeclarartion returns sgraph::Event: EventDefinition;
EventFeature returns types::Event : EventDefinition;
EventDefinition:
	 (direction=Direction)? 'event' name=XID (':' type=[types::Type|FQN])?;// (derivation=EventDerivation)?;

//EventDerivation:
//	 (':' value=Expression)?;

enum Direction:
	LOCAL='local' | IN='in' | OUT='out';

/* ---- variable definition ---- */
VariableDeclaration returns sgraph::Variable:VariableDefinition;
VariableFeature returns types::Property: VariableDefinition ;

VariableDefinition:
	{VariableDefinition} 'var' ((readonly?='readonly')? & (external?='external')?) name=XID ':' type=[types::Type|FQN] ('='
	initialValue=Expression)?;

/* ---- operation definition ---- */
OperationDeclaration returns sgraph::Declaration: OperationDefinition;
OperationFeature returns types::Operation: OperationDefinition;
OperationDefinition:
	{OperationDefinition} 'operation' name=XID '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')' (':' type=[types::Type|FQN])?;

Parameter returns types::Parameter:
	name=XID ':' type=[types::Type|FQN]
;


/* ---- entrypoint definition ---- */
//Entrypoint returns sgraph::Declaration:
//	{Entrypoint} 'entrypoint' name=XID;

/* ---- exitpoint definition ---- */
//Exitpoint returns sgraph::Declaration:
//	{Exitpoint} 'exitpoint' name=XID;

/* ---- Datatype rules ---- */
XID:
	ID 
	| 'namespace' 
	| 'interface'
	| 'internal'
	| 'event' 
	| 'local'
	| 'in'
	| 'out'
	| 'var' 
	| 'readonly'
	| 'external'
	| 'operation' 
	| 'default' 
	| 'else'
	| 'entry'
	| 'exit'
	| 'always' 
	| 'oncycle'
	| 'raise'
	| 'valueof' 
	| 'active' 
;

FQN:
	XID ('.' XID)*;

	/* ---- reaction rules ----
Define the structure of reactions that are central for describing the statecharts behavior. 
*/
Reaction returns sgraph::Reaction:
	LocalReaction | TransitionReaction;

LocalReaction:
	(trigger=ReactionTrigger) =>('/' effect=ReactionEffect);

TransitionReaction:
	{TransitionReaction} (trigger=StextTrigger)? ('/' effect=ReactionEffect)?  ('#' (properties+=TransitionProperty)*)?;


StextTrigger returns sgraph::Trigger : ReactionTrigger | DefaultTrigger;

ReactionTrigger returns sgraph::Trigger:
	{ReactionTrigger} ((triggers+=EventSpec ("," triggers+=EventSpec)* (=> '[' guardExpression=Expression ']')?)
	| ('[' guardExpression=Expression ']'));

DefaultTrigger returns sgraph::Trigger:
	{DefaultTrigger} ('default' | 'else')
;


ReactionEffect returns sgraph::Effect:
	{ReactionEffect} actions+=(Expression | EventRaisingExpression) (=> ';' actions+=(Expression|EventRaisingExpression) )* ; 


TransitionProperty returns sgraph::ReactionProperty : 
	EntryPointSpec | ExitPointSpec
;


EntryPointSpec:
	'>' entrypoint=ID;

ExitPointSpec:
	exitpoint=ID '>';

EventSpec:
	RegularEventSpec | TimeEventSpec | BuiltinEventSpec;

RegularEventSpec:
	event=FeatureCall;

	// TODO: redefine after trigger - we need to use it with clocks
TimeEventSpec:
	type=TimeEventType value=ConditionalExpression unit=TimeUnit;

enum TimeEventType:
	after | every;

BuiltinEventSpec:
	EntryEvent | ExitEvent |  AlwaysEvent; 

EntryEvent:
	{EntryEvent} 'entry';

ExitEvent:
	{ExitEvent} 'exit';

	
AlwaysEvent:
	{AlwaysEvent} ('always' | 'oncycle');


//****************
// Expression Grammar
//****************

EventRaisingExpression returns Expression:
	{EventRaisingExpression} 'raise' event=FeatureCall  (':' value=Expression)?
;	

StatementExpression returns sgraph::Statement:
	Expression
;
Expression:
	 AssignmentExpression
;

AssignmentExpression returns Expression:
	ConditionalExpression ({AssignmentExpression.varRef=current} operator=AssignmentOperator expression=ConditionalExpression)*
;
 
ConditionalExpression returns Expression:
	LogicalOrExpression ({ConditionalExpression.condition=current} '?' trueCase=LogicalOrExpression ':'
	falseCase=LogicalOrExpression)?;

LogicalOrExpression returns Expression:
	LogicalAndExpression ({LogicalOrExpression.leftOperand=current} '||'
	rightOperand=LogicalAndExpression)*;

LogicalAndExpression returns Expression:
	LogicalNotExpression ({LogicalAndExpression.leftOperand=current}
	'&&' rightOperand=LogicalNotExpression)*;

LogicalNotExpression returns Expression:
	BitwiseXorExpression | {LogicalNotExpression} '!'
	operand=BitwiseXorExpression;

BitwiseXorExpression returns Expression:
	BitwiseOrExpression ({BitwiseXorExpression.leftOperand=current} '^' rightOperand=BitwiseOrExpression)*;

BitwiseOrExpression returns Expression:
	BitwiseAndExpression ({BitwiseOrExpression.leftOperand=current} '|' rightOperand=BitwiseAndExpression)*;

BitwiseAndExpression returns Expression:
	LogicalRelationExpression ({BitwiseAndExpression.leftOperand=current} '&' rightOperand=LogicalRelationExpression)*;

LogicalRelationExpression returns Expression:
	ShiftExpression
	({LogicalRelationExpression.leftOperand=current} operator=RelationalOperator
	rightOperand=ShiftExpression)*;

ShiftExpression returns Expression:
	NumericalAddSubtractExpression ({ShiftExpression.leftOperand=current} operator=ShiftOperator
	rightOperand=NumericalAddSubtractExpression)*;

NumericalAddSubtractExpression returns Expression:
	NumericalMultiplyDivideExpression
	({NumericalAddSubtractExpression.leftOperand=current}
	operator=AdditiveOperator
	rightOperand=NumericalMultiplyDivideExpression)*;

NumericalMultiplyDivideExpression returns Expression:
	NumericalUnaryExpression
	({NumericalMultiplyDivideExpression.leftOperand=current}
	operator=MultiplicativeOperator
	rightOperand=NumericalUnaryExpression)*;

NumericalUnaryExpression returns Expression:
	PrimaryExpression | {NumericalUnaryExpression}
	operator=UnaryOperator operand=PrimaryExpression;


PrimaryExpression returns Expression:
	PrimitiveValueExpression 
	| FeatureCall 
	| ActiveStateReferenceExpression 
	| EventValueReferenceExpression  
	| ParenthesizedExpression
//	| '(' Expression ')'
; 

PrimitiveValueExpression returns Expression:
	{PrimitiveValueExpression} value=Literal;

FeatureCall returns Expression:
	ElementReferenceExpression ({FeatureCall.owner=current} '.' feature=[ecore::EObject]
		(	=>operationCall?='('
				(args+=Expression (',' args+=Expression)*)?
			')')?
	 )*
;

ElementReferenceExpression returns Expression:
	{ElementReferenceExpression} reference=[ecore::EObject|ID] 
		(	=>operationCall?='(' 
				(args+=Expression (',' args+=Expression)*)?
			')')?
;

EventValueReferenceExpression returns Expression:
	{EventValueReferenceExpression} 'valueof'  '(' value=FeatureCall ')';

ActiveStateReferenceExpression returns Expression:
	{ActiveStateReferenceExpression} 'active' '(' value=[sgraph::State|FQN] ')';
	

ParenthesizedExpression returns Expression: 
	{ParenthesizedExpression} '(' expression=Expression ')'
;

Literal:
	BoolLiteral | IntLiteral | HexLiteral | RealLiteral | StringLiteral;

BoolLiteral:
	{BoolLiteral} value=BOOL;

IntLiteral:
	{IntLiteral} value=INT;

RealLiteral:
	{RealLiteral} value=FLOAT;

HexLiteral:
	{HexLiteral} value=HEX;

StringLiteral:
	{StringLiteral} value=STRING
;	

enum AssignmentOperator:
	assign='='
	| multAssign='*='
	| divAssign='/='
	| modAssign='%='
	| addAssign='+='
	| subAssign='-='
	| leftShiftAssign='<<='
	| rightShiftAssign='>>='
	| andAssign='&='
	| xorAssign='^='
	| orAssign='|=';
	
enum ShiftOperator:
	left='<<'
	| right='>>';

enum AdditiveOperator:
	plus='+' | minus='-';

enum MultiplicativeOperator:
	mul='*' | div='/' | mod='%';

enum UnaryOperator:
	positive='+' | negative='-' | complement='~';

enum RelationalOperator:
	smaller='<' | smallerEqual='<=' | greater='>' | greaterEqual='>=' |
	equals='==' | notEquals='!=';

enum TimeUnit:
	second='s'
	| millisecond='ms'
	| microsecond = 'us'
	| nanosecond='ns';

terminal BOOL returns ecore::EBoolean:
	'true' | 'false' | 'yes' | 'no';

terminal HEX returns ecore::EInt:
	('0') ('x' | 'X') ('0'..'9' | 'a'..'f' | 'A'..'F')+;

terminal FLOAT returns ecore::EFloat:
	(INT '.' INT) ('e' ('-' | '+') INT)? ('f' | 'F' | 'd' | 'D')?;
	


