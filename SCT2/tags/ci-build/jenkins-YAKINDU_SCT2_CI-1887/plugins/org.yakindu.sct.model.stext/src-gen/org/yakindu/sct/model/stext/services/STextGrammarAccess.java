/*
* generated by Xtext
*/
package org.yakindu.sct.model.stext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class STextGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class RootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Root");
		private final Assignment cRootsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRootsDefRootParserRuleCall_0 = (RuleCall)cRootsAssignment.eContents().get(0);
		
		/// * ---- root rules ----
		//These root rules are not relevant for the grammar integration in the statechart. They just integrate the different start rules consistently 
		//into a single grammar. 
		// * /
		//
		//Root:
		//
		//	roots+=DefRoot*;
		public ParserRule getRule() { return rule; }

		//roots+=DefRoot*
		public Assignment getRootsAssignment() { return cRootsAssignment; }

		//DefRoot
		public RuleCall getRootsDefRootParserRuleCall_0() { return cRootsDefRootParserRuleCall_0; }
	}

	public class DefRootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefRoot");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStatechartRootParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStateRootParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTransitionRootParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//DefRoot:
		//
		//	StatechartRoot | StateRoot | TransitionRoot;
		public ParserRule getRule() { return rule; }

		//StatechartRoot | StateRoot | TransitionRoot
		public Alternatives getAlternatives() { return cAlternatives; }

		//StatechartRoot
		public RuleCall getStatechartRootParserRuleCall_0() { return cStatechartRootParserRuleCall_0; }

		//StateRoot
		public RuleCall getStateRootParserRuleCall_1() { return cStateRootParserRuleCall_1; }

		//TransitionRoot
		public RuleCall getTransitionRootParserRuleCall_2() { return cTransitionRootParserRuleCall_2; }
	}

	public class StatechartRootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StatechartRoot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStatechartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefStatechartSpecificationParserRuleCall_1_0 = (RuleCall)cDefAssignment_1.eContents().get(0);
		
		//StatechartRoot:
		//
		//	"@@statechart@@" def=StatechartSpecification;
		public ParserRule getRule() { return rule; }

		//"@@statechart@@" def=StatechartSpecification
		public Group getGroup() { return cGroup; }

		//"@@statechart@@"
		public Keyword getStatechartKeyword_0() { return cStatechartKeyword_0; }

		//def=StatechartSpecification
		public Assignment getDefAssignment_1() { return cDefAssignment_1; }

		//StatechartSpecification
		public RuleCall getDefStatechartSpecificationParserRuleCall_1_0() { return cDefStatechartSpecificationParserRuleCall_1_0; }
	}

	public class StateRootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateRoot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefStateSpecificationParserRuleCall_1_0 = (RuleCall)cDefAssignment_1.eContents().get(0);
		
		//StateRoot:
		//
		//	"@@state@@" def=StateSpecification;
		public ParserRule getRule() { return rule; }

		//"@@state@@" def=StateSpecification
		public Group getGroup() { return cGroup; }

		//"@@state@@"
		public Keyword getStateKeyword_0() { return cStateKeyword_0; }

		//def=StateSpecification
		public Assignment getDefAssignment_1() { return cDefAssignment_1; }

		//StateSpecification
		public RuleCall getDefStateSpecificationParserRuleCall_1_0() { return cDefStateSpecificationParserRuleCall_1_0; }
	}

	public class TransitionRootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransitionRoot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefTransitionSpecificationParserRuleCall_1_0 = (RuleCall)cDefAssignment_1.eContents().get(0);
		
		//TransitionRoot:
		//
		//	"@@transition@@" def=TransitionSpecification;
		public ParserRule getRule() { return rule; }

		//"@@transition@@" def=TransitionSpecification
		public Group getGroup() { return cGroup; }

		//"@@transition@@"
		public Keyword getTransitionKeyword_0() { return cTransitionKeyword_0; }

		//def=TransitionSpecification
		public Assignment getDefAssignment_1() { return cDefAssignment_1; }

		//TransitionSpecification
		public RuleCall getDefTransitionSpecificationParserRuleCall_1_0() { return cDefTransitionSpecificationParserRuleCall_1_0; }
	}

	public class ScopedElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScopedElement");
		private final RuleCall cStatechartSpecificationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		/// * ---- start rules ----
		//Define the starting points used by the statechart integration. These rules hook in the concrete rules of the specific grammar.
		// * /
		//
		//ScopedElement returns sgraph::ScopedElement:
		//
		//	StatechartSpecification;
		public ParserRule getRule() { return rule; }

		//StatechartSpecification
		public RuleCall getStatechartSpecificationParserRuleCall() { return cStatechartSpecificationParserRuleCall; }
	}

	public class StatechartSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StatechartSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStatechartSpecificationAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cNamespaceKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNamespaceAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNamespaceFQNParserRuleCall_1_1_0 = (RuleCall)cNamespaceAssignment_1_1.eContents().get(0);
		private final Assignment cScopesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cScopesStatechartScopeParserRuleCall_2_0 = (RuleCall)cScopesAssignment_2.eContents().get(0);
		
		//StatechartSpecification:
		//
		//	{StatechartSpecification} ("namespace" namespace=FQN)? scopes+=StatechartScope*;
		public ParserRule getRule() { return rule; }

		//{StatechartSpecification} ("namespace" namespace=FQN)? scopes+=StatechartScope*
		public Group getGroup() { return cGroup; }

		//{StatechartSpecification}
		public Action getStatechartSpecificationAction_0() { return cStatechartSpecificationAction_0; }

		//("namespace" namespace=FQN)?
		public Group getGroup_1() { return cGroup_1; }

		//"namespace"
		public Keyword getNamespaceKeyword_1_0() { return cNamespaceKeyword_1_0; }

		//namespace=FQN
		public Assignment getNamespaceAssignment_1_1() { return cNamespaceAssignment_1_1; }

		//FQN
		public RuleCall getNamespaceFQNParserRuleCall_1_1_0() { return cNamespaceFQNParserRuleCall_1_1_0; }

		//scopes+=StatechartScope*
		public Assignment getScopesAssignment_2() { return cScopesAssignment_2; }

		//StatechartScope
		public RuleCall getScopesStatechartScopeParserRuleCall_2_0() { return cScopesStatechartScopeParserRuleCall_2_0; }
	}

	public class StateSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateSpecification");
		private final Assignment cScopeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cScopeStateScopeParserRuleCall_0 = (RuleCall)cScopeAssignment.eContents().get(0);
		
		//StateSpecification:
		//
		//	scope=StateScope;
		public ParserRule getRule() { return rule; }

		//scope=StateScope
		public Assignment getScopeAssignment() { return cScopeAssignment; }

		//StateScope
		public RuleCall getScopeStateScopeParserRuleCall_0() { return cScopeStateScopeParserRuleCall_0; }
	}

	public class TransitionSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransitionSpecification");
		private final Assignment cReactionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cReactionTransitionReactionParserRuleCall_0 = (RuleCall)cReactionAssignment.eContents().get(0);
		
		//TransitionSpecification:
		//
		//	reaction=TransitionReaction;
		public ParserRule getRule() { return rule; }

		//reaction=TransitionReaction
		public Assignment getReactionAssignment() { return cReactionAssignment; }

		//TransitionReaction
		public RuleCall getReactionTransitionReactionParserRuleCall_0() { return cReactionTransitionReactionParserRuleCall_0; }
	}

	public class ScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Scope");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStateScopeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStatechartScopeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// * ---- scope rules ----
		//Defines different kinds of scopes that contain element definitions. Scopes are used for element definitions in statechart, regions, and state 
		// * /
		//
		//Scope returns sgraph::Scope:
		//
		//	StateScope | StatechartScope;
		public ParserRule getRule() { return rule; }

		//StateScope | StatechartScope
		public Alternatives getAlternatives() { return cAlternatives; }

		//StateScope
		public RuleCall getStateScopeParserRuleCall_0() { return cStateScopeParserRuleCall_0; }

		//StatechartScope
		public RuleCall getStatechartScopeParserRuleCall_1() { return cStatechartScopeParserRuleCall_1; }
	}

	public class StateScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateScope");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSimpleScopeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDeclarationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeclarationsLocalReactionParserRuleCall_1_0 = (RuleCall)cDeclarationsAssignment_1.eContents().get(0);
		
		//// a SimpleScope is used for states and regions
		// StateScope returns sgraph::Scope:
		//
		//	{SimpleScope} / * | Entrypoint | Exitpoint * / declarations+=LocalReaction*;
		public ParserRule getRule() { return rule; }

		//{SimpleScope} / * | Entrypoint | Exitpoint * / declarations+=LocalReaction*
		public Group getGroup() { return cGroup; }

		//{SimpleScope}
		public Action getSimpleScopeAction_0() { return cSimpleScopeAction_0; }

		/// * | Entrypoint | Exitpoint * / declarations+=LocalReaction*
		public Assignment getDeclarationsAssignment_1() { return cDeclarationsAssignment_1; }

		//LocalReaction
		public RuleCall getDeclarationsLocalReactionParserRuleCall_1_0() { return cDeclarationsLocalReactionParserRuleCall_1_0; }
	}

	public class StatechartScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StatechartScope");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInterfaceScopeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInternalScopeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// defines the poosible scopes for statecharts
		// StatechartScope:
		//
		//	InterfaceScope | InternalScope;
		public ParserRule getRule() { return rule; }

		//InterfaceScope | InternalScope
		public Alternatives getAlternatives() { return cAlternatives; }

		//InterfaceScope
		public RuleCall getInterfaceScopeParserRuleCall_0() { return cInterfaceScopeParserRuleCall_0; }

		//InternalScope
		public RuleCall getInternalScopeParserRuleCall_1() { return cInternalScopeParserRuleCall_1; }
	}

	public class NamedInterfaceScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamedInterfaceScope");
		private final RuleCall cInterfaceScopeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//NamedInterfaceScope returns base::NamedElement:
		//
		//	InterfaceScope;
		public ParserRule getRule() { return rule; }

		//InterfaceScope
		public RuleCall getInterfaceScopeParserRuleCall() { return cInterfaceScopeParserRuleCall; }
	}

	public class InterfaceScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfaceScope");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInterfaceScopeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInterfaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameXIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDeclarationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cDeclarationsAlternatives_4_0 = (Alternatives)cDeclarationsAssignment_4.eContents().get(0);
		private final RuleCall cDeclarationsEventDeclarartionParserRuleCall_4_0_0 = (RuleCall)cDeclarationsAlternatives_4_0.eContents().get(0);
		private final RuleCall cDeclarationsVariableDeclarationParserRuleCall_4_0_1 = (RuleCall)cDeclarationsAlternatives_4_0.eContents().get(1);
		private final RuleCall cDeclarationsOperationDeclarationParserRuleCall_4_0_2 = (RuleCall)cDeclarationsAlternatives_4_0.eContents().get(2);
		
		//InterfaceScope:
		//
		//	{InterfaceScope} "interface" name=XID? ":" declarations+=(EventDeclarartion //		| Entrypoint 
		// //		| Exitpoint
		// |
		//
		//	VariableDeclaration | OperationDeclaration)*;
		public ParserRule getRule() { return rule; }

		//{InterfaceScope} "interface" name=XID? ":" declarations+=(EventDeclarartion //		| Entrypoint 
		// //		| Exitpoint
		// |
		//
		//VariableDeclaration | OperationDeclaration)*
		public Group getGroup() { return cGroup; }

		//{InterfaceScope}
		public Action getInterfaceScopeAction_0() { return cInterfaceScopeAction_0; }

		//"interface"
		public Keyword getInterfaceKeyword_1() { return cInterfaceKeyword_1; }

		//name=XID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//XID
		public RuleCall getNameXIDParserRuleCall_2_0() { return cNameXIDParserRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//declarations+=(EventDeclarartion //		| Entrypoint 
		// //		| Exitpoint
		// | VariableDeclaration | OperationDeclaration)*
		public Assignment getDeclarationsAssignment_4() { return cDeclarationsAssignment_4; }

		//EventDeclarartion //		| Entrypoint 
		// //		| Exitpoint
		// | VariableDeclaration | OperationDeclaration
		public Alternatives getDeclarationsAlternatives_4_0() { return cDeclarationsAlternatives_4_0; }

		//EventDeclarartion
		public RuleCall getDeclarationsEventDeclarartionParserRuleCall_4_0_0() { return cDeclarationsEventDeclarartionParserRuleCall_4_0_0; }

		//VariableDeclaration
		public RuleCall getDeclarationsVariableDeclarationParserRuleCall_4_0_1() { return cDeclarationsVariableDeclarationParserRuleCall_4_0_1; }

		//OperationDeclaration
		public RuleCall getDeclarationsOperationDeclarationParserRuleCall_4_0_2() { return cDeclarationsOperationDeclarationParserRuleCall_4_0_2; }
	}

	public class InternalScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InternalScope");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInternalScopeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInternalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDeclarationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cDeclarationsAlternatives_3_0 = (Alternatives)cDeclarationsAssignment_3.eContents().get(0);
		private final RuleCall cDeclarationsEventDeclarartionParserRuleCall_3_0_0 = (RuleCall)cDeclarationsAlternatives_3_0.eContents().get(0);
		private final RuleCall cDeclarationsVariableDeclarationParserRuleCall_3_0_1 = (RuleCall)cDeclarationsAlternatives_3_0.eContents().get(1);
		private final RuleCall cDeclarationsOperationDeclarationParserRuleCall_3_0_2 = (RuleCall)cDeclarationsAlternatives_3_0.eContents().get(2);
		private final RuleCall cDeclarationsLocalReactionParserRuleCall_3_0_3 = (RuleCall)cDeclarationsAlternatives_3_0.eContents().get(3);
		
		//InternalScope:
		//
		//	{InternalScope} "internal" ":" declarations+=(EventDeclarartion | VariableDeclaration | OperationDeclaration |
		//
		//	LocalReaction)*;
		public ParserRule getRule() { return rule; }

		//{InternalScope} "internal" ":" declarations+=(EventDeclarartion | VariableDeclaration | OperationDeclaration |
		//
		//LocalReaction)*
		public Group getGroup() { return cGroup; }

		//{InternalScope}
		public Action getInternalScopeAction_0() { return cInternalScopeAction_0; }

		//"internal"
		public Keyword getInternalKeyword_1() { return cInternalKeyword_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//declarations+=(EventDeclarartion | VariableDeclaration | OperationDeclaration | LocalReaction)*
		public Assignment getDeclarationsAssignment_3() { return cDeclarationsAssignment_3; }

		//EventDeclarartion | VariableDeclaration | OperationDeclaration | LocalReaction
		public Alternatives getDeclarationsAlternatives_3_0() { return cDeclarationsAlternatives_3_0; }

		//EventDeclarartion
		public RuleCall getDeclarationsEventDeclarartionParserRuleCall_3_0_0() { return cDeclarationsEventDeclarartionParserRuleCall_3_0_0; }

		//VariableDeclaration
		public RuleCall getDeclarationsVariableDeclarationParserRuleCall_3_0_1() { return cDeclarationsVariableDeclarationParserRuleCall_3_0_1; }

		//OperationDeclaration
		public RuleCall getDeclarationsOperationDeclarationParserRuleCall_3_0_2() { return cDeclarationsOperationDeclarationParserRuleCall_3_0_2; }

		//LocalReaction
		public RuleCall getDeclarationsLocalReactionParserRuleCall_3_0_3() { return cDeclarationsLocalReactionParserRuleCall_3_0_3; }
	}

	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEventDeclarartionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOperationDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLocalReactionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		/// * ---- declarations ----
		//a definition is a top level element of a definition scope. * / //		| Entrypoint 
		//
		//
		////		| Exitpoint
		// Declaration returns sgraph::Declaration:
		//
		//	EventDeclarartion | VariableDeclaration | OperationDeclaration | LocalReaction;
		public ParserRule getRule() { return rule; }

		//EventDeclarartion | VariableDeclaration | OperationDeclaration | LocalReaction
		public Alternatives getAlternatives() { return cAlternatives; }

		//EventDeclarartion
		public RuleCall getEventDeclarartionParserRuleCall_0() { return cEventDeclarartionParserRuleCall_0; }

		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_1() { return cVariableDeclarationParserRuleCall_1; }

		//OperationDeclaration
		public RuleCall getOperationDeclarationParserRuleCall_2() { return cOperationDeclarationParserRuleCall_2; }

		//LocalReaction
		public RuleCall getLocalReactionParserRuleCall_3() { return cLocalReactionParserRuleCall_3; }
	}

	public class EventDeclarartionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventDeclarartion");
		private final RuleCall cEventDefinitionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		/// * ---- event definition ---- * / EventDeclarartion returns sgraph::Event:
		//
		//	EventDefinition;
		public ParserRule getRule() { return rule; }

		//EventDefinition
		public RuleCall getEventDefinitionParserRuleCall() { return cEventDefinitionParserRuleCall; }
	}

	public class EventFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventFeature");
		private final RuleCall cEventDefinitionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EventFeature returns types::Event:
		//
		//	EventDefinition;
		public ParserRule getRule() { return rule; }

		//EventDefinition
		public RuleCall getEventDefinitionParserRuleCall() { return cEventDefinitionParserRuleCall; }
	}

	public class EventDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDirectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDirectionDirectionEnumRuleCall_0_0 = (RuleCall)cDirectionAssignment_0.eContents().get(0);
		private final Keyword cEventKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameXIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_3_1_0 = (CrossReference)cTypeAssignment_3_1.eContents().get(0);
		private final RuleCall cTypeTypeFQNParserRuleCall_3_1_0_1 = (RuleCall)cTypeTypeCrossReference_3_1_0.eContents().get(1);
		
		//// (derivation=EventDerivation)?;
		// EventDefinition:
		//
		//	direction=Direction? "event" name=XID (":" type=[types::Type|FQN])?;
		public ParserRule getRule() { return rule; }

		//direction=Direction? "event" name=XID (":" type=[types::Type|FQN])?
		public Group getGroup() { return cGroup; }

		//direction=Direction?
		public Assignment getDirectionAssignment_0() { return cDirectionAssignment_0; }

		//Direction
		public RuleCall getDirectionDirectionEnumRuleCall_0_0() { return cDirectionDirectionEnumRuleCall_0_0; }

		//"event"
		public Keyword getEventKeyword_1() { return cEventKeyword_1; }

		//name=XID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//XID
		public RuleCall getNameXIDParserRuleCall_2_0() { return cNameXIDParserRuleCall_2_0; }

		//(":" type=[types::Type|FQN])?
		public Group getGroup_3() { return cGroup_3; }

		//":"
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }

		//type=[types::Type|FQN]
		public Assignment getTypeAssignment_3_1() { return cTypeAssignment_3_1; }

		//[types::Type|FQN]
		public CrossReference getTypeTypeCrossReference_3_1_0() { return cTypeTypeCrossReference_3_1_0; }

		//FQN
		public RuleCall getTypeTypeFQNParserRuleCall_3_1_0_1() { return cTypeTypeFQNParserRuleCall_3_1_0_1; }
	}

	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDeclaration");
		private final RuleCall cVariableDefinitionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		/// * ---- variable definition ---- * / VariableDeclaration returns sgraph::Variable:
		//
		//	VariableDefinition;
		public ParserRule getRule() { return rule; }

		//VariableDefinition
		public RuleCall getVariableDefinitionParserRuleCall() { return cVariableDefinitionParserRuleCall; }
	}

	public class VariableFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableFeature");
		private final RuleCall cVariableDefinitionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//VariableFeature returns types::Property:
		//
		//	VariableDefinition;
		public ParserRule getRule() { return rule; }

		//VariableDefinition
		public RuleCall getVariableDefinitionParserRuleCall() { return cVariableDefinitionParserRuleCall; }
	}

	public class VariableDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cReadonlyAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cReadonlyReadonlyKeyword_2_0_0 = (Keyword)cReadonlyAssignment_2_0.eContents().get(0);
		private final Assignment cExternalAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cExternalExternalKeyword_2_1_0 = (Keyword)cExternalAssignment_2_1.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameXIDParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cTypeTypeCrossReference_5_0 = (CrossReference)cTypeAssignment_5.eContents().get(0);
		private final RuleCall cTypeTypeFQNParserRuleCall_5_0_1 = (RuleCall)cTypeTypeCrossReference_5_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cInitialValueAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cInitialValueExpressionParserRuleCall_6_1_0 = (RuleCall)cInitialValueAssignment_6_1.eContents().get(0);
		
		//VariableDefinition:
		//
		//	{VariableDefinition} "var" (readonly?="readonly"? & external?="external"?) name=XID ":" type=[types::Type|FQN] ("="
		//
		//	initialValue=Expression)?;
		public ParserRule getRule() { return rule; }

		//{VariableDefinition} "var" (readonly?="readonly"? & external?="external"?) name=XID ":" type=[types::Type|FQN] ("="
		//
		//initialValue=Expression)?
		public Group getGroup() { return cGroup; }

		//{VariableDefinition}
		public Action getVariableDefinitionAction_0() { return cVariableDefinitionAction_0; }

		//"var"
		public Keyword getVarKeyword_1() { return cVarKeyword_1; }

		//readonly?="readonly"? & external?="external"?
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }

		//readonly?="readonly"?
		public Assignment getReadonlyAssignment_2_0() { return cReadonlyAssignment_2_0; }

		//"readonly"
		public Keyword getReadonlyReadonlyKeyword_2_0_0() { return cReadonlyReadonlyKeyword_2_0_0; }

		//external?="external"?
		public Assignment getExternalAssignment_2_1() { return cExternalAssignment_2_1; }

		//"external"
		public Keyword getExternalExternalKeyword_2_1_0() { return cExternalExternalKeyword_2_1_0; }

		//name=XID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//XID
		public RuleCall getNameXIDParserRuleCall_3_0() { return cNameXIDParserRuleCall_3_0; }

		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//type=[types::Type|FQN]
		public Assignment getTypeAssignment_5() { return cTypeAssignment_5; }

		//[types::Type|FQN]
		public CrossReference getTypeTypeCrossReference_5_0() { return cTypeTypeCrossReference_5_0; }

		//FQN
		public RuleCall getTypeTypeFQNParserRuleCall_5_0_1() { return cTypeTypeFQNParserRuleCall_5_0_1; }

		//("=" initialValue=Expression)?
		public Group getGroup_6() { return cGroup_6; }

		//"="
		public Keyword getEqualsSignKeyword_6_0() { return cEqualsSignKeyword_6_0; }

		//initialValue=Expression
		public Assignment getInitialValueAssignment_6_1() { return cInitialValueAssignment_6_1; }

		//Expression
		public RuleCall getInitialValueExpressionParserRuleCall_6_1_0() { return cInitialValueExpressionParserRuleCall_6_1_0; }
	}

	public class OperationDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperationDeclaration");
		private final RuleCall cOperationDefinitionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		/// * ---- operation definition ---- * / OperationDeclaration returns sgraph::Declaration:
		//
		//	OperationDefinition;
		public ParserRule getRule() { return rule; }

		//OperationDefinition
		public RuleCall getOperationDefinitionParserRuleCall() { return cOperationDefinitionParserRuleCall; }
	}

	public class OperationFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperationFeature");
		private final RuleCall cOperationDefinitionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//OperationFeature returns types::Operation:
		//
		//	OperationDefinition;
		public ParserRule getRule() { return rule; }

		//OperationDefinition
		public RuleCall getOperationDefinitionParserRuleCall() { return cOperationDefinitionParserRuleCall; }
	}

	public class OperationDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperationDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOperationDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOperationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameXIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParametersAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_4_0_0 = (RuleCall)cParametersAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParametersAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_4_1_1_0 = (RuleCall)cParametersAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cTypeAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_6_1_0 = (CrossReference)cTypeAssignment_6_1.eContents().get(0);
		private final RuleCall cTypeTypeFQNParserRuleCall_6_1_0_1 = (RuleCall)cTypeTypeCrossReference_6_1_0.eContents().get(1);
		
		//OperationDefinition:
		//
		//	{OperationDefinition} "operation" name=XID "(" (parameters+=Parameter ("," parameters+=Parameter)*)? ")" (":"
		//
		//	type=[types::Type|FQN])?;
		public ParserRule getRule() { return rule; }

		//{OperationDefinition} "operation" name=XID "(" (parameters+=Parameter ("," parameters+=Parameter)*)? ")" (":"
		//
		//type=[types::Type|FQN])?
		public Group getGroup() { return cGroup; }

		//{OperationDefinition}
		public Action getOperationDefinitionAction_0() { return cOperationDefinitionAction_0; }

		//"operation"
		public Keyword getOperationKeyword_1() { return cOperationKeyword_1; }

		//name=XID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//XID
		public RuleCall getNameXIDParserRuleCall_2_0() { return cNameXIDParserRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(parameters+=Parameter ("," parameters+=Parameter)*)?
		public Group getGroup_4() { return cGroup_4; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_4_0() { return cParametersAssignment_4_0; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_4_0_0() { return cParametersParameterParserRuleCall_4_0_0; }

		//("," parameters+=Parameter)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_4_1_1() { return cParametersAssignment_4_1_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_4_1_1_0() { return cParametersParameterParserRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//(":" type=[types::Type|FQN])?
		public Group getGroup_6() { return cGroup_6; }

		//":"
		public Keyword getColonKeyword_6_0() { return cColonKeyword_6_0; }

		//type=[types::Type|FQN]
		public Assignment getTypeAssignment_6_1() { return cTypeAssignment_6_1; }

		//[types::Type|FQN]
		public CrossReference getTypeTypeCrossReference_6_1_0() { return cTypeTypeCrossReference_6_1_0; }

		//FQN
		public RuleCall getTypeTypeFQNParserRuleCall_6_1_0_1() { return cTypeTypeFQNParserRuleCall_6_1_0_1; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameXIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeTypeCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeTypeFQNParserRuleCall_2_0_1 = (RuleCall)cTypeTypeCrossReference_2_0.eContents().get(1);
		
		//Parameter returns types::Parameter:
		//
		//	name=XID ":" type=[types::Type|FQN];
		public ParserRule getRule() { return rule; }

		//name=XID ":" type=[types::Type|FQN]
		public Group getGroup() { return cGroup; }

		//name=XID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//XID
		public RuleCall getNameXIDParserRuleCall_0_0() { return cNameXIDParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=[types::Type|FQN]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[types::Type|FQN]
		public CrossReference getTypeTypeCrossReference_2_0() { return cTypeTypeCrossReference_2_0; }

		//FQN
		public RuleCall getTypeTypeFQNParserRuleCall_2_0_1() { return cTypeTypeFQNParserRuleCall_2_0_1; }
	}

	public class XIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cNamespaceKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cInterfaceKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cInternalKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cEventKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cLocalKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cInKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cOutKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cVarKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cReadonlyKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cExternalKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cOperationKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cDefaultKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cElseKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cEntryKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cExitKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cAlwaysKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cOncycleKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cRaiseKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cValueofKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cActiveKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		
		/// * ---- entrypoint definition ---- * / //Entrypoint returns sgraph::Declaration:
		// //	{Entrypoint} 'entrypoint' name=XID;
		//
		//
		/// * ---- exitpoint definition ---- * / //Exitpoint returns sgraph::Declaration:
		// //	{Exitpoint} 'exitpoint' name=XID;
		//
		//
		/// * ---- Datatype rules ---- * / XID:
		//
		//	ID | "namespace" | "interface" | "internal" | "event" | "local" | "in" | "out" | "var" | "readonly" | "external" |
		//
		//	"operation" | "default" | "else" | "entry" | "exit" | "always" | "oncycle" | "raise" | "valueof" | "active";
		public ParserRule getRule() { return rule; }

		//ID | "namespace" | "interface" | "internal" | "event" | "local" | "in" | "out" | "var" | "readonly" | "external" |
		//
		//"operation" | "default" | "else" | "entry" | "exit" | "always" | "oncycle" | "raise" | "valueof" | "active"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//"namespace"
		public Keyword getNamespaceKeyword_1() { return cNamespaceKeyword_1; }

		//"interface"
		public Keyword getInterfaceKeyword_2() { return cInterfaceKeyword_2; }

		//"internal"
		public Keyword getInternalKeyword_3() { return cInternalKeyword_3; }

		//"event"
		public Keyword getEventKeyword_4() { return cEventKeyword_4; }

		//"local"
		public Keyword getLocalKeyword_5() { return cLocalKeyword_5; }

		//"in"
		public Keyword getInKeyword_6() { return cInKeyword_6; }

		//"out"
		public Keyword getOutKeyword_7() { return cOutKeyword_7; }

		//"var"
		public Keyword getVarKeyword_8() { return cVarKeyword_8; }

		//"readonly"
		public Keyword getReadonlyKeyword_9() { return cReadonlyKeyword_9; }

		//"external"
		public Keyword getExternalKeyword_10() { return cExternalKeyword_10; }

		//"operation"
		public Keyword getOperationKeyword_11() { return cOperationKeyword_11; }

		//"default"
		public Keyword getDefaultKeyword_12() { return cDefaultKeyword_12; }

		//"else"
		public Keyword getElseKeyword_13() { return cElseKeyword_13; }

		//"entry"
		public Keyword getEntryKeyword_14() { return cEntryKeyword_14; }

		//"exit"
		public Keyword getExitKeyword_15() { return cExitKeyword_15; }

		//"always"
		public Keyword getAlwaysKeyword_16() { return cAlwaysKeyword_16; }

		//"oncycle"
		public Keyword getOncycleKeyword_17() { return cOncycleKeyword_17; }

		//"raise"
		public Keyword getRaiseKeyword_18() { return cRaiseKeyword_18; }

		//"valueof"
		public Keyword getValueofKeyword_19() { return cValueofKeyword_19; }

		//"active"
		public Keyword getActiveKeyword_20() { return cActiveKeyword_20; }
	}

	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXIDParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cXIDParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN:
		//
		//	XID ("." XID)*;
		public ParserRule getRule() { return rule; }

		//XID ("." XID)*
		public Group getGroup() { return cGroup; }

		//XID
		public RuleCall getXIDParserRuleCall_0() { return cXIDParserRuleCall_0; }

		//("." XID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//XID
		public RuleCall getXIDParserRuleCall_1_1() { return cXIDParserRuleCall_1_1; }
	}

	public class ReactionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Reaction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLocalReactionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTransitionReactionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// * ---- reaction rules ----
		//Define the structure of reactions that are central for describing the statecharts behavior. 
		// * /
		//
		//Reaction returns sgraph::Reaction:
		//
		//	LocalReaction | TransitionReaction;
		public ParserRule getRule() { return rule; }

		//LocalReaction | TransitionReaction
		public Alternatives getAlternatives() { return cAlternatives; }

		//LocalReaction
		public RuleCall getLocalReactionParserRuleCall_0() { return cLocalReactionParserRuleCall_0; }

		//TransitionReaction
		public RuleCall getTransitionReactionParserRuleCall_1() { return cTransitionReactionParserRuleCall_1; }
	}

	public class LocalReactionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalReaction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTriggerAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTriggerReactionTriggerParserRuleCall_0_0 = (RuleCall)cTriggerAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cEffectAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cEffectReactionEffectParserRuleCall_1_0_1_0 = (RuleCall)cEffectAssignment_1_0_1.eContents().get(0);
		
		//LocalReaction:
		//
		//	trigger=ReactionTrigger => ("/" effect=ReactionEffect);
		public ParserRule getRule() { return rule; }

		//trigger=ReactionTrigger => ("/" effect=ReactionEffect)
		public Group getGroup() { return cGroup; }

		//trigger=ReactionTrigger
		public Assignment getTriggerAssignment_0() { return cTriggerAssignment_0; }

		//ReactionTrigger
		public RuleCall getTriggerReactionTriggerParserRuleCall_0_0() { return cTriggerReactionTriggerParserRuleCall_0_0; }

		//=> ("/" effect=ReactionEffect)
		public Group getGroup_1() { return cGroup_1; }

		//"/" effect=ReactionEffect
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"/"
		public Keyword getSolidusKeyword_1_0_0() { return cSolidusKeyword_1_0_0; }

		//effect=ReactionEffect
		public Assignment getEffectAssignment_1_0_1() { return cEffectAssignment_1_0_1; }

		//ReactionEffect
		public RuleCall getEffectReactionEffectParserRuleCall_1_0_1_0() { return cEffectReactionEffectParserRuleCall_1_0_1_0; }
	}

	public class TransitionReactionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransitionReaction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTransitionReactionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTriggerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTriggerStextTriggerParserRuleCall_1_0 = (RuleCall)cTriggerAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSolidusKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cEffectAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cEffectReactionEffectParserRuleCall_2_1_0 = (RuleCall)cEffectAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cNumberSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPropertiesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPropertiesTransitionPropertyParserRuleCall_3_1_0 = (RuleCall)cPropertiesAssignment_3_1.eContents().get(0);
		
		//TransitionReaction:
		//
		//	{TransitionReaction} trigger=StextTrigger? ("/" effect=ReactionEffect)? ("#" properties+=TransitionProperty*)?;
		public ParserRule getRule() { return rule; }

		//{TransitionReaction} trigger=StextTrigger? ("/" effect=ReactionEffect)? ("#" properties+=TransitionProperty*)?
		public Group getGroup() { return cGroup; }

		//{TransitionReaction}
		public Action getTransitionReactionAction_0() { return cTransitionReactionAction_0; }

		//trigger=StextTrigger?
		public Assignment getTriggerAssignment_1() { return cTriggerAssignment_1; }

		//StextTrigger
		public RuleCall getTriggerStextTriggerParserRuleCall_1_0() { return cTriggerStextTriggerParserRuleCall_1_0; }

		//("/" effect=ReactionEffect)?
		public Group getGroup_2() { return cGroup_2; }

		//"/"
		public Keyword getSolidusKeyword_2_0() { return cSolidusKeyword_2_0; }

		//effect=ReactionEffect
		public Assignment getEffectAssignment_2_1() { return cEffectAssignment_2_1; }

		//ReactionEffect
		public RuleCall getEffectReactionEffectParserRuleCall_2_1_0() { return cEffectReactionEffectParserRuleCall_2_1_0; }

		//("#" properties+=TransitionProperty*)?
		public Group getGroup_3() { return cGroup_3; }

		//"#"
		public Keyword getNumberSignKeyword_3_0() { return cNumberSignKeyword_3_0; }

		//properties+=TransitionProperty*
		public Assignment getPropertiesAssignment_3_1() { return cPropertiesAssignment_3_1; }

		//TransitionProperty
		public RuleCall getPropertiesTransitionPropertyParserRuleCall_3_1_0() { return cPropertiesTransitionPropertyParserRuleCall_3_1_0; }
	}

	public class StextTriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StextTrigger");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cReactionTriggerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDefaultTriggerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//StextTrigger returns sgraph::Trigger:
		//
		//	ReactionTrigger | DefaultTrigger;
		public ParserRule getRule() { return rule; }

		//ReactionTrigger | DefaultTrigger
		public Alternatives getAlternatives() { return cAlternatives; }

		//ReactionTrigger
		public RuleCall getReactionTriggerParserRuleCall_0() { return cReactionTriggerParserRuleCall_0; }

		//DefaultTrigger
		public RuleCall getDefaultTriggerParserRuleCall_1() { return cDefaultTriggerParserRuleCall_1; }
	}

	public class ReactionTriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReactionTrigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReactionTriggerAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cTriggersAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cTriggersEventSpecParserRuleCall_1_0_0_0 = (RuleCall)cTriggersAssignment_1_0_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Assignment cTriggersAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cTriggersEventSpecParserRuleCall_1_0_1_1_0 = (RuleCall)cTriggersAssignment_1_0_1_1.eContents().get(0);
		private final Group cGroup_1_0_2 = (Group)cGroup_1_0.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_1_0_2_0 = (Keyword)cGroup_1_0_2.eContents().get(0);
		private final Assignment cGuardExpressionAssignment_1_0_2_1 = (Assignment)cGroup_1_0_2.eContents().get(1);
		private final RuleCall cGuardExpressionExpressionParserRuleCall_1_0_2_1_0 = (RuleCall)cGuardExpressionAssignment_1_0_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_0_2_2 = (Keyword)cGroup_1_0_2.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cGuardExpressionAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cGuardExpressionExpressionParserRuleCall_1_1_1_0 = (RuleCall)cGuardExpressionAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//ReactionTrigger returns sgraph::Trigger:
		//
		//	{ReactionTrigger} (triggers+=EventSpec ("," triggers+=EventSpec)* ("[" guardExpression=Expression "]")? | "["
		//
		//	guardExpression=Expression "]");
		public ParserRule getRule() { return rule; }

		//{ReactionTrigger} (triggers+=EventSpec ("," triggers+=EventSpec)* ("[" guardExpression=Expression "]")? | "["
		//
		//guardExpression=Expression "]")
		public Group getGroup() { return cGroup; }

		//{ReactionTrigger}
		public Action getReactionTriggerAction_0() { return cReactionTriggerAction_0; }

		//triggers+=EventSpec ("," triggers+=EventSpec)* ("[" guardExpression=Expression "]")? | "[" guardExpression=Expression
		//
		//"]"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//triggers+=EventSpec ("," triggers+=EventSpec)* ("[" guardExpression=Expression "]")?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//triggers+=EventSpec
		public Assignment getTriggersAssignment_1_0_0() { return cTriggersAssignment_1_0_0; }

		//EventSpec
		public RuleCall getTriggersEventSpecParserRuleCall_1_0_0_0() { return cTriggersEventSpecParserRuleCall_1_0_0_0; }

		//("," triggers+=EventSpec)*
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//","
		public Keyword getCommaKeyword_1_0_1_0() { return cCommaKeyword_1_0_1_0; }

		//triggers+=EventSpec
		public Assignment getTriggersAssignment_1_0_1_1() { return cTriggersAssignment_1_0_1_1; }

		//EventSpec
		public RuleCall getTriggersEventSpecParserRuleCall_1_0_1_1_0() { return cTriggersEventSpecParserRuleCall_1_0_1_1_0; }

		//(=> "[" guardExpression=Expression "]")?
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//=> "["
		public Keyword getLeftSquareBracketKeyword_1_0_2_0() { return cLeftSquareBracketKeyword_1_0_2_0; }

		//guardExpression=Expression
		public Assignment getGuardExpressionAssignment_1_0_2_1() { return cGuardExpressionAssignment_1_0_2_1; }

		//Expression
		public RuleCall getGuardExpressionExpressionParserRuleCall_1_0_2_1_0() { return cGuardExpressionExpressionParserRuleCall_1_0_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_0_2_2() { return cRightSquareBracketKeyword_1_0_2_2; }

		//"[" guardExpression=Expression "]"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1_0() { return cLeftSquareBracketKeyword_1_1_0; }

		//guardExpression=Expression
		public Assignment getGuardExpressionAssignment_1_1_1() { return cGuardExpressionAssignment_1_1_1; }

		//Expression
		public RuleCall getGuardExpressionExpressionParserRuleCall_1_1_1_0() { return cGuardExpressionExpressionParserRuleCall_1_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_1_2() { return cRightSquareBracketKeyword_1_1_2; }
	}

	public class DefaultTriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefaultTrigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDefaultTriggerAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cDefaultKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cElseKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//DefaultTrigger returns sgraph::Trigger:
		//
		//	{DefaultTrigger} ("default" | "else");
		public ParserRule getRule() { return rule; }

		//{DefaultTrigger} ("default" | "else")
		public Group getGroup() { return cGroup; }

		//{DefaultTrigger}
		public Action getDefaultTriggerAction_0() { return cDefaultTriggerAction_0; }

		//"default" | "else"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"default"
		public Keyword getDefaultKeyword_1_0() { return cDefaultKeyword_1_0; }

		//"else"
		public Keyword getElseKeyword_1_1() { return cElseKeyword_1_1; }
	}

	public class ReactionEffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReactionEffect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReactionEffectAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cActionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cActionsAlternatives_1_0 = (Alternatives)cActionsAssignment_1.eContents().get(0);
		private final RuleCall cActionsExpressionParserRuleCall_1_0_0 = (RuleCall)cActionsAlternatives_1_0.eContents().get(0);
		private final RuleCall cActionsEventRaisingExpressionParserRuleCall_1_0_1 = (RuleCall)cActionsAlternatives_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cActionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cActionsAlternatives_2_1_0 = (Alternatives)cActionsAssignment_2_1.eContents().get(0);
		private final RuleCall cActionsExpressionParserRuleCall_2_1_0_0 = (RuleCall)cActionsAlternatives_2_1_0.eContents().get(0);
		private final RuleCall cActionsEventRaisingExpressionParserRuleCall_2_1_0_1 = (RuleCall)cActionsAlternatives_2_1_0.eContents().get(1);
		
		//ReactionEffect returns sgraph::Effect:
		//
		//	{ReactionEffect} actions+=(Expression | EventRaisingExpression) (";" actions+=(Expression |
		//
		//	EventRaisingExpression))*;
		public ParserRule getRule() { return rule; }

		//{ReactionEffect} actions+=(Expression | EventRaisingExpression) (";" actions+=(Expression | EventRaisingExpression))*
		public Group getGroup() { return cGroup; }

		//{ReactionEffect}
		public Action getReactionEffectAction_0() { return cReactionEffectAction_0; }

		//actions+=(Expression | EventRaisingExpression)
		public Assignment getActionsAssignment_1() { return cActionsAssignment_1; }

		//Expression | EventRaisingExpression
		public Alternatives getActionsAlternatives_1_0() { return cActionsAlternatives_1_0; }

		//Expression
		public RuleCall getActionsExpressionParserRuleCall_1_0_0() { return cActionsExpressionParserRuleCall_1_0_0; }

		//EventRaisingExpression
		public RuleCall getActionsEventRaisingExpressionParserRuleCall_1_0_1() { return cActionsEventRaisingExpressionParserRuleCall_1_0_1; }

		//(=> ";" actions+=(Expression | EventRaisingExpression))*
		public Group getGroup_2() { return cGroup_2; }

		//=> ";"
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }

		//actions+=(Expression | EventRaisingExpression)
		public Assignment getActionsAssignment_2_1() { return cActionsAssignment_2_1; }

		//Expression | EventRaisingExpression
		public Alternatives getActionsAlternatives_2_1_0() { return cActionsAlternatives_2_1_0; }

		//Expression
		public RuleCall getActionsExpressionParserRuleCall_2_1_0_0() { return cActionsExpressionParserRuleCall_2_1_0_0; }

		//EventRaisingExpression
		public RuleCall getActionsEventRaisingExpressionParserRuleCall_2_1_0_1() { return cActionsEventRaisingExpressionParserRuleCall_2_1_0_1; }
	}

	public class TransitionPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransitionProperty");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntryPointSpecParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExitPointSpecParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TransitionProperty returns sgraph::ReactionProperty:
		//
		//	EntryPointSpec | ExitPointSpec;
		public ParserRule getRule() { return rule; }

		//EntryPointSpec | ExitPointSpec
		public Alternatives getAlternatives() { return cAlternatives; }

		//EntryPointSpec
		public RuleCall getEntryPointSpecParserRuleCall_0() { return cEntryPointSpecParserRuleCall_0; }

		//ExitPointSpec
		public RuleCall getExitPointSpecParserRuleCall_1() { return cExitPointSpecParserRuleCall_1; }
	}

	public class EntryPointSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EntryPointSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEntrypointAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEntrypointIDTerminalRuleCall_1_0 = (RuleCall)cEntrypointAssignment_1.eContents().get(0);
		
		//EntryPointSpec:
		//
		//	">" entrypoint=ID;
		public ParserRule getRule() { return rule; }

		//">" entrypoint=ID
		public Group getGroup() { return cGroup; }

		//">"
		public Keyword getGreaterThanSignKeyword_0() { return cGreaterThanSignKeyword_0; }

		//entrypoint=ID
		public Assignment getEntrypointAssignment_1() { return cEntrypointAssignment_1; }

		//ID
		public RuleCall getEntrypointIDTerminalRuleCall_1_0() { return cEntrypointIDTerminalRuleCall_1_0; }
	}

	public class ExitPointSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExitPointSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExitpointAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExitpointIDTerminalRuleCall_0_0 = (RuleCall)cExitpointAssignment_0.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ExitPointSpec:
		//
		//	exitpoint=ID ">";
		public ParserRule getRule() { return rule; }

		//exitpoint=ID ">"
		public Group getGroup() { return cGroup; }

		//exitpoint=ID
		public Assignment getExitpointAssignment_0() { return cExitpointAssignment_0; }

		//ID
		public RuleCall getExitpointIDTerminalRuleCall_0_0() { return cExitpointIDTerminalRuleCall_0_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1() { return cGreaterThanSignKeyword_1; }
	}

	public class EventSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventSpec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRegularEventSpecParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTimeEventSpecParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBuiltinEventSpecParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//EventSpec:
		//
		//	RegularEventSpec | TimeEventSpec | BuiltinEventSpec;
		public ParserRule getRule() { return rule; }

		//RegularEventSpec | TimeEventSpec | BuiltinEventSpec
		public Alternatives getAlternatives() { return cAlternatives; }

		//RegularEventSpec
		public RuleCall getRegularEventSpecParserRuleCall_0() { return cRegularEventSpecParserRuleCall_0; }

		//TimeEventSpec
		public RuleCall getTimeEventSpecParserRuleCall_1() { return cTimeEventSpecParserRuleCall_1; }

		//BuiltinEventSpec
		public RuleCall getBuiltinEventSpecParserRuleCall_2() { return cBuiltinEventSpecParserRuleCall_2; }
	}

	public class RegularEventSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RegularEventSpec");
		private final Assignment cEventAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cEventFeatureCallParserRuleCall_0 = (RuleCall)cEventAssignment.eContents().get(0);
		
		//RegularEventSpec:
		//
		//	event=FeatureCall;
		public ParserRule getRule() { return rule; }

		//event=FeatureCall
		public Assignment getEventAssignment() { return cEventAssignment; }

		//FeatureCall
		public RuleCall getEventFeatureCallParserRuleCall_0() { return cEventFeatureCallParserRuleCall_0; }
	}

	public class TimeEventSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimeEventSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTimeEventTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueConditionalExpressionParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cUnitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUnitTimeUnitEnumRuleCall_2_0 = (RuleCall)cUnitAssignment_2.eContents().get(0);
		
		//// TODO: redefine after trigger - we need to use it with clocks
		// TimeEventSpec:
		//
		//	type=TimeEventType value=ConditionalExpression unit=TimeUnit;
		public ParserRule getRule() { return rule; }

		//type=TimeEventType value=ConditionalExpression unit=TimeUnit
		public Group getGroup() { return cGroup; }

		//type=TimeEventType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//TimeEventType
		public RuleCall getTypeTimeEventTypeEnumRuleCall_0_0() { return cTypeTimeEventTypeEnumRuleCall_0_0; }

		//value=ConditionalExpression
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//ConditionalExpression
		public RuleCall getValueConditionalExpressionParserRuleCall_1_0() { return cValueConditionalExpressionParserRuleCall_1_0; }

		//unit=TimeUnit
		public Assignment getUnitAssignment_2() { return cUnitAssignment_2; }

		//TimeUnit
		public RuleCall getUnitTimeUnitEnumRuleCall_2_0() { return cUnitTimeUnitEnumRuleCall_2_0; }
	}

	public class BuiltinEventSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuiltinEventSpec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntryEventParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExitEventParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAlwaysEventParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//BuiltinEventSpec:
		//
		//	EntryEvent | ExitEvent | AlwaysEvent;
		public ParserRule getRule() { return rule; }

		//EntryEvent | ExitEvent | AlwaysEvent
		public Alternatives getAlternatives() { return cAlternatives; }

		//EntryEvent
		public RuleCall getEntryEventParserRuleCall_0() { return cEntryEventParserRuleCall_0; }

		//ExitEvent
		public RuleCall getExitEventParserRuleCall_1() { return cExitEventParserRuleCall_1; }

		//AlwaysEvent
		public RuleCall getAlwaysEventParserRuleCall_2() { return cAlwaysEventParserRuleCall_2; }
	}

	public class EntryEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EntryEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEntryEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEntryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//EntryEvent:
		//
		//	{EntryEvent} "entry";
		public ParserRule getRule() { return rule; }

		//{EntryEvent} "entry"
		public Group getGroup() { return cGroup; }

		//{EntryEvent}
		public Action getEntryEventAction_0() { return cEntryEventAction_0; }

		//"entry"
		public Keyword getEntryKeyword_1() { return cEntryKeyword_1; }
	}

	public class ExitEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExitEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExitEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ExitEvent:
		//
		//	{ExitEvent} "exit";
		public ParserRule getRule() { return rule; }

		//{ExitEvent} "exit"
		public Group getGroup() { return cGroup; }

		//{ExitEvent}
		public Action getExitEventAction_0() { return cExitEventAction_0; }

		//"exit"
		public Keyword getExitKeyword_1() { return cExitKeyword_1; }
	}

	public class AlwaysEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AlwaysEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAlwaysEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cAlwaysKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cOncycleKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//AlwaysEvent:
		//
		//	{AlwaysEvent} ("always" | "oncycle");
		public ParserRule getRule() { return rule; }

		//{AlwaysEvent} ("always" | "oncycle")
		public Group getGroup() { return cGroup; }

		//{AlwaysEvent}
		public Action getAlwaysEventAction_0() { return cAlwaysEventAction_0; }

		//"always" | "oncycle"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"always"
		public Keyword getAlwaysKeyword_1_0() { return cAlwaysKeyword_1_0; }

		//"oncycle"
		public Keyword getOncycleKeyword_1_1() { return cOncycleKeyword_1_1; }
	}

	public class EventRaisingExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventRaisingExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEventRaisingExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRaiseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEventAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEventFeatureCallParserRuleCall_2_0 = (RuleCall)cEventAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		
		//// ****************
		// // Expression Grammar
		// // ****************
		// EventRaisingExpression returns Expression:
		//
		//	{EventRaisingExpression} "raise" event=FeatureCall (":" value=Expression)?;
		public ParserRule getRule() { return rule; }

		//{EventRaisingExpression} "raise" event=FeatureCall (":" value=Expression)?
		public Group getGroup() { return cGroup; }

		//{EventRaisingExpression}
		public Action getEventRaisingExpressionAction_0() { return cEventRaisingExpressionAction_0; }

		//"raise"
		public Keyword getRaiseKeyword_1() { return cRaiseKeyword_1; }

		//event=FeatureCall
		public Assignment getEventAssignment_2() { return cEventAssignment_2; }

		//FeatureCall
		public RuleCall getEventFeatureCallParserRuleCall_2_0() { return cEventFeatureCallParserRuleCall_2_0; }

		//(":" value=Expression)?
		public Group getGroup_3() { return cGroup_3; }

		//":"
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }

		//value=Expression
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_3_1_0() { return cValueExpressionParserRuleCall_3_1_0; }
	}

	public class StatementExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StatementExpression");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//StatementExpression returns sgraph::Statement:
		//
		//	Expression;
		public ParserRule getRule() { return rule; }

		//Expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final RuleCall cAssignmentExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//
		//	AssignmentExpression;
		public ParserRule getRule() { return rule; }

		//AssignmentExpression
		public RuleCall getAssignmentExpressionParserRuleCall() { return cAssignmentExpressionParserRuleCall; }
	}

	public class AssignmentExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssignmentExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConditionalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAssignmentExpressionVarRefAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorAssignmentOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionConditionalExpressionParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		
		//AssignmentExpression returns Expression:
		//
		//	ConditionalExpression ({AssignmentExpression.varRef=current} operator=AssignmentOperator
		//
		//	expression=ConditionalExpression)*;
		public ParserRule getRule() { return rule; }

		//ConditionalExpression ({AssignmentExpression.varRef=current} operator=AssignmentOperator
		//
		//expression=ConditionalExpression)*
		public Group getGroup() { return cGroup; }

		//ConditionalExpression
		public RuleCall getConditionalExpressionParserRuleCall_0() { return cConditionalExpressionParserRuleCall_0; }

		//({AssignmentExpression.varRef=current} operator=AssignmentOperator expression=ConditionalExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{AssignmentExpression.varRef=current}
		public Action getAssignmentExpressionVarRefAction_1_0() { return cAssignmentExpressionVarRefAction_1_0; }

		//operator=AssignmentOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//AssignmentOperator
		public RuleCall getOperatorAssignmentOperatorEnumRuleCall_1_1_0() { return cOperatorAssignmentOperatorEnumRuleCall_1_1_0; }

		//expression=ConditionalExpression
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }

		//ConditionalExpression
		public RuleCall getExpressionConditionalExpressionParserRuleCall_1_2_0() { return cExpressionConditionalExpressionParserRuleCall_1_2_0; }
	}

	public class ConditionalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cConditionalExpressionConditionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTrueCaseAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTrueCaseLogicalOrExpressionParserRuleCall_1_2_0 = (RuleCall)cTrueCaseAssignment_1_2.eContents().get(0);
		private final Keyword cColonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cFalseCaseAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cFalseCaseLogicalOrExpressionParserRuleCall_1_4_0 = (RuleCall)cFalseCaseAssignment_1_4.eContents().get(0);
		
		//ConditionalExpression returns Expression:
		//
		//	LogicalOrExpression ({ConditionalExpression.condition=current} "?" trueCase=LogicalOrExpression ":"
		//
		//	falseCase=LogicalOrExpression)?;
		public ParserRule getRule() { return rule; }

		//LogicalOrExpression ({ConditionalExpression.condition=current} "?" trueCase=LogicalOrExpression ":"
		//
		//falseCase=LogicalOrExpression)?
		public Group getGroup() { return cGroup; }

		//LogicalOrExpression
		public RuleCall getLogicalOrExpressionParserRuleCall_0() { return cLogicalOrExpressionParserRuleCall_0; }

		//({ConditionalExpression.condition=current} "?" trueCase=LogicalOrExpression ":" falseCase=LogicalOrExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//{ConditionalExpression.condition=current}
		public Action getConditionalExpressionConditionAction_1_0() { return cConditionalExpressionConditionAction_1_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_1_1() { return cQuestionMarkKeyword_1_1; }

		//trueCase=LogicalOrExpression
		public Assignment getTrueCaseAssignment_1_2() { return cTrueCaseAssignment_1_2; }

		//LogicalOrExpression
		public RuleCall getTrueCaseLogicalOrExpressionParserRuleCall_1_2_0() { return cTrueCaseLogicalOrExpressionParserRuleCall_1_2_0; }

		//":"
		public Keyword getColonKeyword_1_3() { return cColonKeyword_1_3; }

		//falseCase=LogicalOrExpression
		public Assignment getFalseCaseAssignment_1_4() { return cFalseCaseAssignment_1_4; }

		//LogicalOrExpression
		public RuleCall getFalseCaseLogicalOrExpressionParserRuleCall_1_4_0() { return cFalseCaseLogicalOrExpressionParserRuleCall_1_4_0; }
	}

	public class LogicalOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicalOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicalOrExpressionLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandLogicalAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//LogicalOrExpression returns Expression:
		//
		//	LogicalAndExpression ({LogicalOrExpression.leftOperand=current} "||" rightOperand=LogicalAndExpression)*;
		public ParserRule getRule() { return rule; }

		//LogicalAndExpression ({LogicalOrExpression.leftOperand=current} "||" rightOperand=LogicalAndExpression)*
		public Group getGroup() { return cGroup; }

		//LogicalAndExpression
		public RuleCall getLogicalAndExpressionParserRuleCall_0() { return cLogicalAndExpressionParserRuleCall_0; }

		//({LogicalOrExpression.leftOperand=current} "||" rightOperand=LogicalAndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{LogicalOrExpression.leftOperand=current}
		public Action getLogicalOrExpressionLeftOperandAction_1_0() { return cLogicalOrExpressionLeftOperandAction_1_0; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }

		//rightOperand=LogicalAndExpression
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//LogicalAndExpression
		public RuleCall getRightOperandLogicalAndExpressionParserRuleCall_1_2_0() { return cRightOperandLogicalAndExpressionParserRuleCall_1_2_0; }
	}

	public class LogicalAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicalAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalNotExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicalAndExpressionLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandLogicalNotExpressionParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//LogicalAndExpression returns Expression:
		//
		//	LogicalNotExpression ({LogicalAndExpression.leftOperand=current} "&&" rightOperand=LogicalNotExpression)*;
		public ParserRule getRule() { return rule; }

		//LogicalNotExpression ({LogicalAndExpression.leftOperand=current} "&&" rightOperand=LogicalNotExpression)*
		public Group getGroup() { return cGroup; }

		//LogicalNotExpression
		public RuleCall getLogicalNotExpressionParserRuleCall_0() { return cLogicalNotExpressionParserRuleCall_0; }

		//({LogicalAndExpression.leftOperand=current} "&&" rightOperand=LogicalNotExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{LogicalAndExpression.leftOperand=current}
		public Action getLogicalAndExpressionLeftOperandAction_1_0() { return cLogicalAndExpressionLeftOperandAction_1_0; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }

		//rightOperand=LogicalNotExpression
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//LogicalNotExpression
		public RuleCall getRightOperandLogicalNotExpressionParserRuleCall_1_2_0() { return cRightOperandLogicalNotExpressionParserRuleCall_1_2_0; }
	}

	public class LogicalNotExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicalNotExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBitwiseXorExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cLogicalNotExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperandBitwiseXorExpressionParserRuleCall_1_2_0 = (RuleCall)cOperandAssignment_1_2.eContents().get(0);
		
		//LogicalNotExpression returns Expression:
		//
		//	BitwiseXorExpression | {LogicalNotExpression} "!" operand=BitwiseXorExpression;
		public ParserRule getRule() { return rule; }

		//BitwiseXorExpression | {LogicalNotExpression} "!" operand=BitwiseXorExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//BitwiseXorExpression
		public RuleCall getBitwiseXorExpressionParserRuleCall_0() { return cBitwiseXorExpressionParserRuleCall_0; }

		//{LogicalNotExpression} "!" operand=BitwiseXorExpression
		public Group getGroup_1() { return cGroup_1; }

		//{LogicalNotExpression}
		public Action getLogicalNotExpressionAction_1_0() { return cLogicalNotExpressionAction_1_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_1_1() { return cExclamationMarkKeyword_1_1; }

		//operand=BitwiseXorExpression
		public Assignment getOperandAssignment_1_2() { return cOperandAssignment_1_2; }

		//BitwiseXorExpression
		public RuleCall getOperandBitwiseXorExpressionParserRuleCall_1_2_0() { return cOperandBitwiseXorExpressionParserRuleCall_1_2_0; }
	}

	public class BitwiseXorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BitwiseXorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitwiseOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBitwiseXorExpressionLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandBitwiseOrExpressionParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//BitwiseXorExpression returns Expression:
		//
		//	BitwiseOrExpression ({BitwiseXorExpression.leftOperand=current} "^" rightOperand=BitwiseOrExpression)*;
		public ParserRule getRule() { return rule; }

		//BitwiseOrExpression ({BitwiseXorExpression.leftOperand=current} "^" rightOperand=BitwiseOrExpression)*
		public Group getGroup() { return cGroup; }

		//BitwiseOrExpression
		public RuleCall getBitwiseOrExpressionParserRuleCall_0() { return cBitwiseOrExpressionParserRuleCall_0; }

		//({BitwiseXorExpression.leftOperand=current} "^" rightOperand=BitwiseOrExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{BitwiseXorExpression.leftOperand=current}
		public Action getBitwiseXorExpressionLeftOperandAction_1_0() { return cBitwiseXorExpressionLeftOperandAction_1_0; }

		//"^"
		public Keyword getCircumflexAccentKeyword_1_1() { return cCircumflexAccentKeyword_1_1; }

		//rightOperand=BitwiseOrExpression
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//BitwiseOrExpression
		public RuleCall getRightOperandBitwiseOrExpressionParserRuleCall_1_2_0() { return cRightOperandBitwiseOrExpressionParserRuleCall_1_2_0; }
	}

	public class BitwiseOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BitwiseOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitwiseAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBitwiseOrExpressionLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandBitwiseAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//BitwiseOrExpression returns Expression:
		//
		//	BitwiseAndExpression ({BitwiseOrExpression.leftOperand=current} "|" rightOperand=BitwiseAndExpression)*;
		public ParserRule getRule() { return rule; }

		//BitwiseAndExpression ({BitwiseOrExpression.leftOperand=current} "|" rightOperand=BitwiseAndExpression)*
		public Group getGroup() { return cGroup; }

		//BitwiseAndExpression
		public RuleCall getBitwiseAndExpressionParserRuleCall_0() { return cBitwiseAndExpressionParserRuleCall_0; }

		//({BitwiseOrExpression.leftOperand=current} "|" rightOperand=BitwiseAndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{BitwiseOrExpression.leftOperand=current}
		public Action getBitwiseOrExpressionLeftOperandAction_1_0() { return cBitwiseOrExpressionLeftOperandAction_1_0; }

		//"|"
		public Keyword getVerticalLineKeyword_1_1() { return cVerticalLineKeyword_1_1; }

		//rightOperand=BitwiseAndExpression
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//BitwiseAndExpression
		public RuleCall getRightOperandBitwiseAndExpressionParserRuleCall_1_2_0() { return cRightOperandBitwiseAndExpressionParserRuleCall_1_2_0; }
	}

	public class BitwiseAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BitwiseAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalRelationExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBitwiseAndExpressionLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandLogicalRelationExpressionParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//BitwiseAndExpression returns Expression:
		//
		//	LogicalRelationExpression ({BitwiseAndExpression.leftOperand=current} "&" rightOperand=LogicalRelationExpression)*;
		public ParserRule getRule() { return rule; }

		//LogicalRelationExpression ({BitwiseAndExpression.leftOperand=current} "&" rightOperand=LogicalRelationExpression)*
		public Group getGroup() { return cGroup; }

		//LogicalRelationExpression
		public RuleCall getLogicalRelationExpressionParserRuleCall_0() { return cLogicalRelationExpressionParserRuleCall_0; }

		//({BitwiseAndExpression.leftOperand=current} "&" rightOperand=LogicalRelationExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{BitwiseAndExpression.leftOperand=current}
		public Action getBitwiseAndExpressionLeftOperandAction_1_0() { return cBitwiseAndExpressionLeftOperandAction_1_0; }

		//"&"
		public Keyword getAmpersandKeyword_1_1() { return cAmpersandKeyword_1_1; }

		//rightOperand=LogicalRelationExpression
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//LogicalRelationExpression
		public RuleCall getRightOperandLogicalRelationExpressionParserRuleCall_1_2_0() { return cRightOperandLogicalRelationExpressionParserRuleCall_1_2_0; }
	}

	public class LogicalRelationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicalRelationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cShiftExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicalRelationExpressionLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorRelationalOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandShiftExpressionParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//LogicalRelationExpression returns Expression:
		//
		//	ShiftExpression ({LogicalRelationExpression.leftOperand=current} operator=RelationalOperator
		//
		//	rightOperand=ShiftExpression)*;
		public ParserRule getRule() { return rule; }

		//ShiftExpression ({LogicalRelationExpression.leftOperand=current} operator=RelationalOperator
		//
		//rightOperand=ShiftExpression)*
		public Group getGroup() { return cGroup; }

		//ShiftExpression
		public RuleCall getShiftExpressionParserRuleCall_0() { return cShiftExpressionParserRuleCall_0; }

		//({LogicalRelationExpression.leftOperand=current} operator=RelationalOperator rightOperand=ShiftExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{LogicalRelationExpression.leftOperand=current}
		public Action getLogicalRelationExpressionLeftOperandAction_1_0() { return cLogicalRelationExpressionLeftOperandAction_1_0; }

		//operator=RelationalOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//RelationalOperator
		public RuleCall getOperatorRelationalOperatorEnumRuleCall_1_1_0() { return cOperatorRelationalOperatorEnumRuleCall_1_1_0; }

		//rightOperand=ShiftExpression
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//ShiftExpression
		public RuleCall getRightOperandShiftExpressionParserRuleCall_1_2_0() { return cRightOperandShiftExpressionParserRuleCall_1_2_0; }
	}

	public class ShiftExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShiftExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNumericalAddSubtractExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cShiftExpressionLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorShiftOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandNumericalAddSubtractExpressionParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//ShiftExpression returns Expression:
		//
		//	NumericalAddSubtractExpression ({ShiftExpression.leftOperand=current} operator=ShiftOperator
		//
		//	rightOperand=NumericalAddSubtractExpression)*;
		public ParserRule getRule() { return rule; }

		//NumericalAddSubtractExpression ({ShiftExpression.leftOperand=current} operator=ShiftOperator
		//
		//rightOperand=NumericalAddSubtractExpression)*
		public Group getGroup() { return cGroup; }

		//NumericalAddSubtractExpression
		public RuleCall getNumericalAddSubtractExpressionParserRuleCall_0() { return cNumericalAddSubtractExpressionParserRuleCall_0; }

		//({ShiftExpression.leftOperand=current} operator=ShiftOperator rightOperand=NumericalAddSubtractExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{ShiftExpression.leftOperand=current}
		public Action getShiftExpressionLeftOperandAction_1_0() { return cShiftExpressionLeftOperandAction_1_0; }

		//operator=ShiftOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//ShiftOperator
		public RuleCall getOperatorShiftOperatorEnumRuleCall_1_1_0() { return cOperatorShiftOperatorEnumRuleCall_1_1_0; }

		//rightOperand=NumericalAddSubtractExpression
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//NumericalAddSubtractExpression
		public RuleCall getRightOperandNumericalAddSubtractExpressionParserRuleCall_1_2_0() { return cRightOperandNumericalAddSubtractExpressionParserRuleCall_1_2_0; }
	}

	public class NumericalAddSubtractExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumericalAddSubtractExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNumericalMultiplyDivideExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cNumericalAddSubtractExpressionLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorAdditiveOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandNumericalMultiplyDivideExpressionParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//NumericalAddSubtractExpression returns Expression:
		//
		//	NumericalMultiplyDivideExpression ({NumericalAddSubtractExpression.leftOperand=current} operator=AdditiveOperator
		//
		//	rightOperand=NumericalMultiplyDivideExpression)*;
		public ParserRule getRule() { return rule; }

		//NumericalMultiplyDivideExpression ({NumericalAddSubtractExpression.leftOperand=current} operator=AdditiveOperator
		//
		//rightOperand=NumericalMultiplyDivideExpression)*
		public Group getGroup() { return cGroup; }

		//NumericalMultiplyDivideExpression
		public RuleCall getNumericalMultiplyDivideExpressionParserRuleCall_0() { return cNumericalMultiplyDivideExpressionParserRuleCall_0; }

		//({NumericalAddSubtractExpression.leftOperand=current} operator=AdditiveOperator
		//
		//rightOperand=NumericalMultiplyDivideExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{NumericalAddSubtractExpression.leftOperand=current}
		public Action getNumericalAddSubtractExpressionLeftOperandAction_1_0() { return cNumericalAddSubtractExpressionLeftOperandAction_1_0; }

		//operator=AdditiveOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//AdditiveOperator
		public RuleCall getOperatorAdditiveOperatorEnumRuleCall_1_1_0() { return cOperatorAdditiveOperatorEnumRuleCall_1_1_0; }

		//rightOperand=NumericalMultiplyDivideExpression
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//NumericalMultiplyDivideExpression
		public RuleCall getRightOperandNumericalMultiplyDivideExpressionParserRuleCall_1_2_0() { return cRightOperandNumericalMultiplyDivideExpressionParserRuleCall_1_2_0; }
	}

	public class NumericalMultiplyDivideExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumericalMultiplyDivideExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNumericalUnaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cNumericalMultiplyDivideExpressionLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorMultiplicativeOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandNumericalUnaryExpressionParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//NumericalMultiplyDivideExpression returns Expression:
		//
		//	NumericalUnaryExpression ({NumericalMultiplyDivideExpression.leftOperand=current} operator=MultiplicativeOperator
		//
		//	rightOperand=NumericalUnaryExpression)*;
		public ParserRule getRule() { return rule; }

		//NumericalUnaryExpression ({NumericalMultiplyDivideExpression.leftOperand=current} operator=MultiplicativeOperator
		//
		//rightOperand=NumericalUnaryExpression)*
		public Group getGroup() { return cGroup; }

		//NumericalUnaryExpression
		public RuleCall getNumericalUnaryExpressionParserRuleCall_0() { return cNumericalUnaryExpressionParserRuleCall_0; }

		//({NumericalMultiplyDivideExpression.leftOperand=current} operator=MultiplicativeOperator
		//
		//rightOperand=NumericalUnaryExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{NumericalMultiplyDivideExpression.leftOperand=current}
		public Action getNumericalMultiplyDivideExpressionLeftOperandAction_1_0() { return cNumericalMultiplyDivideExpressionLeftOperandAction_1_0; }

		//operator=MultiplicativeOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//MultiplicativeOperator
		public RuleCall getOperatorMultiplicativeOperatorEnumRuleCall_1_1_0() { return cOperatorMultiplicativeOperatorEnumRuleCall_1_1_0; }

		//rightOperand=NumericalUnaryExpression
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//NumericalUnaryExpression
		public RuleCall getRightOperandNumericalUnaryExpressionParserRuleCall_1_2_0() { return cRightOperandNumericalUnaryExpressionParserRuleCall_1_2_0; }
	}

	public class NumericalUnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumericalUnaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNumericalUnaryExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorUnaryOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperandPrimaryExpressionParserRuleCall_1_2_0 = (RuleCall)cOperandAssignment_1_2.eContents().get(0);
		
		//NumericalUnaryExpression returns Expression:
		//
		//	PrimaryExpression | {NumericalUnaryExpression} operator=UnaryOperator operand=PrimaryExpression;
		public ParserRule getRule() { return rule; }

		//PrimaryExpression | {NumericalUnaryExpression} operator=UnaryOperator operand=PrimaryExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }

		//{NumericalUnaryExpression} operator=UnaryOperator operand=PrimaryExpression
		public Group getGroup_1() { return cGroup_1; }

		//{NumericalUnaryExpression}
		public Action getNumericalUnaryExpressionAction_1_0() { return cNumericalUnaryExpressionAction_1_0; }

		//operator=UnaryOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//UnaryOperator
		public RuleCall getOperatorUnaryOperatorEnumRuleCall_1_1_0() { return cOperatorUnaryOperatorEnumRuleCall_1_1_0; }

		//operand=PrimaryExpression
		public Assignment getOperandAssignment_1_2() { return cOperandAssignment_1_2; }

		//PrimaryExpression
		public RuleCall getOperandPrimaryExpressionParserRuleCall_1_2_0() { return cOperandPrimaryExpressionParserRuleCall_1_2_0; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveValueExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFeatureCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cActiveStateReferenceExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEventValueReferenceExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cParenthesizedExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		////	| '(' Expression ')'
		// PrimaryExpression returns Expression:
		//
		//	PrimitiveValueExpression | FeatureCall | ActiveStateReferenceExpression | EventValueReferenceExpression |
		//
		//	ParenthesizedExpression;
		public ParserRule getRule() { return rule; }

		//PrimitiveValueExpression | FeatureCall | ActiveStateReferenceExpression | EventValueReferenceExpression |
		//
		//ParenthesizedExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//PrimitiveValueExpression
		public RuleCall getPrimitiveValueExpressionParserRuleCall_0() { return cPrimitiveValueExpressionParserRuleCall_0; }

		//FeatureCall
		public RuleCall getFeatureCallParserRuleCall_1() { return cFeatureCallParserRuleCall_1; }

		//ActiveStateReferenceExpression
		public RuleCall getActiveStateReferenceExpressionParserRuleCall_2() { return cActiveStateReferenceExpressionParserRuleCall_2; }

		//EventValueReferenceExpression
		public RuleCall getEventValueReferenceExpressionParserRuleCall_3() { return cEventValueReferenceExpressionParserRuleCall_3; }

		//ParenthesizedExpression
		public RuleCall getParenthesizedExpressionParserRuleCall_4() { return cParenthesizedExpressionParserRuleCall_4; }
	}

	public class PrimitiveValueExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveValueExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimitiveValueExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueLiteralParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//PrimitiveValueExpression returns Expression:
		//
		//	{PrimitiveValueExpression} value=Literal;
		public ParserRule getRule() { return rule; }

		//{PrimitiveValueExpression} value=Literal
		public Group getGroup() { return cGroup; }

		//{PrimitiveValueExpression}
		public Action getPrimitiveValueExpressionAction_0() { return cPrimitiveValueExpressionAction_0; }

		//value=Literal
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//Literal
		public RuleCall getValueLiteralParserRuleCall_1_0() { return cValueLiteralParserRuleCall_1_0; }
	}

	public class FeatureCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cElementReferenceExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cFeatureCallOwnerAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cFeatureAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cFeatureEObjectCrossReference_1_2_0 = (CrossReference)cFeatureAssignment_1_2.eContents().get(0);
		private final RuleCall cFeatureEObjectIDTerminalRuleCall_1_2_0_1 = (RuleCall)cFeatureEObjectCrossReference_1_2_0.eContents().get(1);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Assignment cOperationCallAssignment_1_3_0 = (Assignment)cGroup_1_3.eContents().get(0);
		private final Keyword cOperationCallLeftParenthesisKeyword_1_3_0_0 = (Keyword)cOperationCallAssignment_1_3_0.eContents().get(0);
		private final Group cGroup_1_3_1 = (Group)cGroup_1_3.eContents().get(1);
		private final Assignment cArgsAssignment_1_3_1_0 = (Assignment)cGroup_1_3_1.eContents().get(0);
		private final RuleCall cArgsExpressionParserRuleCall_1_3_1_0_0 = (RuleCall)cArgsAssignment_1_3_1_0.eContents().get(0);
		private final Group cGroup_1_3_1_1 = (Group)cGroup_1_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_3_1_1_0 = (Keyword)cGroup_1_3_1_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_3_1_1_1 = (Assignment)cGroup_1_3_1_1.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_1_3_1_1_1_0 = (RuleCall)cArgsAssignment_1_3_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3_2 = (Keyword)cGroup_1_3.eContents().get(2);
		
		//FeatureCall returns Expression:
		//
		//	ElementReferenceExpression ({FeatureCall.owner=current} "." feature=[ecore::EObject] (=> operationCall?="("
		//
		//	(args+=Expression ("," args+=Expression)*)? ")")?)*;
		public ParserRule getRule() { return rule; }

		//ElementReferenceExpression ({FeatureCall.owner=current} "." feature=[ecore::EObject] (=> operationCall?="("
		//
		//(args+=Expression ("," args+=Expression)*)? ")")?)*
		public Group getGroup() { return cGroup; }

		//ElementReferenceExpression
		public RuleCall getElementReferenceExpressionParserRuleCall_0() { return cElementReferenceExpressionParserRuleCall_0; }

		//({FeatureCall.owner=current} "." feature=[ecore::EObject] (=> operationCall?="(" (args+=Expression (","
		//
		//args+=Expression)*)? ")")?)*
		public Group getGroup_1() { return cGroup_1; }

		//{FeatureCall.owner=current}
		public Action getFeatureCallOwnerAction_1_0() { return cFeatureCallOwnerAction_1_0; }

		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }

		//feature=[ecore::EObject]
		public Assignment getFeatureAssignment_1_2() { return cFeatureAssignment_1_2; }

		//[ecore::EObject]
		public CrossReference getFeatureEObjectCrossReference_1_2_0() { return cFeatureEObjectCrossReference_1_2_0; }

		//ID
		public RuleCall getFeatureEObjectIDTerminalRuleCall_1_2_0_1() { return cFeatureEObjectIDTerminalRuleCall_1_2_0_1; }

		//(=> operationCall?="(" (args+=Expression ("," args+=Expression)*)? ")")?
		public Group getGroup_1_3() { return cGroup_1_3; }

		//=> operationCall?="("
		public Assignment getOperationCallAssignment_1_3_0() { return cOperationCallAssignment_1_3_0; }

		//"("
		public Keyword getOperationCallLeftParenthesisKeyword_1_3_0_0() { return cOperationCallLeftParenthesisKeyword_1_3_0_0; }

		//(args+=Expression ("," args+=Expression)*)?
		public Group getGroup_1_3_1() { return cGroup_1_3_1; }

		//args+=Expression
		public Assignment getArgsAssignment_1_3_1_0() { return cArgsAssignment_1_3_1_0; }

		//Expression
		public RuleCall getArgsExpressionParserRuleCall_1_3_1_0_0() { return cArgsExpressionParserRuleCall_1_3_1_0_0; }

		//("," args+=Expression)*
		public Group getGroup_1_3_1_1() { return cGroup_1_3_1_1; }

		//","
		public Keyword getCommaKeyword_1_3_1_1_0() { return cCommaKeyword_1_3_1_1_0; }

		//args+=Expression
		public Assignment getArgsAssignment_1_3_1_1_1() { return cArgsAssignment_1_3_1_1_1; }

		//Expression
		public RuleCall getArgsExpressionParserRuleCall_1_3_1_1_1_0() { return cArgsExpressionParserRuleCall_1_3_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3_2() { return cRightParenthesisKeyword_1_3_2; }
	}

	public class ElementReferenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElementReferenceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cElementReferenceExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReferenceEObjectCrossReference_1_0 = (CrossReference)cReferenceAssignment_1.eContents().get(0);
		private final RuleCall cReferenceEObjectIDTerminalRuleCall_1_0_1 = (RuleCall)cReferenceEObjectCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cOperationCallAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cOperationCallLeftParenthesisKeyword_2_0_0 = (Keyword)cOperationCallAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cArgsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cArgsExpressionParserRuleCall_2_1_0_0 = (RuleCall)cArgsAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cArgsAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_2_1_1_1_0 = (RuleCall)cArgsAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//ElementReferenceExpression returns Expression:
		//
		//	{ElementReferenceExpression} reference=[ecore::EObject] (=> operationCall?="(" (args+=Expression (","
		//
		//	args+=Expression)*)? ")")?;
		public ParserRule getRule() { return rule; }

		//{ElementReferenceExpression} reference=[ecore::EObject] (=> operationCall?="(" (args+=Expression (","
		//
		//args+=Expression)*)? ")")?
		public Group getGroup() { return cGroup; }

		//{ElementReferenceExpression}
		public Action getElementReferenceExpressionAction_0() { return cElementReferenceExpressionAction_0; }

		//reference=[ecore::EObject]
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }

		//[ecore::EObject]
		public CrossReference getReferenceEObjectCrossReference_1_0() { return cReferenceEObjectCrossReference_1_0; }

		//ID
		public RuleCall getReferenceEObjectIDTerminalRuleCall_1_0_1() { return cReferenceEObjectIDTerminalRuleCall_1_0_1; }

		//(=> operationCall?="(" (args+=Expression ("," args+=Expression)*)? ")")?
		public Group getGroup_2() { return cGroup_2; }

		//=> operationCall?="("
		public Assignment getOperationCallAssignment_2_0() { return cOperationCallAssignment_2_0; }

		//"("
		public Keyword getOperationCallLeftParenthesisKeyword_2_0_0() { return cOperationCallLeftParenthesisKeyword_2_0_0; }

		//(args+=Expression ("," args+=Expression)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//args+=Expression
		public Assignment getArgsAssignment_2_1_0() { return cArgsAssignment_2_1_0; }

		//Expression
		public RuleCall getArgsExpressionParserRuleCall_2_1_0_0() { return cArgsExpressionParserRuleCall_2_1_0_0; }

		//("," args+=Expression)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//","
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }

		//args+=Expression
		public Assignment getArgsAssignment_2_1_1_1() { return cArgsAssignment_2_1_1_1; }

		//Expression
		public RuleCall getArgsExpressionParserRuleCall_2_1_1_1_0() { return cArgsExpressionParserRuleCall_2_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class EventValueReferenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventValueReferenceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEventValueReferenceExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cValueofKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueFeatureCallParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EventValueReferenceExpression returns Expression:
		//
		//	{EventValueReferenceExpression} "valueof" "(" value=FeatureCall ")";
		public ParserRule getRule() { return rule; }

		//{EventValueReferenceExpression} "valueof" "(" value=FeatureCall ")"
		public Group getGroup() { return cGroup; }

		//{EventValueReferenceExpression}
		public Action getEventValueReferenceExpressionAction_0() { return cEventValueReferenceExpressionAction_0; }

		//"valueof"
		public Keyword getValueofKeyword_1() { return cValueofKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//value=FeatureCall
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//FeatureCall
		public RuleCall getValueFeatureCallParserRuleCall_3_0() { return cValueFeatureCallParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ActiveStateReferenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActiveStateReferenceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActiveStateReferenceExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cActiveKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cValueStateCrossReference_3_0 = (CrossReference)cValueAssignment_3.eContents().get(0);
		private final RuleCall cValueStateFQNParserRuleCall_3_0_1 = (RuleCall)cValueStateCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ActiveStateReferenceExpression returns Expression:
		//
		//	{ActiveStateReferenceExpression} "active" "(" value=[sgraph::State|FQN] ")";
		public ParserRule getRule() { return rule; }

		//{ActiveStateReferenceExpression} "active" "(" value=[sgraph::State|FQN] ")"
		public Group getGroup() { return cGroup; }

		//{ActiveStateReferenceExpression}
		public Action getActiveStateReferenceExpressionAction_0() { return cActiveStateReferenceExpressionAction_0; }

		//"active"
		public Keyword getActiveKeyword_1() { return cActiveKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//value=[sgraph::State|FQN]
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//[sgraph::State|FQN]
		public CrossReference getValueStateCrossReference_3_0() { return cValueStateCrossReference_3_0; }

		//FQN
		public RuleCall getValueStateFQNParserRuleCall_3_0_1() { return cValueStateFQNParserRuleCall_3_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ParenthesizedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParenthesizedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParenthesizedExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ParenthesizedExpression returns Expression:
		//
		//	{ParenthesizedExpression} "(" expression=Expression ")";
		public ParserRule getRule() { return rule; }

		//{ParenthesizedExpression} "(" expression=Expression ")"
		public Group getGroup() { return cGroup; }

		//{ParenthesizedExpression}
		public Action getParenthesizedExpressionAction_0() { return cParenthesizedExpressionAction_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBoolLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHexLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRealLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cStringLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Literal:
		//
		//	BoolLiteral | IntLiteral | HexLiteral | RealLiteral | StringLiteral;
		public ParserRule getRule() { return rule; }

		//BoolLiteral | IntLiteral | HexLiteral | RealLiteral | StringLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//BoolLiteral
		public RuleCall getBoolLiteralParserRuleCall_0() { return cBoolLiteralParserRuleCall_0; }

		//IntLiteral
		public RuleCall getIntLiteralParserRuleCall_1() { return cIntLiteralParserRuleCall_1; }

		//HexLiteral
		public RuleCall getHexLiteralParserRuleCall_2() { return cHexLiteralParserRuleCall_2; }

		//RealLiteral
		public RuleCall getRealLiteralParserRuleCall_3() { return cRealLiteralParserRuleCall_3; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_4() { return cStringLiteralParserRuleCall_4; }
	}

	public class BoolLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BoolLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBoolLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueBOOLTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//BoolLiteral:
		//
		//	{BoolLiteral} value=BOOL;
		public ParserRule getRule() { return rule; }

		//{BoolLiteral} value=BOOL
		public Group getGroup() { return cGroup; }

		//{BoolLiteral}
		public Action getBoolLiteralAction_0() { return cBoolLiteralAction_0; }

		//value=BOOL
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//BOOL
		public RuleCall getValueBOOLTerminalRuleCall_1_0() { return cValueBOOLTerminalRuleCall_1_0; }
	}

	public class IntLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//IntLiteral:
		//
		//	{IntLiteral} value=INT;
		public ParserRule getRule() { return rule; }

		//{IntLiteral} value=INT
		public Group getGroup() { return cGroup; }

		//{IntLiteral}
		public Action getIntLiteralAction_0() { return cIntLiteralAction_0; }

		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}

	public class RealLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RealLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRealLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueFLOATTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//RealLiteral:
		//
		//	{RealLiteral} value=FLOAT;
		public ParserRule getRule() { return rule; }

		//{RealLiteral} value=FLOAT
		public Group getGroup() { return cGroup; }

		//{RealLiteral}
		public Action getRealLiteralAction_0() { return cRealLiteralAction_0; }

		//value=FLOAT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//FLOAT
		public RuleCall getValueFLOATTerminalRuleCall_1_0() { return cValueFLOATTerminalRuleCall_1_0; }
	}

	public class HexLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HexLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHexLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueHEXTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//HexLiteral:
		//
		//	{HexLiteral} value=HEX;
		public ParserRule getRule() { return rule; }

		//{HexLiteral} value=HEX
		public Group getGroup() { return cGroup; }

		//{HexLiteral}
		public Action getHexLiteralAction_0() { return cHexLiteralAction_0; }

		//value=HEX
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//HEX
		public RuleCall getValueHEXTerminalRuleCall_1_0() { return cValueHEXTerminalRuleCall_1_0; }
	}

	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//StringLiteral:
		//
		//	{StringLiteral} value=STRING;
		public ParserRule getRule() { return rule; }

		//{StringLiteral} value=STRING
		public Group getGroup() { return cGroup; }

		//{StringLiteral}
		public Action getStringLiteralAction_0() { return cStringLiteralAction_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}
	
	
	public class DirectionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Direction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLOCALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLOCALLocalKeyword_0_0 = (Keyword)cLOCALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cINEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cINInKeyword_1_0 = (Keyword)cINEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cOUTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cOUTOutKeyword_2_0 = (Keyword)cOUTEnumLiteralDeclaration_2.eContents().get(0);
		
		////EventDerivation:
		// //	 (':' value=Expression)?;
		// enum Direction:
		//
		//	LOCAL="local" | IN="in" | OUT="out";
		public EnumRule getRule() { return rule; }

		//LOCAL="local" | IN="in" | OUT="out"
		public Alternatives getAlternatives() { return cAlternatives; }

		//LOCAL="local"
		public EnumLiteralDeclaration getLOCALEnumLiteralDeclaration_0() { return cLOCALEnumLiteralDeclaration_0; }

		//"local"
		public Keyword getLOCALLocalKeyword_0_0() { return cLOCALLocalKeyword_0_0; }

		//IN="in"
		public EnumLiteralDeclaration getINEnumLiteralDeclaration_1() { return cINEnumLiteralDeclaration_1; }

		//"in"
		public Keyword getINInKeyword_1_0() { return cINInKeyword_1_0; }

		//OUT="out"
		public EnumLiteralDeclaration getOUTEnumLiteralDeclaration_2() { return cOUTEnumLiteralDeclaration_2; }

		//"out"
		public Keyword getOUTOutKeyword_2_0() { return cOUTOutKeyword_2_0; }
	}

	public class TimeEventTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "TimeEventType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAfterEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAfterAfterKeyword_0_0 = (Keyword)cAfterEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cEveryEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cEveryEveryKeyword_1_0 = (Keyword)cEveryEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum TimeEventType:
		//
		//	after | every;
		public EnumRule getRule() { return rule; }

		//after | every
		public Alternatives getAlternatives() { return cAlternatives; }

		//after
		public EnumLiteralDeclaration getAfterEnumLiteralDeclaration_0() { return cAfterEnumLiteralDeclaration_0; }

		//"after"
		public Keyword getAfterAfterKeyword_0_0() { return cAfterAfterKeyword_0_0; }

		//every
		public EnumLiteralDeclaration getEveryEnumLiteralDeclaration_1() { return cEveryEnumLiteralDeclaration_1; }

		//"every"
		public Keyword getEveryEveryKeyword_1_0() { return cEveryEveryKeyword_1_0; }
	}

	public class AssignmentOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "AssignmentOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAssignEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAssignEqualsSignKeyword_0_0 = (Keyword)cAssignEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMultAssignEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMultAssignAsteriskEqualsSignKeyword_1_0 = (Keyword)cMultAssignEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDivAssignEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDivAssignSolidusEqualsSignKeyword_2_0 = (Keyword)cDivAssignEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cModAssignEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cModAssignPercentSignEqualsSignKeyword_3_0 = (Keyword)cModAssignEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cAddAssignEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cAddAssignPlusSignEqualsSignKeyword_4_0 = (Keyword)cAddAssignEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cSubAssignEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cSubAssignHyphenMinusEqualsSignKeyword_5_0 = (Keyword)cSubAssignEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cLeftShiftAssignEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cLeftShiftAssignLessThanSignLessThanSignEqualsSignKeyword_6_0 = (Keyword)cLeftShiftAssignEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cRightShiftAssignEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cRightShiftAssignGreaterThanSignGreaterThanSignEqualsSignKeyword_7_0 = (Keyword)cRightShiftAssignEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cAndAssignEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cAndAssignAmpersandEqualsSignKeyword_8_0 = (Keyword)cAndAssignEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cXorAssignEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cXorAssignCircumflexAccentEqualsSignKeyword_9_0 = (Keyword)cXorAssignEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cOrAssignEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cOrAssignVerticalLineEqualsSignKeyword_10_0 = (Keyword)cOrAssignEnumLiteralDeclaration_10.eContents().get(0);
		
		//enum AssignmentOperator:
		//
		//	assign="=" | multAssign="*=" | divAssign="/=" | modAssign="%=" | addAssign="+=" | subAssign="-=" |
		//
		//	leftShiftAssign="<<=" | rightShiftAssign=">>=" | andAssign="&=" | xorAssign="^=" | orAssign="|=";
		public EnumRule getRule() { return rule; }

		//assign="=" | multAssign="*=" | divAssign="/=" | modAssign="%=" | addAssign="+=" | subAssign="-=" | leftShiftAssign="<<="
		//
		//| rightShiftAssign=">>=" | andAssign="&=" | xorAssign="^=" | orAssign="|="
		public Alternatives getAlternatives() { return cAlternatives; }

		//assign="="
		public EnumLiteralDeclaration getAssignEnumLiteralDeclaration_0() { return cAssignEnumLiteralDeclaration_0; }

		//"="
		public Keyword getAssignEqualsSignKeyword_0_0() { return cAssignEqualsSignKeyword_0_0; }

		//multAssign="*="
		public EnumLiteralDeclaration getMultAssignEnumLiteralDeclaration_1() { return cMultAssignEnumLiteralDeclaration_1; }

		//"*="
		public Keyword getMultAssignAsteriskEqualsSignKeyword_1_0() { return cMultAssignAsteriskEqualsSignKeyword_1_0; }

		//divAssign="/="
		public EnumLiteralDeclaration getDivAssignEnumLiteralDeclaration_2() { return cDivAssignEnumLiteralDeclaration_2; }

		//"/="
		public Keyword getDivAssignSolidusEqualsSignKeyword_2_0() { return cDivAssignSolidusEqualsSignKeyword_2_0; }

		//modAssign="%="
		public EnumLiteralDeclaration getModAssignEnumLiteralDeclaration_3() { return cModAssignEnumLiteralDeclaration_3; }

		//"%="
		public Keyword getModAssignPercentSignEqualsSignKeyword_3_0() { return cModAssignPercentSignEqualsSignKeyword_3_0; }

		//addAssign="+="
		public EnumLiteralDeclaration getAddAssignEnumLiteralDeclaration_4() { return cAddAssignEnumLiteralDeclaration_4; }

		//"+="
		public Keyword getAddAssignPlusSignEqualsSignKeyword_4_0() { return cAddAssignPlusSignEqualsSignKeyword_4_0; }

		//subAssign="-="
		public EnumLiteralDeclaration getSubAssignEnumLiteralDeclaration_5() { return cSubAssignEnumLiteralDeclaration_5; }

		//"-="
		public Keyword getSubAssignHyphenMinusEqualsSignKeyword_5_0() { return cSubAssignHyphenMinusEqualsSignKeyword_5_0; }

		//leftShiftAssign="<<="
		public EnumLiteralDeclaration getLeftShiftAssignEnumLiteralDeclaration_6() { return cLeftShiftAssignEnumLiteralDeclaration_6; }

		//"<<="
		public Keyword getLeftShiftAssignLessThanSignLessThanSignEqualsSignKeyword_6_0() { return cLeftShiftAssignLessThanSignLessThanSignEqualsSignKeyword_6_0; }

		//rightShiftAssign=">>="
		public EnumLiteralDeclaration getRightShiftAssignEnumLiteralDeclaration_7() { return cRightShiftAssignEnumLiteralDeclaration_7; }

		//">>="
		public Keyword getRightShiftAssignGreaterThanSignGreaterThanSignEqualsSignKeyword_7_0() { return cRightShiftAssignGreaterThanSignGreaterThanSignEqualsSignKeyword_7_0; }

		//andAssign="&="
		public EnumLiteralDeclaration getAndAssignEnumLiteralDeclaration_8() { return cAndAssignEnumLiteralDeclaration_8; }

		//"&="
		public Keyword getAndAssignAmpersandEqualsSignKeyword_8_0() { return cAndAssignAmpersandEqualsSignKeyword_8_0; }

		//xorAssign="^="
		public EnumLiteralDeclaration getXorAssignEnumLiteralDeclaration_9() { return cXorAssignEnumLiteralDeclaration_9; }

		//"^="
		public Keyword getXorAssignCircumflexAccentEqualsSignKeyword_9_0() { return cXorAssignCircumflexAccentEqualsSignKeyword_9_0; }

		//orAssign="|="
		public EnumLiteralDeclaration getOrAssignEnumLiteralDeclaration_10() { return cOrAssignEnumLiteralDeclaration_10; }

		//"|="
		public Keyword getOrAssignVerticalLineEqualsSignKeyword_10_0() { return cOrAssignVerticalLineEqualsSignKeyword_10_0; }
	}

	public class ShiftOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ShiftOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLeftEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLeftLessThanSignLessThanSignKeyword_0_0 = (Keyword)cLeftEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRightEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRightGreaterThanSignGreaterThanSignKeyword_1_0 = (Keyword)cRightEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ShiftOperator:
		//
		//	left="<<" | right=">>";
		public EnumRule getRule() { return rule; }

		//left="<<" | right=">>"
		public Alternatives getAlternatives() { return cAlternatives; }

		//left="<<"
		public EnumLiteralDeclaration getLeftEnumLiteralDeclaration_0() { return cLeftEnumLiteralDeclaration_0; }

		//"<<"
		public Keyword getLeftLessThanSignLessThanSignKeyword_0_0() { return cLeftLessThanSignLessThanSignKeyword_0_0; }

		//right=">>"
		public EnumLiteralDeclaration getRightEnumLiteralDeclaration_1() { return cRightEnumLiteralDeclaration_1; }

		//">>"
		public Keyword getRightGreaterThanSignGreaterThanSignKeyword_1_0() { return cRightGreaterThanSignGreaterThanSignKeyword_1_0; }
	}

	public class AdditiveOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "AdditiveOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPlusEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPlusPlusSignKeyword_0_0 = (Keyword)cPlusEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMinusEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMinusHyphenMinusKeyword_1_0 = (Keyword)cMinusEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum AdditiveOperator:
		//
		//	plus="+" | minus="-";
		public EnumRule getRule() { return rule; }

		//plus="+" | minus="-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//plus="+"
		public EnumLiteralDeclaration getPlusEnumLiteralDeclaration_0() { return cPlusEnumLiteralDeclaration_0; }

		//"+"
		public Keyword getPlusPlusSignKeyword_0_0() { return cPlusPlusSignKeyword_0_0; }

		//minus="-"
		public EnumLiteralDeclaration getMinusEnumLiteralDeclaration_1() { return cMinusEnumLiteralDeclaration_1; }

		//"-"
		public Keyword getMinusHyphenMinusKeyword_1_0() { return cMinusHyphenMinusKeyword_1_0; }
	}

	public class MultiplicativeOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicativeOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMulEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMulAsteriskKeyword_0_0 = (Keyword)cMulEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDivEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDivSolidusKeyword_1_0 = (Keyword)cDivEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cModEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cModPercentSignKeyword_2_0 = (Keyword)cModEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum MultiplicativeOperator:
		//
		//	mul="*" | div="/" | mod="%";
		public EnumRule getRule() { return rule; }

		//mul="*" | div="/" | mod="%"
		public Alternatives getAlternatives() { return cAlternatives; }

		//mul="*"
		public EnumLiteralDeclaration getMulEnumLiteralDeclaration_0() { return cMulEnumLiteralDeclaration_0; }

		//"*"
		public Keyword getMulAsteriskKeyword_0_0() { return cMulAsteriskKeyword_0_0; }

		//div="/"
		public EnumLiteralDeclaration getDivEnumLiteralDeclaration_1() { return cDivEnumLiteralDeclaration_1; }

		//"/"
		public Keyword getDivSolidusKeyword_1_0() { return cDivSolidusKeyword_1_0; }

		//mod="%"
		public EnumLiteralDeclaration getModEnumLiteralDeclaration_2() { return cModEnumLiteralDeclaration_2; }

		//"%"
		public Keyword getModPercentSignKeyword_2_0() { return cModPercentSignKeyword_2_0; }
	}

	public class UnaryOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPositiveEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPositivePlusSignKeyword_0_0 = (Keyword)cPositiveEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNegativeEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNegativeHyphenMinusKeyword_1_0 = (Keyword)cNegativeEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cComplementEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cComplementTildeKeyword_2_0 = (Keyword)cComplementEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum UnaryOperator:
		//
		//	positive="+" | negative="-" | complement="~";
		public EnumRule getRule() { return rule; }

		//positive="+" | negative="-" | complement="~"
		public Alternatives getAlternatives() { return cAlternatives; }

		//positive="+"
		public EnumLiteralDeclaration getPositiveEnumLiteralDeclaration_0() { return cPositiveEnumLiteralDeclaration_0; }

		//"+"
		public Keyword getPositivePlusSignKeyword_0_0() { return cPositivePlusSignKeyword_0_0; }

		//negative="-"
		public EnumLiteralDeclaration getNegativeEnumLiteralDeclaration_1() { return cNegativeEnumLiteralDeclaration_1; }

		//"-"
		public Keyword getNegativeHyphenMinusKeyword_1_0() { return cNegativeHyphenMinusKeyword_1_0; }

		//complement="~"
		public EnumLiteralDeclaration getComplementEnumLiteralDeclaration_2() { return cComplementEnumLiteralDeclaration_2; }

		//"~"
		public Keyword getComplementTildeKeyword_2_0() { return cComplementTildeKeyword_2_0; }
	}

	public class RelationalOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "RelationalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSmallerEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSmallerLessThanSignKeyword_0_0 = (Keyword)cSmallerEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSmallerEqualEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSmallerEqualLessThanSignEqualsSignKeyword_1_0 = (Keyword)cSmallerEqualEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGreaterGreaterThanSignKeyword_2_0 = (Keyword)cGreaterEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterEqualEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGreaterEqualGreaterThanSignEqualsSignKeyword_3_0 = (Keyword)cGreaterEqualEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cEqualsEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cEqualsEqualsSignEqualsSignKeyword_4_0 = (Keyword)cEqualsEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cNotEqualsEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cNotEqualsExclamationMarkEqualsSignKeyword_5_0 = (Keyword)cNotEqualsEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum RelationalOperator:
		//
		//	smaller="<" | smallerEqual="<=" | greater=">" | greaterEqual=">=" | equals="==" | notEquals="!=";
		public EnumRule getRule() { return rule; }

		//smaller="<" | smallerEqual="<=" | greater=">" | greaterEqual=">=" | equals="==" | notEquals="!="
		public Alternatives getAlternatives() { return cAlternatives; }

		//smaller="<"
		public EnumLiteralDeclaration getSmallerEnumLiteralDeclaration_0() { return cSmallerEnumLiteralDeclaration_0; }

		//"<"
		public Keyword getSmallerLessThanSignKeyword_0_0() { return cSmallerLessThanSignKeyword_0_0; }

		//smallerEqual="<="
		public EnumLiteralDeclaration getSmallerEqualEnumLiteralDeclaration_1() { return cSmallerEqualEnumLiteralDeclaration_1; }

		//"<="
		public Keyword getSmallerEqualLessThanSignEqualsSignKeyword_1_0() { return cSmallerEqualLessThanSignEqualsSignKeyword_1_0; }

		//greater=">"
		public EnumLiteralDeclaration getGreaterEnumLiteralDeclaration_2() { return cGreaterEnumLiteralDeclaration_2; }

		//">"
		public Keyword getGreaterGreaterThanSignKeyword_2_0() { return cGreaterGreaterThanSignKeyword_2_0; }

		//greaterEqual=">="
		public EnumLiteralDeclaration getGreaterEqualEnumLiteralDeclaration_3() { return cGreaterEqualEnumLiteralDeclaration_3; }

		//">="
		public Keyword getGreaterEqualGreaterThanSignEqualsSignKeyword_3_0() { return cGreaterEqualGreaterThanSignEqualsSignKeyword_3_0; }

		//equals="=="
		public EnumLiteralDeclaration getEqualsEnumLiteralDeclaration_4() { return cEqualsEnumLiteralDeclaration_4; }

		//"=="
		public Keyword getEqualsEqualsSignEqualsSignKeyword_4_0() { return cEqualsEqualsSignEqualsSignKeyword_4_0; }

		//notEquals="!="
		public EnumLiteralDeclaration getNotEqualsEnumLiteralDeclaration_5() { return cNotEqualsEnumLiteralDeclaration_5; }

		//"!="
		public Keyword getNotEqualsExclamationMarkEqualsSignKeyword_5_0() { return cNotEqualsExclamationMarkEqualsSignKeyword_5_0; }
	}

	public class TimeUnitElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "TimeUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSecondEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSecondSKeyword_0_0 = (Keyword)cSecondEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMillisecondEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMillisecondMsKeyword_1_0 = (Keyword)cMillisecondEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMicrosecondEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMicrosecondUsKeyword_2_0 = (Keyword)cMicrosecondEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cNanosecondEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cNanosecondNsKeyword_3_0 = (Keyword)cNanosecondEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum TimeUnit:
		//
		//	second="s" | millisecond="ms" | microsecond="us" | nanosecond="ns";
		public EnumRule getRule() { return rule; }

		//second="s" | millisecond="ms" | microsecond="us" | nanosecond="ns"
		public Alternatives getAlternatives() { return cAlternatives; }

		//second="s"
		public EnumLiteralDeclaration getSecondEnumLiteralDeclaration_0() { return cSecondEnumLiteralDeclaration_0; }

		//"s"
		public Keyword getSecondSKeyword_0_0() { return cSecondSKeyword_0_0; }

		//millisecond="ms"
		public EnumLiteralDeclaration getMillisecondEnumLiteralDeclaration_1() { return cMillisecondEnumLiteralDeclaration_1; }

		//"ms"
		public Keyword getMillisecondMsKeyword_1_0() { return cMillisecondMsKeyword_1_0; }

		//microsecond="us"
		public EnumLiteralDeclaration getMicrosecondEnumLiteralDeclaration_2() { return cMicrosecondEnumLiteralDeclaration_2; }

		//"us"
		public Keyword getMicrosecondUsKeyword_2_0() { return cMicrosecondUsKeyword_2_0; }

		//nanosecond="ns"
		public EnumLiteralDeclaration getNanosecondEnumLiteralDeclaration_3() { return cNanosecondEnumLiteralDeclaration_3; }

		//"ns"
		public Keyword getNanosecondNsKeyword_3_0() { return cNanosecondNsKeyword_3_0; }
	}
	
	private RootElements pRoot;
	private DefRootElements pDefRoot;
	private StatechartRootElements pStatechartRoot;
	private StateRootElements pStateRoot;
	private TransitionRootElements pTransitionRoot;
	private ScopedElementElements pScopedElement;
	private StatechartSpecificationElements pStatechartSpecification;
	private StateSpecificationElements pStateSpecification;
	private TransitionSpecificationElements pTransitionSpecification;
	private ScopeElements pScope;
	private StateScopeElements pStateScope;
	private StatechartScopeElements pStatechartScope;
	private NamedInterfaceScopeElements pNamedInterfaceScope;
	private InterfaceScopeElements pInterfaceScope;
	private InternalScopeElements pInternalScope;
	private DeclarationElements pDeclaration;
	private EventDeclarartionElements pEventDeclarartion;
	private EventFeatureElements pEventFeature;
	private EventDefinitionElements pEventDefinition;
	private DirectionElements unknownRuleDirection;
	private VariableDeclarationElements pVariableDeclaration;
	private VariableFeatureElements pVariableFeature;
	private VariableDefinitionElements pVariableDefinition;
	private OperationDeclarationElements pOperationDeclaration;
	private OperationFeatureElements pOperationFeature;
	private OperationDefinitionElements pOperationDefinition;
	private ParameterElements pParameter;
	private XIDElements pXID;
	private FQNElements pFQN;
	private ReactionElements pReaction;
	private LocalReactionElements pLocalReaction;
	private TransitionReactionElements pTransitionReaction;
	private StextTriggerElements pStextTrigger;
	private ReactionTriggerElements pReactionTrigger;
	private DefaultTriggerElements pDefaultTrigger;
	private ReactionEffectElements pReactionEffect;
	private TransitionPropertyElements pTransitionProperty;
	private EntryPointSpecElements pEntryPointSpec;
	private ExitPointSpecElements pExitPointSpec;
	private EventSpecElements pEventSpec;
	private RegularEventSpecElements pRegularEventSpec;
	private TimeEventSpecElements pTimeEventSpec;
	private TimeEventTypeElements unknownRuleTimeEventType;
	private BuiltinEventSpecElements pBuiltinEventSpec;
	private EntryEventElements pEntryEvent;
	private ExitEventElements pExitEvent;
	private AlwaysEventElements pAlwaysEvent;
	private EventRaisingExpressionElements pEventRaisingExpression;
	private StatementExpressionElements pStatementExpression;
	private ExpressionElements pExpression;
	private AssignmentExpressionElements pAssignmentExpression;
	private ConditionalExpressionElements pConditionalExpression;
	private LogicalOrExpressionElements pLogicalOrExpression;
	private LogicalAndExpressionElements pLogicalAndExpression;
	private LogicalNotExpressionElements pLogicalNotExpression;
	private BitwiseXorExpressionElements pBitwiseXorExpression;
	private BitwiseOrExpressionElements pBitwiseOrExpression;
	private BitwiseAndExpressionElements pBitwiseAndExpression;
	private LogicalRelationExpressionElements pLogicalRelationExpression;
	private ShiftExpressionElements pShiftExpression;
	private NumericalAddSubtractExpressionElements pNumericalAddSubtractExpression;
	private NumericalMultiplyDivideExpressionElements pNumericalMultiplyDivideExpression;
	private NumericalUnaryExpressionElements pNumericalUnaryExpression;
	private PrimaryExpressionElements pPrimaryExpression;
	private PrimitiveValueExpressionElements pPrimitiveValueExpression;
	private FeatureCallElements pFeatureCall;
	private ElementReferenceExpressionElements pElementReferenceExpression;
	private EventValueReferenceExpressionElements pEventValueReferenceExpression;
	private ActiveStateReferenceExpressionElements pActiveStateReferenceExpression;
	private ParenthesizedExpressionElements pParenthesizedExpression;
	private LiteralElements pLiteral;
	private BoolLiteralElements pBoolLiteral;
	private IntLiteralElements pIntLiteral;
	private RealLiteralElements pRealLiteral;
	private HexLiteralElements pHexLiteral;
	private StringLiteralElements pStringLiteral;
	private AssignmentOperatorElements unknownRuleAssignmentOperator;
	private ShiftOperatorElements unknownRuleShiftOperator;
	private AdditiveOperatorElements unknownRuleAdditiveOperator;
	private MultiplicativeOperatorElements unknownRuleMultiplicativeOperator;
	private UnaryOperatorElements unknownRuleUnaryOperator;
	private RelationalOperatorElements unknownRuleRelationalOperator;
	private TimeUnitElements unknownRuleTimeUnit;
	private TerminalRule tBOOL;
	private TerminalRule tHEX;
	private TerminalRule tFLOAT;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public STextGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.yakindu.sct.model.stext.SText".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// * ---- root rules ----
	//These root rules are not relevant for the grammar integration in the statechart. They just integrate the different start rules consistently 
	//into a single grammar. 
	// * /
	//
	//Root:
	//
	//	roots+=DefRoot*;
	public RootElements getRootAccess() {
		return (pRoot != null) ? pRoot : (pRoot = new RootElements());
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}

	//DefRoot:
	//
	//	StatechartRoot | StateRoot | TransitionRoot;
	public DefRootElements getDefRootAccess() {
		return (pDefRoot != null) ? pDefRoot : (pDefRoot = new DefRootElements());
	}
	
	public ParserRule getDefRootRule() {
		return getDefRootAccess().getRule();
	}

	//StatechartRoot:
	//
	//	"@@statechart@@" def=StatechartSpecification;
	public StatechartRootElements getStatechartRootAccess() {
		return (pStatechartRoot != null) ? pStatechartRoot : (pStatechartRoot = new StatechartRootElements());
	}
	
	public ParserRule getStatechartRootRule() {
		return getStatechartRootAccess().getRule();
	}

	//StateRoot:
	//
	//	"@@state@@" def=StateSpecification;
	public StateRootElements getStateRootAccess() {
		return (pStateRoot != null) ? pStateRoot : (pStateRoot = new StateRootElements());
	}
	
	public ParserRule getStateRootRule() {
		return getStateRootAccess().getRule();
	}

	//TransitionRoot:
	//
	//	"@@transition@@" def=TransitionSpecification;
	public TransitionRootElements getTransitionRootAccess() {
		return (pTransitionRoot != null) ? pTransitionRoot : (pTransitionRoot = new TransitionRootElements());
	}
	
	public ParserRule getTransitionRootRule() {
		return getTransitionRootAccess().getRule();
	}

	/// * ---- start rules ----
	//Define the starting points used by the statechart integration. These rules hook in the concrete rules of the specific grammar.
	// * /
	//
	//ScopedElement returns sgraph::ScopedElement:
	//
	//	StatechartSpecification;
	public ScopedElementElements getScopedElementAccess() {
		return (pScopedElement != null) ? pScopedElement : (pScopedElement = new ScopedElementElements());
	}
	
	public ParserRule getScopedElementRule() {
		return getScopedElementAccess().getRule();
	}

	//StatechartSpecification:
	//
	//	{StatechartSpecification} ("namespace" namespace=FQN)? scopes+=StatechartScope*;
	public StatechartSpecificationElements getStatechartSpecificationAccess() {
		return (pStatechartSpecification != null) ? pStatechartSpecification : (pStatechartSpecification = new StatechartSpecificationElements());
	}
	
	public ParserRule getStatechartSpecificationRule() {
		return getStatechartSpecificationAccess().getRule();
	}

	//StateSpecification:
	//
	//	scope=StateScope;
	public StateSpecificationElements getStateSpecificationAccess() {
		return (pStateSpecification != null) ? pStateSpecification : (pStateSpecification = new StateSpecificationElements());
	}
	
	public ParserRule getStateSpecificationRule() {
		return getStateSpecificationAccess().getRule();
	}

	//TransitionSpecification:
	//
	//	reaction=TransitionReaction;
	public TransitionSpecificationElements getTransitionSpecificationAccess() {
		return (pTransitionSpecification != null) ? pTransitionSpecification : (pTransitionSpecification = new TransitionSpecificationElements());
	}
	
	public ParserRule getTransitionSpecificationRule() {
		return getTransitionSpecificationAccess().getRule();
	}

	/// * ---- scope rules ----
	//Defines different kinds of scopes that contain element definitions. Scopes are used for element definitions in statechart, regions, and state 
	// * /
	//
	//Scope returns sgraph::Scope:
	//
	//	StateScope | StatechartScope;
	public ScopeElements getScopeAccess() {
		return (pScope != null) ? pScope : (pScope = new ScopeElements());
	}
	
	public ParserRule getScopeRule() {
		return getScopeAccess().getRule();
	}

	//// a SimpleScope is used for states and regions
	// StateScope returns sgraph::Scope:
	//
	//	{SimpleScope} / * | Entrypoint | Exitpoint * / declarations+=LocalReaction*;
	public StateScopeElements getStateScopeAccess() {
		return (pStateScope != null) ? pStateScope : (pStateScope = new StateScopeElements());
	}
	
	public ParserRule getStateScopeRule() {
		return getStateScopeAccess().getRule();
	}

	//// defines the poosible scopes for statecharts
	// StatechartScope:
	//
	//	InterfaceScope | InternalScope;
	public StatechartScopeElements getStatechartScopeAccess() {
		return (pStatechartScope != null) ? pStatechartScope : (pStatechartScope = new StatechartScopeElements());
	}
	
	public ParserRule getStatechartScopeRule() {
		return getStatechartScopeAccess().getRule();
	}

	//NamedInterfaceScope returns base::NamedElement:
	//
	//	InterfaceScope;
	public NamedInterfaceScopeElements getNamedInterfaceScopeAccess() {
		return (pNamedInterfaceScope != null) ? pNamedInterfaceScope : (pNamedInterfaceScope = new NamedInterfaceScopeElements());
	}
	
	public ParserRule getNamedInterfaceScopeRule() {
		return getNamedInterfaceScopeAccess().getRule();
	}

	//InterfaceScope:
	//
	//	{InterfaceScope} "interface" name=XID? ":" declarations+=(EventDeclarartion //		| Entrypoint 
	// //		| Exitpoint
	// |
	//
	//	VariableDeclaration | OperationDeclaration)*;
	public InterfaceScopeElements getInterfaceScopeAccess() {
		return (pInterfaceScope != null) ? pInterfaceScope : (pInterfaceScope = new InterfaceScopeElements());
	}
	
	public ParserRule getInterfaceScopeRule() {
		return getInterfaceScopeAccess().getRule();
	}

	//InternalScope:
	//
	//	{InternalScope} "internal" ":" declarations+=(EventDeclarartion | VariableDeclaration | OperationDeclaration |
	//
	//	LocalReaction)*;
	public InternalScopeElements getInternalScopeAccess() {
		return (pInternalScope != null) ? pInternalScope : (pInternalScope = new InternalScopeElements());
	}
	
	public ParserRule getInternalScopeRule() {
		return getInternalScopeAccess().getRule();
	}

	/// * ---- declarations ----
	//a definition is a top level element of a definition scope. * / //		| Entrypoint 
	//
	//
	////		| Exitpoint
	// Declaration returns sgraph::Declaration:
	//
	//	EventDeclarartion | VariableDeclaration | OperationDeclaration | LocalReaction;
	public DeclarationElements getDeclarationAccess() {
		return (pDeclaration != null) ? pDeclaration : (pDeclaration = new DeclarationElements());
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	/// * ---- event definition ---- * / EventDeclarartion returns sgraph::Event:
	//
	//	EventDefinition;
	public EventDeclarartionElements getEventDeclarartionAccess() {
		return (pEventDeclarartion != null) ? pEventDeclarartion : (pEventDeclarartion = new EventDeclarartionElements());
	}
	
	public ParserRule getEventDeclarartionRule() {
		return getEventDeclarartionAccess().getRule();
	}

	//EventFeature returns types::Event:
	//
	//	EventDefinition;
	public EventFeatureElements getEventFeatureAccess() {
		return (pEventFeature != null) ? pEventFeature : (pEventFeature = new EventFeatureElements());
	}
	
	public ParserRule getEventFeatureRule() {
		return getEventFeatureAccess().getRule();
	}

	//// (derivation=EventDerivation)?;
	// EventDefinition:
	//
	//	direction=Direction? "event" name=XID (":" type=[types::Type|FQN])?;
	public EventDefinitionElements getEventDefinitionAccess() {
		return (pEventDefinition != null) ? pEventDefinition : (pEventDefinition = new EventDefinitionElements());
	}
	
	public ParserRule getEventDefinitionRule() {
		return getEventDefinitionAccess().getRule();
	}

	////EventDerivation:
	// //	 (':' value=Expression)?;
	// enum Direction:
	//
	//	LOCAL="local" | IN="in" | OUT="out";
	public DirectionElements getDirectionAccess() {
		return (unknownRuleDirection != null) ? unknownRuleDirection : (unknownRuleDirection = new DirectionElements());
	}
	
	public EnumRule getDirectionRule() {
		return getDirectionAccess().getRule();
	}

	/// * ---- variable definition ---- * / VariableDeclaration returns sgraph::Variable:
	//
	//	VariableDefinition;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return (pVariableDeclaration != null) ? pVariableDeclaration : (pVariableDeclaration = new VariableDeclarationElements());
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	//VariableFeature returns types::Property:
	//
	//	VariableDefinition;
	public VariableFeatureElements getVariableFeatureAccess() {
		return (pVariableFeature != null) ? pVariableFeature : (pVariableFeature = new VariableFeatureElements());
	}
	
	public ParserRule getVariableFeatureRule() {
		return getVariableFeatureAccess().getRule();
	}

	//VariableDefinition:
	//
	//	{VariableDefinition} "var" (readonly?="readonly"? & external?="external"?) name=XID ":" type=[types::Type|FQN] ("="
	//
	//	initialValue=Expression)?;
	public VariableDefinitionElements getVariableDefinitionAccess() {
		return (pVariableDefinition != null) ? pVariableDefinition : (pVariableDefinition = new VariableDefinitionElements());
	}
	
	public ParserRule getVariableDefinitionRule() {
		return getVariableDefinitionAccess().getRule();
	}

	/// * ---- operation definition ---- * / OperationDeclaration returns sgraph::Declaration:
	//
	//	OperationDefinition;
	public OperationDeclarationElements getOperationDeclarationAccess() {
		return (pOperationDeclaration != null) ? pOperationDeclaration : (pOperationDeclaration = new OperationDeclarationElements());
	}
	
	public ParserRule getOperationDeclarationRule() {
		return getOperationDeclarationAccess().getRule();
	}

	//OperationFeature returns types::Operation:
	//
	//	OperationDefinition;
	public OperationFeatureElements getOperationFeatureAccess() {
		return (pOperationFeature != null) ? pOperationFeature : (pOperationFeature = new OperationFeatureElements());
	}
	
	public ParserRule getOperationFeatureRule() {
		return getOperationFeatureAccess().getRule();
	}

	//OperationDefinition:
	//
	//	{OperationDefinition} "operation" name=XID "(" (parameters+=Parameter ("," parameters+=Parameter)*)? ")" (":"
	//
	//	type=[types::Type|FQN])?;
	public OperationDefinitionElements getOperationDefinitionAccess() {
		return (pOperationDefinition != null) ? pOperationDefinition : (pOperationDefinition = new OperationDefinitionElements());
	}
	
	public ParserRule getOperationDefinitionRule() {
		return getOperationDefinitionAccess().getRule();
	}

	//Parameter returns types::Parameter:
	//
	//	name=XID ":" type=[types::Type|FQN];
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	/// * ---- entrypoint definition ---- * / //Entrypoint returns sgraph::Declaration:
	// //	{Entrypoint} 'entrypoint' name=XID;
	//
	//
	/// * ---- exitpoint definition ---- * / //Exitpoint returns sgraph::Declaration:
	// //	{Exitpoint} 'exitpoint' name=XID;
	//
	//
	/// * ---- Datatype rules ---- * / XID:
	//
	//	ID | "namespace" | "interface" | "internal" | "event" | "local" | "in" | "out" | "var" | "readonly" | "external" |
	//
	//	"operation" | "default" | "else" | "entry" | "exit" | "always" | "oncycle" | "raise" | "valueof" | "active";
	public XIDElements getXIDAccess() {
		return (pXID != null) ? pXID : (pXID = new XIDElements());
	}
	
	public ParserRule getXIDRule() {
		return getXIDAccess().getRule();
	}

	//FQN:
	//
	//	XID ("." XID)*;
	public FQNElements getFQNAccess() {
		return (pFQN != null) ? pFQN : (pFQN = new FQNElements());
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}

	/// * ---- reaction rules ----
	//Define the structure of reactions that are central for describing the statecharts behavior. 
	// * /
	//
	//Reaction returns sgraph::Reaction:
	//
	//	LocalReaction | TransitionReaction;
	public ReactionElements getReactionAccess() {
		return (pReaction != null) ? pReaction : (pReaction = new ReactionElements());
	}
	
	public ParserRule getReactionRule() {
		return getReactionAccess().getRule();
	}

	//LocalReaction:
	//
	//	trigger=ReactionTrigger => ("/" effect=ReactionEffect);
	public LocalReactionElements getLocalReactionAccess() {
		return (pLocalReaction != null) ? pLocalReaction : (pLocalReaction = new LocalReactionElements());
	}
	
	public ParserRule getLocalReactionRule() {
		return getLocalReactionAccess().getRule();
	}

	//TransitionReaction:
	//
	//	{TransitionReaction} trigger=StextTrigger? ("/" effect=ReactionEffect)? ("#" properties+=TransitionProperty*)?;
	public TransitionReactionElements getTransitionReactionAccess() {
		return (pTransitionReaction != null) ? pTransitionReaction : (pTransitionReaction = new TransitionReactionElements());
	}
	
	public ParserRule getTransitionReactionRule() {
		return getTransitionReactionAccess().getRule();
	}

	//StextTrigger returns sgraph::Trigger:
	//
	//	ReactionTrigger | DefaultTrigger;
	public StextTriggerElements getStextTriggerAccess() {
		return (pStextTrigger != null) ? pStextTrigger : (pStextTrigger = new StextTriggerElements());
	}
	
	public ParserRule getStextTriggerRule() {
		return getStextTriggerAccess().getRule();
	}

	//ReactionTrigger returns sgraph::Trigger:
	//
	//	{ReactionTrigger} (triggers+=EventSpec ("," triggers+=EventSpec)* ("[" guardExpression=Expression "]")? | "["
	//
	//	guardExpression=Expression "]");
	public ReactionTriggerElements getReactionTriggerAccess() {
		return (pReactionTrigger != null) ? pReactionTrigger : (pReactionTrigger = new ReactionTriggerElements());
	}
	
	public ParserRule getReactionTriggerRule() {
		return getReactionTriggerAccess().getRule();
	}

	//DefaultTrigger returns sgraph::Trigger:
	//
	//	{DefaultTrigger} ("default" | "else");
	public DefaultTriggerElements getDefaultTriggerAccess() {
		return (pDefaultTrigger != null) ? pDefaultTrigger : (pDefaultTrigger = new DefaultTriggerElements());
	}
	
	public ParserRule getDefaultTriggerRule() {
		return getDefaultTriggerAccess().getRule();
	}

	//ReactionEffect returns sgraph::Effect:
	//
	//	{ReactionEffect} actions+=(Expression | EventRaisingExpression) (";" actions+=(Expression |
	//
	//	EventRaisingExpression))*;
	public ReactionEffectElements getReactionEffectAccess() {
		return (pReactionEffect != null) ? pReactionEffect : (pReactionEffect = new ReactionEffectElements());
	}
	
	public ParserRule getReactionEffectRule() {
		return getReactionEffectAccess().getRule();
	}

	//TransitionProperty returns sgraph::ReactionProperty:
	//
	//	EntryPointSpec | ExitPointSpec;
	public TransitionPropertyElements getTransitionPropertyAccess() {
		return (pTransitionProperty != null) ? pTransitionProperty : (pTransitionProperty = new TransitionPropertyElements());
	}
	
	public ParserRule getTransitionPropertyRule() {
		return getTransitionPropertyAccess().getRule();
	}

	//EntryPointSpec:
	//
	//	">" entrypoint=ID;
	public EntryPointSpecElements getEntryPointSpecAccess() {
		return (pEntryPointSpec != null) ? pEntryPointSpec : (pEntryPointSpec = new EntryPointSpecElements());
	}
	
	public ParserRule getEntryPointSpecRule() {
		return getEntryPointSpecAccess().getRule();
	}

	//ExitPointSpec:
	//
	//	exitpoint=ID ">";
	public ExitPointSpecElements getExitPointSpecAccess() {
		return (pExitPointSpec != null) ? pExitPointSpec : (pExitPointSpec = new ExitPointSpecElements());
	}
	
	public ParserRule getExitPointSpecRule() {
		return getExitPointSpecAccess().getRule();
	}

	//EventSpec:
	//
	//	RegularEventSpec | TimeEventSpec | BuiltinEventSpec;
	public EventSpecElements getEventSpecAccess() {
		return (pEventSpec != null) ? pEventSpec : (pEventSpec = new EventSpecElements());
	}
	
	public ParserRule getEventSpecRule() {
		return getEventSpecAccess().getRule();
	}

	//RegularEventSpec:
	//
	//	event=FeatureCall;
	public RegularEventSpecElements getRegularEventSpecAccess() {
		return (pRegularEventSpec != null) ? pRegularEventSpec : (pRegularEventSpec = new RegularEventSpecElements());
	}
	
	public ParserRule getRegularEventSpecRule() {
		return getRegularEventSpecAccess().getRule();
	}

	//// TODO: redefine after trigger - we need to use it with clocks
	// TimeEventSpec:
	//
	//	type=TimeEventType value=ConditionalExpression unit=TimeUnit;
	public TimeEventSpecElements getTimeEventSpecAccess() {
		return (pTimeEventSpec != null) ? pTimeEventSpec : (pTimeEventSpec = new TimeEventSpecElements());
	}
	
	public ParserRule getTimeEventSpecRule() {
		return getTimeEventSpecAccess().getRule();
	}

	//enum TimeEventType:
	//
	//	after | every;
	public TimeEventTypeElements getTimeEventTypeAccess() {
		return (unknownRuleTimeEventType != null) ? unknownRuleTimeEventType : (unknownRuleTimeEventType = new TimeEventTypeElements());
	}
	
	public EnumRule getTimeEventTypeRule() {
		return getTimeEventTypeAccess().getRule();
	}

	//BuiltinEventSpec:
	//
	//	EntryEvent | ExitEvent | AlwaysEvent;
	public BuiltinEventSpecElements getBuiltinEventSpecAccess() {
		return (pBuiltinEventSpec != null) ? pBuiltinEventSpec : (pBuiltinEventSpec = new BuiltinEventSpecElements());
	}
	
	public ParserRule getBuiltinEventSpecRule() {
		return getBuiltinEventSpecAccess().getRule();
	}

	//EntryEvent:
	//
	//	{EntryEvent} "entry";
	public EntryEventElements getEntryEventAccess() {
		return (pEntryEvent != null) ? pEntryEvent : (pEntryEvent = new EntryEventElements());
	}
	
	public ParserRule getEntryEventRule() {
		return getEntryEventAccess().getRule();
	}

	//ExitEvent:
	//
	//	{ExitEvent} "exit";
	public ExitEventElements getExitEventAccess() {
		return (pExitEvent != null) ? pExitEvent : (pExitEvent = new ExitEventElements());
	}
	
	public ParserRule getExitEventRule() {
		return getExitEventAccess().getRule();
	}

	//AlwaysEvent:
	//
	//	{AlwaysEvent} ("always" | "oncycle");
	public AlwaysEventElements getAlwaysEventAccess() {
		return (pAlwaysEvent != null) ? pAlwaysEvent : (pAlwaysEvent = new AlwaysEventElements());
	}
	
	public ParserRule getAlwaysEventRule() {
		return getAlwaysEventAccess().getRule();
	}

	//// ****************
	// // Expression Grammar
	// // ****************
	// EventRaisingExpression returns Expression:
	//
	//	{EventRaisingExpression} "raise" event=FeatureCall (":" value=Expression)?;
	public EventRaisingExpressionElements getEventRaisingExpressionAccess() {
		return (pEventRaisingExpression != null) ? pEventRaisingExpression : (pEventRaisingExpression = new EventRaisingExpressionElements());
	}
	
	public ParserRule getEventRaisingExpressionRule() {
		return getEventRaisingExpressionAccess().getRule();
	}

	//StatementExpression returns sgraph::Statement:
	//
	//	Expression;
	public StatementExpressionElements getStatementExpressionAccess() {
		return (pStatementExpression != null) ? pStatementExpression : (pStatementExpression = new StatementExpressionElements());
	}
	
	public ParserRule getStatementExpressionRule() {
		return getStatementExpressionAccess().getRule();
	}

	//Expression:
	//
	//	AssignmentExpression;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//AssignmentExpression returns Expression:
	//
	//	ConditionalExpression ({AssignmentExpression.varRef=current} operator=AssignmentOperator
	//
	//	expression=ConditionalExpression)*;
	public AssignmentExpressionElements getAssignmentExpressionAccess() {
		return (pAssignmentExpression != null) ? pAssignmentExpression : (pAssignmentExpression = new AssignmentExpressionElements());
	}
	
	public ParserRule getAssignmentExpressionRule() {
		return getAssignmentExpressionAccess().getRule();
	}

	//ConditionalExpression returns Expression:
	//
	//	LogicalOrExpression ({ConditionalExpression.condition=current} "?" trueCase=LogicalOrExpression ":"
	//
	//	falseCase=LogicalOrExpression)?;
	public ConditionalExpressionElements getConditionalExpressionAccess() {
		return (pConditionalExpression != null) ? pConditionalExpression : (pConditionalExpression = new ConditionalExpressionElements());
	}
	
	public ParserRule getConditionalExpressionRule() {
		return getConditionalExpressionAccess().getRule();
	}

	//LogicalOrExpression returns Expression:
	//
	//	LogicalAndExpression ({LogicalOrExpression.leftOperand=current} "||" rightOperand=LogicalAndExpression)*;
	public LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return (pLogicalOrExpression != null) ? pLogicalOrExpression : (pLogicalOrExpression = new LogicalOrExpressionElements());
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}

	//LogicalAndExpression returns Expression:
	//
	//	LogicalNotExpression ({LogicalAndExpression.leftOperand=current} "&&" rightOperand=LogicalNotExpression)*;
	public LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return (pLogicalAndExpression != null) ? pLogicalAndExpression : (pLogicalAndExpression = new LogicalAndExpressionElements());
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}

	//LogicalNotExpression returns Expression:
	//
	//	BitwiseXorExpression | {LogicalNotExpression} "!" operand=BitwiseXorExpression;
	public LogicalNotExpressionElements getLogicalNotExpressionAccess() {
		return (pLogicalNotExpression != null) ? pLogicalNotExpression : (pLogicalNotExpression = new LogicalNotExpressionElements());
	}
	
	public ParserRule getLogicalNotExpressionRule() {
		return getLogicalNotExpressionAccess().getRule();
	}

	//BitwiseXorExpression returns Expression:
	//
	//	BitwiseOrExpression ({BitwiseXorExpression.leftOperand=current} "^" rightOperand=BitwiseOrExpression)*;
	public BitwiseXorExpressionElements getBitwiseXorExpressionAccess() {
		return (pBitwiseXorExpression != null) ? pBitwiseXorExpression : (pBitwiseXorExpression = new BitwiseXorExpressionElements());
	}
	
	public ParserRule getBitwiseXorExpressionRule() {
		return getBitwiseXorExpressionAccess().getRule();
	}

	//BitwiseOrExpression returns Expression:
	//
	//	BitwiseAndExpression ({BitwiseOrExpression.leftOperand=current} "|" rightOperand=BitwiseAndExpression)*;
	public BitwiseOrExpressionElements getBitwiseOrExpressionAccess() {
		return (pBitwiseOrExpression != null) ? pBitwiseOrExpression : (pBitwiseOrExpression = new BitwiseOrExpressionElements());
	}
	
	public ParserRule getBitwiseOrExpressionRule() {
		return getBitwiseOrExpressionAccess().getRule();
	}

	//BitwiseAndExpression returns Expression:
	//
	//	LogicalRelationExpression ({BitwiseAndExpression.leftOperand=current} "&" rightOperand=LogicalRelationExpression)*;
	public BitwiseAndExpressionElements getBitwiseAndExpressionAccess() {
		return (pBitwiseAndExpression != null) ? pBitwiseAndExpression : (pBitwiseAndExpression = new BitwiseAndExpressionElements());
	}
	
	public ParserRule getBitwiseAndExpressionRule() {
		return getBitwiseAndExpressionAccess().getRule();
	}

	//LogicalRelationExpression returns Expression:
	//
	//	ShiftExpression ({LogicalRelationExpression.leftOperand=current} operator=RelationalOperator
	//
	//	rightOperand=ShiftExpression)*;
	public LogicalRelationExpressionElements getLogicalRelationExpressionAccess() {
		return (pLogicalRelationExpression != null) ? pLogicalRelationExpression : (pLogicalRelationExpression = new LogicalRelationExpressionElements());
	}
	
	public ParserRule getLogicalRelationExpressionRule() {
		return getLogicalRelationExpressionAccess().getRule();
	}

	//ShiftExpression returns Expression:
	//
	//	NumericalAddSubtractExpression ({ShiftExpression.leftOperand=current} operator=ShiftOperator
	//
	//	rightOperand=NumericalAddSubtractExpression)*;
	public ShiftExpressionElements getShiftExpressionAccess() {
		return (pShiftExpression != null) ? pShiftExpression : (pShiftExpression = new ShiftExpressionElements());
	}
	
	public ParserRule getShiftExpressionRule() {
		return getShiftExpressionAccess().getRule();
	}

	//NumericalAddSubtractExpression returns Expression:
	//
	//	NumericalMultiplyDivideExpression ({NumericalAddSubtractExpression.leftOperand=current} operator=AdditiveOperator
	//
	//	rightOperand=NumericalMultiplyDivideExpression)*;
	public NumericalAddSubtractExpressionElements getNumericalAddSubtractExpressionAccess() {
		return (pNumericalAddSubtractExpression != null) ? pNumericalAddSubtractExpression : (pNumericalAddSubtractExpression = new NumericalAddSubtractExpressionElements());
	}
	
	public ParserRule getNumericalAddSubtractExpressionRule() {
		return getNumericalAddSubtractExpressionAccess().getRule();
	}

	//NumericalMultiplyDivideExpression returns Expression:
	//
	//	NumericalUnaryExpression ({NumericalMultiplyDivideExpression.leftOperand=current} operator=MultiplicativeOperator
	//
	//	rightOperand=NumericalUnaryExpression)*;
	public NumericalMultiplyDivideExpressionElements getNumericalMultiplyDivideExpressionAccess() {
		return (pNumericalMultiplyDivideExpression != null) ? pNumericalMultiplyDivideExpression : (pNumericalMultiplyDivideExpression = new NumericalMultiplyDivideExpressionElements());
	}
	
	public ParserRule getNumericalMultiplyDivideExpressionRule() {
		return getNumericalMultiplyDivideExpressionAccess().getRule();
	}

	//NumericalUnaryExpression returns Expression:
	//
	//	PrimaryExpression | {NumericalUnaryExpression} operator=UnaryOperator operand=PrimaryExpression;
	public NumericalUnaryExpressionElements getNumericalUnaryExpressionAccess() {
		return (pNumericalUnaryExpression != null) ? pNumericalUnaryExpression : (pNumericalUnaryExpression = new NumericalUnaryExpressionElements());
	}
	
	public ParserRule getNumericalUnaryExpressionRule() {
		return getNumericalUnaryExpressionAccess().getRule();
	}

	////	| '(' Expression ')'
	// PrimaryExpression returns Expression:
	//
	//	PrimitiveValueExpression | FeatureCall | ActiveStateReferenceExpression | EventValueReferenceExpression |
	//
	//	ParenthesizedExpression;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return (pPrimaryExpression != null) ? pPrimaryExpression : (pPrimaryExpression = new PrimaryExpressionElements());
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//PrimitiveValueExpression returns Expression:
	//
	//	{PrimitiveValueExpression} value=Literal;
	public PrimitiveValueExpressionElements getPrimitiveValueExpressionAccess() {
		return (pPrimitiveValueExpression != null) ? pPrimitiveValueExpression : (pPrimitiveValueExpression = new PrimitiveValueExpressionElements());
	}
	
	public ParserRule getPrimitiveValueExpressionRule() {
		return getPrimitiveValueExpressionAccess().getRule();
	}

	//FeatureCall returns Expression:
	//
	//	ElementReferenceExpression ({FeatureCall.owner=current} "." feature=[ecore::EObject] (=> operationCall?="("
	//
	//	(args+=Expression ("," args+=Expression)*)? ")")?)*;
	public FeatureCallElements getFeatureCallAccess() {
		return (pFeatureCall != null) ? pFeatureCall : (pFeatureCall = new FeatureCallElements());
	}
	
	public ParserRule getFeatureCallRule() {
		return getFeatureCallAccess().getRule();
	}

	//ElementReferenceExpression returns Expression:
	//
	//	{ElementReferenceExpression} reference=[ecore::EObject] (=> operationCall?="(" (args+=Expression (","
	//
	//	args+=Expression)*)? ")")?;
	public ElementReferenceExpressionElements getElementReferenceExpressionAccess() {
		return (pElementReferenceExpression != null) ? pElementReferenceExpression : (pElementReferenceExpression = new ElementReferenceExpressionElements());
	}
	
	public ParserRule getElementReferenceExpressionRule() {
		return getElementReferenceExpressionAccess().getRule();
	}

	//EventValueReferenceExpression returns Expression:
	//
	//	{EventValueReferenceExpression} "valueof" "(" value=FeatureCall ")";
	public EventValueReferenceExpressionElements getEventValueReferenceExpressionAccess() {
		return (pEventValueReferenceExpression != null) ? pEventValueReferenceExpression : (pEventValueReferenceExpression = new EventValueReferenceExpressionElements());
	}
	
	public ParserRule getEventValueReferenceExpressionRule() {
		return getEventValueReferenceExpressionAccess().getRule();
	}

	//ActiveStateReferenceExpression returns Expression:
	//
	//	{ActiveStateReferenceExpression} "active" "(" value=[sgraph::State|FQN] ")";
	public ActiveStateReferenceExpressionElements getActiveStateReferenceExpressionAccess() {
		return (pActiveStateReferenceExpression != null) ? pActiveStateReferenceExpression : (pActiveStateReferenceExpression = new ActiveStateReferenceExpressionElements());
	}
	
	public ParserRule getActiveStateReferenceExpressionRule() {
		return getActiveStateReferenceExpressionAccess().getRule();
	}

	//ParenthesizedExpression returns Expression:
	//
	//	{ParenthesizedExpression} "(" expression=Expression ")";
	public ParenthesizedExpressionElements getParenthesizedExpressionAccess() {
		return (pParenthesizedExpression != null) ? pParenthesizedExpression : (pParenthesizedExpression = new ParenthesizedExpressionElements());
	}
	
	public ParserRule getParenthesizedExpressionRule() {
		return getParenthesizedExpressionAccess().getRule();
	}

	//Literal:
	//
	//	BoolLiteral | IntLiteral | HexLiteral | RealLiteral | StringLiteral;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//BoolLiteral:
	//
	//	{BoolLiteral} value=BOOL;
	public BoolLiteralElements getBoolLiteralAccess() {
		return (pBoolLiteral != null) ? pBoolLiteral : (pBoolLiteral = new BoolLiteralElements());
	}
	
	public ParserRule getBoolLiteralRule() {
		return getBoolLiteralAccess().getRule();
	}

	//IntLiteral:
	//
	//	{IntLiteral} value=INT;
	public IntLiteralElements getIntLiteralAccess() {
		return (pIntLiteral != null) ? pIntLiteral : (pIntLiteral = new IntLiteralElements());
	}
	
	public ParserRule getIntLiteralRule() {
		return getIntLiteralAccess().getRule();
	}

	//RealLiteral:
	//
	//	{RealLiteral} value=FLOAT;
	public RealLiteralElements getRealLiteralAccess() {
		return (pRealLiteral != null) ? pRealLiteral : (pRealLiteral = new RealLiteralElements());
	}
	
	public ParserRule getRealLiteralRule() {
		return getRealLiteralAccess().getRule();
	}

	//HexLiteral:
	//
	//	{HexLiteral} value=HEX;
	public HexLiteralElements getHexLiteralAccess() {
		return (pHexLiteral != null) ? pHexLiteral : (pHexLiteral = new HexLiteralElements());
	}
	
	public ParserRule getHexLiteralRule() {
		return getHexLiteralAccess().getRule();
	}

	//StringLiteral:
	//
	//	{StringLiteral} value=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return (pStringLiteral != null) ? pStringLiteral : (pStringLiteral = new StringLiteralElements());
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//enum AssignmentOperator:
	//
	//	assign="=" | multAssign="*=" | divAssign="/=" | modAssign="%=" | addAssign="+=" | subAssign="-=" |
	//
	//	leftShiftAssign="<<=" | rightShiftAssign=">>=" | andAssign="&=" | xorAssign="^=" | orAssign="|=";
	public AssignmentOperatorElements getAssignmentOperatorAccess() {
		return (unknownRuleAssignmentOperator != null) ? unknownRuleAssignmentOperator : (unknownRuleAssignmentOperator = new AssignmentOperatorElements());
	}
	
	public EnumRule getAssignmentOperatorRule() {
		return getAssignmentOperatorAccess().getRule();
	}

	//enum ShiftOperator:
	//
	//	left="<<" | right=">>";
	public ShiftOperatorElements getShiftOperatorAccess() {
		return (unknownRuleShiftOperator != null) ? unknownRuleShiftOperator : (unknownRuleShiftOperator = new ShiftOperatorElements());
	}
	
	public EnumRule getShiftOperatorRule() {
		return getShiftOperatorAccess().getRule();
	}

	//enum AdditiveOperator:
	//
	//	plus="+" | minus="-";
	public AdditiveOperatorElements getAdditiveOperatorAccess() {
		return (unknownRuleAdditiveOperator != null) ? unknownRuleAdditiveOperator : (unknownRuleAdditiveOperator = new AdditiveOperatorElements());
	}
	
	public EnumRule getAdditiveOperatorRule() {
		return getAdditiveOperatorAccess().getRule();
	}

	//enum MultiplicativeOperator:
	//
	//	mul="*" | div="/" | mod="%";
	public MultiplicativeOperatorElements getMultiplicativeOperatorAccess() {
		return (unknownRuleMultiplicativeOperator != null) ? unknownRuleMultiplicativeOperator : (unknownRuleMultiplicativeOperator = new MultiplicativeOperatorElements());
	}
	
	public EnumRule getMultiplicativeOperatorRule() {
		return getMultiplicativeOperatorAccess().getRule();
	}

	//enum UnaryOperator:
	//
	//	positive="+" | negative="-" | complement="~";
	public UnaryOperatorElements getUnaryOperatorAccess() {
		return (unknownRuleUnaryOperator != null) ? unknownRuleUnaryOperator : (unknownRuleUnaryOperator = new UnaryOperatorElements());
	}
	
	public EnumRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}

	//enum RelationalOperator:
	//
	//	smaller="<" | smallerEqual="<=" | greater=">" | greaterEqual=">=" | equals="==" | notEquals="!=";
	public RelationalOperatorElements getRelationalOperatorAccess() {
		return (unknownRuleRelationalOperator != null) ? unknownRuleRelationalOperator : (unknownRuleRelationalOperator = new RelationalOperatorElements());
	}
	
	public EnumRule getRelationalOperatorRule() {
		return getRelationalOperatorAccess().getRule();
	}

	//enum TimeUnit:
	//
	//	second="s" | millisecond="ms" | microsecond="us" | nanosecond="ns";
	public TimeUnitElements getTimeUnitAccess() {
		return (unknownRuleTimeUnit != null) ? unknownRuleTimeUnit : (unknownRuleTimeUnit = new TimeUnitElements());
	}
	
	public EnumRule getTimeUnitRule() {
		return getTimeUnitAccess().getRule();
	}

	//terminal BOOL returns ecore::EBoolean:
	//
	//	"true" | "false" | "yes" | "no";
	public TerminalRule getBOOLRule() {
		return (tBOOL != null) ? tBOOL : (tBOOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOL"));
	} 

	//terminal HEX returns ecore::EInt:
	//
	//	"0" ("x" | "X") ("0".."9" | "a".."f" | "A".."F")+;
	public TerminalRule getHEXRule() {
		return (tHEX != null) ? tHEX : (tHEX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEX"));
	} 

	//terminal FLOAT returns ecore::EFloat:
	//
	//	(INT "." INT) ("e" ("-" | "+") INT)? ("f" | "F" | "d" | "D")?;
	public TerminalRule getFLOATRule() {
		return (tFLOAT != null) ? tFLOAT : (tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT"));
	} 

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
