import stext;
import sexec;
import ecore;
import sgraph;
import sgen;

extension org::yakindu::sct::generator::c::templates::Constants;


ExecutionFlow getExecutionFlow(InterfaceScope this) : ((ExecutionFlow)this.eContainer);
ExecutionFlow getExecutionFlow(InternalScope this) : ((ExecutionFlow)this.eContainer);

String scName(Expression statement) : ((ExecutionFlow)statement.eRootContainer).name;
String scName(Object this) : ((ExecutionFlow)((EObject)this).eRootContainer).name.toFirstLower();
String ScName(Object this) : ((ExecutionFlow)((EObject)this).eRootContainer).name.toFirstUpper();

List[EventDefinition] declaredEvents(ExecutionFlow flow) : flow.scopes.declarations.typeSelect(EventDefinition);
List[TimeEvent] declaredTimerEvents(ExecutionFlow flow) : flow.scopes.declarations.typeSelect(TimeEvent);
List[VariableDefinition] declaredVariables(ExecutionFlow flow) : flow.scopes.declarations.typeSelect(VariableDefinition);

String test(NamedElement obj) : "";
String StName(Object this) : ((ExecutionFlow)((EObject)this).eRootContainer).name.toFirstUpper() + "Statemachine";
String STNAME(Object this) : ((ExecutionFlow)((EObject)this).eRootContainer).name.toUpperCase() + "STATEMACHINE";
String stName(Object this) : ((ExecutionFlow)((EObject)this).eRootContainer).name.toFirstLower() + "Statemachine";

//String DRName(Object this) : ((ExecutionFlow)((EObject)this).eRootContainer).name.toFirstUpper() + "DataRepository";
//String DRNAME(Object this) : ((ExecutionFlow)((EObject)this).eRootContainer).name.toUpperCase() + "DATAREPOSITORY";

String EvName(Object this) : ((ExecutionFlow)((EObject)this).eRootContainer).name.toFirstUpper() + "Event";
String EVNAME(Object this) : ((ExecutionFlow)((EObject)this).eRootContainer).name.toUpperCase() + "EVENT";

/* This is from sgraph! This should not be used within code generation */
String StateEnumName(RegularState state) :
	"_"+state.name; /* ??? */

String StateEnumName(ExecutionState state) :
	"_"+state.simpleName;

cached String functionName(Step step, GeneratorEntry genEntry) : 
	(step.isEffect()) ? step.actionFunction(genEntry, false) : (
	(step.isReactionCheck()) ? step.checkFunction(genEntry, false) : (
	(step.isEntryAction()) ? step.entryActionFunction(genEntry, false) : ( 
	(step.isExitAction()) ? step.exitActionFunction(genEntry, false) : (
	(step.isEnterSequence()) ? step.enterSequenceFunction(genEntry, false) : ( 
	(step.isExitSequence()) ? step.exitSequenceFunction(genEntry, false) : 
	" !! unknown function type !!" )))));
 
cached String functionNamePrototype(Step step, GeneratorEntry genEntry) : 
	(step.isEffect()) ? step.actionFunction(genEntry, true) : (
	(step.isReactionCheck()) ? step.checkFunction(genEntry, true) : (
	(step.isEntryAction()) ? step.entryActionFunction(genEntry, true) : ( 
	(step.isExitAction()) ? step.exitActionFunction(genEntry, true) : (
	(step.isEnterSequence()) ? step.enterSequenceFunction(genEntry, true) : ( 
	(step.isExitSequence()) ? step.exitSequenceFunction(genEntry, true) :
	" !! unknown function type !!" )))));

/*
String actionFunctionName(Step this) :  this.stName() + "_actions_" + this.reaction().state().simpleName + "_" + this.reaction().name; 
String checkFunctionName(Step this) : this.stName() + "_condition_" + this.reaction().state().simpleName + "_" + this.reaction().name; 
String entryActionFunctionName(Step this) : this.stName() + "_entryActions_" + this.state().simpleName; 
String exitActionFunctionName(Step this) : this.stName() + "_exitActions_" + this.state().simpleName; 
String enterSequenceFunctionName(Step this) : this.stName() + "_enterSequence_" + this.state().simpleName; 
String exitSequenceFunctionName(Step this) : this.stName() + "_exitSequence_" + this.state().simpleName; 
String reactSequenceFunctionName(Step this) : "react"+ this.state().simpleName; 
*/

String handleAddition(Object this, GeneratorEntry genEntry) :
	(isSingleton(genEntry) == true) ? "" : StName() + "* " + this.statemachineHandleName();

String handleAdditionComma(Object this, GeneratorEntry genEntry) :
	(isSingleton(genEntry) == true) ? "" : StName() + "* " + this.statemachineHandleName() + ", ";


String handleInterfaceAddition(Scope this, GeneratorEntry genEntry) :
	(isSingleton(genEntry) == true) ? "" : this.interfaceClassName() + "* handle";

String handleInterfaceAdditionComma(Scope this, GeneratorEntry genEntry) :
	(isSingleton(genEntry) == true) ? "" : this.interfaceClassName() + "* handle, ";

String prototypeEnd(Boolean isPrototype) :
	(isPrototype == true) ? ";" : "";

String actionFunction(Step this, GeneratorEntry genEntry, Boolean prototype) :  
	  (this.stName() + "_actions_" + this.reaction().state().simpleName + "_" + this.reaction().name + "("+ handleAddition(genEntry) + ")"+prototypeEnd(prototype));

String checkFunction(Step this, GeneratorEntry genEntry, Boolean prototype) :  
	  (this.stName() + "_condition_" + this.reaction().state().simpleName + "_" + this.reaction().name + "("+ handleAddition(genEntry) + ")"+prototypeEnd(prototype));

String entryActionFunction(Step this, GeneratorEntry genEntry, Boolean prototype) :  
	  (this.stName() + "_entryActions_" + this.reaction().state().simpleName + "_" + this.reaction().name + "("+ handleAddition(genEntry) + ")"+prototypeEnd(prototype));
 
String exitActionFunction(Step this, GeneratorEntry genEntry, Boolean prototype) :  
	  (this.stName() + "_exitActions_" + this.reaction().state().simpleName + "_" + this.reaction().name + "("+ handleAddition(genEntry) + ")"+prototypeEnd(prototype));
 
String enterSequenceFunction(Step this, GeneratorEntry genEntry, Boolean prototype) :  
	  (this.stName() + "_enterSequence_" + this.reaction().state().simpleName + "_" + this.reaction().name + "("+ handleAddition(genEntry) + ")"+prototypeEnd(prototype));

String exitSequenceFunction(Step this, GeneratorEntry genEntry, Boolean prototype) :  
	  (this.stName() + "_exitSequence_" + this.reaction().state().simpleName + "_" + this.reaction().name + "("+ handleAddition(genEntry) + ")"+prototypeEnd(prototype));

/* for some reason, this is handled completely different */ 
String reactSequenceFunction(ExecutionNode this, GeneratorEntry genEntry, Boolean prototype) :  
	  (this.stName() + "_reaction_" + this.simpleName + "("+ handleAddition(genEntry) + ")"+prototypeEnd(prototype));
 
boolean isEffect(Step step) : (! Check.isInstance(step)) && Reaction.isInstance(step.eContainer) ;
boolean isReactionCheck(Step step) : Reaction.isInstance(step.eContainer) && Check.isInstance(step);
boolean isEntryAction(Step step) : ExecutionState.isInstance(step.eContainer) && step.state().entryAction == step;
boolean isExitAction(Step step) : ExecutionState.isInstance(step.eContainer) && step.state().exitAction == step;
boolean isEnterSequence(Step step) : ExecutionState.isInstance(step.eContainer) && step.state().enterSequence == step;
boolean isExitSequence(Step step) : ExecutionState.isInstance(step.eContainer) && step.state().exitSequence == step;
isReactSequence(Step step) : Sequence.isInstance(step) && step.name == "react";

Reaction reaction(Step this) : (Reaction) this.eContainer ;
ExecutionState state(Reaction this) : (ExecutionState) eContainer;
ExecutionState state(Step this) : (ExecutionState) eContainer;

String interfaceName(Scope this) : "unknownScope";
String interfaceClassName(Scope this) : "unknownScope";
String interfaceObjectName(Scope this) : "unknownScope";

String statemachineHandleName(Object this) : ((ExecutionFlow)((EObject)this).eRootContainer).name.toFirstLower()+"_handle";

String interfaceName(InterfaceScope this) : this.getExecutionFlow().name.toFirstLower() + ((this.name == null) ? "_if" : "_if_" + this.name);
String interfaceClassName(InterfaceScope this) : this.getExecutionFlow().name.toFirstUpper() + "If" + ((this.name == null)?"":this.name.toFirstUpper());
String interfaceObjectName(InterfaceScope this) : "interface" + ((this.name == null)?"":this.name.toFirstUpper());

String interfaceName(InternalScope this) : this.getExecutionFlow().name.toFirstLower() + "internal";
String interfaceClassName(InternalScope this) : this.getExecutionFlow().name.toFirstUpper() + "Internal";
String interfaceObjectName(InternalScope this) : "interfaceInternal";

//String getEventEnumName(EventDefinition this) : "ev_"+ ((InterfaceScope)this.eContainer).name + this.name.toFirstLower();
String getEventEnumName(TimeEvent this) : "ev_" + this.name.toFirstLower();
String getEventEnumName(Event this) : "ev_" + this.eContainer.getScopeName() + "_" + this.name.toFirstLower();

String getEventName(Event this) : this.eContainer.getScopeName().toFirstUpper() + this.name.toFirstUpper();

String getScopeName(emf::EObject eo) :
	"<scope not defined>";

String getScopeName(InternalScope inScope) :
 	"internal";
 	
String getScopeName(InterfaceScope ifScope) :
	(ifScope.name == null)?"default":ifScope.name;

String getLicenseHeader(GeneratorEntry entry) :
	if entry.getFeatureConfiguration(getLicenseFeature())!=null
		&& entry.getFeatureConfiguration(getLicenseFeature()).getParameterValue(getLicenseText()) != null then
		"/**" + entry.getFeatureConfiguration(getLicenseFeature()).getParameterValue(getLicenseText()).getStringValue()+"*/"
	else 
		null;
		
String getLicenseHeaderPlain(GeneratorEntry entry) :
	if entry.getFeatureConfiguration(getLicenseFeature())!=null
		&& entry.getFeatureConfiguration(getLicenseFeature()).getParameterValue(getLicenseText()) != null then
		entry.getFeatureConfiguration(getLicenseFeature()).getParameterValue(getLicenseText()).getStringValue()
	else 
		null;

Boolean isSingleton(GeneratorEntry genEntry) : (
	(genEntry.getFeatureConfiguration(getCCodeFeature()) != null) ? (
      ((genEntry.getFeatureConfiguration(getCCodeFeature()).getParameterValue(getSingleton()) != null) ?
       genEntry.getFeatureConfiguration(getCCodeFeature()).getParameterValue(getSingleton()).getBooleanValue()
     : getSingletonDefault()))
     : getSingletonDefault());
 
//(
//     (genEntry.getFeatureConfiguration(getCCodeFeature()).getParameterValue(getSingleton()).getBooleanValue() == true) ? 
//     getBoolTrue():getBoolFalse())
String getComment(Step this) :
	if comment!=null then
		"//"+comment
	else
		null;

/*
String correctLValue(String literal) :
    (literal == "true" ? "bool_true" :
	(literal == "false" ? "bool_false" :
	literal ));
*/  
