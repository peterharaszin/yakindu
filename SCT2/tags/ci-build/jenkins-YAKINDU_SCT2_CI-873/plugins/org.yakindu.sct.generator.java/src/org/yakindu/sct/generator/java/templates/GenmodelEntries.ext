/*
  Copyright (c) 2011 committers of YAKINDU and others.
  All rights reserved. This program and the accompanying materials
  are made available under the terms of the Eclipse Public License v1.0
  which accompanies this distribution, and is available at
  http://www.eclipse.org/legal/epl-v10.html
  Contributors:  
  	Markus Muehlbrandt - Initial contribution and API
 */
import sgen;
import sexec;
import stext;

extension org::yakindu::sct::generator::java::templates::Naming;

String getNamingFeature() :
 JAVA org.yakindu.sct.generator.java.features.JavaFeatureConstants.getNamingFeature();
 
String getBasePackage() :
 JAVA org.yakindu.sct.generator.java.features.JavaFeatureConstants.getBasePackage();
 
String getImplementationSuffix() :
 JAVA org.yakindu.sct.generator.java.features.JavaFeatureConstants.getImplementationSuffix();
 
String getLicenseFeature() :
 JAVA org.yakindu.sct.generator.java.features.JavaFeatureConstants.getLicenseHeader();
 
String getLicenseText() :
 JAVA org.yakindu.sct.generator.java.features.JavaFeatureConstants.getLicenseText();
 
String getGeneralFeature() :
 JAVA org.yakindu.sct.generator.java.features.JavaFeatureConstants.getGeneralFeature();
 
String getEventBasedStatemachine() :
 JAVA org.yakindu.sct.generator.java.features.JavaFeatureConstants.getEventBasedStatemachine();
 
String getRuntimeService() :
 JAVA org.yakindu.sct.generator.java.features.JavaFeatureConstants.getRuntimeService();
 
String getTimerService() :
 JAVA org.yakindu.sct.generator.java.features.JavaFeatureConstants.getTimerService();
 
String getInterfaceObserverSupport() :
 JAVA org.yakindu.sct.generator.java.features.JavaFeatureConstants.getInterfaceObserverSupport();
 
String getGenericInterfaceSupport() :
 JAVA org.yakindu.sct.generator.java.features.JavaFeatureConstants.getGenericInterfaceSupport();

String getStatemachineFactorySupport() :
 JAVA org.yakindu.sct.generator.java.features.JavaFeatureConstants.getStatemachineFactorySupport();

String getBasePackageName(GeneratorEntry entry):
	if entry.getFeatureConfiguration(getNamingFeature())!=null 
		&& entry.getFeatureConfiguration(getNamingFeature()).getParameterValue(getBasePackage())!=null then
		entry.getFeatureConfiguration(getNamingFeature()).getParameterValue(getBasePackage()).getStringValue()
	else
		"org.yakindu.sct.runtime.java";

String getBasePackagePath(GeneratorEntry entry):
	entry.getBasePackageName().replaceAll("\\.","/");
	
String getImplementationSuffix(GeneratorEntry entry, ExecutionFlow flow):
	if entry.getFeatureConfiguration(getNamingFeature())!=null
		&& entry.getFeatureConfiguration(getNamingFeature()).getParameterValue(getImplementationSuffix()) != null then
		flow.getStatemachineName()+entry.getFeatureConfiguration(getNamingFeature()).getParameterValue(getImplementationSuffix()).getStringValue()
	else 
		flow.getStatemachineName();

String getImplementationPackagePath(ExecutionFlow this, GeneratorEntry entry):
	entry.getBasePackagePath()+"/"+entry.getImplementationSuffix(this).toLowerCase();

String getImplementationPackagePath(InterfaceScope this, GeneratorEntry entry):
	((ExecutionFlow)eContainer).getImplementationPackagePath(entry);

String getImplementationPackageName(ExecutionFlow this, GeneratorEntry entry):
	entry.getBasePackageName()+"."+entry.getImplementationSuffix(this).toLowerCase();

String getImplementationPackageName(InterfaceScope this, GeneratorEntry entry):
	((ExecutionFlow)eContainer).getImplementationPackageName(entry);
	
String getLicenseHeader(GeneratorEntry entry) :
	if entry.getFeatureConfiguration(getLicenseFeature())!=null
		&& entry.getFeatureConfiguration(getLicenseFeature()).getParameterValue(getLicenseText()) != null then
		"/**"+entry.getFeatureConfiguration(getLicenseFeature()).getParameterValue(getLicenseText()).getStringValue()+"*/"
	else 
		null;

boolean createEventBasedStatemachine(GeneratorEntry entry) :
	if entry.getFeatureConfiguration(getGeneralFeature())!=null
		&& entry.getFeatureConfiguration(getGeneralFeature()).getParameterValue(getEventBasedStatemachine()) != null then
		entry.getFeatureConfiguration(getGeneralFeature()).getParameterValue(getEventBasedStatemachine()).getBooleanValue()
	else
		false;
		
boolean createRuntimeService(GeneratorEntry entry) :
	if entry.getFeatureConfiguration(getGeneralFeature())!=null
		&& entry.getFeatureConfiguration(getGeneralFeature()).getParameterValue(getRuntimeService()) != null then
		entry.getFeatureConfiguration(getGeneralFeature()).getParameterValue(getRuntimeService()).getBooleanValue()
	else
		false;
		
boolean createTimerService(GeneratorEntry entry) :
	if entry.getFeatureConfiguration(getGeneralFeature())!=null
		&& entry.getFeatureConfiguration(getGeneralFeature()).getParameterValue(getTimerService()) != null then
		entry.getFeatureConfiguration(getGeneralFeature()).getParameterValue(getTimerService()).getBooleanValue()
	else
		false;
		
boolean createInterfaceObserverSupport(GeneratorEntry entry) :
	if entry.getFeatureConfiguration(getGeneralFeature())!=null
		&& entry.getFeatureConfiguration(getGeneralFeature()).getParameterValue(getInterfaceObserverSupport()) != null then
		entry.getFeatureConfiguration(getGeneralFeature()).getParameterValue(getInterfaceObserverSupport()).getBooleanValue()
	else
		false;
		
boolean createGenericInterfaceSupport(GeneratorEntry entry) :
	if entry.getFeatureConfiguration(getGeneralFeature())!=null
		&& entry.getFeatureConfiguration(getGeneralFeature()).getParameterValue(getGenericInterfaceSupport()) != null then
		entry.getFeatureConfiguration(getGeneralFeature()).getParameterValue(getGenericInterfaceSupport()).getBooleanValue()
	else
		false;
		
boolean createStatemachineFactory(GeneratorEntry entry) :
	if entry.getFeatureConfiguration(getGeneralFeature())!=null
		&& entry.getFeatureConfiguration(getGeneralFeature()).getParameterValue(getStatemachineFactorySupport()) != null then
		entry.getFeatureConfiguration(getGeneralFeature()).getParameterValue(getStatemachineFactorySupport()).getBooleanValue()
	else
		false;