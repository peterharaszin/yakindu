h1. Yakindu Statechart tool concepts

h2. Model, Validate, Simulate, Generate

h2. SText

SText is the textual modeling language for the YAKINDU statecharts. It is case sensitive.


h3. Typesystem

TODO

h3. Expressions

Expressions can be defined similar to other programming languages. SText offers operators to define logical expressions, bitwise arithmetic, and arithmetic expressions and bit shifting.

Logical expressions in SText are similar to other programming languages. The return type is *boolean*. In the following there are some examples of these:

h4. Logical AND

bc.. 
var1 && var2 

h4. Logical OR

bc.. 
var1 ||  var2 

h4. Logical NOT

bc.. 
!var1 

h4. Conditional expression

bc.. 
var1 ? var2 : 23 

h4. Bitwise XOR

bc.. 
var1 ^ var2

h4. Bitwise OR

bc.. 
var1 | var2

h4. Bitwise AND

bc.. 
var1 & var2


h4. Logical Relations and Shift Operators

|less than | < |
|equal or less than | <= |
|greater than | > |
|equal or greater than | >= |
|equal | == |
|not equal | != |
|shift left | << |
|shift right | >> |


h4. Binary arithmetic operators

|plus | + |
|minus | - |
|multiply | * |
|divide | / |
|modulo | % |

h4. Unary arithmetic operators

|positive | + |
|negative | - |
|circa	| ~ |


h3. Statements

A statements can be either an assignment, raising an event or call an operation. SText has the following assignment operators:

|Operator | Description |
| = | simple assignment |
| *= | multiply and assign |
| /= | divide and assign |
| %= | calculate modulo and assign |
| += | add and assign |
| -= | subtract and assign |
| <<= | bitshift left and assign |
| >>= | bitshift right and assign |
| &= | bitwise AND and assign |
| ^= | bitwise XOR and assign |
| |= | bitwise OR and assign | 


An event is raised by the keyword _raise_ followed by the event name and if it is an interface event the name of the interface.

An operation is called similar to other programming languages with the operation name and passing concrete parameters. The parameters can be expressions.


h3. Scopes

h4. Namespace

SText allows to define unique namespaces, which can be used to qualify references to the statechart.


bc.. 
namespace trafficlights

h4. interface scope

Declarations in the interface scope are externally visible. They can be shared within the environment.


bc.. 
interface NamedInterface:
in event event1
out event event3
var variable1 : real
entrypoint entry1
exitpoint exit1


h4. internal scope

Declarations made in an internal scope are only visible for contained states.

bc.. 
internal:
var localVariable1: integer
event localEvent: integer
local event localEvent2: NamedInterface.event1 || localEvent
local event localEvent3: localEvent || localEvent2 : 25
operation localOperation (integer, integer): integer
localEvent3 / raise NamedInterface.event3 :
localOperation(valueOf(localEvent),NamedInterface.variable1);

h3. Declarations

Within scopes there can be declarations of Events, Variables, Operations, LocalReactions, EntryPoints and ExitPoints.

h3. Events

Within interface scope events have an direction. They can either be ingoing or outgoing:

bc.. 
interface NamedInterface:
in event event1
out event event2

p. Within local scope events can carry variables:

bc.. 
internal:
event localEvent1 : integer

p. Local events can be derived from interface events or other local events and can have a value assignment:

bc.. 
internal:
event localEvent1: integer
local event localEvent2 = NamedInterface.event1 || localEvent1
local event localEvent3 = localEvent2 || 25


h3. Variables

Variables can have different visibilities. They can be visible for the environment:

bc.. 
var variable1: real

p. Variables can be *readonly* (constants):

bc.. 
var readonly pi: real = 3.1415

p. Variables can be referenced by the environment.

bc.. 
var external variable3: integer = 34

h3. Operations

Operations can have none, one or multiple parameters. The parameters are only declarated by their type. An operation can have one return type similar to Java.

bc.. 
operation localOperation (integer, integer):integer
localEvent3/ raise NamedInterface3.event1

h3. LocalReactions

Local reactions describe the internal behavior of a state. So they have internal scope. A local reaction is  declared as follows:

bc.. 

LocalReaction: ReactionTrigger '/' ReactionEffect ('#' ReactionProperties)?

ReactionTrigger: (Event ("," Event	)* 	(=> '[' Expression ']')?) | '[' Expression ']'					

ReactionEffect:  Statement (';' Statement )* (';')?

Statement: Assignment | EventRaising | OperationCall

ReactionProperties: (EntryPoint | ExitPoint)*


  

p. Within a local reaction an interface event can be raised:

bc.. 
internal:
localEvent1 / raise NamedInterface.event3 : localOperation (valueOf(localEvent), NamedInterface.variable1);


p. Local reactions can have priority values. These are defined by a following # and the integer number of priority:

bc.. 
localEvent2 / NamedInterface.variable2 += 3; #1
localEvent3 / NamedInterface.variable4 += 2.0; #2

h3. EntryPoints

Every state chart has an entry point. An entry point can be declared like the following:

bc.. 
entrypoint entry1

h3. ExitPoints

Every state chart has an exit point. This exit point can be declared like the following.

bc.. 
exitpoint exit1



h2. SGraph

h2. SExec

h2. SGen





