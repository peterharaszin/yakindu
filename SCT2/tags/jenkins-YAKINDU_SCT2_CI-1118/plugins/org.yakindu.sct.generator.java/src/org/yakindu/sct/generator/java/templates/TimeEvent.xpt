«REM»
Copyright (c) 2011 committers of YAKINDU and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html
Contributors:
	Markus Muehlbrandt - Initial contribution and API
«ENDREM»
«IMPORT sexec»

«EXTENSION org::yakindu::sct::generator::java::templates::GenmodelEntries»

«DEFINE file(sgen::GeneratorEntry entry) FOR ExecutionFlow-»
«IF name != null-»
«FILE entry.getBasePackagePath()+'/TimeEvent.java'-»
«getLicenseHeader(entry)»
package «entry.getBasePackageName()»;

/**
 * Event that reflects a time event. It's internally used by
 * {@link ITimedStatemachine}.
 * 
 * @author muehlbrandt
 * 
 * @param <T>
 */
public class TimeEvent<T extends Enum<T>> extends ValuedEvent<T, Boolean> {

	private long time = -1;

	private ITimedStatemachine statemachine;

	/**
	 * Constructor for a time event.
	 * 
	 * @param id
	 *            : The event id.
	 * @param offset
	 *            : Offset which is added to the index position within the state
	 *            machine's {@link EventVector}.
	 * @param periodic
	 *            : Set to {@code true} if event should be repeated
	 *            periodically.
	 */
	public TimeEvent(T id, int offset, boolean periodic) {
		super(id, offset, periodic);
	}

	/**
	 * Sets the time delay after the event is called.
	 * 
	 * @param time
	 */
	public void setTime(long time) {
		this.time = time;
	}

	/**
	 * Returns the time delay after the event is called.
	 */
	public long getTime() {
		return time;
	}

	/**
	 * Returns the state machine reference of the event.
	 * 
	 */
	public ITimedStatemachine getStatemachine() {
		return statemachine;
	}

	/**
	 * Sets the state machine reference of the event.
	 * 
	 * @param statemachine
	 */
	public void setStatemachine(ITimedStatemachine statemachine) {
		this.statemachine = statemachine;
	}
}

«ENDFILE-»
«ENDIF-»
«ENDDEFINE»