«REM»

Templates for the main statechart cpp file.

@auther joern seger

«ENDREM»

«IMPORT sexec»
«IMPORT stext»
«IMPORT sgraph»

«EXTENSION org::yakindu::sct::generator::c::templates::Expression»
«EXTENSION org::yakindu::sct::generator::c::templates::TypeModelExtensions»
«EXTENSION org::yakindu::sct::generator::c::templates::Naming»
«EXTENSION org::yakindu::sct::generator::c::templates::NamingOO»

«DEFINE file FOR ExecutionFlow»
«FOREACH this.scopes.getUsableScopes() AS interface»
«FILE interface.interfaceClassNameOOW()+".hpp"»
«this.getLicenseHeader()»
 
#ifndef «interface.interfaceClassNameOOW().toUpperCase()»_H_
#define «interface.interfaceClassNameOOW().toUpperCase()»_H_

#include "definition.h"
#include "«interface.interfaceClassName()».h"
#include "«StName()».h"

class «interface.interfaceClassNameOOW()» {
private:
	«interface.interfaceClassName()»* «interface.interfaceObjectName()»;
public:
	«interface.interfaceClassNameOOW()»(«this.StName()»* iface);
	virtual ~«interface.interfaceClassNameOOW()»();

«FOREACH interface.declarations.typeSelect(VariableDefinition) AS variable -»
    «asCType(variable.type)» get_«variable.name»();
«IF variable.readonly == false -»
    void set_«variable.name»(«asCType(variable.type)» value);
«ENDIF»
«ENDFOREACH» 

«FOREACH interface.getOutEvents() AS event -»
    sc_boolean is_«event.name»_raised(«IF !event.type.isVoid() -»«event.type.asCType()»* value«ENDIF» );
«ENDFOREACH»

«FOREACH interface.getInEvents() AS event -»
    void raise_«event.name»(«IF !event.type.isVoid() -»«event.type.asCType()» value «ENDIF»);
«ENDFOREACH» 

};

inline «interface.interfaceClassNameOOW()»::«interface.interfaceClassNameOOW()»(«this.StName()»* statemachine)
{
	«interface.interfaceObjectName()» = «stName()»_get_«interface.interfaceObjectName()»(statemachine);
}

inline «interface.interfaceClassNameOOW()»::~«interface.interfaceClassNameOOW()»()
{
}

«FOREACH interface.getOutEvents() AS event -»
inline sc_boolean «interface.interfaceClassNameOOW()»::is_«event.name»_raised(«IF !event.type.isVoid() -»«event.type.asCType()»* value«ENDIF» )
{
  return «interface.interfaceName()»_is_«event.name»_raised(«interface.interfaceObjectName()»«IF !event.type.isVoid() -», value«ENDIF» );

}
«ENDFOREACH»

«FOREACH interface.getInEvents() AS event -»
inline void «interface.interfaceClassNameOOW()»::raise_«event.name»(«IF !event.type.isVoid() -»«event.type.asCType()» value «ENDIF»)
{
	«interface.interfaceName()»_raise_«event.name»(«interface.interfaceObjectName()»«IF !event.type.isVoid() -», value«ENDIF»);
}
«ENDFOREACH» 

«FOREACH interface.declarations.typeSelect(VariableDefinition) AS variable -»
inline «asCType(variable.type)» «interface.interfaceClassNameOOW()»::get_«variable.name»()
{
	return «interface.interfaceName()»_get_«variable.name»(«interface.interfaceObjectName()»); 
}   
«IF variable.readonly == false -»
inline void «interface.interfaceClassNameOOW()»::set_«variable.name»(«asCType(variable.type)» value)
{
	«interface.interfaceName()»_set_«variable.name»(«interface.interfaceObjectName()», value);
}
«ENDIF»
«ENDFOREACH» 


#endif

«ENDFILE»
«ENDFOREACH»
«ENDDEFINE»