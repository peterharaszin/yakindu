/*
* generated by Xtext
*/
package org.yakindu.sct.statechart.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.yakindu.sct.statechart.services.ExpressionsGrammarAccess;

public class ExpressionsParser extends AbstractContentAssistParser {
	
	@Inject
	private ExpressionsGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.yakindu.sct.statechart.ui.contentassist.antlr.internal.InternalExpressionsParser createParser() {
		org.yakindu.sct.statechart.ui.contentassist.antlr.internal.InternalExpressionsParser result = new org.yakindu.sct.statechart.ui.contentassist.antlr.internal.InternalExpressionsParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
					put(grammarAccess.getActionDefinitionAccess().getAlternatives_0(), "rule__ActionDefinition__Alternatives_0");
					put(grammarAccess.getEventAccess().getAlternatives(), "rule__Event__Alternatives");
					put(grammarAccess.getExpressionRuleAccess().getExpressionAlternatives_0(), "rule__ExpressionRule__ExpressionAlternatives_0");
					put(grammarAccess.getLogicalNotExpressionAccess().getAlternatives(), "rule__LogicalNotExpression__Alternatives");
					put(grammarAccess.getNumericalUnaryExpressionAccess().getAlternatives(), "rule__NumericalUnaryExpression__Alternatives");
					put(grammarAccess.getPrimaryExpressionAccess().getAlternatives(), "rule__PrimaryExpression__Alternatives");
					put(grammarAccess.getValueExpressionAccess().getAlternatives(), "rule__ValueExpression__Alternatives");
					put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
					put(grammarAccess.getAdditiveOperatorAccess().getAlternatives(), "rule__AdditiveOperator__Alternatives");
					put(grammarAccess.getMultiplicativeOperatorAccess().getAlternatives(), "rule__MultiplicativeOperator__Alternatives");
					put(grammarAccess.getUnaryOperatorAccess().getAlternatives(), "rule__UnaryOperator__Alternatives");
					put(grammarAccess.getRelationalOperatorAccess().getAlternatives(), "rule__RelationalOperator__Alternatives");
					put(grammarAccess.getDirectionKindAccess().getAlternatives(), "rule__DirectionKind__Alternatives");
					put(grammarAccess.getTimeUnitAccess().getAlternatives(), "rule__TimeUnit__Alternatives");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getTransitionDefinitionAccess().getGroup(), "rule__TransitionDefinition__Group__0");
					put(grammarAccess.getTransitionDefinitionAccess().getGroup_0(), "rule__TransitionDefinition__Group_0__0");
					put(grammarAccess.getTransitionDefinitionAccess().getGroup_0_1(), "rule__TransitionDefinition__Group_0_1__0");
					put(grammarAccess.getVariableDefinitionAccess().getGroup(), "rule__VariableDefinition__Group__0");
					put(grammarAccess.getActionDefinitionAccess().getGroup(), "rule__ActionDefinition__Group__0");
					put(grammarAccess.getActionDefinitionAccess().getGroup_0_1(), "rule__ActionDefinition__Group_0_1__0");
					put(grammarAccess.getSignalEventDefinitionAccess().getGroup(), "rule__SignalEventDefinition__Group__0");
					put(grammarAccess.getTimeEventDefinitionAccess().getGroup(), "rule__TimeEventDefinition__Group__0");
					put(grammarAccess.getTimeConstantAccess().getGroup(), "rule__TimeConstant__Group__0");
					put(grammarAccess.getRaiseEventExpressionAccess().getGroup(), "rule__RaiseEventExpression__Group__0");
					put(grammarAccess.getLogicalOrExpressionAccess().getGroup(), "rule__LogicalOrExpression__Group__0");
					put(grammarAccess.getLogicalOrExpressionAccess().getGroup_1(), "rule__LogicalOrExpression__Group_1__0");
					put(grammarAccess.getLogicalAndExpressionAccess().getGroup(), "rule__LogicalAndExpression__Group__0");
					put(grammarAccess.getLogicalAndExpressionAccess().getGroup_1(), "rule__LogicalAndExpression__Group_1__0");
					put(grammarAccess.getLogicalNotExpressionAccess().getGroup_1(), "rule__LogicalNotExpression__Group_1__0");
					put(grammarAccess.getLogicalRelationExpressionAccess().getGroup(), "rule__LogicalRelationExpression__Group__0");
					put(grammarAccess.getLogicalRelationExpressionAccess().getGroup_1(), "rule__LogicalRelationExpression__Group_1__0");
					put(grammarAccess.getNumericalAddSubtractExpressionAccess().getGroup(), "rule__NumericalAddSubtractExpression__Group__0");
					put(grammarAccess.getNumericalAddSubtractExpressionAccess().getGroup_1(), "rule__NumericalAddSubtractExpression__Group_1__0");
					put(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getGroup(), "rule__NumericalMultiplyDivideExpression__Group__0");
					put(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getGroup_1(), "rule__NumericalMultiplyDivideExpression__Group_1__0");
					put(grammarAccess.getNumericalUnaryExpressionAccess().getGroup_1(), "rule__NumericalUnaryExpression__Group_1__0");
					put(grammarAccess.getPrimaryExpressionAccess().getGroup_1(), "rule__PrimaryExpression__Group_1__0");
					put(grammarAccess.getPrimitiveValueExpressionAccess().getGroup(), "rule__PrimitiveValueExpression__Group__0");
					put(grammarAccess.getVariableReferenceExpressionAccess().getGroup(), "rule__VariableReferenceExpression__Group__0");
					put(grammarAccess.getStatementModelAccess().getStatementsAssignment(), "rule__StatementModel__StatementsAssignment");
					put(grammarAccess.getTransitionDefinitionAccess().getTriggersAssignment_0_0(), "rule__TransitionDefinition__TriggersAssignment_0_0");
					put(grammarAccess.getTransitionDefinitionAccess().getTriggersAssignment_0_1_1(), "rule__TransitionDefinition__TriggersAssignment_0_1_1");
					put(grammarAccess.getTransitionDefinitionAccess().getGuardExpressionAssignment_1(), "rule__TransitionDefinition__GuardExpressionAssignment_1");
					put(grammarAccess.getVariableDefinitionAccess().getNameAssignment_1(), "rule__VariableDefinition__NameAssignment_1");
					put(grammarAccess.getVariableDefinitionAccess().getTypeAssignment_3(), "rule__VariableDefinition__TypeAssignment_3");
					put(grammarAccess.getActionDefinitionAccess().getExpressionAssignment_2(), "rule__ActionDefinition__ExpressionAssignment_2");
					put(grammarAccess.getSignalEventDefinitionAccess().getNameAssignment_1(), "rule__SignalEventDefinition__NameAssignment_1");
					put(grammarAccess.getSignalEventDefinitionAccess().getDirectionAssignment_3(), "rule__SignalEventDefinition__DirectionAssignment_3");
					put(grammarAccess.getTimeEventDefinitionAccess().getTimeAssignment_2(), "rule__TimeEventDefinition__TimeAssignment_2");
					put(grammarAccess.getTimeConstantAccess().getValueAssignment_0(), "rule__TimeConstant__ValueAssignment_0");
					put(grammarAccess.getTimeConstantAccess().getUnitAssignment_1(), "rule__TimeConstant__UnitAssignment_1");
					put(grammarAccess.getExpressionRuleAccess().getExpressionAssignment(), "rule__ExpressionRule__ExpressionAssignment");
					put(grammarAccess.getRaiseEventExpressionAccess().getEventAssignment_1(), "rule__RaiseEventExpression__EventAssignment_1");
					put(grammarAccess.getLogicalOrExpressionAccess().getRightOperandAssignment_1_2(), "rule__LogicalOrExpression__RightOperandAssignment_1_2");
					put(grammarAccess.getLogicalAndExpressionAccess().getRightOperandAssignment_1_2(), "rule__LogicalAndExpression__RightOperandAssignment_1_2");
					put(grammarAccess.getLogicalNotExpressionAccess().getOperandAssignment_1_2(), "rule__LogicalNotExpression__OperandAssignment_1_2");
					put(grammarAccess.getLogicalRelationExpressionAccess().getOperatorAssignment_1_1(), "rule__LogicalRelationExpression__OperatorAssignment_1_1");
					put(grammarAccess.getLogicalRelationExpressionAccess().getRightOperandAssignment_1_2(), "rule__LogicalRelationExpression__RightOperandAssignment_1_2");
					put(grammarAccess.getNumericalAddSubtractExpressionAccess().getOperatorAssignment_1_1(), "rule__NumericalAddSubtractExpression__OperatorAssignment_1_1");
					put(grammarAccess.getNumericalAddSubtractExpressionAccess().getRightOperandAssignment_1_2(), "rule__NumericalAddSubtractExpression__RightOperandAssignment_1_2");
					put(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getOperatorAssignment_1_1(), "rule__NumericalMultiplyDivideExpression__OperatorAssignment_1_1");
					put(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getRightOperandAssignment_1_2(), "rule__NumericalMultiplyDivideExpression__RightOperandAssignment_1_2");
					put(grammarAccess.getNumericalUnaryExpressionAccess().getOperatorAssignment_1_1(), "rule__NumericalUnaryExpression__OperatorAssignment_1_1");
					put(grammarAccess.getNumericalUnaryExpressionAccess().getOperandAssignment_1_2(), "rule__NumericalUnaryExpression__OperandAssignment_1_2");
					put(grammarAccess.getPrimitiveValueExpressionAccess().getValueAssignment_1(), "rule__PrimitiveValueExpression__ValueAssignment_1");
					put(grammarAccess.getVariableReferenceExpressionAccess().getValueAssignment_1(), "rule__VariableReferenceExpression__ValueAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.yakindu.sct.statechart.ui.contentassist.antlr.internal.InternalExpressionsParser typedParser = (org.yakindu.sct.statechart.ui.contentassist.antlr.internal.InternalExpressionsParser) parser;
			typedParser.entryRuleStatementModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ExpressionsGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ExpressionsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
