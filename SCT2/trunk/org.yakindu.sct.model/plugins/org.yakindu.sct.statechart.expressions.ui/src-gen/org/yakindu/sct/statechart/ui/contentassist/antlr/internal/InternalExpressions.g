/*
* generated by Xtext
*/
grammar InternalExpressions;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.yakindu.sct.statechart.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.yakindu.sct.statechart.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.yakindu.sct.statechart.services.ExpressionsGrammarAccess;

}

@parser::members {
 
 	private ExpressionsGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(ExpressionsGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleCustomTransitionExpression
entryRuleCustomTransitionExpression 
:
{ before(grammarAccess.getCustomTransitionExpressionRule()); }
	 ruleCustomTransitionExpression
{ after(grammarAccess.getCustomTransitionExpressionRule()); } 
	 EOF 
;

// Rule CustomTransitionExpression
ruleCustomTransitionExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCustomTransitionExpressionAccess().getGroup()); }
(rule__CustomTransitionExpression__Group__0)
{ after(grammarAccess.getCustomTransitionExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpressionRule
entryRuleExpressionRule 
:
{ before(grammarAccess.getExpressionRuleRule()); }
	 ruleExpressionRule
{ after(grammarAccess.getExpressionRuleRule()); } 
	 EOF 
;

// Rule ExpressionRule
ruleExpressionRule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionRuleAccess().getExpressionAssignment()); }
(rule__ExpressionRule__ExpressionAssignment)
{ after(grammarAccess.getExpressionRuleAccess().getExpressionAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRaiseEventExpression
entryRuleRaiseEventExpression 
:
{ before(grammarAccess.getRaiseEventExpressionRule()); }
	 ruleRaiseEventExpression
{ after(grammarAccess.getRaiseEventExpressionRule()); } 
	 EOF 
;

// Rule RaiseEventExpression
ruleRaiseEventExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRaiseEventExpressionAccess().getGroup()); }
(rule__RaiseEventExpression__Group__0)
{ after(grammarAccess.getRaiseEventExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLogicalOrExpression
entryRuleLogicalOrExpression 
:
{ before(grammarAccess.getLogicalOrExpressionRule()); }
	 ruleLogicalOrExpression
{ after(grammarAccess.getLogicalOrExpressionRule()); } 
	 EOF 
;

// Rule LogicalOrExpression
ruleLogicalOrExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getGroup()); }
(rule__LogicalOrExpression__Group__0)
{ after(grammarAccess.getLogicalOrExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLogicalAndExpression
entryRuleLogicalAndExpression 
:
{ before(grammarAccess.getLogicalAndExpressionRule()); }
	 ruleLogicalAndExpression
{ after(grammarAccess.getLogicalAndExpressionRule()); } 
	 EOF 
;

// Rule LogicalAndExpression
ruleLogicalAndExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getGroup()); }
(rule__LogicalAndExpression__Group__0)
{ after(grammarAccess.getLogicalAndExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLogicalNotExpression
entryRuleLogicalNotExpression 
:
{ before(grammarAccess.getLogicalNotExpressionRule()); }
	 ruleLogicalNotExpression
{ after(grammarAccess.getLogicalNotExpressionRule()); } 
	 EOF 
;

// Rule LogicalNotExpression
ruleLogicalNotExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLogicalNotExpressionAccess().getAlternatives()); }
(rule__LogicalNotExpression__Alternatives)
{ after(grammarAccess.getLogicalNotExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLogicalRelationExpression
entryRuleLogicalRelationExpression 
:
{ before(grammarAccess.getLogicalRelationExpressionRule()); }
	 ruleLogicalRelationExpression
{ after(grammarAccess.getLogicalRelationExpressionRule()); } 
	 EOF 
;

// Rule LogicalRelationExpression
ruleLogicalRelationExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLogicalRelationExpressionAccess().getGroup()); }
(rule__LogicalRelationExpression__Group__0)
{ after(grammarAccess.getLogicalRelationExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumericalAddSubtractExpression
entryRuleNumericalAddSubtractExpression 
:
{ before(grammarAccess.getNumericalAddSubtractExpressionRule()); }
	 ruleNumericalAddSubtractExpression
{ after(grammarAccess.getNumericalAddSubtractExpressionRule()); } 
	 EOF 
;

// Rule NumericalAddSubtractExpression
ruleNumericalAddSubtractExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumericalAddSubtractExpressionAccess().getGroup()); }
(rule__NumericalAddSubtractExpression__Group__0)
{ after(grammarAccess.getNumericalAddSubtractExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumericalMultiplyDivideExpression
entryRuleNumericalMultiplyDivideExpression 
:
{ before(grammarAccess.getNumericalMultiplyDivideExpressionRule()); }
	 ruleNumericalMultiplyDivideExpression
{ after(grammarAccess.getNumericalMultiplyDivideExpressionRule()); } 
	 EOF 
;

// Rule NumericalMultiplyDivideExpression
ruleNumericalMultiplyDivideExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getGroup()); }
(rule__NumericalMultiplyDivideExpression__Group__0)
{ after(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumericalUnaryExpression
entryRuleNumericalUnaryExpression 
:
{ before(grammarAccess.getNumericalUnaryExpressionRule()); }
	 ruleNumericalUnaryExpression
{ after(grammarAccess.getNumericalUnaryExpressionRule()); } 
	 EOF 
;

// Rule NumericalUnaryExpression
ruleNumericalUnaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumericalUnaryExpressionAccess().getAlternatives()); }
(rule__NumericalUnaryExpression__Alternatives)
{ after(grammarAccess.getNumericalUnaryExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression 
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
(rule__PrimaryExpression__Alternatives)
{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValueExpression
entryRuleValueExpression 
:
{ before(grammarAccess.getValueExpressionRule()); }
	 ruleValueExpression
{ after(grammarAccess.getValueExpressionRule()); } 
	 EOF 
;

// Rule ValueExpression
ruleValueExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValueExpressionAccess().getAlternatives()); }
(rule__ValueExpression__Alternatives)
{ after(grammarAccess.getValueExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimitiveValueExpression
entryRulePrimitiveValueExpression 
:
{ before(grammarAccess.getPrimitiveValueExpressionRule()); }
	 rulePrimitiveValueExpression
{ after(grammarAccess.getPrimitiveValueExpressionRule()); } 
	 EOF 
;

// Rule PrimitiveValueExpression
rulePrimitiveValueExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimitiveValueExpressionAccess().getGroup()); }
(rule__PrimitiveValueExpression__Group__0)
{ after(grammarAccess.getPrimitiveValueExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableReferenceExpression
entryRuleVariableReferenceExpression 
:
{ before(grammarAccess.getVariableReferenceExpressionRule()); }
	 ruleVariableReferenceExpression
{ after(grammarAccess.getVariableReferenceExpressionRule()); } 
	 EOF 
;

// Rule VariableReferenceExpression
ruleVariableReferenceExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableReferenceExpressionAccess().getGroup()); }
(rule__VariableReferenceExpression__Group__0)
{ after(grammarAccess.getVariableReferenceExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteral
entryRuleLiteral 
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
(rule__Literal__Alternatives)
{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule AdditiveOperator
ruleAdditiveOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveOperatorAccess().getAlternatives()); }
(rule__AdditiveOperator__Alternatives)
{ after(grammarAccess.getAdditiveOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule MultiplicativeOperator
ruleMultiplicativeOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeOperatorAccess().getAlternatives()); }
(rule__MultiplicativeOperator__Alternatives)
{ after(grammarAccess.getMultiplicativeOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule UnaryOperator
ruleUnaryOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperatorAccess().getAlternatives()); }
(rule__UnaryOperator__Alternatives)
{ after(grammarAccess.getUnaryOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule RelationalOperator
ruleRelationalOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalOperatorAccess().getAlternatives()); }
(rule__RelationalOperator__Alternatives)
{ after(grammarAccess.getRelationalOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__ExpressionRule__ExpressionAlternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionRuleAccess().getExpressionLogicalOrExpressionParserRuleCall_0_0()); }
	ruleLogicalOrExpression
{ after(grammarAccess.getExpressionRuleAccess().getExpressionLogicalOrExpressionParserRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getExpressionRuleAccess().getExpressionRaiseEventExpressionParserRuleCall_0_1()); }
	ruleRaiseEventExpression
{ after(grammarAccess.getExpressionRuleAccess().getExpressionRaiseEventExpressionParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalNotExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalNotExpressionAccess().getLogicalRelationExpressionParserRuleCall_0()); }
	ruleLogicalRelationExpression
{ after(grammarAccess.getLogicalNotExpressionAccess().getLogicalRelationExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLogicalNotExpressionAccess().getGroup_1()); }
(rule__LogicalNotExpression__Group_1__0)
{ after(grammarAccess.getLogicalNotExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalUnaryExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalUnaryExpressionAccess().getPrimaryExpressionParserRuleCall_0()); }
	rulePrimaryExpression
{ after(grammarAccess.getNumericalUnaryExpressionAccess().getPrimaryExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNumericalUnaryExpressionAccess().getGroup_1()); }
(rule__NumericalUnaryExpression__Group_1__0)
{ after(grammarAccess.getNumericalUnaryExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getValueExpressionParserRuleCall_0()); }
	ruleValueExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getValueExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_1()); }
(rule__PrimaryExpression__Group_1__0)
{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueExpressionAccess().getPrimitiveValueExpressionParserRuleCall_0()); }
	rulePrimitiveValueExpression
{ after(grammarAccess.getValueExpressionAccess().getPrimitiveValueExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getValueExpressionAccess().getVariableReferenceExpressionParserRuleCall_1()); }
	ruleVariableReferenceExpression
{ after(grammarAccess.getValueExpressionAccess().getVariableReferenceExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getBOOLTerminalRuleCall_0()); }
	RULE_BOOL
{ after(grammarAccess.getLiteralAccess().getBOOLTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
{ after(grammarAccess.getLiteralAccess().getINTTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getSTRINGTerminalRuleCall_2()); }
	RULE_STRING
{ after(grammarAccess.getLiteralAccess().getSTRINGTerminalRuleCall_2()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getFLOATTerminalRuleCall_3()); }
	RULE_FLOAT
{ after(grammarAccess.getLiteralAccess().getFLOATTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveOperatorAccess().getPlusEnumLiteralDeclaration_0()); }
(	'+' 
)
{ after(grammarAccess.getAdditiveOperatorAccess().getPlusEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getAdditiveOperatorAccess().getMinusEnumLiteralDeclaration_1()); }
(	'-' 
)
{ after(grammarAccess.getAdditiveOperatorAccess().getMinusEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeOperatorAccess().getMulEnumLiteralDeclaration_0()); }
(	'*' 
)
{ after(grammarAccess.getMultiplicativeOperatorAccess().getMulEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getMultiplicativeOperatorAccess().getDivEnumLiteralDeclaration_1()); }
(	'/' 
)
{ after(grammarAccess.getMultiplicativeOperatorAccess().getDivEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getMultiplicativeOperatorAccess().getModEnumLiteralDeclaration_2()); }
(	'%' 
)
{ after(grammarAccess.getMultiplicativeOperatorAccess().getModEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperatorAccess().getPositiveEnumLiteralDeclaration_0()); }
(	'+' 
)
{ after(grammarAccess.getUnaryOperatorAccess().getPositiveEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getUnaryOperatorAccess().getNegativeEnumLiteralDeclaration_1()); }
(	'-' 
)
{ after(grammarAccess.getUnaryOperatorAccess().getNegativeEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getUnaryOperatorAccess().getComplementEnumLiteralDeclaration_2()); }
(	'~' 
)
{ after(grammarAccess.getUnaryOperatorAccess().getComplementEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalOperatorAccess().getSmallerEnumLiteralDeclaration_0()); }
(	'<' 
)
{ after(grammarAccess.getRelationalOperatorAccess().getSmallerEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getSmallerEqualEnumLiteralDeclaration_1()); }
(	'<=' 
)
{ after(grammarAccess.getRelationalOperatorAccess().getSmallerEqualEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getGreaterEnumLiteralDeclaration_2()); }
(	'>' 
)
{ after(grammarAccess.getRelationalOperatorAccess().getGreaterEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getGreaterEqualEnumLiteralDeclaration_3()); }
(	'>=' 
)
{ after(grammarAccess.getRelationalOperatorAccess().getGreaterEqualEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getEqualsEnumLiteralDeclaration_4()); }
(	'==' 
)
{ after(grammarAccess.getRelationalOperatorAccess().getEqualsEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getNotEqualsEnumLiteralDeclaration_5()); }
(	'!=' 
)
{ after(grammarAccess.getRelationalOperatorAccess().getNotEqualsEnumLiteralDeclaration_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CustomTransitionExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CustomTransitionExpression__Group__0__Impl
	rule__CustomTransitionExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CustomTransitionExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCustomTransitionExpressionAccess().getCustomTransitionExpressionAction_0()); }
(

)
{ after(grammarAccess.getCustomTransitionExpressionAccess().getCustomTransitionExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CustomTransitionExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CustomTransitionExpression__Group__1__Impl
	rule__CustomTransitionExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CustomTransitionExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCustomTransitionExpressionAccess().getGroup_1()); }
(rule__CustomTransitionExpression__Group_1__0)
{ after(grammarAccess.getCustomTransitionExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CustomTransitionExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CustomTransitionExpression__Group__2__Impl
	rule__CustomTransitionExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CustomTransitionExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCustomTransitionExpressionAccess().getGroup_2()); }
(rule__CustomTransitionExpression__Group_2__0)?
{ after(grammarAccess.getCustomTransitionExpressionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CustomTransitionExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CustomTransitionExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CustomTransitionExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCustomTransitionExpressionAccess().getGroup_3()); }
(rule__CustomTransitionExpression__Group_3__0)?
{ after(grammarAccess.getCustomTransitionExpressionAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__CustomTransitionExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CustomTransitionExpression__Group_1__0__Impl
	rule__CustomTransitionExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CustomTransitionExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCustomTransitionExpressionAccess().getTriggersAssignment_1_0()); }
(rule__CustomTransitionExpression__TriggersAssignment_1_0)
{ after(grammarAccess.getCustomTransitionExpressionAccess().getTriggersAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CustomTransitionExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CustomTransitionExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CustomTransitionExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCustomTransitionExpressionAccess().getGroup_1_1()); }
(rule__CustomTransitionExpression__Group_1_1__0)*
{ after(grammarAccess.getCustomTransitionExpressionAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CustomTransitionExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CustomTransitionExpression__Group_1_1__0__Impl
	rule__CustomTransitionExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CustomTransitionExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCustomTransitionExpressionAccess().getCommaKeyword_1_1_0()); }

	',' 

{ after(grammarAccess.getCustomTransitionExpressionAccess().getCommaKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CustomTransitionExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CustomTransitionExpression__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CustomTransitionExpression__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCustomTransitionExpressionAccess().getTriggersAssignment_1_1_1()); }
(rule__CustomTransitionExpression__TriggersAssignment_1_1_1)
{ after(grammarAccess.getCustomTransitionExpressionAccess().getTriggersAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CustomTransitionExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CustomTransitionExpression__Group_2__0__Impl
	rule__CustomTransitionExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CustomTransitionExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCustomTransitionExpressionAccess().getLeftSquareBracketKeyword_2_0()); }

	'[' 

{ after(grammarAccess.getCustomTransitionExpressionAccess().getLeftSquareBracketKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CustomTransitionExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CustomTransitionExpression__Group_2__1__Impl
	rule__CustomTransitionExpression__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CustomTransitionExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCustomTransitionExpressionAccess().getGuardExpressionAssignment_2_1()); }
(rule__CustomTransitionExpression__GuardExpressionAssignment_2_1)
{ after(grammarAccess.getCustomTransitionExpressionAccess().getGuardExpressionAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CustomTransitionExpression__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CustomTransitionExpression__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CustomTransitionExpression__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCustomTransitionExpressionAccess().getRightSquareBracketKeyword_2_2()); }

	']' 

{ after(grammarAccess.getCustomTransitionExpressionAccess().getRightSquareBracketKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__CustomTransitionExpression__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CustomTransitionExpression__Group_3__0__Impl
	rule__CustomTransitionExpression__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CustomTransitionExpression__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCustomTransitionExpressionAccess().getSolidusKeyword_3_0()); }

	'/' 

{ after(grammarAccess.getCustomTransitionExpressionAccess().getSolidusKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CustomTransitionExpression__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CustomTransitionExpression__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CustomTransitionExpression__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCustomTransitionExpressionAccess().getActionAssignment_3_1()); }
(rule__CustomTransitionExpression__ActionAssignment_3_1)
{ after(grammarAccess.getCustomTransitionExpressionAccess().getActionAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RaiseEventExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RaiseEventExpression__Group__0__Impl
	rule__RaiseEventExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RaiseEventExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRaiseEventExpressionAccess().getRaiseKeyword_0()); }

	'raise' 

{ after(grammarAccess.getRaiseEventExpressionAccess().getRaiseKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RaiseEventExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RaiseEventExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RaiseEventExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRaiseEventExpressionAccess().getEventAssignment_1()); }
(rule__RaiseEventExpression__EventAssignment_1)
{ after(grammarAccess.getRaiseEventExpressionAccess().getEventAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalOrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group__0__Impl
	rule__LogicalOrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getLogicalAndExpressionParserRuleCall_0()); }
	ruleLogicalAndExpression
{ after(grammarAccess.getLogicalOrExpressionAccess().getLogicalAndExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalOrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getGroup_1()); }
(rule__LogicalOrExpression__Group_1__0)*
{ after(grammarAccess.getLogicalOrExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalOrExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group_1__0__Impl
	rule__LogicalOrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getLogicalOrExpressionLeftOperandAction_1_0()); }
(

)
{ after(grammarAccess.getLogicalOrExpressionAccess().getLogicalOrExpressionLeftOperandAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalOrExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group_1__1__Impl
	rule__LogicalOrExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getVerticalLineVerticalLineKeyword_1_1()); }

	'||' 

{ after(grammarAccess.getLogicalOrExpressionAccess().getVerticalLineVerticalLineKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalOrExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getRightOperandAssignment_1_2()); }
(rule__LogicalOrExpression__RightOperandAssignment_1_2)
{ after(grammarAccess.getLogicalOrExpressionAccess().getRightOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LogicalAndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group__0__Impl
	rule__LogicalAndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getLogicalNotExpressionParserRuleCall_0()); }
	ruleLogicalNotExpression
{ after(grammarAccess.getLogicalAndExpressionAccess().getLogicalNotExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalAndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getGroup_1()); }
(rule__LogicalAndExpression__Group_1__0)*
{ after(grammarAccess.getLogicalAndExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalAndExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group_1__0__Impl
	rule__LogicalAndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getLogicalAndExpressionLeftOperandAction_1_0()); }
(

)
{ after(grammarAccess.getLogicalAndExpressionAccess().getLogicalAndExpressionLeftOperandAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalAndExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group_1__1__Impl
	rule__LogicalAndExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getAmpersandAmpersandKeyword_1_1()); }

	'&&' 

{ after(grammarAccess.getLogicalAndExpressionAccess().getAmpersandAmpersandKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalAndExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getRightOperandAssignment_1_2()); }
(rule__LogicalAndExpression__RightOperandAssignment_1_2)
{ after(grammarAccess.getLogicalAndExpressionAccess().getRightOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LogicalNotExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalNotExpression__Group_1__0__Impl
	rule__LogicalNotExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalNotExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalNotExpressionAccess().getLogicalNotExpressionAction_1_0()); }
(

)
{ after(grammarAccess.getLogicalNotExpressionAccess().getLogicalNotExpressionAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalNotExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalNotExpression__Group_1__1__Impl
	rule__LogicalNotExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalNotExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalNotExpressionAccess().getExclamationMarkKeyword_1_1()); }

	'!' 

{ after(grammarAccess.getLogicalNotExpressionAccess().getExclamationMarkKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalNotExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalNotExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalNotExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalNotExpressionAccess().getOperandAssignment_1_2()); }
(rule__LogicalNotExpression__OperandAssignment_1_2)
{ after(grammarAccess.getLogicalNotExpressionAccess().getOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LogicalRelationExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalRelationExpression__Group__0__Impl
	rule__LogicalRelationExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalRelationExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalRelationExpressionAccess().getNumericalAddSubtractExpressionParserRuleCall_0()); }
	ruleNumericalAddSubtractExpression
{ after(grammarAccess.getLogicalRelationExpressionAccess().getNumericalAddSubtractExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalRelationExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalRelationExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalRelationExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalRelationExpressionAccess().getGroup_1()); }
(rule__LogicalRelationExpression__Group_1__0)*
{ after(grammarAccess.getLogicalRelationExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalRelationExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalRelationExpression__Group_1__0__Impl
	rule__LogicalRelationExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalRelationExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalRelationExpressionAccess().getLogicalRelationExpressionLeftOperandAction_1_0()); }
(

)
{ after(grammarAccess.getLogicalRelationExpressionAccess().getLogicalRelationExpressionLeftOperandAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalRelationExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalRelationExpression__Group_1__1__Impl
	rule__LogicalRelationExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalRelationExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalRelationExpressionAccess().getOperatorAssignment_1_1()); }
(rule__LogicalRelationExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getLogicalRelationExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalRelationExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalRelationExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalRelationExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalRelationExpressionAccess().getRightOperandAssignment_1_2()); }
(rule__LogicalRelationExpression__RightOperandAssignment_1_2)
{ after(grammarAccess.getLogicalRelationExpressionAccess().getRightOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NumericalAddSubtractExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericalAddSubtractExpression__Group__0__Impl
	rule__NumericalAddSubtractExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalAddSubtractExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalAddSubtractExpressionAccess().getNumericalMultiplyDivideExpressionParserRuleCall_0()); }
	ruleNumericalMultiplyDivideExpression
{ after(grammarAccess.getNumericalAddSubtractExpressionAccess().getNumericalMultiplyDivideExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumericalAddSubtractExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericalAddSubtractExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalAddSubtractExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalAddSubtractExpressionAccess().getGroup_1()); }
(rule__NumericalAddSubtractExpression__Group_1__0)*
{ after(grammarAccess.getNumericalAddSubtractExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NumericalAddSubtractExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericalAddSubtractExpression__Group_1__0__Impl
	rule__NumericalAddSubtractExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalAddSubtractExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalAddSubtractExpressionAccess().getNumericalAddSubtractExpressionLeftOperandAction_1_0()); }
(

)
{ after(grammarAccess.getNumericalAddSubtractExpressionAccess().getNumericalAddSubtractExpressionLeftOperandAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumericalAddSubtractExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericalAddSubtractExpression__Group_1__1__Impl
	rule__NumericalAddSubtractExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalAddSubtractExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalAddSubtractExpressionAccess().getOperatorAssignment_1_1()); }
(rule__NumericalAddSubtractExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getNumericalAddSubtractExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumericalAddSubtractExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericalAddSubtractExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalAddSubtractExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalAddSubtractExpressionAccess().getRightOperandAssignment_1_2()); }
(rule__NumericalAddSubtractExpression__RightOperandAssignment_1_2)
{ after(grammarAccess.getNumericalAddSubtractExpressionAccess().getRightOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NumericalMultiplyDivideExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericalMultiplyDivideExpression__Group__0__Impl
	rule__NumericalMultiplyDivideExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalMultiplyDivideExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getNumericalUnaryExpressionParserRuleCall_0()); }
	ruleNumericalUnaryExpression
{ after(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getNumericalUnaryExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumericalMultiplyDivideExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericalMultiplyDivideExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalMultiplyDivideExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getGroup_1()); }
(rule__NumericalMultiplyDivideExpression__Group_1__0)*
{ after(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NumericalMultiplyDivideExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericalMultiplyDivideExpression__Group_1__0__Impl
	rule__NumericalMultiplyDivideExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalMultiplyDivideExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getNumericalMultiplyDivideExpressionLeftOperandAction_1_0()); }
(

)
{ after(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getNumericalMultiplyDivideExpressionLeftOperandAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumericalMultiplyDivideExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericalMultiplyDivideExpression__Group_1__1__Impl
	rule__NumericalMultiplyDivideExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalMultiplyDivideExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getOperatorAssignment_1_1()); }
(rule__NumericalMultiplyDivideExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumericalMultiplyDivideExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericalMultiplyDivideExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalMultiplyDivideExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getRightOperandAssignment_1_2()); }
(rule__NumericalMultiplyDivideExpression__RightOperandAssignment_1_2)
{ after(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getRightOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NumericalUnaryExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericalUnaryExpression__Group_1__0__Impl
	rule__NumericalUnaryExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalUnaryExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalUnaryExpressionAccess().getNumericalUnaryExpressionAction_1_0()); }
(

)
{ after(grammarAccess.getNumericalUnaryExpressionAccess().getNumericalUnaryExpressionAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumericalUnaryExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericalUnaryExpression__Group_1__1__Impl
	rule__NumericalUnaryExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalUnaryExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalUnaryExpressionAccess().getOperatorAssignment_1_1()); }
(rule__NumericalUnaryExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getNumericalUnaryExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumericalUnaryExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericalUnaryExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalUnaryExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalUnaryExpressionAccess().getOperandAssignment_1_2()); }
(rule__NumericalUnaryExpression__OperandAssignment_1_2)
{ after(grammarAccess.getNumericalUnaryExpressionAccess().getOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PrimaryExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_1__0__Impl
	rule__PrimaryExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_1__1__Impl
	rule__PrimaryExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getLogicalOrExpressionParserRuleCall_1_1()); }
	ruleLogicalOrExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getLogicalOrExpressionParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PrimitiveValueExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimitiveValueExpression__Group__0__Impl
	rule__PrimitiveValueExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveValueExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveValueExpressionAccess().getPrimitiveValueExpressionAction_0()); }
(

)
{ after(grammarAccess.getPrimitiveValueExpressionAccess().getPrimitiveValueExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimitiveValueExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimitiveValueExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveValueExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveValueExpressionAccess().getValueAssignment_1()); }
(rule__PrimitiveValueExpression__ValueAssignment_1)
{ after(grammarAccess.getPrimitiveValueExpressionAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VariableReferenceExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableReferenceExpression__Group__0__Impl
	rule__VariableReferenceExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReferenceExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceExpressionAccess().getPropertyReferenceExpressionAction_0()); }
(

)
{ after(grammarAccess.getVariableReferenceExpressionAccess().getPropertyReferenceExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableReferenceExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableReferenceExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReferenceExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceExpressionAccess().getValueAssignment_1()); }
(rule__VariableReferenceExpression__ValueAssignment_1)
{ after(grammarAccess.getVariableReferenceExpressionAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__CustomTransitionExpression__TriggersAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCustomTransitionExpressionAccess().getTriggersEventCrossReference_1_0_0()); }
(
{ before(grammarAccess.getCustomTransitionExpressionAccess().getTriggersEventIDTerminalRuleCall_1_0_0_1()); }
	RULE_ID{ after(grammarAccess.getCustomTransitionExpressionAccess().getTriggersEventIDTerminalRuleCall_1_0_0_1()); }
)
{ after(grammarAccess.getCustomTransitionExpressionAccess().getTriggersEventCrossReference_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CustomTransitionExpression__TriggersAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCustomTransitionExpressionAccess().getTriggersEventCrossReference_1_1_1_0()); }
(
{ before(grammarAccess.getCustomTransitionExpressionAccess().getTriggersEventIDTerminalRuleCall_1_1_1_0_1()); }
	RULE_ID{ after(grammarAccess.getCustomTransitionExpressionAccess().getTriggersEventIDTerminalRuleCall_1_1_1_0_1()); }
)
{ after(grammarAccess.getCustomTransitionExpressionAccess().getTriggersEventCrossReference_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CustomTransitionExpression__GuardExpressionAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCustomTransitionExpressionAccess().getGuardExpressionLogicalOrExpressionParserRuleCall_2_1_0()); }
	ruleLogicalOrExpression{ after(grammarAccess.getCustomTransitionExpressionAccess().getGuardExpressionLogicalOrExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CustomTransitionExpression__ActionAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCustomTransitionExpressionAccess().getActionExpressionRuleParserRuleCall_3_1_0()); }
	ruleExpressionRule{ after(grammarAccess.getCustomTransitionExpressionAccess().getActionExpressionRuleParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionRule__ExpressionAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionRuleAccess().getExpressionAlternatives_0()); }
(rule__ExpressionRule__ExpressionAlternatives_0)
{ after(grammarAccess.getExpressionRuleAccess().getExpressionAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RaiseEventExpression__EventAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRaiseEventExpressionAccess().getEventEventCrossReference_1_0()); }
(
{ before(grammarAccess.getRaiseEventExpressionAccess().getEventEventIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getRaiseEventExpressionAccess().getEventEventIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getRaiseEventExpressionAccess().getEventEventCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__RightOperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getRightOperandLogicalAndExpressionParserRuleCall_1_2_0()); }
	ruleLogicalAndExpression{ after(grammarAccess.getLogicalOrExpressionAccess().getRightOperandLogicalAndExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__RightOperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getRightOperandLogicalNotExpressionParserRuleCall_1_2_0()); }
	ruleLogicalNotExpression{ after(grammarAccess.getLogicalAndExpressionAccess().getRightOperandLogicalNotExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalNotExpression__OperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalNotExpressionAccess().getOperandLogicalRelationExpressionParserRuleCall_1_2_0()); }
	ruleLogicalRelationExpression{ after(grammarAccess.getLogicalNotExpressionAccess().getOperandLogicalRelationExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalRelationExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalRelationExpressionAccess().getOperatorRelationalOperatorEnumRuleCall_1_1_0()); }
	ruleRelationalOperator{ after(grammarAccess.getLogicalRelationExpressionAccess().getOperatorRelationalOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalRelationExpression__RightOperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalRelationExpressionAccess().getRightOperandNumericalAddSubtractExpressionParserRuleCall_1_2_0()); }
	ruleNumericalAddSubtractExpression{ after(grammarAccess.getLogicalRelationExpressionAccess().getRightOperandNumericalAddSubtractExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalAddSubtractExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalAddSubtractExpressionAccess().getOperatorAdditiveOperatorEnumRuleCall_1_1_0()); }
	ruleAdditiveOperator{ after(grammarAccess.getNumericalAddSubtractExpressionAccess().getOperatorAdditiveOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalAddSubtractExpression__RightOperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalAddSubtractExpressionAccess().getRightOperandNumericalMultiplyDivideExpressionParserRuleCall_1_2_0()); }
	ruleNumericalMultiplyDivideExpression{ after(grammarAccess.getNumericalAddSubtractExpressionAccess().getRightOperandNumericalMultiplyDivideExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalMultiplyDivideExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getOperatorMultiplicativeOperatorEnumRuleCall_1_1_0()); }
	ruleMultiplicativeOperator{ after(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getOperatorMultiplicativeOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalMultiplyDivideExpression__RightOperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getRightOperandNumericalUnaryExpressionParserRuleCall_1_2_0()); }
	ruleNumericalUnaryExpression{ after(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getRightOperandNumericalUnaryExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalUnaryExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalUnaryExpressionAccess().getOperatorUnaryOperatorEnumRuleCall_1_1_0()); }
	ruleUnaryOperator{ after(grammarAccess.getNumericalUnaryExpressionAccess().getOperatorUnaryOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalUnaryExpression__OperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalUnaryExpressionAccess().getOperandPrimaryExpressionParserRuleCall_1_2_0()); }
	rulePrimaryExpression{ after(grammarAccess.getNumericalUnaryExpressionAccess().getOperandPrimaryExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveValueExpression__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveValueExpressionAccess().getValueLiteralParserRuleCall_1_0()); }
	ruleLiteral{ after(grammarAccess.getPrimitiveValueExpressionAccess().getValueLiteralParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReferenceExpression__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceExpressionAccess().getValueVariableCrossReference_1_0()); }
(
{ before(grammarAccess.getVariableReferenceExpressionAccess().getValueVariableIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getVariableReferenceExpressionAccess().getValueVariableIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getVariableReferenceExpressionAccess().getValueVariableCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_BOOL : ('true'|'false');

RULE_FLOAT : ('-'|'+')? RULE_INT '.' RULE_INT ('e' ('-'|'+') RULE_INT)?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


