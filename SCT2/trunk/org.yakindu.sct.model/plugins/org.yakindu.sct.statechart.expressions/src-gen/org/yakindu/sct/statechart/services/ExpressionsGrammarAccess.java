/*
* generated by Xtext
*/

package org.yakindu.sct.statechart.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ExpressionsGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class StatementModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StatementModel");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//StatementModel:
		//	statements+=Statement+;
		public ParserRule getRule() { return rule; }

		//statements+=Statement+
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0() { return cStatementsStatementParserRuleCall_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSignalEventDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cActionDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTransitionDefinitionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Statement:
		//	VariableDefinition | SignalEventDefinition | ActionDefinition | TransitionDefinition;
		public ParserRule getRule() { return rule; }

		//VariableDefinition | SignalEventDefinition | ActionDefinition | TransitionDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//VariableDefinition
		public RuleCall getVariableDefinitionParserRuleCall_0() { return cVariableDefinitionParserRuleCall_0; }

		//SignalEventDefinition
		public RuleCall getSignalEventDefinitionParserRuleCall_1() { return cSignalEventDefinitionParserRuleCall_1; }

		//ActionDefinition
		public RuleCall getActionDefinitionParserRuleCall_2() { return cActionDefinitionParserRuleCall_2; }

		//TransitionDefinition
		public RuleCall getTransitionDefinitionParserRuleCall_3() { return cTransitionDefinitionParserRuleCall_3; }
	}

	public class TransitionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransitionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cTriggersAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cTriggersEventParserRuleCall_0_0_0 = (RuleCall)cTriggersAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cTriggersAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cTriggersEventParserRuleCall_0_1_1_0 = (RuleCall)cTriggersAssignment_0_1_1.eContents().get(0);
		private final Assignment cGuardExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGuardExpressionExpressionRuleParserRuleCall_1_0 = (RuleCall)cGuardExpressionAssignment_1.eContents().get(0);
		
		//TransitionDefinition:
		//	(triggers+=Event ("," triggers+=Event)*) guardExpression=ExpressionRule?;
		public ParserRule getRule() { return rule; }

		//(triggers+=Event ("," triggers+=Event)*) guardExpression=ExpressionRule?
		public Group getGroup() { return cGroup; }

		//triggers+=Event ("," triggers+=Event)*
		public Group getGroup_0() { return cGroup_0; }

		//triggers+=Event
		public Assignment getTriggersAssignment_0_0() { return cTriggersAssignment_0_0; }

		//Event
		public RuleCall getTriggersEventParserRuleCall_0_0_0() { return cTriggersEventParserRuleCall_0_0_0; }

		//("," triggers+=Event)*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//","
		public Keyword getCommaKeyword_0_1_0() { return cCommaKeyword_0_1_0; }

		//triggers+=Event
		public Assignment getTriggersAssignment_0_1_1() { return cTriggersAssignment_0_1_1; }

		//Event
		public RuleCall getTriggersEventParserRuleCall_0_1_1_0() { return cTriggersEventParserRuleCall_0_1_1_0; }

		//guardExpression=ExpressionRule?
		public Assignment getGuardExpressionAssignment_1() { return cGuardExpressionAssignment_1; }

		//ExpressionRule
		public RuleCall getGuardExpressionExpressionRuleParserRuleCall_1_0() { return cGuardExpressionExpressionRuleParserRuleCall_1_0; }
	}

	public class VariableDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//VariableDefinition:
		//	"var" name=ID ":" type=Type;
		public ParserRule getRule() { return rule; }

		//"var" name=ID ":" type=Type
		public Group getGroup() { return cGroup; }

		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=Type
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//Type
		public RuleCall getTypeTypeEnumRuleCall_3_0() { return cTypeTypeEnumRuleCall_3_0; }
	}

	public class ActionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cEntryKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cExitKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Keyword cDoKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionRuleParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ActionDefinition:
		//	("entry" | "exit" "do") ":" expression=ExpressionRule ";";
		public ParserRule getRule() { return rule; }

		//("entry" | "exit" "do") ":" expression=ExpressionRule ";"
		public Group getGroup() { return cGroup; }

		//"entry" | "exit" "do"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"entry"
		public Keyword getEntryKeyword_0_0() { return cEntryKeyword_0_0; }

		//"exit" "do"
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"exit"
		public Keyword getExitKeyword_0_1_0() { return cExitKeyword_0_1_0; }

		//"do"
		public Keyword getDoKeyword_0_1_1() { return cDoKeyword_0_1_1; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//expression=ExpressionRule
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//ExpressionRule
		public RuleCall getExpressionExpressionRuleParserRuleCall_2_0() { return cExpressionExpressionRuleParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Event");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSignalEventDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTimeEventDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Event:
		//	SignalEventDefinition | TimeEventDefinition;
		public ParserRule getRule() { return rule; }

		//SignalEventDefinition | TimeEventDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//SignalEventDefinition
		public RuleCall getSignalEventDefinitionParserRuleCall_0() { return cSignalEventDefinitionParserRuleCall_0; }

		//TimeEventDefinition
		public RuleCall getTimeEventDefinitionParserRuleCall_1() { return cTimeEventDefinitionParserRuleCall_1; }
	}

	public class SignalEventDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignalEventDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDirectionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDirectionDirectionKindEnumRuleCall_3_0 = (RuleCall)cDirectionAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SignalEventDefinition returns Event:
		//	"event" name=ID ":" direction=DirectionKind ";";
		public ParserRule getRule() { return rule; }

		//"event" name=ID ":" direction=DirectionKind ";"
		public Group getGroup() { return cGroup; }

		//"event"
		public Keyword getEventKeyword_0() { return cEventKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//direction=DirectionKind
		public Assignment getDirectionAssignment_3() { return cDirectionAssignment_3; }

		//DirectionKind
		public RuleCall getDirectionDirectionKindEnumRuleCall_3_0() { return cDirectionDirectionKindEnumRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class TimeEventDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimeEventDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAfterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTimeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTimeTimeConstantParserRuleCall_2_0 = (RuleCall)cTimeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TimeEventDefinition returns Event:
		//	"after" "(" time=TimeConstant ")";
		public ParserRule getRule() { return rule; }

		//"after" "(" time=TimeConstant ")"
		public Group getGroup() { return cGroup; }

		//"after"
		public Keyword getAfterKeyword_0() { return cAfterKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//time=TimeConstant
		public Assignment getTimeAssignment_2() { return cTimeAssignment_2; }

		//TimeConstant
		public RuleCall getTimeTimeConstantParserRuleCall_2_0() { return cTimeTimeConstantParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class TimeConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimeConstant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUnitTimeUnitEnumRuleCall_1_0 = (RuleCall)cUnitAssignment_1.eContents().get(0);
		
		//TimeConstant:
		//	value=INT unit=TimeUnit?;
		public ParserRule getRule() { return rule; }

		//value=INT unit=TimeUnit?
		public Group getGroup() { return cGroup; }

		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }

		//unit=TimeUnit?
		public Assignment getUnitAssignment_1() { return cUnitAssignment_1; }

		//TimeUnit
		public RuleCall getUnitTimeUnitEnumRuleCall_1_0() { return cUnitTimeUnitEnumRuleCall_1_0; }
	}

	public class ExpressionRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionRule");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cExpressionAlternatives_0 = (Alternatives)cExpressionAssignment.eContents().get(0);
		private final RuleCall cExpressionLogicalOrExpressionParserRuleCall_0_0 = (RuleCall)cExpressionAlternatives_0.eContents().get(0);
		private final RuleCall cExpressionRaiseEventExpressionParserRuleCall_0_1 = (RuleCall)cExpressionAlternatives_0.eContents().get(1);
		
		//ExpressionRule:
		//	expression=(LogicalOrExpression | RaiseEventExpression);
		public ParserRule getRule() { return rule; }

		//expression=(LogicalOrExpression | RaiseEventExpression)
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }

		//LogicalOrExpression | RaiseEventExpression
		public Alternatives getExpressionAlternatives_0() { return cExpressionAlternatives_0; }

		//LogicalOrExpression
		public RuleCall getExpressionLogicalOrExpressionParserRuleCall_0_0() { return cExpressionLogicalOrExpressionParserRuleCall_0_0; }

		//RaiseEventExpression
		public RuleCall getExpressionRaiseEventExpressionParserRuleCall_0_1() { return cExpressionRaiseEventExpressionParserRuleCall_0_1; }
	}

	public class RaiseEventExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RaiseEventExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRaiseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEventAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEventEventCrossReference_1_0 = (CrossReference)cEventAssignment_1.eContents().get(0);
		private final RuleCall cEventEventIDTerminalRuleCall_1_0_1 = (RuleCall)cEventEventCrossReference_1_0.eContents().get(1);
		
		//RaiseEventExpression:
		//	"raise" event=[Event];
		public ParserRule getRule() { return rule; }

		//"raise" event=[Event]
		public Group getGroup() { return cGroup; }

		//"raise"
		public Keyword getRaiseKeyword_0() { return cRaiseKeyword_0; }

		//event=[Event]
		public Assignment getEventAssignment_1() { return cEventAssignment_1; }

		//[Event]
		public CrossReference getEventEventCrossReference_1_0() { return cEventEventCrossReference_1_0; }

		//ID
		public RuleCall getEventEventIDTerminalRuleCall_1_0_1() { return cEventEventIDTerminalRuleCall_1_0_1; }
	}

	public class LogicalOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicalOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicalOrExpressionLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandLogicalAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//LogicalOrExpression returns Expression:
		//	LogicalAndExpression ({LogicalOrExpression.leftOperand=current} "||" rightOperand=LogicalAndExpression)*;
		public ParserRule getRule() { return rule; }

		//LogicalAndExpression ({LogicalOrExpression.leftOperand=current} "||" rightOperand=LogicalAndExpression)*
		public Group getGroup() { return cGroup; }

		//LogicalAndExpression
		public RuleCall getLogicalAndExpressionParserRuleCall_0() { return cLogicalAndExpressionParserRuleCall_0; }

		//({LogicalOrExpression.leftOperand=current} "||" rightOperand=LogicalAndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{LogicalOrExpression.leftOperand=current}
		public Action getLogicalOrExpressionLeftOperandAction_1_0() { return cLogicalOrExpressionLeftOperandAction_1_0; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }

		//rightOperand=LogicalAndExpression
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//LogicalAndExpression
		public RuleCall getRightOperandLogicalAndExpressionParserRuleCall_1_2_0() { return cRightOperandLogicalAndExpressionParserRuleCall_1_2_0; }
	}

	public class LogicalAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicalAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalNotExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicalAndExpressionLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandLogicalNotExpressionParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//LogicalAndExpression returns Expression:
		//	LogicalNotExpression ({LogicalAndExpression.leftOperand=current} "&&" rightOperand=LogicalNotExpression)*;
		public ParserRule getRule() { return rule; }

		//LogicalNotExpression ({LogicalAndExpression.leftOperand=current} "&&" rightOperand=LogicalNotExpression)*
		public Group getGroup() { return cGroup; }

		//LogicalNotExpression
		public RuleCall getLogicalNotExpressionParserRuleCall_0() { return cLogicalNotExpressionParserRuleCall_0; }

		//({LogicalAndExpression.leftOperand=current} "&&" rightOperand=LogicalNotExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{LogicalAndExpression.leftOperand=current}
		public Action getLogicalAndExpressionLeftOperandAction_1_0() { return cLogicalAndExpressionLeftOperandAction_1_0; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }

		//rightOperand=LogicalNotExpression
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//LogicalNotExpression
		public RuleCall getRightOperandLogicalNotExpressionParserRuleCall_1_2_0() { return cRightOperandLogicalNotExpressionParserRuleCall_1_2_0; }
	}

	public class LogicalNotExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicalNotExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLogicalRelationExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cLogicalNotExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperandLogicalRelationExpressionParserRuleCall_1_2_0 = (RuleCall)cOperandAssignment_1_2.eContents().get(0);
		
		//LogicalNotExpression returns Expression:
		//	LogicalRelationExpression | {LogicalNotExpression} "!" operand=LogicalRelationExpression;
		public ParserRule getRule() { return rule; }

		//LogicalRelationExpression | {LogicalNotExpression} "!" operand=LogicalRelationExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//LogicalRelationExpression
		public RuleCall getLogicalRelationExpressionParserRuleCall_0() { return cLogicalRelationExpressionParserRuleCall_0; }

		//{LogicalNotExpression} "!" operand=LogicalRelationExpression
		public Group getGroup_1() { return cGroup_1; }

		//{LogicalNotExpression}
		public Action getLogicalNotExpressionAction_1_0() { return cLogicalNotExpressionAction_1_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_1_1() { return cExclamationMarkKeyword_1_1; }

		//operand=LogicalRelationExpression
		public Assignment getOperandAssignment_1_2() { return cOperandAssignment_1_2; }

		//LogicalRelationExpression
		public RuleCall getOperandLogicalRelationExpressionParserRuleCall_1_2_0() { return cOperandLogicalRelationExpressionParserRuleCall_1_2_0; }
	}

	public class LogicalRelationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicalRelationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNumericalAddSubtractExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicalRelationExpressionLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorRelationalOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandNumericalAddSubtractExpressionParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//LogicalRelationExpression returns Expression:
		//	NumericalAddSubtractExpression ({LogicalRelationExpression.leftOperand=current} operator=RelationalOperator
		//	rightOperand=NumericalAddSubtractExpression)*;
		public ParserRule getRule() { return rule; }

		//NumericalAddSubtractExpression ({LogicalRelationExpression.leftOperand=current} operator=RelationalOperator
		//rightOperand=NumericalAddSubtractExpression)*
		public Group getGroup() { return cGroup; }

		//NumericalAddSubtractExpression
		public RuleCall getNumericalAddSubtractExpressionParserRuleCall_0() { return cNumericalAddSubtractExpressionParserRuleCall_0; }

		//({LogicalRelationExpression.leftOperand=current} operator=RelationalOperator
		//rightOperand=NumericalAddSubtractExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{LogicalRelationExpression.leftOperand=current}
		public Action getLogicalRelationExpressionLeftOperandAction_1_0() { return cLogicalRelationExpressionLeftOperandAction_1_0; }

		//operator=RelationalOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//RelationalOperator
		public RuleCall getOperatorRelationalOperatorEnumRuleCall_1_1_0() { return cOperatorRelationalOperatorEnumRuleCall_1_1_0; }

		//rightOperand=NumericalAddSubtractExpression
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//NumericalAddSubtractExpression
		public RuleCall getRightOperandNumericalAddSubtractExpressionParserRuleCall_1_2_0() { return cRightOperandNumericalAddSubtractExpressionParserRuleCall_1_2_0; }
	}

	public class NumericalAddSubtractExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumericalAddSubtractExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNumericalMultiplyDivideExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cNumericalAddSubtractExpressionLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorAdditiveOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandNumericalMultiplyDivideExpressionParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//NumericalAddSubtractExpression returns Expression:
		//	NumericalMultiplyDivideExpression ({NumericalAddSubtractExpression.leftOperand=current} operator=AdditiveOperator
		//	rightOperand=NumericalMultiplyDivideExpression)*;
		public ParserRule getRule() { return rule; }

		//NumericalMultiplyDivideExpression ({NumericalAddSubtractExpression.leftOperand=current} operator=AdditiveOperator
		//rightOperand=NumericalMultiplyDivideExpression)*
		public Group getGroup() { return cGroup; }

		//NumericalMultiplyDivideExpression
		public RuleCall getNumericalMultiplyDivideExpressionParserRuleCall_0() { return cNumericalMultiplyDivideExpressionParserRuleCall_0; }

		//({NumericalAddSubtractExpression.leftOperand=current} operator=AdditiveOperator
		//rightOperand=NumericalMultiplyDivideExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{NumericalAddSubtractExpression.leftOperand=current}
		public Action getNumericalAddSubtractExpressionLeftOperandAction_1_0() { return cNumericalAddSubtractExpressionLeftOperandAction_1_0; }

		//operator=AdditiveOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//AdditiveOperator
		public RuleCall getOperatorAdditiveOperatorEnumRuleCall_1_1_0() { return cOperatorAdditiveOperatorEnumRuleCall_1_1_0; }

		//rightOperand=NumericalMultiplyDivideExpression
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//NumericalMultiplyDivideExpression
		public RuleCall getRightOperandNumericalMultiplyDivideExpressionParserRuleCall_1_2_0() { return cRightOperandNumericalMultiplyDivideExpressionParserRuleCall_1_2_0; }
	}

	public class NumericalMultiplyDivideExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumericalMultiplyDivideExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNumericalUnaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cNumericalMultiplyDivideExpressionLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorMultiplicativeOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandNumericalUnaryExpressionParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//NumericalMultiplyDivideExpression returns Expression:
		//	NumericalUnaryExpression ({NumericalMultiplyDivideExpression.leftOperand=current} operator=MultiplicativeOperator
		//	rightOperand=NumericalUnaryExpression)*;
		public ParserRule getRule() { return rule; }

		//NumericalUnaryExpression ({NumericalMultiplyDivideExpression.leftOperand=current} operator=MultiplicativeOperator
		//rightOperand=NumericalUnaryExpression)*
		public Group getGroup() { return cGroup; }

		//NumericalUnaryExpression
		public RuleCall getNumericalUnaryExpressionParserRuleCall_0() { return cNumericalUnaryExpressionParserRuleCall_0; }

		//({NumericalMultiplyDivideExpression.leftOperand=current} operator=MultiplicativeOperator
		//rightOperand=NumericalUnaryExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{NumericalMultiplyDivideExpression.leftOperand=current}
		public Action getNumericalMultiplyDivideExpressionLeftOperandAction_1_0() { return cNumericalMultiplyDivideExpressionLeftOperandAction_1_0; }

		//operator=MultiplicativeOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//MultiplicativeOperator
		public RuleCall getOperatorMultiplicativeOperatorEnumRuleCall_1_1_0() { return cOperatorMultiplicativeOperatorEnumRuleCall_1_1_0; }

		//rightOperand=NumericalUnaryExpression
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//NumericalUnaryExpression
		public RuleCall getRightOperandNumericalUnaryExpressionParserRuleCall_1_2_0() { return cRightOperandNumericalUnaryExpressionParserRuleCall_1_2_0; }
	}

	public class NumericalUnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumericalUnaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNumericalUnaryExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorUnaryOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperandPrimaryExpressionParserRuleCall_1_2_0 = (RuleCall)cOperandAssignment_1_2.eContents().get(0);
		
		//NumericalUnaryExpression returns Expression:
		//	PrimaryExpression | {NumericalUnaryExpression} operator=UnaryOperator operand=PrimaryExpression;
		public ParserRule getRule() { return rule; }

		//PrimaryExpression | {NumericalUnaryExpression} operator=UnaryOperator operand=PrimaryExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }

		//{NumericalUnaryExpression} operator=UnaryOperator operand=PrimaryExpression
		public Group getGroup_1() { return cGroup_1; }

		//{NumericalUnaryExpression}
		public Action getNumericalUnaryExpressionAction_1_0() { return cNumericalUnaryExpressionAction_1_0; }

		//operator=UnaryOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//UnaryOperator
		public RuleCall getOperatorUnaryOperatorEnumRuleCall_1_1_0() { return cOperatorUnaryOperatorEnumRuleCall_1_1_0; }

		//operand=PrimaryExpression
		public Assignment getOperandAssignment_1_2() { return cOperandAssignment_1_2; }

		//PrimaryExpression
		public RuleCall getOperandPrimaryExpressionParserRuleCall_1_2_0() { return cOperandPrimaryExpressionParserRuleCall_1_2_0; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cLogicalOrExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//PrimaryExpression returns Expression:
		//	ValueExpression | "(" LogicalOrExpression ")";
		public ParserRule getRule() { return rule; }

		//ValueExpression | "(" LogicalOrExpression ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ValueExpression
		public RuleCall getValueExpressionParserRuleCall_0() { return cValueExpressionParserRuleCall_0; }

		//"(" LogicalOrExpression ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//LogicalOrExpression
		public RuleCall getLogicalOrExpressionParserRuleCall_1_1() { return cLogicalOrExpressionParserRuleCall_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class ValueExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveValueExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableReferenceExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ValueExpression returns Expression:
		//	PrimitiveValueExpression | VariableReferenceExpression;
		public ParserRule getRule() { return rule; }

		//PrimitiveValueExpression | VariableReferenceExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//PrimitiveValueExpression
		public RuleCall getPrimitiveValueExpressionParserRuleCall_0() { return cPrimitiveValueExpressionParserRuleCall_0; }

		//VariableReferenceExpression
		public RuleCall getVariableReferenceExpressionParserRuleCall_1() { return cVariableReferenceExpressionParserRuleCall_1; }
	}

	public class PrimitiveValueExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveValueExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimitiveValueExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueLiteralParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//PrimitiveValueExpression returns Expression:
		//	{PrimitiveValueExpression} value=Literal;
		public ParserRule getRule() { return rule; }

		//{PrimitiveValueExpression} value=Literal
		public Group getGroup() { return cGroup; }

		//{PrimitiveValueExpression}
		public Action getPrimitiveValueExpressionAction_0() { return cPrimitiveValueExpressionAction_0; }

		//value=Literal
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//Literal
		public RuleCall getValueLiteralParserRuleCall_1_0() { return cValueLiteralParserRuleCall_1_0; }
	}

	public class VariableReferenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableReferenceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPropertyReferenceExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cValueVariableDefinitionCrossReference_1_0 = (CrossReference)cValueAssignment_1.eContents().get(0);
		private final RuleCall cValueVariableDefinitionIDTerminalRuleCall_1_0_1 = (RuleCall)cValueVariableDefinitionCrossReference_1_0.eContents().get(1);
		
		//VariableReferenceExpression returns Expression:
		//	{PropertyReferenceExpression} value=[VariableDefinition];
		public ParserRule getRule() { return rule; }

		//{PropertyReferenceExpression} value=[VariableDefinition]
		public Group getGroup() { return cGroup; }

		//{PropertyReferenceExpression}
		public Action getPropertyReferenceExpressionAction_0() { return cPropertyReferenceExpressionAction_0; }

		//value=[VariableDefinition]
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//[VariableDefinition]
		public CrossReference getValueVariableDefinitionCrossReference_1_0() { return cValueVariableDefinitionCrossReference_1_0; }

		//ID
		public RuleCall getValueVariableDefinitionIDTerminalRuleCall_1_0_1() { return cValueVariableDefinitionIDTerminalRuleCall_1_0_1; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBOOLTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFLOATTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Literal returns ecore::EString:
		//	BOOL | INT | STRING | FLOAT;
		public ParserRule getRule() { return rule; }

		//BOOL | INT | STRING | FLOAT
		public Alternatives getAlternatives() { return cAlternatives; }

		//BOOL
		public RuleCall getBOOLTerminalRuleCall_0() { return cBOOLTerminalRuleCall_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }

		//FLOAT
		public RuleCall getFLOATTerminalRuleCall_3() { return cFLOATTerminalRuleCall_3; }
	}
	
	
	public class AdditiveOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "AdditiveOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPlusEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPlusPlusSignKeyword_0_0 = (Keyword)cPlusEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMinusEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMinusHyphenMinusKeyword_1_0 = (Keyword)cMinusEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum AdditiveOperator:
		//	plus="+" | minus="-";
		public EnumRule getRule() { return rule; }

		//plus="+" | minus="-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//plus="+"
		public EnumLiteralDeclaration getPlusEnumLiteralDeclaration_0() { return cPlusEnumLiteralDeclaration_0; }

		//"+"
		public Keyword getPlusPlusSignKeyword_0_0() { return cPlusPlusSignKeyword_0_0; }

		//minus="-"
		public EnumLiteralDeclaration getMinusEnumLiteralDeclaration_1() { return cMinusEnumLiteralDeclaration_1; }

		//"-"
		public Keyword getMinusHyphenMinusKeyword_1_0() { return cMinusHyphenMinusKeyword_1_0; }
	}

	public class MultiplicativeOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicativeOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMulEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMulAsteriskKeyword_0_0 = (Keyword)cMulEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDivEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDivSolidusKeyword_1_0 = (Keyword)cDivEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cModEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cModPercentSignKeyword_2_0 = (Keyword)cModEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum MultiplicativeOperator:
		//	mul="*" | div="/" | mod="%";
		public EnumRule getRule() { return rule; }

		//mul="*" | div="/" | mod="%"
		public Alternatives getAlternatives() { return cAlternatives; }

		//mul="*"
		public EnumLiteralDeclaration getMulEnumLiteralDeclaration_0() { return cMulEnumLiteralDeclaration_0; }

		//"*"
		public Keyword getMulAsteriskKeyword_0_0() { return cMulAsteriskKeyword_0_0; }

		//div="/"
		public EnumLiteralDeclaration getDivEnumLiteralDeclaration_1() { return cDivEnumLiteralDeclaration_1; }

		//"/"
		public Keyword getDivSolidusKeyword_1_0() { return cDivSolidusKeyword_1_0; }

		//mod="%"
		public EnumLiteralDeclaration getModEnumLiteralDeclaration_2() { return cModEnumLiteralDeclaration_2; }

		//"%"
		public Keyword getModPercentSignKeyword_2_0() { return cModPercentSignKeyword_2_0; }
	}

	public class UnaryOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPositiveEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPositivePlusSignKeyword_0_0 = (Keyword)cPositiveEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNegativeEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNegativeHyphenMinusKeyword_1_0 = (Keyword)cNegativeEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cComplementEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cComplementTildeKeyword_2_0 = (Keyword)cComplementEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum UnaryOperator:
		//	positive="+" | negative="-" | complement="~";
		public EnumRule getRule() { return rule; }

		//positive="+" | negative="-" | complement="~"
		public Alternatives getAlternatives() { return cAlternatives; }

		//positive="+"
		public EnumLiteralDeclaration getPositiveEnumLiteralDeclaration_0() { return cPositiveEnumLiteralDeclaration_0; }

		//"+"
		public Keyword getPositivePlusSignKeyword_0_0() { return cPositivePlusSignKeyword_0_0; }

		//negative="-"
		public EnumLiteralDeclaration getNegativeEnumLiteralDeclaration_1() { return cNegativeEnumLiteralDeclaration_1; }

		//"-"
		public Keyword getNegativeHyphenMinusKeyword_1_0() { return cNegativeHyphenMinusKeyword_1_0; }

		//complement="~"
		public EnumLiteralDeclaration getComplementEnumLiteralDeclaration_2() { return cComplementEnumLiteralDeclaration_2; }

		//"~"
		public Keyword getComplementTildeKeyword_2_0() { return cComplementTildeKeyword_2_0; }
	}

	public class RelationalOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "RelationalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSmallerEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSmallerLessThanSignKeyword_0_0 = (Keyword)cSmallerEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSmallerEqualEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSmallerEqualLessThanSignEqualsSignKeyword_1_0 = (Keyword)cSmallerEqualEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGreaterGreaterThanSignKeyword_2_0 = (Keyword)cGreaterEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterEqualEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGreaterEqualGreaterThanSignEqualsSignKeyword_3_0 = (Keyword)cGreaterEqualEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cEqualsEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cEqualsEqualsSignEqualsSignKeyword_4_0 = (Keyword)cEqualsEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cNotEqualsEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cNotEqualsExclamationMarkEqualsSignKeyword_5_0 = (Keyword)cNotEqualsEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum RelationalOperator:
		//	smaller="<" | smallerEqual="<=" | greater=">" | greaterEqual=">=" | equals="==" | notEquals="!=";
		public EnumRule getRule() { return rule; }

		//smaller="<" | smallerEqual="<=" | greater=">" | greaterEqual=">=" | equals="==" | notEquals="!="
		public Alternatives getAlternatives() { return cAlternatives; }

		//smaller="<"
		public EnumLiteralDeclaration getSmallerEnumLiteralDeclaration_0() { return cSmallerEnumLiteralDeclaration_0; }

		//"<"
		public Keyword getSmallerLessThanSignKeyword_0_0() { return cSmallerLessThanSignKeyword_0_0; }

		//smallerEqual="<="
		public EnumLiteralDeclaration getSmallerEqualEnumLiteralDeclaration_1() { return cSmallerEqualEnumLiteralDeclaration_1; }

		//"<="
		public Keyword getSmallerEqualLessThanSignEqualsSignKeyword_1_0() { return cSmallerEqualLessThanSignEqualsSignKeyword_1_0; }

		//greater=">"
		public EnumLiteralDeclaration getGreaterEnumLiteralDeclaration_2() { return cGreaterEnumLiteralDeclaration_2; }

		//">"
		public Keyword getGreaterGreaterThanSignKeyword_2_0() { return cGreaterGreaterThanSignKeyword_2_0; }

		//greaterEqual=">="
		public EnumLiteralDeclaration getGreaterEqualEnumLiteralDeclaration_3() { return cGreaterEqualEnumLiteralDeclaration_3; }

		//">="
		public Keyword getGreaterEqualGreaterThanSignEqualsSignKeyword_3_0() { return cGreaterEqualGreaterThanSignEqualsSignKeyword_3_0; }

		//equals="=="
		public EnumLiteralDeclaration getEqualsEnumLiteralDeclaration_4() { return cEqualsEnumLiteralDeclaration_4; }

		//"=="
		public Keyword getEqualsEqualsSignEqualsSignKeyword_4_0() { return cEqualsEqualsSignEqualsSignKeyword_4_0; }

		//notEquals="!="
		public EnumLiteralDeclaration getNotEqualsEnumLiteralDeclaration_5() { return cNotEqualsEnumLiteralDeclaration_5; }

		//"!="
		public Keyword getNotEqualsExclamationMarkEqualsSignKeyword_5_0() { return cNotEqualsExclamationMarkEqualsSignKeyword_5_0; }
	}

	public class DirectionKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "DirectionKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cIncomingEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cIncomingInKeyword_0_0 = (Keyword)cIncomingEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOutgoingEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOutgoingOutKeyword_1_0 = (Keyword)cOutgoingEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum DirectionKind:
		//	incoming="in" | outgoing="out";
		public EnumRule getRule() { return rule; }

		//incoming="in" | outgoing="out"
		public Alternatives getAlternatives() { return cAlternatives; }

		//incoming="in"
		public EnumLiteralDeclaration getIncomingEnumLiteralDeclaration_0() { return cIncomingEnumLiteralDeclaration_0; }

		//"in"
		public Keyword getIncomingInKeyword_0_0() { return cIncomingInKeyword_0_0; }

		//outgoing="out"
		public EnumLiteralDeclaration getOutgoingEnumLiteralDeclaration_1() { return cOutgoingEnumLiteralDeclaration_1; }

		//"out"
		public Keyword getOutgoingOutKeyword_1_0() { return cOutgoingOutKeyword_1_0; }
	}

	public class TimeUnitElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "TimeUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSecondEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSecondSKeyword_0_0 = (Keyword)cSecondEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMillisecondEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMillisecondMsKeyword_1_0 = (Keyword)cMillisecondEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNanosecondEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNanosecondNsKeyword_2_0 = (Keyword)cNanosecondEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum TimeUnit:
		//	second="s" | millisecond="ms" | nanosecond="ns";
		public EnumRule getRule() { return rule; }

		//second="s" | millisecond="ms" | nanosecond="ns"
		public Alternatives getAlternatives() { return cAlternatives; }

		//second="s"
		public EnumLiteralDeclaration getSecondEnumLiteralDeclaration_0() { return cSecondEnumLiteralDeclaration_0; }

		//"s"
		public Keyword getSecondSKeyword_0_0() { return cSecondSKeyword_0_0; }

		//millisecond="ms"
		public EnumLiteralDeclaration getMillisecondEnumLiteralDeclaration_1() { return cMillisecondEnumLiteralDeclaration_1; }

		//"ms"
		public Keyword getMillisecondMsKeyword_1_0() { return cMillisecondMsKeyword_1_0; }

		//nanosecond="ns"
		public EnumLiteralDeclaration getNanosecondEnumLiteralDeclaration_2() { return cNanosecondEnumLiteralDeclaration_2; }

		//"ns"
		public Keyword getNanosecondNsKeyword_2_0() { return cNanosecondNsKeyword_2_0; }
	}

	public class TypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cIntEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cIntIntKeyword_0_0 = (Keyword)cIntEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFloatEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFloatFloatKeyword_1_0 = (Keyword)cFloatEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBooleanEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBooleanBooleanKeyword_2_0 = (Keyword)cBooleanEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Type:
		//	int | float | boolean;
		public EnumRule getRule() { return rule; }

		//int | float | boolean
		public Alternatives getAlternatives() { return cAlternatives; }

		//int
		public EnumLiteralDeclaration getIntEnumLiteralDeclaration_0() { return cIntEnumLiteralDeclaration_0; }

		//"int"
		public Keyword getIntIntKeyword_0_0() { return cIntIntKeyword_0_0; }

		//float
		public EnumLiteralDeclaration getFloatEnumLiteralDeclaration_1() { return cFloatEnumLiteralDeclaration_1; }

		//"float"
		public Keyword getFloatFloatKeyword_1_0() { return cFloatFloatKeyword_1_0; }

		//boolean
		public EnumLiteralDeclaration getBooleanEnumLiteralDeclaration_2() { return cBooleanEnumLiteralDeclaration_2; }

		//"boolean"
		public Keyword getBooleanBooleanKeyword_2_0() { return cBooleanBooleanKeyword_2_0; }
	}
	
	private StatementModelElements pStatementModel;
	private StatementElements pStatement;
	private TransitionDefinitionElements pTransitionDefinition;
	private VariableDefinitionElements pVariableDefinition;
	private ActionDefinitionElements pActionDefinition;
	private EventElements pEvent;
	private SignalEventDefinitionElements pSignalEventDefinition;
	private TimeEventDefinitionElements pTimeEventDefinition;
	private TimeConstantElements pTimeConstant;
	private ExpressionRuleElements pExpressionRule;
	private RaiseEventExpressionElements pRaiseEventExpression;
	private LogicalOrExpressionElements pLogicalOrExpression;
	private LogicalAndExpressionElements pLogicalAndExpression;
	private LogicalNotExpressionElements pLogicalNotExpression;
	private LogicalRelationExpressionElements pLogicalRelationExpression;
	private NumericalAddSubtractExpressionElements pNumericalAddSubtractExpression;
	private NumericalMultiplyDivideExpressionElements pNumericalMultiplyDivideExpression;
	private NumericalUnaryExpressionElements pNumericalUnaryExpression;
	private PrimaryExpressionElements pPrimaryExpression;
	private AdditiveOperatorElements unknownRuleAdditiveOperator;
	private MultiplicativeOperatorElements unknownRuleMultiplicativeOperator;
	private UnaryOperatorElements unknownRuleUnaryOperator;
	private RelationalOperatorElements unknownRuleRelationalOperator;
	private DirectionKindElements unknownRuleDirectionKind;
	private TimeUnitElements unknownRuleTimeUnit;
	private TypeElements unknownRuleType;
	private ValueExpressionElements pValueExpression;
	private PrimitiveValueExpressionElements pPrimitiveValueExpression;
	private VariableReferenceExpressionElements pVariableReferenceExpression;
	private LiteralElements pLiteral;
	private TerminalRule tBOOL;
	private TerminalRule tFLOAT;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ExpressionsGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//StatementModel:
	//	statements+=Statement+;
	public StatementModelElements getStatementModelAccess() {
		return (pStatementModel != null) ? pStatementModel : (pStatementModel = new StatementModelElements());
	}
	
	public ParserRule getStatementModelRule() {
		return getStatementModelAccess().getRule();
	}

	//Statement:
	//	VariableDefinition | SignalEventDefinition | ActionDefinition | TransitionDefinition;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//TransitionDefinition:
	//	(triggers+=Event ("," triggers+=Event)*) guardExpression=ExpressionRule?;
	public TransitionDefinitionElements getTransitionDefinitionAccess() {
		return (pTransitionDefinition != null) ? pTransitionDefinition : (pTransitionDefinition = new TransitionDefinitionElements());
	}
	
	public ParserRule getTransitionDefinitionRule() {
		return getTransitionDefinitionAccess().getRule();
	}

	//VariableDefinition:
	//	"var" name=ID ":" type=Type;
	public VariableDefinitionElements getVariableDefinitionAccess() {
		return (pVariableDefinition != null) ? pVariableDefinition : (pVariableDefinition = new VariableDefinitionElements());
	}
	
	public ParserRule getVariableDefinitionRule() {
		return getVariableDefinitionAccess().getRule();
	}

	//ActionDefinition:
	//	("entry" | "exit" "do") ":" expression=ExpressionRule ";";
	public ActionDefinitionElements getActionDefinitionAccess() {
		return (pActionDefinition != null) ? pActionDefinition : (pActionDefinition = new ActionDefinitionElements());
	}
	
	public ParserRule getActionDefinitionRule() {
		return getActionDefinitionAccess().getRule();
	}

	//Event:
	//	SignalEventDefinition | TimeEventDefinition;
	public EventElements getEventAccess() {
		return (pEvent != null) ? pEvent : (pEvent = new EventElements());
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}

	//SignalEventDefinition returns Event:
	//	"event" name=ID ":" direction=DirectionKind ";";
	public SignalEventDefinitionElements getSignalEventDefinitionAccess() {
		return (pSignalEventDefinition != null) ? pSignalEventDefinition : (pSignalEventDefinition = new SignalEventDefinitionElements());
	}
	
	public ParserRule getSignalEventDefinitionRule() {
		return getSignalEventDefinitionAccess().getRule();
	}

	//TimeEventDefinition returns Event:
	//	"after" "(" time=TimeConstant ")";
	public TimeEventDefinitionElements getTimeEventDefinitionAccess() {
		return (pTimeEventDefinition != null) ? pTimeEventDefinition : (pTimeEventDefinition = new TimeEventDefinitionElements());
	}
	
	public ParserRule getTimeEventDefinitionRule() {
		return getTimeEventDefinitionAccess().getRule();
	}

	//TimeConstant:
	//	value=INT unit=TimeUnit?;
	public TimeConstantElements getTimeConstantAccess() {
		return (pTimeConstant != null) ? pTimeConstant : (pTimeConstant = new TimeConstantElements());
	}
	
	public ParserRule getTimeConstantRule() {
		return getTimeConstantAccess().getRule();
	}

	//ExpressionRule:
	//	expression=(LogicalOrExpression | RaiseEventExpression);
	public ExpressionRuleElements getExpressionRuleAccess() {
		return (pExpressionRule != null) ? pExpressionRule : (pExpressionRule = new ExpressionRuleElements());
	}
	
	public ParserRule getExpressionRuleRule() {
		return getExpressionRuleAccess().getRule();
	}

	//RaiseEventExpression:
	//	"raise" event=[Event];
	public RaiseEventExpressionElements getRaiseEventExpressionAccess() {
		return (pRaiseEventExpression != null) ? pRaiseEventExpression : (pRaiseEventExpression = new RaiseEventExpressionElements());
	}
	
	public ParserRule getRaiseEventExpressionRule() {
		return getRaiseEventExpressionAccess().getRule();
	}

	//LogicalOrExpression returns Expression:
	//	LogicalAndExpression ({LogicalOrExpression.leftOperand=current} "||" rightOperand=LogicalAndExpression)*;
	public LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return (pLogicalOrExpression != null) ? pLogicalOrExpression : (pLogicalOrExpression = new LogicalOrExpressionElements());
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}

	//LogicalAndExpression returns Expression:
	//	LogicalNotExpression ({LogicalAndExpression.leftOperand=current} "&&" rightOperand=LogicalNotExpression)*;
	public LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return (pLogicalAndExpression != null) ? pLogicalAndExpression : (pLogicalAndExpression = new LogicalAndExpressionElements());
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}

	//LogicalNotExpression returns Expression:
	//	LogicalRelationExpression | {LogicalNotExpression} "!" operand=LogicalRelationExpression;
	public LogicalNotExpressionElements getLogicalNotExpressionAccess() {
		return (pLogicalNotExpression != null) ? pLogicalNotExpression : (pLogicalNotExpression = new LogicalNotExpressionElements());
	}
	
	public ParserRule getLogicalNotExpressionRule() {
		return getLogicalNotExpressionAccess().getRule();
	}

	//LogicalRelationExpression returns Expression:
	//	NumericalAddSubtractExpression ({LogicalRelationExpression.leftOperand=current} operator=RelationalOperator
	//	rightOperand=NumericalAddSubtractExpression)*;
	public LogicalRelationExpressionElements getLogicalRelationExpressionAccess() {
		return (pLogicalRelationExpression != null) ? pLogicalRelationExpression : (pLogicalRelationExpression = new LogicalRelationExpressionElements());
	}
	
	public ParserRule getLogicalRelationExpressionRule() {
		return getLogicalRelationExpressionAccess().getRule();
	}

	//NumericalAddSubtractExpression returns Expression:
	//	NumericalMultiplyDivideExpression ({NumericalAddSubtractExpression.leftOperand=current} operator=AdditiveOperator
	//	rightOperand=NumericalMultiplyDivideExpression)*;
	public NumericalAddSubtractExpressionElements getNumericalAddSubtractExpressionAccess() {
		return (pNumericalAddSubtractExpression != null) ? pNumericalAddSubtractExpression : (pNumericalAddSubtractExpression = new NumericalAddSubtractExpressionElements());
	}
	
	public ParserRule getNumericalAddSubtractExpressionRule() {
		return getNumericalAddSubtractExpressionAccess().getRule();
	}

	//NumericalMultiplyDivideExpression returns Expression:
	//	NumericalUnaryExpression ({NumericalMultiplyDivideExpression.leftOperand=current} operator=MultiplicativeOperator
	//	rightOperand=NumericalUnaryExpression)*;
	public NumericalMultiplyDivideExpressionElements getNumericalMultiplyDivideExpressionAccess() {
		return (pNumericalMultiplyDivideExpression != null) ? pNumericalMultiplyDivideExpression : (pNumericalMultiplyDivideExpression = new NumericalMultiplyDivideExpressionElements());
	}
	
	public ParserRule getNumericalMultiplyDivideExpressionRule() {
		return getNumericalMultiplyDivideExpressionAccess().getRule();
	}

	//NumericalUnaryExpression returns Expression:
	//	PrimaryExpression | {NumericalUnaryExpression} operator=UnaryOperator operand=PrimaryExpression;
	public NumericalUnaryExpressionElements getNumericalUnaryExpressionAccess() {
		return (pNumericalUnaryExpression != null) ? pNumericalUnaryExpression : (pNumericalUnaryExpression = new NumericalUnaryExpressionElements());
	}
	
	public ParserRule getNumericalUnaryExpressionRule() {
		return getNumericalUnaryExpressionAccess().getRule();
	}

	//PrimaryExpression returns Expression:
	//	ValueExpression | "(" LogicalOrExpression ")";
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return (pPrimaryExpression != null) ? pPrimaryExpression : (pPrimaryExpression = new PrimaryExpressionElements());
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//enum AdditiveOperator:
	//	plus="+" | minus="-";
	public AdditiveOperatorElements getAdditiveOperatorAccess() {
		return (unknownRuleAdditiveOperator != null) ? unknownRuleAdditiveOperator : (unknownRuleAdditiveOperator = new AdditiveOperatorElements());
	}
	
	public EnumRule getAdditiveOperatorRule() {
		return getAdditiveOperatorAccess().getRule();
	}

	//enum MultiplicativeOperator:
	//	mul="*" | div="/" | mod="%";
	public MultiplicativeOperatorElements getMultiplicativeOperatorAccess() {
		return (unknownRuleMultiplicativeOperator != null) ? unknownRuleMultiplicativeOperator : (unknownRuleMultiplicativeOperator = new MultiplicativeOperatorElements());
	}
	
	public EnumRule getMultiplicativeOperatorRule() {
		return getMultiplicativeOperatorAccess().getRule();
	}

	//enum UnaryOperator:
	//	positive="+" | negative="-" | complement="~";
	public UnaryOperatorElements getUnaryOperatorAccess() {
		return (unknownRuleUnaryOperator != null) ? unknownRuleUnaryOperator : (unknownRuleUnaryOperator = new UnaryOperatorElements());
	}
	
	public EnumRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}

	//enum RelationalOperator:
	//	smaller="<" | smallerEqual="<=" | greater=">" | greaterEqual=">=" | equals="==" | notEquals="!=";
	public RelationalOperatorElements getRelationalOperatorAccess() {
		return (unknownRuleRelationalOperator != null) ? unknownRuleRelationalOperator : (unknownRuleRelationalOperator = new RelationalOperatorElements());
	}
	
	public EnumRule getRelationalOperatorRule() {
		return getRelationalOperatorAccess().getRule();
	}

	//enum DirectionKind:
	//	incoming="in" | outgoing="out";
	public DirectionKindElements getDirectionKindAccess() {
		return (unknownRuleDirectionKind != null) ? unknownRuleDirectionKind : (unknownRuleDirectionKind = new DirectionKindElements());
	}
	
	public EnumRule getDirectionKindRule() {
		return getDirectionKindAccess().getRule();
	}

	//enum TimeUnit:
	//	second="s" | millisecond="ms" | nanosecond="ns";
	public TimeUnitElements getTimeUnitAccess() {
		return (unknownRuleTimeUnit != null) ? unknownRuleTimeUnit : (unknownRuleTimeUnit = new TimeUnitElements());
	}
	
	public EnumRule getTimeUnitRule() {
		return getTimeUnitAccess().getRule();
	}

	//enum Type:
	//	int | float | boolean;
	public TypeElements getTypeAccess() {
		return (unknownRuleType != null) ? unknownRuleType : (unknownRuleType = new TypeElements());
	}
	
	public EnumRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//ValueExpression returns Expression:
	//	PrimitiveValueExpression | VariableReferenceExpression;
	public ValueExpressionElements getValueExpressionAccess() {
		return (pValueExpression != null) ? pValueExpression : (pValueExpression = new ValueExpressionElements());
	}
	
	public ParserRule getValueExpressionRule() {
		return getValueExpressionAccess().getRule();
	}

	//PrimitiveValueExpression returns Expression:
	//	{PrimitiveValueExpression} value=Literal;
	public PrimitiveValueExpressionElements getPrimitiveValueExpressionAccess() {
		return (pPrimitiveValueExpression != null) ? pPrimitiveValueExpression : (pPrimitiveValueExpression = new PrimitiveValueExpressionElements());
	}
	
	public ParserRule getPrimitiveValueExpressionRule() {
		return getPrimitiveValueExpressionAccess().getRule();
	}

	//VariableReferenceExpression returns Expression:
	//	{PropertyReferenceExpression} value=[VariableDefinition];
	public VariableReferenceExpressionElements getVariableReferenceExpressionAccess() {
		return (pVariableReferenceExpression != null) ? pVariableReferenceExpression : (pVariableReferenceExpression = new VariableReferenceExpressionElements());
	}
	
	public ParserRule getVariableReferenceExpressionRule() {
		return getVariableReferenceExpressionAccess().getRule();
	}

	//Literal returns ecore::EString:
	//	BOOL | INT | STRING | FLOAT;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//terminal BOOL:
	//	"true" | "false";
	public TerminalRule getBOOLRule() {
		return (tBOOL != null) ? tBOOL : (tBOOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOL"));
	} 

	//terminal FLOAT:
	//	("-" | "+")? (INT "." INT) ("e" ("-" | "+") INT)?;
	public TerminalRule getFLOATRule() {
		return (tFLOAT != null) ? tFLOAT : (tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
