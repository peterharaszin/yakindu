grammar org.yakindu.sct.statechart.Expressions with
org.eclipse.xtext.common.Terminals

generate expressions "http://www.yakindu.org/sct/statechart/Expressions"

StatementModel:
(statements+=Statement)+;

Statement:
VariableDefinition | SignalEventDefinition | ActionDefinition |
TransitionDefinition;

TransitionDefinition:
(triggers+=(Event) ("," triggers+=Event)*)
(guardExpression=ExpressionRule)?;

VariableDefinition:
'var' name=ID ':' type=Type;

ActionDefinition:
('entry' | 'exit' 'do') ':' expression=ExpressionRule ';';

Event:
SignalEventDefinition | TimeEventDefinition;

SignalEventDefinition returns Event:
'event' name=ID ':' direction=DirectionKind ';';

TimeEventDefinition returns Event:
'after' '('time=TimeConstant')';

TimeConstant
:  value = INT (unit = TimeUnit)?;

ExpressionRule:
    expression=(LogicalOrExpression | RaiseEventExpression);

RaiseEventExpression:
'raise' event=[Event];

LogicalOrExpression returns Expression:
    LogicalAndExpression ({LogicalOrExpression.leftOperand=current} '||'
rightOperand=LogicalAndExpression)*;

LogicalAndExpression returns Expression:
    LogicalNotExpression ({LogicalAndExpression.leftOperand=current}
'&&' rightOperand=LogicalNotExpression)*;

LogicalNotExpression returns Expression:
    LogicalRelationExpression | {LogicalNotExpression} '!'
operand=LogicalRelationExpression;

LogicalRelationExpression returns Expression:
    NumericalAddSubtractExpression
({LogicalRelationExpression.leftOperand=current} operator=RelationalOperator
    rightOperand=NumericalAddSubtractExpression)*;

NumericalAddSubtractExpression returns Expression:
    NumericalMultiplyDivideExpression
({NumericalAddSubtractExpression.leftOperand=current}
operator=AdditiveOperator
    rightOperand=NumericalMultiplyDivideExpression)*;

NumericalMultiplyDivideExpression returns Expression:
    NumericalUnaryExpression
({NumericalMultiplyDivideExpression.leftOperand=current}
operator=MultiplicativeOperator
    rightOperand=NumericalUnaryExpression)*;

NumericalUnaryExpression returns Expression:
    PrimaryExpression | {NumericalUnaryExpression}
operator=UnaryOperator operand=PrimaryExpression;
    
PrimaryExpression returns Expression:
    ValueExpression | '(' LogicalOrExpression ')';

enum AdditiveOperator:
    plus='+' | minus='-';

enum MultiplicativeOperator:
    mul='*' | div='/' | mod='%';

enum UnaryOperator:
    positive='+' | negative='-' | complement='~';

enum RelationalOperator:
    smaller='<' | smallerEqual='<=' | greater='>' | greaterEqual='>=' |
    equals='==' | notEquals='!=';

enum DirectionKind:
incoming = 'in' | outgoing ='out';

enum TimeUnit
:     second = 's'
|   millisecond = 'ms'
|   nanosecond = 'ns';

enum Type:
int ='int' | float='float' | boolean='boolean';

ValueExpression returns Expression:
    PrimitiveValueExpression | VariableReferenceExpression;

PrimitiveValueExpression returns Expression:
    {PrimitiveValueExpression} value=Literal;

VariableReferenceExpression returns Expression:
    {PropertyReferenceExpression} value=[VariableDefinition];

Literal:
BOOL | INT | STRING | FLOAT;

terminal BOOL:
    'true' | 'false';

terminal FLOAT:
    ('-' | '+')? (INT '.' INT) ('e' ('-' | '+') INT)?;

