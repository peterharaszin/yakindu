h1. Tasks

h2. Modeling a statemachine

# Make sure the YAKINDU Modeling perspective is active.
# Create a new project.
# Click *File* > *New* > *Other...* > *YAKINDU* > *YAKINDU Statechart Model*. 
# Click *Next* name the sct file and click *Finish*
# The YAKINDU statechart editor opens on the statechart model. It already has an initial state and an unnamed simple state connected by a transition.
# Now you can add states and transitions from the palette.

To edit the states and transitions you can use the properties view. It has an integrated Xtext support. This makes correct editing easier. You can also change the appearance of the model elements. 

On the palette you will also find a composite submachine state. This is a state that contains a complete statemachine. You can choose an existing statemachine or create a new one.

h3. Related topics

"Statemachine Elements reference":../05_Reference/reference.html#Statechartelements
"Textual modeling lanuage  Reference":../05_Reference/reference.html#Statechartdescriptionlanguage


h2. Validating a statemachine

The statemachine is validated automatically during build. The elements that cause problems get error markers. You can find the details about the problems on the problems view.

h2. Simulating a statemachine

The YAKINDU simulation engine supports simulation modes:

* event driven
* cycle based

The default setting is _cycle based_ with a cycle period of 200 ms. In this mode the simulation engine processes the state machine transitions in steps of the given cycle duration. The following statechart illustrates this. It is simulated cycle based with a cycle period of 3 seconds.

!images/cycleBasedVsEventDriven.png!

What happend during simulation is the following:

# After 3s *init* switches to *pre1*
# After 3 further seconds recursive transition to *pre1* is processed (not after 2s the transition says)
# After 3 further seconds recursive transition to *pre1* is processed again and the condition becomes *true* so *result* gets activated

In contrast to cycle based the event driven simulation mode concentrates on the events of a state machine. The same state machine above could be simulated as follows:

# Immediately *init* switches to *pre1*
# Immediately the event *touch* is raised twice
# The condition becomes true so that the *result* state is reached after 2 or 3 seconds instead of 9 

Start a simulation with the different modes as follows

# Make sure the YAKINDU Simulation Perspectiv is opened.
# Start the simulation by clicking *Run* > *Run Configurations...*.
# Select the statechart you want to simulate and the simulation mode.
# *Apply* the setting and *Run* the simulation.

!images/simulationRunConfiguration.png!

"Simulation Concept":../03_Concepts/concepts.html#Simulation
"Simulation perspective":../03_Concepts/concepts.html#YakinduSCSimulationperspective
"Simulation View":../03_Concepts/concepts.html#SimulationView

h2. Generating Code

For code generation, Yakindu Statechart Tools uses a textual generator model called *SGen*, that can be used to configure the code generation process. It can be created either by using the provided wizard or by creating a new text file with the file extension '.sgen'.
To create a generator model with the wizard,

# Click *File* > *New* > *Other...* > *Yakindu Statechart Genmodel*
# Type a name and click *Next*
# Choose the desired generator, i.e. *YAKINDU Java Code Generator*
# Check the model(s) to generate code from and click *Finish*

!images/genmodelwizardchooselanguage.jpg!

The result is an .sgen file of the following format: 

bc.. 
GeneratorModel for [GeneratorId] {
	statechart [StatechartReference] {
		feature [Feature] {
			[ParameterName] = [ParameterValue]
		}
	}
}
p. The [GeneratorId] is the unique id of the Generator. Yakindu Statechart Tools currently supports the following Generators out of the box:
# yakindu::java - Generator ID for the Java Code Generator 
# yakindu::c - Generator ID for the C Code Generator
# yakindu::cpp - Generator ID for the C++ Code Generator

p. One GeneratorModel can contain several [StatechartReference]s. These are crossreference to statechart models for which the code should be generated. 
For each referenced Statechart, the generator process can be configured with [Feature]s. Each Feature consists of several parameters. These parameters can be configured with [ParameterName] = [ParameterValue].
 
The Generator Model will be build automatically if you checked *Project* > *Build Automatically*. If you want to execute only one Generator Model, you can select  
*Generate Statechart Artifacts* from the *Package Explorer's* context menu.

h2. Core Features

The following section describes the *Core Features* which are available for each Code Generator:


h4. Outlet

The *Outlet* feature specifies the target project and folder for the generated artifacts. It is a *required* feature and consists of the following parameters:
# __targetProject__  (String): The project where the generated artifacts are stored  
# __targetFolder__  (String): The folder where the generated artifacts are stored

Example configuration:

bc.. 
feature Outlet {
	targetProject = "ExampleProject"
	targetFolder = "src-gen"
}
p. ==<!-- End Outlet -->==

h4. LicenseHeader

The *LicenseHeader* feature specifies the license text that should be added as a header to the generated artifacts. It is an *optinal* feature and consists of the following parameters:

# __licenseText__  (String): The license text to add as a header  

Example configuration:

bc.. 
feature LicenseHeader {
	licenseText = "Copyright (c) 2012 committers of YAKINDU and others."
}
p. ==<!-- End LicenseHeader -->==

h4. FunctionInlining

The *FunctionInlining* feature allows the inlining of expressions instead of generating separate functions or methods. This might reduce the readability of the generated code, but increases performance because less operation calls are neccessary. 
It is an *optinal* feature and consists of the following parameters:

# __inlineReactions__  (Boolean): Inlines the expression for reactions
# __inlineEntryActions__  (Boolean): Inlines the expression for entry actions
# __inlineExitActions__  (Boolean): Inlines the expression for exit actions
# __inlineEnterSequences__  (Boolean): Inlines the expression for enter sequences
# __inlineExitSequences__  (Boolean): Inlines the expression for exit sequences
# __inlineChoices__  (Boolean): Inlines the expression for choices
# __inlineEnterRegion__  (Boolean): Inlines the expression for enter regions
# __inlineExitRegion__  (Boolean): Inlines the expression for exit regions
# __inlineEntries__  (Boolean): Inlines the expression for entries 

Example configuration:

bc.. 
feature FunctionInlining {
	inlineChoices = false
	inlineEnterRegion = true
	inlineEntries = true
}
p. ==<!-- End FunctionInlining -->==

h2. Java Generator Features

h4. Naming

The *Naming* feature allows the configuration of package names as well as class name prefix / suffix.
It is an *optinal* feature and consists of the following parameters:

# __basePackage__  (Boolean): Inlines the expression for reactions
# __implementationSuffix__  (Boolean): Inlines the expression for entry actions

Example configuration:

bc.. 
feature Naming {
	basePackage = "org.yakindu.sct"
	implementationSuffix = "Impl"
}
p. ==<!-- End Naming -->==	

h4. GeneralFeatures
TBD

h2. C Generator Fetures
TBD

}