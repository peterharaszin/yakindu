«REM»

Templates for the main statechart cpp file.

@auther joern seger

«ENDREM»

«IMPORT sexec»
«IMPORT stext»
«IMPORT sgraph»
«IMPORT ecore»

«IMPORT org::yakindu::sct::generator::c::templates»

«EXTENSION org::yakindu::sct::generator::c::templates::Expression»
«EXTENSION org::yakindu::sct::generator::c::templates::Naming»

«DEFINE ActionCode FOR Step»
// ActionCode for Step not defined
«ENDDEFINE»

«DEFINE ActionCode FOR Execution»
	«this.statement.toCppCode()»
«ENDDEFINE»

«DEFINE ActionCode FOR Call»
«this.step.functionName()»();
«ENDDEFINE»

«DEFINE ActionCode FOR Sequence»
  «EXPAND ActionCode FOREACH this.steps»
«ENDDEFINE»

«DEFINE ActionCode FOR Check -»
  «IF this != null -»
«this.condition.toCppCode() -»
  «ELSE -»
 true «
 ENDIF -»«
  ENDDEFINE»

«DEFINE ActionCode FOR CheckRef -»
  «IF this.check != null -»
  «this.check.functionName()»(ev) «
  ELSE -»
 true «
  ENDIF -»«
ENDDEFINE»

«DEFINE ActionCode FOR Reaction»
  «EXPAND ActionCode FOR this.effect» 
«ENDDEFINE»

«DEFINE ActionCode FOR If»
if («EXPAND ActionCode FOR this.check») { 
  «EXPAND ActionCode FOR this.thenStep»
}
else {
  «EXPAND ActionCode FOR this.elseStep»
}
«ENDDEFINE»

«DEFINE ActionCode FOR EnterState»
state[0] = _«this.state.simpleName»;
«ENDDEFINE»

«DEFINE ActionCode FOR ExitState»
state[0] = last_state;
«ENDDEFINE»

«DEFINE ConditionMethodsImplement FOR ExecutionState»
  «FOREACH reactions AS r»
  «IF r.check != null -»
bool «StName()»::«r.check.functionName()»(const _Event& ev) {
  return (	«r.check.condition.toCppCode()» );
}
  «ENDIF -»
  «ENDFOREACH»
«ENDDEFINE»

«DEFINE StatementMethodsImplement FOR ExecutionState»
  «FOREACH reactions AS r»
void «this.StName()»::«r.effect.functionName()»() {
  «EXPAND ActionCode FOR r.effect»
}
  «ENDFOREACH»
«ENDDEFINE»

«DEFINE CycleCode FOR Cycle» 
«EXPAND ActionCode FOREACH this.steps»
«ENDDEFINE»

«DEFINE CycleMethodsImplement FOR ExecutionState»
void «StName()»::cycle_«this.simpleName»(const _Event& ev)
{
	«EXPAND CycleCode FOR cycle»
}
«ENDDEFINE»

«DEFINE EnterMethodImplement FOR ExecutionState»
«IF this.entryAction != null»
void «StName()»::«this.entryAction.entryActionFunctionName()»()
{
«EXPAND ActionCode FOR this.entryAction»
}
«ENDIF»
«ENDDEFINE»

«DEFINE ExitMethodImplement FOR ExecutionState»
«IF this.exitAction != null»
void «StName()»::«this.exitAction.exitActionFunctionName()»()
{
«EXPAND ActionCode FOR this.exitAction»
}
«ENDIF»
«ENDDEFINE»

«DEFINE file FOR ExecutionFlow»
«FILE StName()+'.cpp'»
#include <iostream>
#include "«StName()».h"

«StName()»::«StName()»() : Statemachine(«((ExecutionFlow)this.eRootContainer).stateVector.size») {
}

«StName()»::~«StName()»() {
}

«EXPAND ConditionMethodsImplement FOREACH this.states»

«EXPAND StatementMethodsImplement FOREACH this.states»

«EXPAND CycleMethodsImplement FOREACH this.states»

«EXPAND EnterMethodImplement FOREACH this.states»

«EXPAND ExitMethodImplement FOREACH this.states»


void «StName()»::init()
{
	«EXPAND ActionCode FOREACH this.enterSequence.steps»
}

/* Yet unimplemented
void «StName()»::exit()
{
}
*/

void «StName()»::_runCycle(Event ev)
{
	for (int i=0; i<MAX_PARALLEL_STATES; ++i) {
		switch(state[i]) {
	«FOREACH this.states AS state»
	    case _«state.simpleName»:
	        cycle_«state.simpleName»(*ev);
	        break;
	«ENDFOREACH»
		default:
			/* no state found */
			break;
		}
	}
}
«ENDFILE»

«ENDDEFINE»