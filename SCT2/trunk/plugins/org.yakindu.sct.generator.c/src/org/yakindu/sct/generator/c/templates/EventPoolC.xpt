«REM»

Templates for the main statechart c file.

@auther joern seger

«ENDREM»

«IMPORT sexec»
«IMPORT stext»
«IMPORT sgraph»


«DEFINE file FOR ExecutionFlow»

«FILE 'EventPool.c'»
#include "EventPool.h"
#include <stdlib.h>

_Event* eventPool_createEvent(EventPool* handle, uint32_t evid) {

	uint32_t i;
	TypePool* pool = 0;

	if (evid >= handle->maxTypeEventMemElements)
		return 0;

	pool = &handle->typePoolMemPtr[evid];

	for(i=0; i<pool->maxEventsPerType; ++i) {
		if (pool->typedEventMemPtr[i].inuse == bool_false) {
			pool->typedEventMemPtr[i].inuse = bool_true;
			return pool->typedEventMemPtr[i].memptr;
		}
	}

	return 0;
}

void eventPool_freeEvent(EventPool* handle, _Event* delEvent) {
	uint32_t i;
	TypePool* pool = 0;

	if ((delEvent == 0) || (delEvent->id >= handle->maxTypeEventMemElements))
		return;

	pool = &handle->typePoolMemPtr[delEvent->id];

	for(i=0; i<pool->maxEventsPerType; ++i) {
		if ((pool->typedEventMemPtr[i].memptr == delEvent) &&
				(pool->typedEventMemPtr[i].inuse == bool_true)) {
			pool->typedEventMemPtr[i].inuse = bool_false;
			return;
		}
	}

}

void eventPool_init_heap(EventPool* handle, uint32_t maxTypeEventMemElements, uint32_t maxEventsPerType) {

	uint32_t i,j;
	EventMemory* evPtr;

	handle->maxTypeEventMemElements = maxTypeEventMemElements;
	handle->typePoolMemPtr = malloc(sizeof(TypePool) * maxTypeEventMemElements);

	for(i=0; i<maxTypeEventMemElements; ++i) {
		handle->typePoolMemPtr[i].typedEventMemPtr = malloc(sizeof(EventMemory) * maxEventsPerType);
		handle->typePoolMemPtr[i].maxEventsPerType = maxEventsPerType;
		for(j=0; j<maxEventsPerType; ++j) {
			evPtr = &handle->typePoolMemPtr[i].typedEventMemPtr[j];
			evPtr->memptr = malloc(getSizeofEvent(i));
			_event_init((_Event*)evPtr->memptr, i); // initialize event ID
			evPtr->inuse = bool_false;
		}
	}

	handle->isStatic = bool_false;
}

void eventPool_init_static(EventPool* handle, TypePool* eventPool,
		uint32_t maxTypeEventMemElements) {
	uint32_t i,j;
	EventMemory* evPtr;

	handle->typePoolMemPtr = eventPool;
	handle->maxTypeEventMemElements = maxTypeEventMemElements;
	handle->isStatic = bool_true;

	for(i=0; i<maxTypeEventMemElements; ++i) {
		for(j=0; j<handle->typePoolMemPtr[i].maxEventsPerType; ++j) {
			evPtr = &handle->typePoolMemPtr[i].typedEventMemPtr[j];
			_event_init((_Event*)evPtr->memptr, i); // initialize event ID
			evPtr->inuse = bool_false;
		}
	}

}

void eventPool_exit(EventPool* handle)
{
	uint32_t i, j;
	EventMemory* evPtr;

	if (handle->isStatic)
		return;

	for(i=0; i<handle->maxTypeEventMemElements; ++i) {
		for(j=0; j<handle->typePoolMemPtr->maxEventsPerType; ++j) {
			evPtr = &handle->typePoolMemPtr[i].typedEventMemPtr[j];
			free(evPtr->memptr);
		}
		free(handle->typePoolMemPtr[i].typedEventMemPtr);
	}

	free(handle->typePoolMemPtr);
	handle->typePoolMemPtr = 0;
}
«ENDFILE»

«ENDDEFINE»
