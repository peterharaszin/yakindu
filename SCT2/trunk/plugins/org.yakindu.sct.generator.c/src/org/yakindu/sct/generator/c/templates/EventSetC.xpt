«REM»

Templates for the main statechart c file.

@auther joern seger

«ENDREM»

«IMPORT sexec»
«IMPORT stext»
«IMPORT sgraph»

«EXTENSION org::yakindu::sct::generator::c::templates::Naming»

«DEFINE file FOR ExecutionFlow»

«FILE 'EventSet.c'»
«getLicenseHeader()»
#include "EventSet.h"
#include <stdlib.h>

void eventSet_init(EventSet* handle, const uint32_t _maxEvents) {

	uint32_t i;

	handle->isStaticData = bool_false;
	handle->maxEvents = _maxEvents;
	handle->_set = malloc(sizeof(sc_boolean) * _maxEvents);
	handle->eventType = malloc(sizeof(EventType) * _maxEvents);

	eventSet_clean(handle);

	for(i=0; i<_maxEvents; ++i) {
		handle->eventType[i] = ev_type_input;
	}
}

void eventSet_init_staticData(EventSet* handle, const uint32_t _maxEvents,
		sc_boolean* _dataSet, EventType* _eventTypes) {
	uint32_t i;

	handle->isStaticData = bool_true;
	handle->maxEvents = _maxEvents;
	handle->_set = _dataSet;
	handle->eventType = _eventTypes;

	eventSet_clean(handle);

	for(i=0; i<_maxEvents; ++i) {
		handle->eventType[i] = ev_type_input;
	}

}

void eventSet_set_type(EventSet* handle, const uint32_t evid, const EventType type)
{
	if (evid < handle->maxEvents)
		handle->eventType[evid] = type;
}

sc_boolean eventSet_is_type(EventSet* handle, const uint32_t evid, const EventType type)
{
	sc_boolean ret = bool_false;
	if (evid < handle->maxEvents)
		if (handle->eventType[evid] == type)
			ret = bool_true;

	return ret;
}

void eventSet_exit(EventSet* handle) {
	if (!handle->isStaticData) {
		free(handle->_set);
		free(handle->eventType);
	}
	handle->maxEvents = 0;
}

sc_boolean eventSet_check(EventSet* handle, const uint32_t evid) {
	if (evid < handle->maxEvents) {
		return handle->_set[evid];
	}
	return (bool_false);
}

void eventSet_clean(EventSet* handle) {
	uint32_t i;
	for (i = 0; i < handle->maxEvents; ++i)
		handle->_set[i] = bool_false;
}

void eventSet_clean_input(EventSet* handle) {
	uint32_t i;
	for (i = 0; i < handle->maxEvents; ++i)
	  if (handle->eventType[i] == ev_type_input)	
		handle->_set[i] = bool_false;
}

void eventSet_clean_output(EventSet* handle) {
	uint32_t i;
	for (i = 0; i < handle->maxEvents; ++i)
	  if (handle->eventType[i] == ev_type_output)
		handle->_set[i] = bool_false;
}

void eventSet_set(EventSet* handle, const uint32_t evid) {
	if (evid < handle->maxEvents) {
		handle->_set[evid] = bool_true;
	}
}

sc_boolean eventSet_isAny_input(EventSet* handle) {
	uint32_t i;
	for (i = 0; i < handle->maxEvents; ++i)
		if ((handle->eventType[i] == ev_type_input) && (handle->_set[i] == bool_true))
			return bool_true;
	return bool_false;
}

sc_boolean eventSet_isAny_output(EventSet* handle) {
	uint32_t i;
	for (i = 0; i < handle->maxEvents; ++i)
		if ((handle->eventType[i] == ev_type_output) && (handle->_set[i] == bool_true))
			return bool_true;
	return bool_false;
}

void eventSet_clean_single(EventSet* handle, const uint32_t evid)
{
	if (evid < handle->maxEvents) {
		handle->_set[evid] = bool_false;
	}
}

«ENDFILE»

«ENDDEFINE»
