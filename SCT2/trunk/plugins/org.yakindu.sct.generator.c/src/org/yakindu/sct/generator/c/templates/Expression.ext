import stext;
import sexec;
import ecore;
import sgraph;
toCppCode(Void void) :
	"/*toCppCode() called with NULL element. Polymorphic resolver could not match callable method!*/";
String toCppCode(Void o, String statechartReference) : 
	""; //polymorphic placeholder (abstract rule)

String toCppCode(Expression statement) : 
	null; //polymorphic placeholder (abstract rule)
 
String toCppCode(Statement statement) : 
	null; //polymorphic placeholder (abstract rule)
 
String toCppCode(PrimitiveValueExpression primValue) :
	primValue.value;

/* Assignment */
String toCppCode(Assignment assignment) :
  switch (assignment.operator) {
  case (AssignmentOperator::assign) : "variable->" + assignment.varRef.name + " = " + assignment.expression.toCppCode() + ";"  
  case (AssignmentOperator::multAssign) : "variable->" + assignment.varRef.name + " *= " + assignment.expression.toCppCode() + ";"
  case (AssignmentOperator::divAssign) : "variable->" + assignment.varRef.name + " /= " + assignment.expression.toCppCode() + ";"
  case (AssignmentOperator::modAssign) : "variable->" + assignment.varRef.name + " %= " + assignment.expression.toCppCode() + ";"
  case (AssignmentOperator::addAssign) : "variable->" + assignment.varRef.name + " += " + assignment.expression.toCppCode() + ";"
  case (AssignmentOperator::subAssign) : "variable->" + assignment.varRef.name + " -= " + assignment.expression.toCppCode() + ";"
  case (AssignmentOperator::leftShiftAssign) : "variable->" + assignment.varRef.name + " <<= "+ assignment.expression.toCppCode() + ";"
  case (AssignmentOperator::rightShiftAssign) : "variable->" + assignment.varRef.name + " >>= " + assignment.expression.toCppCode() + ";"
  case (AssignmentOperator::andAssign) : "variable->" + assignment.varRef.name + " &= " + assignment.expression.toCppCode() + ";"
  case (AssignmentOperator::xorAssign) : "variable->" + assignment.varRef.name + " ^= " + assignment.expression.toCppCode() + ";"
  case (AssignmentOperator::orAssign) : "variable->" + assignment.varRef.name + " |= " + assignment.expression.toCppCode() + ";"
  default : ""
  };
		
/* EventRaising */

/* Logical Expressions */
String toCppCode(LogicalOrExpression expression) :
  	expression.leftOperand.toCppCode() + " || " + expression.rightOperand.toCppCode();
  	
String toCppCode(LogicalAndExpression expression) :
  	expression.leftOperand.toCppCode() + " && " + expression.rightOperand.toCppCode();

String toCppCode(LogicalNotExpression expression) :
  	" ~" + expression.operand.toCppCode();

String toCppCode(LogicalRelationExpression expression) :
   expression.leftOperand.toCppCode() + getOperator(expression.operator) + expression.rightOperand.toCppCode();
    
String toCppCode(BitwiseAndExpression expression) :
  	expression.leftOperand.toCppCode() + " & " + expression.rightOperand.toCppCode();

String toCppCode(BitwiseOrExpression expression) :
  	expression.leftOperand.toCppCode() + " | " + expression.rightOperand.toCppCode();

String toCppCode(BitwiseXorExpression expression) :
  	expression.leftOperand.toCppCode() + " ^ " + expression.rightOperand.toCppCode();

String toCppCode(NumericalAddSubtractExpression expression) :
  	expression.leftOperand.toCppCode() + getOperator(expression.operator) + expression.rightOperand.toCppCode();
  	
String toCppCode(NumericalMultiplyDivideExpression expression) :
  	expression.leftOperand.toCppCode() + getOperator(expression.operator) + expression.rightOperand.toCppCode();

// is this just relevant for events?
String toCppCode(ElementReferenceExpression ev) :
    " ( eventSet_check( &handle->base.eventSet, ev_" + ev.value.name.toLowerCase() + ") ) ";

String getOperator(AdditiveOperator operator) : 
    switch(operator) {
    	case(AdditiveOperator::plus) : " + "
    	case(AdditiveOperator::minus) : " - "
    	default : ""
    };

String getOperator(MultiplicativeOperator operator) : 
    switch(operator) {
    	case(MultiplicativeOperator::mul) : " * "
    	case(MultiplicativeOperator::div) : " / "
    	case(MultiplicativeOperator::mod) : " % "
    	default : ""
    };

String getOperator(RelationalOperator operator) :
	switch (operator) {
	  case (RelationalOperator::greater) : " > "
	  case (RelationalOperator::greaterEqual) : " >= "
	  case (RelationalOperator::smaller) : " < "
	  case (RelationalOperator::smallerEqual) : " <= "
	  case (RelationalOperator::equals) : " == "
	  case (RelationalOperator::notEquals) : " != "
	  default : ""
	};
