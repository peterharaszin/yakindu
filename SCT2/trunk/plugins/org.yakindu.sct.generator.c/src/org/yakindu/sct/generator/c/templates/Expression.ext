import stext;
import sexec;
import ecore;
import sgraph;

InterfaceScope getInterfaceScope(Assignment this) : ((InterfaceScope)this.varRef.eContainer);

toCCode(Void void) :
	"/*toCCode() called with NULL element. Polymorphic resolver could not match callable method!*/";
String toCCode(Void o, String statechartReference) : 
	""; //polymorphic placeholder (abstract rule)

String toCCode(Expression statement) : 
	null; //polymorphic placeholder (abstract rule)
 
String toCCode(Statement statement) : 
	null; //polymorphic placeholder (abstract rule)
 
String toCCode(PrimitiveValueExpression primValue) :
	(primValue.value == "true" ? "bool_true" :
	(primValue.value == "false" ? "bool_false" :
	primValue.value ));

/* Assignment */
String toCCode(Assignment assignment) :
  switch (assignment.operator) {
  case (AssignmentOperator::assign) : assignment.varRef.toCCode() + " = " + assignment.expression.toCCode() + ";"  
  case (AssignmentOperator::multAssign) : assignment.varRef.toCCode() + " *= " + assignment.expression.toCCode() + ";"
  case (AssignmentOperator::divAssign) : assignment.varRef.toCCode() + " /= " + assignment.expression.toCCode() + ";"
  case (AssignmentOperator::modAssign) : assignment.varRef.toCCode() + " %= " + assignment.expression.toCCode() + ";"
  case (AssignmentOperator::addAssign) : assignment.varRef.toCCode() + " += " + assignment.expression.toCCode() + ";"
  case (AssignmentOperator::subAssign) : assignment.varRef.toCCode() + " -= " + assignment.expression.toCCode() + ";"
  case (AssignmentOperator::leftShiftAssign) : assignment.varRef.toCCode() + " <<= "+ assignment.expression.toCCode() + ";"
  case (AssignmentOperator::rightShiftAssign) : assignment.varRef.toCCode() + " >>= " + assignment.expression.toCCode() + ";"
  case (AssignmentOperator::andAssign) : assignment.varRef.toCCode() + " &= " + assignment.expression.toCCode() + ";"
  case (AssignmentOperator::xorAssign) : assignment.varRef.toCCode() + " ^= " + assignment.expression.toCCode() + ";"
  case (AssignmentOperator::orAssign) : assignment.varRef.toCCode() + " |= " + assignment.expression.toCCode() + ";"
  default : ""
  };
		
/* EventRaising */
String toCCode(EventRaising eventRaising) :
	((eventRaising.value == null)?"":
	"((" + eventRaising.event.name + "*) handle->" + eventRaising.getInterfaceName() + "." + eventRaising.event.name + ")->value = " + eventRaising.value.toCCode() + ";") + 
	" statemachine_cy_setEvent(&handle->base, handle->" + eventRaising.getInterfaceName() + "." + eventRaising.event.name + "); ";
//  "{ _Event* ev = eventPool_createEvent(handle->base.eventPool, ev_"+eventRaising.event.name+"); if (ev) { " + eventRaising.addValue() + "statemachine_cy_setEvent(&handle->base, ev); } }";

String getInterfaceName(EventRaising event) :
	"interface" + (( ((InterfaceScope)event.event.eContainer).name == null)?"":((InterfaceScope)event.event.eContainer).name.toFirstUpper());

String addValue(EventRaising event) :
  ( (event.value == null)?"":("((" +event.event.name + "*)ev)->value = " + event.value.toCCode() + "; ") );

/* Logical Expressions */
String toCCode(LogicalOrExpression expression) :
  	" ( " + expression.leftOperand.toCCode() + " ) " + " || " + " ( " + expression.rightOperand.toCCode() + " ) ";
  	
String toCCode(LogicalAndExpression expression) :
  	" ( " + expression.leftOperand.toCCode() + " ) " + " && " + " ( " + expression.rightOperand.toCCode() + " ) ";

String toCCode(LogicalNotExpression expression) :
  	" ~" + " ( " + expression.operand.toCCode() + " ) ";

String toCCode(LogicalRelationExpression expression) :
   " ( " + expression.leftOperand.toCCode() + " ) " + getOperator(expression.operator) + " ( " + expression.rightOperand.toCCode() + " ) ";
    
String toCCode(BitwiseAndExpression expression) :
  	" ( " + expression.leftOperand.toCCode() + " ) " + " & " + " ( " + expression.rightOperand.toCCode() + " ) ";

String toCCode(BitwiseOrExpression expression) :
  	" ( " + expression.leftOperand.toCCode() + " ) " + " | " + " ( " + expression.rightOperand.toCCode() + " ) ";

String toCCode(BitwiseXorExpression expression) :
  	" ( " + expression.leftOperand.toCCode() + " ) " + " ^ " + " ( " + expression.rightOperand.toCCode() + " ) ";

String toCCode(NumericalAddSubtractExpression expression) :
  	" ( " + expression.leftOperand.toCCode() + " ) " + getOperator(expression.operator) + " ( " + expression.rightOperand.toCCode() + " ) ";
  	
String toCCode(NumericalMultiplyDivideExpression expression) :
  	" ( " + expression.leftOperand.toCCode() + " ) " + getOperator(expression.operator) + " ( " + expression.rightOperand.toCCode() + " ) ";

// is this just relevant for events?
String toCCode(ElementReferenceExpression ref) :
	ref.value.toCCode();

String toCCode(Declaration dec) :
	"Declartion type not specified";

String toCCode(Clock clockDef) :
	"Clock to C not defined";
	
String toCCode(Operation op) :
	"Operation to C not defined";

String toCCode(LocalReaction localReac) :
	"Local Reaction to C not defined";

String toCCode(Entrypoint op) :
	"Entrypoint to C not defined";

String toCCode(Exitpoint op) :
	"Exitpoint to C not defined";

	
String toCCode(EventDefinition evDef) :
    " ( eventSet_check( &handle->base.eventSet, ev_" + evDef.name.toLowerCase() + ") ) ";

/*
String getScope(EObject eo) :
"unkownScope";

String getScope(InterfaceScope ifScope) :
	"if->";
	
String getScope(InternalScope inScope) :
	"internal->";
*/
/* can not handle internal scope  */

ExecutionFlow getExecutionFlow(InterfaceScope this) : ((ExecutionFlow)this.eContainer);
String interfaceObjectName(InterfaceScope this) : "interface" + ((this.name == null)?"":this.name.toFirstUpper());

String getInterface(VariableDefinition var) :
	((InterfaceScope)var.eContainer).interfaceObjectName();

String toCCode(VariableDefinition var) :
    " handle->"+ var.getInterface() + "." + var.name.toLowerCase() + " ";

String getOperator(AdditiveOperator operator) : 
    switch(operator) {
    	case(AdditiveOperator::plus) : " + "
    	case(AdditiveOperator::minus) : " - "
    	default : ""
    };

String getOperator(MultiplicativeOperator operator) : 
    switch(operator) {
    	case(MultiplicativeOperator::mul) : " * "
    	case(MultiplicativeOperator::div) : " / "
    	case(MultiplicativeOperator::mod) : " % "
    	default : ""
    };

String getOperator(RelationalOperator operator) :
	switch (operator) {
	  case (RelationalOperator::greater) : " > "
	  case (RelationalOperator::greaterEqual) : " >= "
	  case (RelationalOperator::smaller) : " < "
	  case (RelationalOperator::smallerEqual) : " <= "
	  case (RelationalOperator::equals) : " == "
	  case (RelationalOperator::notEquals) : " != "
	  default : ""
	};

String eventTypeToString(Type type) : 
  switch (type) {
  case (Type::void) : "void"
  case (Type::real) : "real"
  case (Type::integer) : "integer"
  case (Type::boolean) : "boolean"
  case (Type::string)  : "string"
  default : "unknownType"
 };
  
Set[EventDefinition] getInEvents(InterfaceScope interface) : 
	interface.declarations.typeSelect(EventDefinition).select(e|e.direction == Direction::IN);

Set[EventDefinition] getOutEvents(InterfaceScope interface) : 
	interface.declarations.typeSelect(EventDefinition).select(e|e.direction == Direction::OUT);

Set[EventDefinition] getLocalEvents(InterfaceScope interface) : 
	interface.declarations.typeSelect(EventDefinition).select(e|e.direction == Direction::LOCAL);


	