import stext;
import sexec;
import ecore;
import sgraph;
import types;

extension org::yakindu::sct::generator::c::templates::Naming;
extension org::yakindu::sct::generator::c::templates::Constants;
extension org::yakindu::sct::generator::core::extensions::TypeAnalyzerExtensions;

InterfaceScope getInterfaceScope(AssignmentExpression this) : ((InterfaceScope)this.varRef.eContainer);

toCCode(Void void) :
	"/*toCCode() called with NULL element. Polymorphic resolver could not match callable method!*/";
String toCCode(Void o, String statechartReference) : 
	""; //polymorphic placeholder (abstract rule)

String toCCode(Expression statement) : 
	null; //polymorphic placeholder (abstract rule)
 
String toCCode(Statement statement) : 
	null; //polymorphic placeholder (abstract rule)

String toCCode(Literal lit) :
   "Unknown Literal Type" ;

String toCCode(StringLiteral lit) :
   "\""+lit.value+"\"" ;

String toCCode(BoolLiteral bLit) :
   (bLit.value == true) ? getBoolTrue() : getBoolFalse(); 

String toCCode(IntLiteral iLit) :
	iLit.value.toString();
 
String toCCode(RealLiteral rLit) :
	rLit.value.toString();

String toCCode(HexLiteral hLit) :
	hLit.value.toString();

String toCCode(PrimitiveValueExpression primValue) :
	primValue.value.toCCode();

/* Assignment */
String toCCode(AssignmentExpression assignment) :
  switch (assignment.operator) {
  case (AssignmentOperator::assign) : assignment.varRef.toCCode() + " = " + assignment.expression.toCCode() 
  case (AssignmentOperator::multAssign) : assignment.varRef.toCCode() + " *= " + assignment.expression.toCCode()
  case (AssignmentOperator::divAssign) : assignment.varRef.toCCode() + " /= " + assignment.expression.toCCode()
  case (AssignmentOperator::modAssign) : assignment.varRef.toCCode() + " %= " + assignment.expression.toCCode()
  case (AssignmentOperator::addAssign) : assignment.varRef.toCCode() + " += " + assignment.expression.toCCode()
  case (AssignmentOperator::subAssign) : assignment.varRef.toCCode() + " -= " + assignment.expression.toCCode()
  case (AssignmentOperator::leftShiftAssign) : assignment.varRef.toCCode() + " <<= "+ assignment.expression.toCCode()
  case (AssignmentOperator::rightShiftAssign) : assignment.varRef.toCCode() + " >>= " + assignment.expression.toCCode()
  case (AssignmentOperator::andAssign) : assignment.varRef.toCCode() + " &= " + assignment.expression.toCCode()
  case (AssignmentOperator::xorAssign) : assignment.varRef.toCCode() + " ^= " + assignment.expression.toCCode()
  case (AssignmentOperator::orAssign) : assignment.varRef.toCCode() + " |= " + assignment.expression.toCCode()
  default : ""
  };
		
/* EventRaising */
String toCCode(EventRaisingExpression eventRaising) :
	((eventRaising.value == null)?"":
	"((" + eventRaising.event.getEventName() + "*)" + eventRaising.statemachineHandleName() + "->" + eventRaising.getInterfaceName() + "." + eventRaising.event.getEventName() + ")->value = " 
	+ eventRaising.value.toCCode() + ";") + 
	" statemachine_cy_setEvent(&" + eventRaising.statemachineHandleName() + 
	"->base, " + eventRaising.statemachineHandleName() + "->" + 
	eventRaising.getInterfaceName() + "." + 
	eventRaising.event.getEventName() + "); ";

String addValue(EventRaisingExpression event) :
  ( (event.value == null)?"":("((" +event.event.getEventName() + "*)ev)->value = " + event.value.toCCode() + "; ") );

/* Logical Expressions */
String toCCode(LogicalOrExpression expression) :
  	" ( " + expression.leftOperand.toCCode() + " ) " + " || " + " ( " + expression.rightOperand.toCCode() + " ) ";
  	
String toCCode(LogicalAndExpression expression) :
  	" ( " + expression.leftOperand.toCCode() + " ) " + " && " + " ( " + expression.rightOperand.toCCode() + " ) ";

String toCCode(LogicalNotExpression expression) :
  	" ~" + " ( " + expression.operand.toCCode() + " ) ";

String toCCode(LogicalRelationExpression expression) :
	if (expression.leftOperand.inferType().isString()) then
		"("+expression.leftOperand.toCCode()+"==NULL?"+expression.rightOperand.toCCode()+"==NULL:strcmp("+expression.leftOperand.toCCode()+", "+expression.rightOperand.toCCode()+")==0)"
	else
		" ( " + expression.leftOperand.toCCode() + " ) " + getOperator(expression.operator) + " ( " + expression.rightOperand.toCCode() + " ) ";
    
String toCCode(BitwiseAndExpression expression) :
  	" ( " + expression.leftOperand.toCCode() + " ) " + " & " + " ( " + expression.rightOperand.toCCode() + " ) ";

String toCCode(BitwiseOrExpression expression) :
  	" ( " + expression.leftOperand.toCCode() + " ) " + " | " + " ( " + expression.rightOperand.toCCode() + " ) ";

String toCCode(BitwiseXorExpression expression) :
  	" ( " + expression.leftOperand.toCCode() + " ) " + " ^ " + " ( " + expression.rightOperand.toCCode() + " ) ";

String toCCode(NumericalAddSubtractExpression expression) :
  	" ( " + expression.leftOperand.toCCode() + " ) " + getOperator(expression.operator) + " ( " + expression.rightOperand.toCCode() + " ) ";
  	
String toCCode(NumericalMultiplyDivideExpression expression) :
  	" ( " + expression.leftOperand.toCCode() + " ) " + getOperator(expression.operator) + " ( " + expression.rightOperand.toCCode() + " ) ";


String toCCode(NumericalUnaryExpression expression) :
    getOperator(expression.operator) + " ( " + expression.operand.toCCode() + " ) ";

/* can not handle internal scope  */

ExecutionFlow getExecutionFlow(InterfaceScope this) : ((ExecutionFlow)this.eContainer);
String interfaceObjectName(InterfaceScope this) : "iface" + ((this.name == null)?"":this.name.toFirstUpper());

String getOperator(AdditiveOperator operator) : 
    switch(operator) {
    	case(AdditiveOperator::plus) : " + "
    	case(AdditiveOperator::minus) : " - "
    	default : ""
    };

String getOperator(MultiplicativeOperator operator) : 
    switch(operator) {
    	case(MultiplicativeOperator::mul) : " * "
    	case(MultiplicativeOperator::div) : " / "
    	case(MultiplicativeOperator::mod) : " % "
    	default : ""
    };

String getOperator(RelationalOperator operator) :
	switch (operator) {
	  case (RelationalOperator::greater) : " > "
	  case (RelationalOperator::greaterEqual) : " >= "
	  case (RelationalOperator::smaller) : " < "
	  case (RelationalOperator::smallerEqual) : " <= "
	  case (RelationalOperator::equals) : " == "
	  case (RelationalOperator::notEquals) : " != "
	  default : ""
	};

String getOperator(UnaryOperator operator) :
	switch (operator) {
	  case (UnaryOperator::negative) : " -"
	  case (UnaryOperator::positive) : " + "
	  case (UnaryOperator::complement) : " ~ "
	  default : ""
	};

Set[EventDefinition] getInEvents(Scope interface) : 
	{};

Set[EventDefinition] getOutEvents(Scope interface) : 
	interface.declarations.typeSelect(EventDefinition).select(e|e.direction == Direction::OUT);

Set[EventDefinition] getLocalEvents(Scope interface) : 
	interface.declarations.typeSelect(EventDefinition).select(e|e.direction == Direction::LOCAL);
  
Set[EventDefinition] getInEvents(InterfaceScope interface) : 
	interface.declarations.typeSelect(EventDefinition).select(e|e.direction == Direction::IN);

Set[EventDefinition] getOutEvents(InterfaceScope interface) : 
	interface.declarations.typeSelect(EventDefinition).select(e|e.direction == Direction::OUT);

Set[EventDefinition] getLocalEvents(InterfaceScope interface) : 
	interface.declarations.typeSelect(EventDefinition).select(e|e.direction == Direction::LOCAL);

Set[EventDefinition] getInEvents(InternalScope interface) : 
	interface.declarations.typeSelect(EventDefinition).select(e|e.direction == Direction::IN);

Set[EventDefinition] getOutEvents(InternalScope interface) : 
	interface.declarations.typeSelect(EventDefinition).select(e|e.direction == Direction::OUT);

Set[EventDefinition] getLocalEvents(InternalScope interface) : 
	interface.declarations.typeSelect(EventDefinition).select(e|e.direction == Direction::LOCAL);

// is this just relevant for events?
String toCCode(ElementReferenceExpression ref) :
	ref.reference.toCCode()+ (if (ref.operationCall) then "("+ref.getInterfaceCallComma()+ref.args.toCCode().toString(",")+")" else "");

String toCCode(EObject ref) :
	"/* toCode not defined for: "+ref+" */";
String toCCode(Feature ref) :
	"/* toCode not defined for: "+ref+" */";
String toCCode(FeatureCall ref) :
	ref.feature.toCCode()+ (if (ref.operationCall) then "("+ref.getInterfaceCallComma()+ref.args.toCCode().toString(",")+")" else "");

String toCCode(Declaration dec) :
	"Declartion type not specified";

String toCCode(OperationDefinition dec) :
	" " +dec.getMethodName();

String toCCode(TimeEvent time_ev) :
    " ( eventSet_check( &"+time_ev.statemachineHandleName()+"->base.eventSet, " + time_ev.getEventEnumName() + ") ) ";

String toCCode(VariableDefinition var) :
    " " + var.statemachineHandleName() + "->" + var.getInterface() + 
    "." + var.getName() + " ";
	
String toCCode(EventDefinition evDef) :
    " ( eventSet_check( &" + evDef.statemachineHandleName() + "->base.eventSet, " + evDef.getEventEnumName() + ") ) ";

/*
String toCCode(EventRaisedReferenceExpression errExp) :
	" eventSet_check( &" + errExp.statemachineHandleName() + "->base.eventSet, " + errExp.value.getEventEnumName() + ")";
*/
String toCCode(EventValueReferenceExpression evrExp) :
	"((" +evrExp.value.getEventName() + "*)" + evrExp.statemachineHandleName() + "->base.eventList[" + evrExp.value.getEventEnumName() + "])->value";

String toCCode(ActiveStateReferenceExpression asrExp) :
	"isActive("+asrExp.value.StateEnumName()+") /* function not implemented yet */";

List[Scope] getUsableScopes(List[Scope] scList) :
	scList.select(e| InterfaceScope.isInstance(e) || InternalScope.isInstance(e));

/*
String getScope(EObject eo) :
"unkownScope";

String getScope(InterfaceScope ifScope) :
	"if->";
	
String getScope(InternalScope inScope) :
	"internal->";
*/

	