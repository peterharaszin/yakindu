import stext;
import sexec;
import ecore;
import sgraph;
import sgen;

extension org::yakindu::sct::generator::c::templates::Constants;
extension org::eclipse::xtend::util::stdlib::elementprops;


// TODO: move to other extension

GeneratorEntry genEntry(Object obj) : ((EObject)obj).eRootContainer.getProperty("_GEN_ENTRY_");
Object setGenEntry(Object obj, GeneratorEntry genEntry) : ((EObject)obj).eRootContainer.setProperty("_GEN_ENTRY_", genEntry) -> "";
 

ExecutionFlow getExecutionFlow(InterfaceScope this) : ((ExecutionFlow)this.eContainer);
ExecutionFlow getExecutionFlow(InternalScope this) : ((ExecutionFlow)this.eContainer);

String scName(Expression statement) : ((ExecutionFlow)statement.eRootContainer).name;
String scName(Object this) : ((ExecutionFlow)((EObject)this).eRootContainer).name.toFirstLower();
String ScName(Object this) : ((ExecutionFlow)((EObject)this).eRootContainer).name.toFirstUpper();

List[EventDefinition] declaredEvents(ExecutionFlow flow) : flow.scopes.declarations.typeSelect(EventDefinition);
List[TimeEvent] declaredTimerEvents(ExecutionFlow flow) : flow.scopes.declarations.typeSelect(TimeEvent);
List[VariableDefinition] declaredVariables(ExecutionFlow flow) : flow.scopes.declarations.typeSelect(VariableDefinition);

String test(NamedElement obj) : "";
String StName(Object this) : ((ExecutionFlow)((EObject)this).eRootContainer).name.toFirstUpper() + "Statemachine";
String STNAME(Object this) : ((ExecutionFlow)((EObject)this).eRootContainer).name.toUpperCase() + "STATEMACHINE";
String stName(Object this) : ((ExecutionFlow)((EObject)this).eRootContainer).name.toFirstLower() + "Statemachine";


String EvName(Object this) : ((ExecutionFlow)((EObject)this).eRootContainer).name.toFirstUpper() + "Event";
String EVNAME(Object this) : ((ExecutionFlow)((EObject)this).eRootContainer).name.toUpperCase() + "EVENT";

/* This is from sgraph! This should not be used within code generation */
String StateEnumName(RegularState state) :
	"_"+state.name; /* ??? */

String StateEnumName(ExecutionState state) :
	"_"+state.simpleName;


cached String functionName(Step step) : 
	(step.isEffect()) ? step.actionFunctionName() : (
	(step.isReactionCheck()) ? step.checkFunctionName() : (
	(step.isEntryAction()) ? step.entryActionFunctionName() : ( 
	(step.isExitAction()) ? step.exitActionFunctionName() : (
	(step.isEnterSequence()) ? step.enterSequenceFunctionName() : ( 
	(step.isExitSequence()) ? step.exitSequenceFunctionName() : 
	" !! unknown function type !!" )))));


ExecutionState state(Step this) : (ExecutionState) this.eContainer;

boolean isEffect(Step step) : Reaction.isInstance(step.eContainer) ;
boolean isReactionCheck(Step step) : Reaction.isInstance(step.eContainer) && Check.isInstance(step);
boolean isEntryAction(Step step) : ExecutionState.isInstance(step.eContainer) && step.state().entryAction == step;
boolean isExitAction(Step step) : ExecutionState.isInstance(step.eContainer) && step.state().exitAction == step;
boolean isEnterSequence(Step step) : ExecutionState.isInstance(step.eContainer) && step.state().enterSequence == step;
boolean isExitSequence(Step step) : ExecutionState.isInstance(step.eContainer) && step.state().exitSequence == step;
boolean isReactSequence(Step step) : Sequence.isInstance(step) && step.name == "react";


/* If this is a singleton, we do not need any additional information for the 
	statemachine or the interfaces */
String handleAddition(Object this) :
	(isSingleton(genEntry()) == true) ? "" : StName() + "* " + this.statemachineHandleName();

String handleAdditionComma(Object this) :
	(isSingleton(genEntry()) == true) ? "" : StName() + "* " + this.statemachineHandleName() + ", ";


String handleInterfaceAddition(Scope this) :
	(isSingleton(genEntry()) == true) ? "" : this.interfaceClassName() + "* handle";

String handleInterfaceAdditionComma(Scope this) :
	(isSingleton(genEntry()) == true) ? "" : this.interfaceClassName() + "* handle, ";


/* Function Naming */
String actionFunctionName(Step this) :  
	  this.stName() + "_actions_" + this.getStateName() + "_" + this.getReactionName();

String checkFunctionName(Step this) :  
	  this.stName() + "_condition_" + this.getStateName() + "_" + this.getReactionName();

String entryActionFunctionName(Step this) :  
	  this.stName() + "_entryActions_" + this.getStateName();
	  
String exitActionFunctionName(Step this) :  
	  this.stName() + "_exitActions_" + this.getStateName();
	  
String enterSequenceFunctionName(Step this) :  
	  this.stName() + "_enterSequence_" + this.getStateName();
	  
String exitSequenceFunctionName(Step this) :  
	  this.stName() + "_exitSequence_" + this.getStateName();

/* for some reason, this is handled completely different */ 
String reactFunctionName(Reaction this) :  
	  this.stName() + "_react_" + this.getStateName();

String reactFunctionName(ExecutionNode this) :  
	  this.stName() + "_react_" + this.getStateName();
 


//-- Function Definition and Declaration */
String actionFunction(Step this) :  
	  this.actionFunctionName() + "("+ handleAddition() + ")";

/* TODO: */
String checkFunction(Step this) :  
	  this.checkFunctionName() + "("+ handleAddition() + ")";

String entryActionFunction(Step this) :  
	  this.entryActionFunctionName() + "("+ handleAddition() + ")";
 
String exitActionFunction(Step this) :  
	  this.exitActionFunctionName() + "("+ handleAddition() + ")";
 
String enterSequenceFunction(Step this) :  
	  this.enterSequenceFunctionName() + "("+ handleAddition() + ")";

String exitSequenceFunction(Step this) :  
	  this.exitSequenceFunctionName() + "("+ handleAddition() + ")";

/* for some reason, this is handled completely different */ 
String reactFunction(Reaction this) :  
	  this.reactFunctionName() + "("+ handleAddition() + ")";

String reactFunction(ExecutionNode this) :  
	  this.reactFunctionName() + "("+ handleAddition() + ")";


String getStateName(Step this) : this.eContainer.getStateName(); 
String getStateName(Object this) : (((EObject)this).eContainer != null)?((EObject)this).eContainer.getStateName():"unkown";
String getStateName(ExecutionState this) : this.simpleName;

String getReactionName(Object this) : "uknown";
String getReactionName(Check this) : this.eContainer.getReactionName(); 
String getReactionName(Reaction this) : this.name;
String getReactionName(ExecutionState this) : "sequence";

/* interface naming information */

String interfaceName(Scope this) : "unknownScope";
String interfaceClassName(Scope this) : "unknownScope";
String interfaceObjectName(Scope this) : "unknownScope";

String statemachineHandleName(Object this) : ((ExecutionFlow)((EObject)this).eRootContainer).name.toFirstLower()+"_handle";

String interfaceName(InterfaceScope this) : this.getExecutionFlow().name.toFirstLower() + ((this.name == null) ? "_if" : "_if_" + this.name);
String interfaceClassName(InterfaceScope this) : this.getExecutionFlow().name.toFirstUpper() + "If" + ((this.name == null)?"":this.name.toFirstUpper());
String interfaceObjectName(InterfaceScope this) : "interface" + ((this.name == null)?"":this.name.toFirstUpper());

String interfaceName(InternalScope this) : this.getExecutionFlow().name.toFirstLower() + "internal";
String interfaceClassName(InternalScope this) : this.getExecutionFlow().name.toFirstUpper() + "Internal";
String interfaceObjectName(InternalScope this) : "interfaceInternal";

/* Event name information  */
String getEventEnumName(TimeEvent this) : "ev_" + this.name.toFirstLower();
String getEventEnumName(Event this) : "ev_" + this.eContainer.getScopeName() + "_" + this.name.toFirstLower();

String getEventName(Event this) : this.eContainer.getScopeName().toFirstUpper() + this.name.toFirstUpper();


String getScopeName(emf::EObject eo) :
	"<scope not defined>";

String getScopeName(InternalScope inScope) :
 	"internal";
 	
String getScopeName(InterfaceScope ifScope) :
	(ifScope.name == null)?"default":ifScope.name;

String getLicenseHeader(Object this) :
	if this.genEntry().getFeatureConfiguration(getLicenseFeature())!=null
		&& this.genEntry().getFeatureConfiguration(getLicenseFeature()).getParameterValue(getLicenseText()) != null then
		"/**" + this.genEntry().getFeatureConfiguration(getLicenseFeature()).getParameterValue(getLicenseText()).getStringValue()+"*/"
	else 
		null;
		
String getLicenseHeaderPlain(Object this) :
	if this.genEntry().getFeatureConfiguration(getLicenseFeature())!=null
		&& this.genEntry().getFeatureConfiguration(getLicenseFeature()).getParameterValue(getLicenseText()) != null then
		this.genEntry().getFeatureConfiguration(getLicenseFeature()).getParameterValue(getLicenseText()).getStringValue()
	else 
		null;

Boolean isSingleton(Object this) : (
	(this.genEntry().getFeatureConfiguration(getCCodeFeature()) != null) ? (
      ((this.genEntry().getFeatureConfiguration(getCCodeFeature()).getParameterValue(getSingleton()) != null) ?
       this.genEntry().getFeatureConfiguration(getCCodeFeature()).getParameterValue(getSingleton()).getBooleanValue()
     : getSingletonDefault()))
     : getSingletonDefault());
 
String getComment(Step this) :
	if comment!=null then
		"//"+comment
	else
		null;
