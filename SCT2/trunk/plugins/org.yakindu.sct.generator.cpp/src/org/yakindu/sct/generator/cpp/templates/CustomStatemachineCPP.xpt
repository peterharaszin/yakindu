«REM»

Templates for the main statechart cpp file.

@auther joern seger

«ENDREM»

«IMPORT sexec»
«IMPORT stext»
«IMPORT sgraph»

«IMPORT org::yakindu::sct::generator::cpp::templates»
«EXTENSION org::yakindu::sct::generator::cpp::templates::Expression»

«DEFINE ActionCode FOR Step»
// ActionCode for Step not defined
«ENDDEFINE»

«DEFINE ActionCode FOR Execution»
// ActionCode for Execution not implemented yet
«ENDDEFINE»

«DEFINE ActionCode FOR Call»
// ActionCode for Call not implemented yet
«ENDDEFINE»

«DEFINE ActionCode FOR Sequence»
  «EXPAND ActionCode FOREACH this.steps»
«ENDDEFINE»

«DEFINE ActionCode FOR Check»
// ActionCode for Check not implemented yet
«ENDDEFINE»

«DEFINE ActionCode FOR Reaction»
  «EXPAND ActionCode FOR this.effect» 
«ENDDEFINE»

«DEFINE ActionCode FOR If»
if («this.check.condition.toCppCode()») {
  «EXPAND ActionCode FOR this.thenStep»
}
else {
  «EXPAND ActionCode FOR this.elseStep»
}
«ENDDEFINE»

«DEFINE ActionCode FOR EnterState»
// dummy Enter
// states = newstates
«ENDDEFINE»

«DEFINE ActionCode FOR ExitState»
// dummy Exit
// oldstates = states
«ENDDEFINE»


«DEFINE ConditionMethodsImplement FOR ExecutionState»
  «FOREACH reactions AS r»
bool MyStatemachine::condition_«this.simpleName»_«r.name»(const _Event& ev) {
  return (	«r.check.condition.toCppCode()» );
}
  «ENDFOREACH»
«ENDDEFINE»

«DEFINE StatementMethodsImplement FOR ExecutionState»
  «FOREACH reactions AS r»
void MyStatemachine::actions_«this.simpleName»_«r.name»() {
  «EXPAND ActionCode FOR r.effect»
}
  «ENDFOREACH»
«ENDDEFINE»

«DEFINE CycleMethodsImplement FOR ExecutionState»
void MyStatemachine::cycle_«this.simpleName»(const _Event& ev)
{
  «FOREACH reactions AS r -»
	  if(condition_«this.simpleName»_«r.name»(ev)) {
	    actions_«this.simpleName»_«r.name»();
	  } 
  «ENDFOREACH»
}
«ENDDEFINE»

«DEFINE file FOR ExecutionFlow»
«FILE 'MyStatemachine.cpp'»
#include <iostream>
#include "MyStatemachine.h"

MyStatemachine::MyStatemachine() : Statemachine(«((ExecutionFlow)this.eRootContainer).stateVector.size») {
}

MyStatemachine::~MyStatemachine() {
}

«EXPAND ConditionMethodsImplement FOREACH this.states»

«EXPAND StatementMethodsImplement FOREACH this.states»

«EXPAND CycleMethodsImplement FOREACH this.states»

void MyStatemachine::init()
{
	/* initialize enter states */
	state[0] = State1;

	/* uninitialized states:
	 * state[1] = last_state; */
}



void MyStatemachine::_runCycle(Event ev)
{
	for (int i=0; i<«((ExecutionFlow)this.eRootContainer).stateVector.size»; ++i) {
		switch(state[i]) {
	«FOREACH this.states AS state»
	    case «state.simpleName»:
	        cycle_«state.simpleName»(*ev);
	        break;
	«ENDFOREACH»
		default:
			/* no state found */
			break;
		}
	}
}

«ENDFILE»

«ENDDEFINE»