«REM»

Templates for the main statechart cpp file.

@auther joern seger

«ENDREM»

«IMPORT sexec»
«IMPORT stext»
«IMPORT sgraph»


«DEFINE file FOR ExecutionFlow»

«FILE 'MyStatemachine.h'»
#ifndef MYSTATEMACHINE_H_
#define MYSTATEMACHINE_H_

#include "Statemachine.h"
#include "MyDataRepository.h"
#include "MyEvents.h"

//namespace MyStatemachineNS {

#define MAX_PARALLEL_STATES 1

class MyStatemachine: public Statemachine, public MyDataRepository {

public:
	enum States {
	    «FOREACH this.states AS exState»
	      «exState.simpleName»,
	    «ENDFOREACH»
		last_state
	};

protected:
	/* conditions */
	«FOREACH states AS conStates»
	  «FOREACH conStates.reactions AS state»
	void condition_«conStates.simpleName»_«state.name»(const _Event& event);
	  «ENDFOREACH»
	«ENDFOREACH»
	
	/* actions */
	«FOREACH states AS conStates»
	  «FOREACH conStates.reactions AS state»
	void actions_«conStates.simpleName»_«state.name»();
	  «ENDFOREACH»
	«ENDFOREACH»

	/* cycles */
	«FOREACH states AS conStates»
	  «FOREACH conStates.reactions AS state»
	void cycle_«conStates.simpleName»();
	  «ENDFOREACH»
	«ENDFOREACH»

	virtual void _runCycle(Event ev);

public:

	MyStatemachine();
	virtual ~MyStatemachine();

	virtual void init();

	//virtual void queueEvent(const Event& ev);

};

//}; // namespace
#endif /* MYSTATEMACHINE_H_ */

«ENDFILE»

«ENDDEFINE»


«DEFINE codeMethodPrototype FOR If»

  condition_STATENAME_TRANSITIONPRIO_HERE(const _Event& event, const MyDataRepository& data);
«ENDDEFINE»

«DEFINE codeMethodPrototype FOR Cycle»
  //NONE run through cycles
  «EXPAND codeMethodPrototype FOREACH this.steps»
«ENDDEFINE»

«DEFINE codeMethodPrototype FOR Step»
  //NONE Step
«ENDDEFINE»

«DEFINE codeMethodPrototype FOR Sequence»
  «EXPAND codeMethodPrototype FOREACH this.steps»
«ENDDEFINE»
