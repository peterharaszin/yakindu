«REM»

Templates for the main statechart cpp file.

@auther joern seger

«ENDREM»

«IMPORT sexec»
«IMPORT stext»
«IMPORT sgraph»


«DEFINE file FOR ExecutionFlow»

«FILE 'MyStatemachine.h'»
#ifndef MYSTATEMACHINE_H_
#define MYSTATEMACHINE_H_

#include "Statemachine.h"
#include "MyDataRepository.h"
#include "MyEvents.h"

//namespace MyStatemachineNS {

#define MAX_PARALLEL_STATES 1

class MyStatemachine: public Statemachine, public MyDataRepository {

public:
	enum States {
		State1,
		State2,
		State3,
		State4,
		last_state
	};

protected:
	/* conditions */
	bool condition_state1_id1(const _Event& event, const MyDataRepository& data);
	bool condition_state3_id1(const _Event& event, const MyDataRepository& data);
	bool condition_state3_id2(const _Event& event, const MyDataRepository& data);
	bool condition_state4_id1(const _Event& event, const MyDataRepository& data);
	bool condition_state4_id2(const _Event& event, const MyDataRepository& data);
	bool condition_state4_id3(const _Event& event, const MyDataRepository& data);

	/* statement */
	void statement_state1_id1();
	void statement_state3_id1();
	void statement_state3_id2();
	void statement_state4_id1();
	void statement_state4_id2();
	void statement_state4_id3();

	/* cycles */
	void cycle_state1(const _Event& ev);
	void cycle_state3(const _Event& ev);
	void cycle_state4(const _Event& ev);

	virtual void _runCycle(Event ev);

public:

	MyStatemachine();
	virtual ~MyStatemachine();

	virtual void init();

	//virtual void queueEvent(const Event& ev);

};

//}; // namespace
#endif /* MYSTATEMACHINE_H_ */

«ENDFILE»

«ENDDEFINE»