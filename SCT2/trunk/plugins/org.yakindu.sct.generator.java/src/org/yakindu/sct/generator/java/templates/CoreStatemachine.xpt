«REM»
Copyright (c) 2011 committers of YAKINDU and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html
Contributors:
	Markus Muehlbrandt - Initial contribution and API
«ENDREM»

«IMPORT sexec»
«IMPORT stext»
«IMPORT sgraph»

«EXTENSION org::yakindu::sct::generator::java::templates::ExecutionModelExtensions»
«EXTENSION org::yakindu::sct::generator::java::templates::TypeModelExtensions»
«EXTENSION org::yakindu::sct::generator::java::templates::Expression»
«EXTENSION org::yakindu::sct::generator::java::templates::GenmodelEntries»
«EXTENSION org::yakindu::sct::generator::java::templates::Naming»

«DEFINE Imports(sgen::GeneratorEntry entry)  FOR ExecutionFlow»
«IF createInterfaceObserverSupport(entry) && hasOutgoingEvents()-»
import java.util.LinkedList;
import java.util.List;
«ENDIF-»
«IF isTimedStatemachine()-»
	import «entry.getBasePackageName()».TimeEvent;
	import «entry.getBasePackageName()».ITimerService;
«ENDIF-»
«ENDDEFINE»

«DEFINE FieldDeclarations(sgen::GeneratorEntry entry) FOR ExecutionFlow»
	«FOREACH getInternalScopeEvents() AS event-»
		private boolean «event.getEventIdentifier()»;
		
		«IF !event.type.isVoid()-»
		private «event.type.getJavaType()» «event.getEventValueIdentifier()»;
		
		«ENDIF-»
	«ENDFOREACH-»
	
	«FOREACH getTimeEvents() AS timeEvent-»
	private final TimeEvent «timeEvent.getEventIdentifier()» = new TimeEvent(«timeEvent.periodic», «getTimeEvents().indexOf(timeEvent)»); 
	«ENDFOREACH»
	
	«IF isTimedStatemachine()-»
	private final boolean[] timeEvents = new boolean[«getTimeEvents().size»];
	«ENDIF-»
	
	«FOREACH this.scopes.typeSelect(InterfaceScope) AS scope-»
		«EXPAND StatemachineInterfaceImpl::InterfaceImpl(entry) FOR scope-»
		
		private «scope.getInterfaceImplName()» «scope.getInterfaceIdentifier()»;
	«ENDFOREACH-»
	
	public enum State {
		«FOREACH states AS state-»
	      «state.getName()»,
	    «ENDFOREACH-»
	    «getNullStateName()»
	};
	
	«FOREACH getInternalScopeVariables() AS variable-»
	private «variable.type.getJavaType()» «variable.getVariableIdentifier()»«variable.getInitialValueAssignment()»;
	
	«ENDFOREACH-»
	«IF hasHistory()-»
	private State[] historyVector = new State[«historyVector.size»];
	
	«ENDIF-»
	private final State[] stateVector = new State[«stateVector.size»];
	
	private int nextStateIndex;
	
	«IF isTimedStatemachine()-»
	private ITimerService timerService;
	
	private long cycleStartTime;
	«ENDIF-»
	
	«FOREACH scopes.typeSelect(InternalScope) AS internal-»
	«IF internal.hasOperations()-»
		private «internal.getInternalOperationCallbackName()» operationCallback;
	«ENDIF-»
	«ENDFOREACH-»
«ENDDEFINE»

«DEFINE ActionCode FOR Step-»
// ActionCode for Step «toString()» not defined
«ENDDEFINE»

«DEFINE EntryCode FOR Step-»
// EntryCode for Step «toString()» not defined
«ENDDEFINE»

«DEFINE ActionCode FOR StateSwitch-»
	«getComment()»
	«IF historyRegion!=null-»
	switch(historyVector[«historyRegion.historyVector.offset»]) {
	«ELSE-»
	switch(stateVector[«stateConfigurationIdx»]) {
	«ENDIF-»
		«FOREACH cases AS stateCase»
  			case «stateCase.state.getName()» :
  				«EXPAND ActionCode FOR stateCase.step»
  				break;
		«ENDFOREACH»
  			default:
    			break;
	}
«ENDDEFINE»

«DEFINE ActionCode FOR ScheduleTimeEvent-»
«getComment()-»
getTimerService().setTimer(«timeEvent.getEventIdentifier()», «timeValue.toCode()», cycleStartTime);
«ENDDEFINE»

«DEFINE ActionCode FOR UnscheduleTimeEvent-»
«getComment()-»
getTimerService().resetTimer(«timeEvent.getEventIdentifier()»);
«ENDDEFINE»

«DEFINE ActionCode FOR Execution-»
	«getComment()-»
	«IF AssignmentExpression.isInstance(statement)-»
		«LET statement.toCode() AS statement-»
		«statement.subString(1,statement.length-1)»;
		«ENDLET-»
	«REM»«ELSEIF  ElementReferenceExpression.isInstance(statement)-»
		«ENDREM»
	«ELSE-»
		«statement.toCode()»;
	«ENDIF-»
«ENDDEFINE»

«DEFINE ActionCode FOR Call-»
	«getComment()-»
	«step.functionName()»();
«ENDDEFINE»

«DEFINE ActionCode FOR Sequence-»
	«EXPAND ActionCode FOREACH this.steps»
«ENDDEFINE»

«DEFINE ActionCode FOR Check -»
  «IF this != null -»
«this.condition.toCode() -»
  «ELSE -»
 true «
 ENDIF -»«
  ENDDEFINE»

«DEFINE ActionCode FOR CheckRef -»
«IF this.check != null -»
«getComment()-»
«this.check.functionName()»() «
ELSE -»
true 
«ENDIF -»
«ENDDEFINE»

«DEFINE ActionCode FOR Reaction-»
	«EXPAND ActionCode FOR this.effect-» 
«ENDDEFINE»

«DEFINE ActionCode FOR If-»
«getComment()-»
if («EXPAND ActionCode FOR this.check») { 
	«EXPAND ActionCode FOR this.thenStep-»
}
«IF elseStep != null-»
else {
	«EXPAND ActionCode FOR this.elseStep-»
}
«ENDIF-»
«ENDDEFINE»

«DEFINE ActionCode FOR EnterState-»
	«getComment()-»
	nextStateIndex = «this.state.stateVector.offset»;
	stateVector[«this.state.stateVector.offset»] = State.«state.getName()»;
«ENDDEFINE»

«DEFINE ActionCode FOR ExitState-»
	«getComment()-»
	stateVector[«this.state.stateVector.offset»] = State.«getNullStateName()»;
«ENDDEFINE»

«DEFINE ActionCode FOR HistoryEntry»
	«getComment()»
	if (historyVector[«region.historyVector.offset»] != State.$NullState$) {
		«EXPAND ActionCode FOR historyStep-»
	} else {
		«EXPAND ActionCode FOR initialStep-»
	}
«ENDDEFINE»

«DEFINE ActionCode FOR SaveHistory»
	historyVector[«region.historyVector.offset»] = stateVector[«region.stateVector.offset»];
«ENDDEFINE»

«DEFINE ConditionMethodsImplement FOR ExecutionNode-»
	«FOREACH reactions AS r-»
		«IF r.check != null && r.check.refs.size > 0 -»
	private boolean «r.check.functionName()»() {
		«IF r.check.condition != null-»
		return «r.check.condition.toCode()»;
		«ELSE-»
		return true;
  	«ENDIF-»
	}
	«ENDIF -»
  «ENDFOREACH-»
«ENDDEFINE»

«DEFINE StatementMethodsImplement FOR ExecutionNode-»
  «FOREACH reactions.select(e| e.effect.caller.size > 0 ) AS r-»
	private void «r.effect.functionName()»() {
		«EXPAND ActionCode FOR r.effect-»
	}
  «ENDFOREACH-»
«ENDDEFINE»

«DEFINE ReactMethodsImplement FOR ExecutionNode-»
	«IF ExecutionState.isInstance(this) || reactSequence.caller.size > 0 -»
	private void react«getName()»() {
		«EXPAND ActionCode FOREACH reactSequence.steps-»
	}
	«ENDIF -»
«ENDDEFINE»

«DEFINE EnterMethodImplement FOR ExecutionFlow-»
	«IF this.entryAction != null && entryAction.caller.size > 0 -»
	private void «entryAction.statechartEntryActionFunctionName()»() {
		«EXPAND ActionCode FOR this.entryAction-»
	}
	«ENDIF-»
«ENDDEFINE»

«DEFINE ExitMethodImplement FOR ExecutionFlow-»
	«IF this.exitAction != null && exitAction.caller.size > 0 -»
	private void «this.exitAction.statechartExitActionFunctionName()»() {
		«EXPAND ActionCode FOR this.exitAction-»
	}
«ENDIF-»
«ENDDEFINE»

«DEFINE EnterMethodImplement FOR ExecutionState-»
	«IF this.entryAction != null && entryAction.caller.size > 0 -»
	private void «entryAction.entryActionFunctionName()»() {
		«EXPAND ActionCode FOR this.entryAction-»
	}
	«ENDIF-»
«ENDDEFINE»

«DEFINE ExitMethodImplement FOR ExecutionState-»
	«IF this.exitAction != null && exitAction.caller.size > 0 -»
	private void «this.exitAction.exitActionFunctionName()»() {
		«EXPAND ActionCode FOR this.exitAction-»
	}
«ENDIF-»
«ENDDEFINE»

«DEFINE EnterSequenceImplement FOR ExecutionState»
	«IF enterSequence.steps.size > 0 && enterSequence.caller.size > 0-»
	private void «enterSequenceName()»() {
		«EXPAND ActionCode FOREACH enterSequence.steps-»
	}
	«ENDIF-»
«ENDDEFINE»

«DEFINE ExitSequenceImplement FOR ExecutionState-»
	«IF exitSequence.steps.size > 0 && exitSequence.caller.size > 0-»
	private void «exitSequenceName()»() {
		«EXPAND ActionCode FOREACH exitSequence.steps-»
	}
	«ENDIF-»
«ENDDEFINE»

«DEFINE EnterSequenceImplement FOR ExecutionRegion»
	«IF enterSequence.steps.size > 0 && enterSequence.caller.size > 0-»
	private void «enterSequenceName()»() {
		«EXPAND ActionCode FOREACH enterSequence.steps-»
	}
	«ENDIF-»
«ENDDEFINE»
«DEFINE DeepEnterSequenceImplement FOR ExecutionRegion»
	«IF deepEnterSequence.steps.size > 0 && deepEnterSequence.caller.size > 0-»
	private void «deepEnterSequenceName()»() {
		«EXPAND ActionCode FOREACH deepEnterSequence.steps-»
	}
	«ENDIF-»
«ENDDEFINE»
«DEFINE ShallowEnterSequenceImplement FOR ExecutionRegion»
	«IF shallowEnterSequence.steps.size > 0 && shallowEnterSequence.caller.size > 0-»
	private void «shallowEnterSequenceName()»() {
		«EXPAND ActionCode FOREACH shallowEnterSequence.steps-»
	}
	«ENDIF-»
«ENDDEFINE»

«DEFINE ExitSequenceImplement FOR ExecutionRegion-»
	«IF exitSequence.steps.size > 0 && exitSequence.caller.size > 0-»
	private void «exitSequenceName()»() {
		«EXPAND ActionCode FOREACH exitSequence.steps-»
	}
	«ENDIF-»
«ENDDEFINE»

«DEFINE InternalScopeMethods FOR ExecutionFlow »
	«FOREACH getInternalScopeEvents() AS event-»
	
		«IF !event.type.isVoid()-»
			private void raise«event.name.toFirstUpper()»(«event.type.getJavaType()» value) {
				«event.getEventValueIdentifier()» = value;
				«event.getEventIdentifier()» = true;
			}
			
			private «event.type.getJavaType()» get«event.name.toFirstUpper()»Value() {
				«event.getIllegalAccessValidation()»
				return «event.getEventValueIdentifier()»;
			}
			
		«ELSE-»
			private void raise«event.name.toFirstUpper()»() {
				«event.getEventIdentifier()» = true;
			}
			
		«ENDIF-»
	«ENDFOREACH-»
	«REM»Create getters and setters for variables«ENDREM»
	«FOREACH getInternalScopeVariables() AS variable-»
	private «variable.type.getJavaType()» get«variable.getVarName()»() {
		return «variable.getVariableIdentifier()»;
	}
	
	private void set«variable.getVarName().toFirstUpper()»(«variable.type.getJavaType()» value) {
		«variable.getVariableIdentifier()» = value;
	}	
	«ENDFOREACH-»
	
	«FOREACH scopes.typeSelect(InternalScope) AS internal-»
	«IF internal.hasOperations()-»
		public void set«internal.getInternalOperationCallbackName()»(
				«internal.getInternalOperationCallbackName()» operationCallback) {
			this.operationCallback = operationCallback;
		}
	«ENDIF-»
	«ENDFOREACH-»
«ENDDEFINE»

«DEFINE DefaultInterfaceMethods(sgen::GeneratorEntry entry) FOR InterfaceScope »
	«FOREACH declarations.typeSelect(EventDefinition) AS event-»
	
	«IF event.direction == Direction::IN-»
		«IF !event.type.isVoid()-»
		public void raise«event.name.toFirstUpper()»(«event.type.getJavaType()» value) {
			«getInterfaceIdentifier()».raise«event.name.toFirstUpper()»(value);
		}
		«ELSE»
		public void raise«event.name.toFirstUpper()»() {
			«getInterfaceIdentifier()».raise«event.name.toFirstUpper()»();
		}
		«ENDIF-»
	«ENDIF-»
	
	«IF event.direction ==  Direction::OUT-»
	public boolean isRaised«event.name.toFirstUpper()»() {
		return «getInterfaceIdentifier()».isRaised«event.name.toFirstUpper()»();
	}
	«IF !event.type.isVoid()-»
	public «event.type.getJavaType()» get«event.name.toFirstUpper()»Value() {
		return «getInterfaceIdentifier()».get«event.name.toFirstUpper()»Value();
	}
	«ENDIF»
	«ENDIF-»
	«ENDFOREACH-»
	
	«FOREACH declarations.typeSelect(VariableDefinition) AS variable-»
	public «variable.type.getJavaType()» «variable.getter()» {
		return «getInterfaceIdentifier()».«variable.getter()»;
	}
	
	public void set«variable.getVarName().toFirstUpper()»(«variable.type.getJavaType()» value) {
		«getInterfaceIdentifier()».set«variable.getVarName().toFirstUpper()»(value);
	}	
	«ENDFOREACH-»
	
	«IF (hasVariables() || hasIncomingEvents()) && entry.createGenericInterfaceSupport()-»
	public boolean raiseEvent(String name) {
		return «getInterfaceIdentifier()».raiseEvent(name);
	}
	
	«IF hasIncomingEvents()-»
	@SuppressWarnings("unchecked")
	«ENDIF-»
	public boolean raiseEvent(String name, Object value) {
		return «getInterfaceIdentifier()».raiseEvent(name, value);
	}

	public boolean setVariable(String name, Object value) {
		return «getInterfaceIdentifier()».setVariable(name, value);
	}
	
	public Object getVariable(String name) {
		return «getInterfaceIdentifier()».getVariable(name);
	}
	«ENDIF-»
«ENDDEFINE»
