«REM»
Copyright (c) 2011 committers of YAKINDU and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html
Contributors:
	committers of YAKINDU - initial API and implementation
 	
@author Markus Muehlbrandt - Initial contribution and API
«ENDREM»

«IMPORT sexec»
«IMPORT stext»
«IMPORT sgraph»
«IMPORT ecore»

«IMPORT org::yakindu::sct::generator::java::templates»
«EXTENSION org::yakindu::sct::generator::java::templates::Expression»
«EXTENSION org::yakindu::sct::generator::java::templates::Naming»

«DEFINE ActionCode FOR Step-»
// ActionCode for Step «toString()» not defined
«ENDDEFINE»

«DEFINE EntryCode FOR Step-»
// EntryCode for Step «toString()» not defined
«ENDDEFINE»

«DEFINE ActionCode FOR ScheduleTimeEvent-»
getTimerHandler().setTimer(«timeEvent.getName()», «timeValue.toCode()», cycleStartTime);
«ENDDEFINE»

«DEFINE ActionCode FOR UnscheduleTimeEvent-»
getTimerHandler().resetTimer(«timeEvent.getName()»);
«ENDDEFINE»

«DEFINE ActionCode FOR Execution-»
	«statement.toCode()»
«ENDDEFINE»

«DEFINE ActionCode FOR Call-»
«this.step.functionName()»();
«ENDDEFINE»

«DEFINE ActionCode FOR Sequence-»
	«EXPAND ActionCode FOREACH this.steps»
«ENDDEFINE»

«DEFINE ActionCode FOR Check -»
  «IF this != null -»
«this.condition.toCode() -»
  «ELSE -»
 true «
 ENDIF -»«
  ENDDEFINE»

«DEFINE ActionCode FOR CheckRef -»
«IF this.check != null -»
«this.check.functionName()»(events) «
ELSE -»
true 
«ENDIF -»
«ENDDEFINE»

«DEFINE ActionCode FOR Reaction-»
	«EXPAND ActionCode FOR this.effect-» 
«ENDDEFINE»

«DEFINE ActionCode FOR If-»
if («EXPAND ActionCode FOR this.check») { 
	«EXPAND ActionCode FOR this.thenStep-»
}
«IF elseStep != null-»
else {
	«EXPAND ActionCode FOR this.elseStep-»
}
«ENDIF-»
«ENDDEFINE»

«DEFINE ActionCode FOR EnterState-»
	activeStates.add(State.«state.getName()»);
«ENDDEFINE»

«DEFINE ActionCode FOR ExitState-»
	activeStates.remove(State.«state.getName()»);
«ENDDEFINE»

«DEFINE ConditionMethodsImplement FOR ExecutionState-»
	«FOREACH reactions AS r-»
		«IF r.check != null -»
	private boolean «r.check.functionName()»(Collection<?> events) {
		«IF r.check.condition != null-»
		return «r.check.condition.toCode()»;
		«ELSE-»
		return true;
  	«ENDIF-»
	}
	«ENDIF -»
  «ENDFOREACH-»
«ENDDEFINE»

«DEFINE StatementMethodsImplement FOR ExecutionState-»
  «FOREACH reactions AS r-»
	private void «r.effect.functionName()»() {
		«EXPAND ActionCode FOR r.effect-»
	}
  «ENDFOREACH-»
«ENDDEFINE»

«DEFINE CycleCode FOR Cycle-» 
	«EXPAND ActionCode FOREACH this.steps-»
«ENDDEFINE»

«DEFINE CycleMethodsImplement FOR ExecutionState-»
	private void cycle«getName()»(Collection<?> events) {
		«EXPAND CycleCode FOR cycle-»
	}
«ENDDEFINE»

«DEFINE EnterMethodImplement FOR ExecutionState-»
	«IF this.entryAction != null-»
	private void «entryAction.entryActionFunctionName()»() {
		«EXPAND ActionCode FOR this.entryAction-»
	}
	«ENDIF-»
«ENDDEFINE»

«DEFINE ExitMethodImplement FOR ExecutionState-»
	«IF this.exitAction != null-»
	private void «this.exitAction.exitActionFunctionName()»() {
		«EXPAND ActionCode FOR this.exitAction-»
	}
«ENDIF-»
«ENDDEFINE»

«DEFINE EntryCode FOR EnterState-»
	public void «statemachineEntryFunctionName()» {
		«IF isTimedStatemachine((ExecutionFlow)eContainer.eContainer)-»
		cycleStartTime = System.currentTimeMillis();
		«ENDIF-»
		«EXPAND ActionCode FOR this-»
		«IF state.entryAction != null-»
		«state.entryAction.entryActionFunctionName()»();
		«ENDIF»
		
	}
«ENDDEFINE»

«DEFINE file(sgen::GeneratorEntry entry) FOR ExecutionFlow-»
«FILE getImplementationPackagePath(entry)+"/"+getBaseStatemachineName()+'.java'-»
«getLicenseHeader()»
package «getImplementationPackageName(entry)»;

import java.util.Collection;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.Set;
import «entry.getBasePackageName()».Event;
«IF isTimedStatemachine()-»
import «entry.getBasePackageName()».TimeEvent;
import «entry.getBasePackageName()».ITimedStatemachine;
import «entry.getBasePackageName()».ITimerHandler;
import «entry.getBasePackageName()».EventNotification;
import «entry.getBasePackageName()».Notification;
«ELSE-»
import «entry.getBasePackageName()».IStatemachine;
«ENDIF-»
«IF getInternalScopeValuedEvents().size > 0 -»
import «entry.getBasePackageName()».ValuedEvent;
«ENDIF-»

public abstract class «getBaseStatemachineName()» implements «getImplementationType()» {
	
	«FOREACH getInternalScopeEvents() AS event-»
	private final «event.getEventType()» «event.getName()» = new «event.getEventType()»(«event.getCreationSignature()»); 
	«ENDFOREACH-»
	
	«FOREACH getTimeEvents() AS timeEvent-»
	private static final TimeEvent «timeEvent.getName()» = new TimeEvent("«timeEvent.getName()»", «timeEvent.periodic»); 
	«ENDFOREACH»
	
	public enum State {
		«FOREACH states AS state-»
	      «state.getName()»,
	    «ENDFOREACH-»
	};
	
	«FOREACH scopes.typeSelect(InterfaceScope) AS interface-»
	private «interface.getInterfaceImplName()» «interface.getInterfaceName().toFirstLower()»;
	«ENDFOREACH-»
	«FOREACH getInternalScopeVariables() AS variable-»
	private «variable.type.getJavaType()» «variable.getValueName()»«variable.getInitialValueAssignment()»;
	
	«ENDFOREACH-»

	private final Set<State> activeStates = EnumSet.noneOf(State.class);
	
	private final Collection<Event> occuredEvents;
	
	private final Collection<Event> outEvents;
	
	«IF isTimedStatemachine()-»
	private ITimerHandler timerHandler;
	
	private long cycleStartTime;
	«ENDIF-»
	
	public «getBaseStatemachineName()»(Collection<Event> occuredEvents) {
		this.occuredEvents = occuredEvents;
		this.outEvents = new HashSet<Event>();
		«FOREACH getInterfaceScope() AS interface-»
		«interface.getInterfaceName().toFirstLower()» = new «interface.getInterfaceImplName()»(this);
		«ENDFOREACH-»
	}
	
	protected Collection<Event> getOccuredEvents() {
		return occuredEvents;
	}
	
	protected Collection<Event> getOutEvents(){
		return outEvents;
	}
		
	«EXPAND EntryCode FOREACH enterSequence.steps-»
	
	protected boolean eventOccured() {
		return !getOccuredEvents().isEmpty();
	}
	
	@Override
	public void init() {
		
	}
	
	«IF isTimedStatemachine()-»
	@Override
	public void setTimerHandler(ITimerHandler timerHandler) {
		this.timerHandler = timerHandler;
	}

	@Override
	public ITimerHandler getTimerHandler() {
		if (timerHandler == null) {
			throw new NullPointerException("TimerHandler of statemachine \"+«name»+\" not set!");
		}
		return timerHandler;
	}
	
	@Override
	public void notify(Notification<?> notification) {
		if (notification instanceof EventNotification) {
			EventNotification eventNotification = (EventNotification) notification;
			getOccuredEvents().add(eventNotification.getElement());
		}
	}
	«ENDIF-»
		
	public Set<State> getActiveStates(){
		return EnumSet.copyOf(activeStates);
	}
	
	«FOREACH scopes.typeSelect(InterfaceScope) AS interface-»
	public «interface.getInterfaceName()» get«interface.getInterfaceName()»() {
		return «interface.getInterfaceName().toFirstLower()»;
	}
	
	«ENDFOREACH-»
	«FOREACH getInternalScopeEvents() AS event-»
	private void raise«event.name.toFirstUpper()»() {
		getOccuredEvents().add(«event.getName()»);
	}
	
	«IF event.type != Type::void-»
	private void raise«event.name.toFirstUpper()»(«event.type.getJavaType()» value) {
		«event.getName()».setValue(value);
		getOccuredEvents().add(«event.getName()»);
	}
	
	private «event.type.getJavaType()» get«event.getValueName().toFirstUpper()»() {
		return «event.getName()».getValue();
	}
	
	«ENDIF-»
	«ENDFOREACH-»
	«FOREACH getInternalScopeVariables() AS variable-»
	private «variable.type.getJavaType()» get«variable.getValueName().toFirstUpper()»() {
		return «variable.getValueName()»;
	}
	
	private void set«variable.getValueName().toFirstUpper()»(«variable.type.getJavaType()» value) {
		«variable.getValueName()» = value;
	}	
	
	«ENDFOREACH-»
«EXPAND ConditionMethodsImplement FOREACH this.states-»
«EXPAND StatementMethodsImplement FOREACH this.states-»
«EXPAND CycleMethodsImplement FOREACH this.states-»
«EXPAND EnterMethodImplement FOREACH this.states-»
«EXPAND ExitMethodImplement FOREACH this.states-»
	protected void runCycle(Collection<?> events) {
		«IF isTimedStatemachine()-»
		cycleStartTime = System.currentTimeMillis();
		«ENDIF-»
		getOutEvents().clear();
		for (State state : activeStates) {
			switch (state) {
			«FOREACH this.states AS state-»
    		case «state.getName()»:
        		cycle«state.getName()»(events);
        		break;
			«ENDFOREACH-»
			default:
				// no state found
			}
		}
	}
}
«ENDFILE-»
«ENDDEFINE»