«REM»
Copyright (c) 2011 committers of YAKINDU and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html
Contributors:
	Markus Muehlbrandt - Initial contribution and API
«ENDREM»

«IMPORT sexec»
«IMPORT stext»
«IMPORT sgraph»

«EXTENSION org::yakindu::sct::generator::java::templates::ExecutionModelExtensions»
«EXTENSION org::yakindu::sct::generator::java::templates::TypeModelExtensions»
«EXTENSION org::yakindu::sct::generator::java::templates::Expression»
«EXTENSION org::yakindu::sct::generator::java::templates::GenmodelEntries»
«EXTENSION org::yakindu::sct::generator::java::templates::Naming»

«DEFINE ActionCode FOR Step-»
// ActionCode for Step «toString()» not defined
«ENDDEFINE»

«DEFINE EntryCode FOR Step-»
// EntryCode for Step «toString()» not defined
«ENDDEFINE»

«DEFINE ActionCode FOR StateSwitch-»
	«getComment()»
	«IF historyRegion!=null-»
	switch(historyVector[«historyRegion.historyVector.offset»]) {
	«ELSE-»
	switch(stateVector[«stateConfigurationIdx»]) {
	«ENDIF-»
		«FOREACH cases AS stateCase»
  			case «stateCase.state.getName()» :
  				«EXPAND ActionCode FOR stateCase.step»
  				break;
		«ENDFOREACH»
  			default:
    			break;
	}
«ENDDEFINE»

«DEFINE ActionCode FOR ScheduleTimeEvent-»
«getComment()-»
getTimerService().setTimer(«timeEvent.getName()», «timeValue.toCode()», cycleStartTime);
«ENDDEFINE»

«DEFINE ActionCode FOR UnscheduleTimeEvent-»
«getComment()-»
getTimerService().resetTimer(«timeEvent.getName()»);
«ENDDEFINE»

«DEFINE ActionCode FOR Execution-»
	«getComment()-»
	«statement.toCode()»
«ENDDEFINE»

«DEFINE ActionCode FOR Call-»

«getComment()-»
«step.functionName()»();
«ENDDEFINE»

«DEFINE ActionCode FOR Sequence-»
	«EXPAND ActionCode FOREACH this.steps»
«ENDDEFINE»

«DEFINE ActionCode FOR Check -»
  «IF this != null -»
«this.condition.toCode() -»
  «ELSE -»
 true «
 ENDIF -»«
  ENDDEFINE»

«DEFINE ActionCode FOR CheckRef -»
«IF this.check != null -»
«getComment()-»
«this.check.functionName()»() «
ELSE -»
true 
«ENDIF -»
«ENDDEFINE»

«DEFINE ActionCode FOR Reaction-»
	«EXPAND ActionCode FOR this.effect-» 
«ENDDEFINE»

«DEFINE ActionCode FOR If-»
«getComment()-»
if («EXPAND ActionCode FOR this.check») { 
	«EXPAND ActionCode FOR this.thenStep-»
}
«IF elseStep != null-»
else {
	«EXPAND ActionCode FOR this.elseStep-»
}
«ENDIF-»
«ENDDEFINE»

«DEFINE ActionCode FOR EnterState-»
	«getComment()-»
	nextStateIndex = «this.state.stateVector.offset»;
	stateVector[«this.state.stateVector.offset»] = State.«state.getName()»;
«ENDDEFINE»

«DEFINE ActionCode FOR ExitState-»
	«getComment()-»
	stateVector[«this.state.stateVector.offset»] = State.«getNullStateName()»;
«ENDDEFINE»

«DEFINE ActionCode FOR HistoryEntry»
	«getComment()»
	if (historyVector[«region.historyVector.offset»] != State.$NullState$) {
		«EXPAND ActionCode FOR historyStep-»
	} else {
		«EXPAND ActionCode FOR initialStep-»
	}
«ENDDEFINE»

«DEFINE ActionCode FOR SaveHistory»
	historyVector[«region.historyVector.offset»] = stateVector[«region.stateVector.offset»];
«ENDDEFINE»

«DEFINE ConditionMethodsImplement FOR ExecutionNode-»
	«FOREACH reactions AS r-»
		«IF r.check != null && r.check.refs.size > 0 -»
	private boolean «r.check.functionName()»() {
		«IF r.check.condition != null-»
		return «r.check.condition.toCode()»;
		«ELSE-»
		return true;
  	«ENDIF-»
	}
	«ENDIF -»
  «ENDFOREACH-»
«ENDDEFINE»

«DEFINE StatementMethodsImplement FOR ExecutionNode-»
  «FOREACH reactions.select(e| e.effect.caller.size > 0 ) AS r-»
	private void «r.effect.functionName()»() {
		«EXPAND ActionCode FOR r.effect-»
	}
  «ENDFOREACH-»
«ENDDEFINE»

«DEFINE ReactMethodsImplement FOR ExecutionNode-»
	«IF ExecutionState.isInstance(this) || reactSequence.caller.size > 0 -»
	private void react«getName()»() {
		«EXPAND ActionCode FOREACH reactSequence.steps-»
	}
	«ENDIF -»
«ENDDEFINE»

«DEFINE EnterMethodImplement FOR ExecutionState-»
	«IF this.entryAction != null && entryAction.caller.size > 0 -»
	private void «entryAction.entryActionFunctionName()»() {
		«EXPAND ActionCode FOR this.entryAction-»
	}
	«ENDIF-»
«ENDDEFINE»

«DEFINE ExitMethodImplement FOR ExecutionState-»
	«IF this.exitAction != null && exitAction.caller.size > 0 -»
	private void «this.exitAction.exitActionFunctionName()»() {
		«EXPAND ActionCode FOR this.exitAction-»
	}
«ENDIF-»
«ENDDEFINE»

«DEFINE EnterSequenceImplement FOR ExecutionState»
	«IF enterSequence.steps.size > 0 && enterSequence.caller.size > 0-»
	private void «enterSequenceName()»() {
		«EXPAND ActionCode FOREACH enterSequence.steps-»
	}
	«ENDIF-»
«ENDDEFINE»

«DEFINE ExitSequenceImplement FOR ExecutionState-»
	«IF exitSequence.steps.size > 0 && exitSequence.caller.size > 0-»
	private void «exitSequenceName()»() {
		«EXPAND ActionCode FOREACH exitSequence.steps-»
	}
	«ENDIF-»
«ENDDEFINE»

«DEFINE EnterSequenceImplement FOR ExecutionRegion»
	«IF enterSequence.steps.size > 0 && enterSequence.caller.size > 0-»
	private void «enterSequenceName()»() {
		«EXPAND ActionCode FOREACH enterSequence.steps-»
	}
	«ENDIF-»
«ENDDEFINE»
«DEFINE DeepEnterSequenceImplement FOR ExecutionRegion»
	«IF deepEnterSequence.steps.size > 0 && deepEnterSequence.caller.size > 0-»
	private void «deepEnterSequenceName()»() {
		«EXPAND ActionCode FOREACH deepEnterSequence.steps-»
	}
	«ENDIF-»
«ENDDEFINE»
«DEFINE ShallowEnterSequenceImplement FOR ExecutionRegion»
	«IF shallowEnterSequence.steps.size > 0 && shallowEnterSequence.caller.size > 0-»
	private void «shallowEnterSequenceName()»() {
		«EXPAND ActionCode FOREACH shallowEnterSequence.steps-»
	}
	«ENDIF-»
«ENDDEFINE»

«DEFINE ExitSequenceImplement FOR ExecutionRegion-»
	«IF exitSequence.steps.size > 0 && exitSequence.caller.size > 0-»
	private void «exitSequenceName()»() {
		«EXPAND ActionCode FOREACH exitSequence.steps-»
	}
	«ENDIF-»
«ENDDEFINE»

«DEFINE file(sgen::GeneratorEntry entry) FOR ExecutionFlow-»
«FILE getImplementationPackagePath(entry)+"/"+getCycleBasedStatemachineName()+'.java'-»
«getLicenseHeader(entry)»
package «getImplementationPackageName(entry)»;

import java.util.Collection;
import java.util.HashSet;
import «entry.getBasePackageName()».Event;
import «entry.getBasePackageName()».EventVector;
«IF entry.createGenericInterfaceSupport()-»
	import java.util.HashMap;
	import java.util.Map;
	import «entry.getBasePackageName()».IGenericAccessStatemachine;
	import «entry.getBasePackageName()».IGenericAccessInterface;
«ENDIF-»
«IF isTimedStatemachine()-»
	import «entry.getBasePackageName()».TimeEvent;
	import «entry.getBasePackageName()».ITimedStatemachine;
	import «entry.getBasePackageName()».ITimerService;
«ELSE-»
	import «entry.getBasePackageName()».IStatemachine;
«ENDIF-»
«IF getInternalScopeValuedEvents().size > 0 -»
	import «entry.getBasePackageName()».ValuedEvent;
«ENDIF-»

public class «getCycleBasedStatemachineName()» implements «getStatemachineInterfaceTypes(entry)» {
	
	«IF getInternalScopeEvents().size > 0-»
	private enum Events {
	«FOREACH getInternalScopeEvents() AS event-»
		«event.name.toFirstUpper()»,
	«ENDFOREACH-»
	}
	«ENDIF-»
	
	«IF isTimedStatemachine()-»
	private enum TimeEvents {
	«FOREACH getTimeEvents() AS timeEvent-»
		«timeEvent.getName().toFirstUpper()»,
	«ENDFOREACH-»
	}
	«ENDIF-»
	
	«FOREACH getInternalScopeEvents() AS event-»
	private final «event.getEventType()» «event.getName()» = new «event.getEventType()»(«event.getCreationSignature()»); 
	«ENDFOREACH-»
	
	«FOREACH getTimeEvents() AS timeEvent-»
	private static final TimeEvent<TimeEvents> «timeEvent.getName()» = new TimeEvent<TimeEvents>(TimeEvents.«timeEvent.getName().toFirstUpper()»,«((Scope)timeEvent.eContainer).getOffset()», «timeEvent.periodic»); 
	«ENDFOREACH»
	
	public enum State {
		«FOREACH states AS state-»
	      «state.getName()»,
	    «ENDFOREACH-»
	    «getNullStateName()»
	};
	
	«IF entry.createGenericInterfaceSupport()-»
		protected Map<String,IGenericAccessInterface> interfaceMap;
	«ELSE-»
		«FOREACH scopes.typeSelect(InterfaceScope) AS interface-»
		private «interface.getInterfaceImplName()» «interface.getInterfaceName().toFirstLower()»;
		«ENDFOREACH-»
	«ENDIF-»
	
	«FOREACH getInternalScopeVariables() AS variable-»
	private «variable.type.getJavaType()» «variable.getValueName()»«variable.getInitialValueAssignment()»;
	
	«ENDFOREACH-»
	
	«IF hasHistory()-»
	private State[] historyVector = new State[«historyVector.size»];
	«ENDIF-»

	private final State[] stateVector = new State[«stateVector.size»];
	
	private int nextStateIndex;
	
	private final EventVector<Event<? extends Enum<?>>> occuredEvents;
	
	private final Collection<Event<? extends Enum<?>>> outEvents;
	
	«IF isTimedStatemachine()-»
	private ITimerService timerService;
	
	private long cycleStartTime;
	«ENDIF-»
	
	public «getCycleBasedStatemachineName()»() {
		occuredEvents = new EventVector<Event<? extends Enum<?>>>(«getEventsCount()»);
		outEvents = new HashSet<Event<? extends Enum<?>>>();
		«IF entry.createGenericInterfaceSupport()-»
			interfaceMap = new HashMap<String, IGenericAccessInterface>();
			«FOREACH getInterfaceScope() AS interface-»
			interfaceMap.put("«interface.getInterfaceName()»", new «interface.getInterfaceImplName()»(«interface.getInterfaceParameter()»));
			«ENDFOREACH-»
		«ELSE-»
			«FOREACH getInterfaceScope() AS interface-»
			«interface.getInterfaceName().toFirstLower()» = new «interface.getInterfaceImplName()»(«interface.getInterfaceParameter()»);
			«ENDFOREACH-»
		«ENDIF-»
		«FOREACH getTimeEvents() AS timeEvent-»
			«timeEvent.getName()».setStatemachine(this);
		«ENDFOREACH»
	}
	
	protected Collection<Event<? extends Enum<?>>> getOccuredEvents() {
		return occuredEvents;
	}
	
	protected Collection<Event<? extends Enum<?>>> getOutEvents(){
		return outEvents;
	}
	
	protected boolean eventOccured() {
		return !occuredEvents.isEmpty();
	}
	
	public void init() {
		for (int i = 0; i < «stateVector.size»; i++) {
			stateVector[i] = State.$NullState$;
		}
		
		«IF hasHistory()-»
		for (int i = 0; i < «historyVector.size»; i++) {
			historyVector[i] = State.$NullState$;
		}
		«ENDIF-»
		
		occuredEvents.clear();
	}
	
	public boolean isStateActive(State state){
		for (int i=0;i<stateVector.length;i++){
			if (stateVector[i]==state) {
				return true;
			}
		}
		return false;
	}
	
	«IF isTimedStatemachine()-»
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}

	
	public ITimerService getTimerService() {
		if (timerService == null) {
			throw new NullPointerException("TimerService of statemachine \"+«name»+\" not set!");
		}
		return timerService;
	}
	
	public void onTimeEventRaised(TimeEvent<? extends Enum<?>> timeEvent) {
		getOccuredEvents().add(timeEvent);
	}
	«ENDIF-»
	
	«IF entry.createGenericInterfaceSupport()-»
	public IGenericAccessInterface getInterface(String name) {
		return interfaceMap.get(name);
	}
	
	protected Map<String, IGenericAccessInterface> getInterfaceMap() {
		return interfaceMap;
	}
	«ENDIF-»
	
	«FOREACH scopes.typeSelect(InterfaceScope) AS interface-»
	public «interface.getInterfaceName()» get«interface.getInterfaceName()»() {
		«IF entry.createGenericInterfaceSupport()-»
		return («interface.getInterfaceName()») getInterface("«interface.getInterfaceName()»");
		«ELSE-»
		return «interface.getInterfaceName().toFirstLower()»;
		«ENDIF-»
	}
	
	
	protected «interface.getIInterfaceImplName()» get«interface.getInterfaceImplName()»() {
		«IF entry.createGenericInterfaceSupport()-»
		return («interface.getIInterfaceImplName()») getInterface("«interface.getInterfaceName()»");
		«ELSE-»
		return «interface.getInterfaceName().toFirstLower()»;
		«ENDIF-»
	}
	«ENDFOREACH-»
	«REM»create getters and setters for events«ENDREM»
	«FOREACH getInternalScopeEvents() AS event-»
	
		«IF !event.type.isVoid()-»
			private void raise«event.name.toFirstUpper()»(«event.type.getJavaType()» value) {
				«event.getName()».setValue(value);
				getOccuredEvents().add(«event.getName()»);
			}
		«ELSE-»
			private void raise«event.name.toFirstUpper()»() {
				getOccuredEvents().add(«event.getName()»);
			}
		«ENDIF-»
		private «event.getEventType()» get«event.getName()»() {
			return «event.getName()»;
		}
	
	«ENDFOREACH-»
	«REM»Create getters and setters for variables«ENDREM»
	«FOREACH getInternalScopeVariables() AS variable-»
	private «variable.type.getJavaType()» get«variable.getValueName().toFirstUpper()»() {
		return «variable.getValueName()»;
	}
	
	private void set«variable.getValueName().toFirstUpper()»(«variable.type.getJavaType()» value) {
		«variable.getValueName()» = value;
	}	
	
	«ENDFOREACH-»
	«REM»Create enterSequences for statemachine«ENDREM»
	«IF enterSequence.steps.size > 0 -»
		public void «enterSequenceName()»() {
			«IF isTimedStatemachine()-»
				cycleStartTime = System.currentTimeMillis();
			«ENDIF-»
			«EXPAND ActionCode FOREACH enterSequence.steps-»
		}
	«ENDIF-»
	
	«IF exitSequence.steps.size > 0-»
		public void «exitSequenceName()»(){
			«EXPAND ActionCode FOREACH exitSequence.steps-»
		}
	«ENDIF»
	
«EXPAND ConditionMethodsImplement FOREACH this.states-»
«EXPAND ConditionMethodsImplement FOREACH this.nodes-»
«EXPAND StatementMethodsImplement FOREACH this.states-»
«EXPAND StatementMethodsImplement FOREACH this.nodes-»
«EXPAND EnterMethodImplement FOREACH this.states-»
«EXPAND ExitMethodImplement FOREACH this.states-»
«EXPAND EnterSequenceImplement FOREACH this.states-»
«EXPAND ExitSequenceImplement FOREACH this.states-»
«EXPAND EnterSequenceImplement FOREACH this.regions-»
«EXPAND ExitSequenceImplement FOREACH this.regions-»
«EXPAND DeepEnterSequenceImplement FOREACH this.regions-»
«EXPAND ShallowEnterSequenceImplement FOREACH this.regions-»
«EXPAND ReactMethodsImplement FOREACH this.states-»
«EXPAND ReactMethodsImplement FOREACH this.nodes-»
	public void runCycle() {
		«IF isTimedStatemachine()-»
		cycleStartTime = System.currentTimeMillis();
		«ENDIF-»
		outEvents.clear();
		
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			
			switch (stateVector[nextStateIndex]) {
			«FOREACH this.states AS state-»
    		case «state.getName()»:
        		react«state.getName()»();
        		break;
			«ENDFOREACH-»
			default:
				// «getNullStateName()»
			}
		}
		
		occuredEvents.clear();
	}
}
«ENDFILE-»
«ENDDEFINE»