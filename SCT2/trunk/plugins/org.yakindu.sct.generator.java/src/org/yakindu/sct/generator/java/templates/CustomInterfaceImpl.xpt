«REM»
Copyright (c) 2011 committers of YAKINDU and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html
Contributors:
	Markus Muehlbrandt - Initial contribution and API
«ENDREM»
«IMPORT stext»

«EXTENSION org::yakindu::sct::generator::java::templates::ExecutionModelExtensions»
«EXTENSION org::yakindu::sct::generator::java::templates::Expression»
«EXTENSION org::yakindu::sct::generator::java::templates::GenmodelEntries»
«EXTENSION org::yakindu::sct::generator::java::templates::Naming»

«DEFINE file(sgen::GeneratorEntry entry) FOR InterfaceScope»
«FILE getImplementationPackagePath(entry)+"/"+getInterfaceImplName() + '.java'-»
«getLicenseHeader(entry)»
package «getImplementationPackageName(entry)»;

«IF hasEvents()-»
import «entry.getBasePackageName()».Event;
«ENDIF-»
«IF hasOutgoingEvents() && entry.createInterfaceObserverSupport()-»
import «entry.getBasePackageName()».EventNotification;
import «entry.getBasePackageName()».NotificationSender;
«ENDIF-»
«IF hasValuedEvents()-»
import «entry.getBasePackageName()».ValuedEvent;
«ENDIF-»

public class «getInterfaceImplName()»«getInterfaceImplExtension(entry)» implements «getInterfaceName()» {
	
	«FOREACH declarations.typeSelect(EventDefinition) AS event-»
		private final «event.getEventType()» «event.getName()» = new «event.getEventType()»(«event.getCreationSignature()»); 
	«ENDFOREACH-»
	
	«IF hasEvents()-»
		private «getCycleBasedStatemachineName()-» statemachine;
		
		public «getInterfaceImplName()»(«getCycleBasedStatemachineName()» statemachine) {
		this.statemachine = statemachine;
	}
	«ENDIF-»
		
	«FOREACH declarations.typeSelect(EventDefinition) AS event-»
	
	«IF event.type != Type::void-»
	public void raise«event.name.toFirstUpper()»(«event.type.getJavaType()» value) {
		«event.getName()».setValue(value);
		statemachine.getOccuredEvents().add(«event.getName()»);
		«IF event.direction ==  Direction::OUT-»
		statemachine.getOutEvents().add(«event.getName()»);
		«IF entry.createInterfaceObserverSupport()-»
			notifyListeners(new EventNotification(«event.getName()»));
		«ENDIF-»
		«ENDIF-»
	}
	«ELSE»
	public void raise«event.name.toFirstUpper()»() {
		statemachine.getOccuredEvents().add(«event.getName()»);
		«IF event.direction ==  Direction::OUT-»
		statemachine.getOutEvents().add(«event.getName()»);
		«IF entry.createInterfaceObserverSupport()-»
			notifyListeners(new EventNotification(«event.getName()»));
		«ENDIF-»
		«ENDIF-»
	}
	«ENDIF-»
	
	public «event.getEventType()» get«event.getName()»() {
		return «event.getName()»;
	}
	
	«IF event.direction ==  Direction::OUT-»
	public boolean isRaised«event.name.toFirstUpper()»() {
		return statemachine.getOutEvents().contains(«event.getName()»);
	}
	«ENDIF-»
	«ENDFOREACH-»
	
	«FOREACH declarations.typeSelect(VariableDefinition) AS variable-»
	private «variable.type.getJavaType()» «variable.getValueName()»«variable.getInitialValueAssignment()»;
	
	public «variable.type.getJavaType()» get«variable.getValueName().toFirstUpper()»() {
		return «variable.getValueName()»;
	}
	
	public void set«variable.getValueName().toFirstUpper()»(«variable.type.getJavaType()» value) {
		«variable.getValueName()» = value;
	}	
	«ENDFOREACH-»
}
«ENDFILE-»
«ENDDEFINE»