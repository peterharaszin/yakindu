«REM»
Copyright (c) 2011 committers of YAKINDU and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html
Contributors:
	Markus Muehlbrandt - Initial contribution and API
«ENDREM»
«IMPORT stext»
«IMPORT types»

«EXTENSION org::yakindu::sct::generator::java::templates::ExecutionModelExtensions»
«EXTENSION org::yakindu::sct::generator::java::templates::TypeModelExtensions»
«EXTENSION org::yakindu::sct::generator::java::templates::Expression»
«EXTENSION org::yakindu::sct::generator::java::templates::GenmodelEntries»
«EXTENSION org::yakindu::sct::generator::java::templates::Naming»

«DEFINE file(sgen::GeneratorEntry entry) FOR InterfaceScope»
«FILE getImplementationPackagePath(entry)+"/"+getInterfaceImplName() + '.java'-»
«getLicenseHeader(entry)»
package «getImplementationPackageName(entry)»;

«IF (hasVariables() || hasIncomingEvents()) && entry.createGenericInterfaceSupport()-»
import java.util.HashMap;
import java.util.Map;
«ENDIF-»
«IF hasUnvaluedEvents()-»
import «entry.getBasePackageName()».Event;
«ENDIF-»
«IF (hasVariables() || hasOutgoingEvents()) && entry.createInterfaceObserverSupport()-»
import «entry.getBasePackageName()».NotificationSender;
«IF hasOutgoingEvents()-»
import «entry.getBasePackageName()».EventNotification;
«ENDIF-»
«IF hasVariables() && entry.createInterfaceObserverSupport()-»
import «entry.getBasePackageName()».VariableNotification;
«ENDIF-»
«ENDIF-»
«IF hasValuedEvents() || entry.createGenericInterfaceSupport()-»
import «entry.getBasePackageName()».ValuedEvent;
«ENDIF-»

public class «getInterfaceImplName()»«getInterfaceImplExtension(entry)» implements «getIInterfaceImplName()» {
	«IF entry.createGenericInterfaceSupport()-»
		«IF hasVariables()-»
		protected Map<String,Object> variableMap;
		«ENDIF-»
		«IF hasOutgoingEvents()-»
		protected Map<String, Event<Events>> outEventMap;
		«ENDIF-»
		«IF hasIncomingEvents()-»
		protected Map<String, Event<Events>> inEventMap;
		«ENDIF-»
	«ELSE-»
		«FOREACH declarations.typeSelect(EventDefinition) AS event-»
		protected final «event.getEventType()» «event.getName()» = new «event.getEventType()»(«event.getCreationSignature()»);
		«ENDFOREACH-»
	«ENDIF-» 
	
	«IF hasEvents()-»
		protected «getCycleBasedStatemachineName()-» statemachine;
		
		public «getInterfaceImplName()»(«getCycleBasedStatemachineName()» statemachine) {
			
			this.statemachine = statemachine;
	«ELSE-»
		public «getInterfaceImplName()»() {
	«ENDIF-»
		«IF entry.createGenericInterfaceSupport()-»
			«IF hasVariables()-»
			variableMap = new HashMap<String, Object>();
				«FOREACH declarations.typeSelect(VariableDefinition) AS variable-»
				variableMap.put("«variable.name»", new «variable.type.getJavaClassType()»(«variable.type.getInitialValue()»));
				«ENDFOREACH-»
			«ENDIF-»
			
			«IF hasIncomingEvents()-»
			inEventMap = new HashMap<String, Event<Events>>();
			«ENDIF-»
			
			«IF hasOutgoingEvents()-»
			outEventMap = new HashMap<String, Event<Events>>();
			«ENDIF-»
			
			«FOREACH declarations.typeSelect(EventDefinition) AS event-»
			«IF event.direction == Direction::IN-»
			inEventMap.put("«event.name»", new «event.getEventType()»(«event.getCreationSignature()»));
			«ELSE-»
			outEventMap.put("«event.name»", new «event.getEventType()»(«event.getCreationSignature()»));
			«ENDIF-»
			«ENDFOREACH-»	
		«ENDIF-»
	}
	
		
	«FOREACH declarations.typeSelect(EventDefinition) AS event-»
	
	«IF !event.type.isVoid()-»
	public void raise«event.name.toFirstUpper()»(«event.type.getJavaType()» value) {
		«event.getter()».setValue(value);
		statemachine.getOccuredEvents().add(«event.getter()»);
		«IF event.direction ==  Direction::OUT-»
		statemachine.getOutEvents().add(«event.getter()»);
		«IF entry.createInterfaceObserverSupport()-»
			notifyListenersOnEventRaised(new EventNotification(«event.getter()»));
		«ENDIF-»
		«ENDIF-»
	}
	«ELSE»
	public void raise«event.name.toFirstUpper()»() {
		statemachine.getOccuredEvents().add(«event.getter()»);
		«IF event.direction ==  Direction::OUT-»
			statemachine.getOutEvents().add(«event.getter()»);
			«IF entry.createInterfaceObserverSupport()-»
			notifyListenersOnEventRaised(new EventNotification(«event.getter()»));
			«ENDIF-»
		«ENDIF-»
	}
	«ENDIF-»
	
	«IF !event.type.isVoid() && entry.createGenericInterfaceSupport()-»
	@SuppressWarnings("unchecked")
	«ENDIF-»
	public «event.getEventType()» «event.getter()» {
		«IF entry.createGenericInterfaceSupport()-»
			«IF event.type.isVoid()-»
				«IF event.direction == Direction::IN-»
				return inEventMap.get("«event.name»");
				«ELSE-»
				return outEventMap.get("«event.name»");
				«ENDIF-»
			«ELSE-»
				«IF event.direction == Direction::OUT-»
				return («event.getEventType()») outEventMap.get("«event.name»");
				«ELSE-»
				return («event.getEventType()») inEventMap.get("«event.name»");
				«ENDIF-»
			«ENDIF-»
		«ELSE-»
		return «event.getName()»;
		«ENDIF-»
	}
	
	«IF event.direction ==  Direction::OUT-»
	public boolean isRaised«event.name.toFirstUpper()»() {
		return statemachine.getOutEvents().contains(«event.getter()»);
	}
	«ENDIF-»
	«ENDFOREACH-»
	
	«FOREACH declarations.typeSelect(VariableDefinition) AS variable-»
	«IF !entry.createGenericInterfaceSupport()-»
		private «variable.type.getJavaType()» «variable.getValueName()»«variable.getInitialValueAssignment()»;
	«ENDIF-»
	public «variable.type.getJavaType()» «variable.getter()» {
		«IF entry.createGenericInterfaceSupport()-»
		return («variable.type.getJavaClassType()») variableMap.get("«variable.name»");
		«ELSE-»
		return «variable.getValueName()»;
		«ENDIF-»
	}
	
	public void set«variable.getValueName().toFirstUpper()»(«variable.type.getJavaType()» value) {
		«IF entry.createInterfaceObserverSupport()-»
		«variable.type.getJavaType()» oldValue = «variable.getter()»;
		«ENDIF-»
		«IF entry.createGenericInterfaceSupport()-»
		variableMap.put("«variable.name»", new «variable.type.getJavaClassType()»(value));
		«ELSE-»
		«variable.getValueName()» = value;
		«ENDIF-»
		«IF entry.createInterfaceObserverSupport()-»
			notifyListenersOnVariableChanged(new VariableNotification<«variable.type.getJavaClassType()»>(Variables.«variable.name», «variable.getter()», oldValue));
		«ENDIF-»
	}	
	«ENDFOREACH-»
	
	«IF (hasVariables() || hasIncomingEvents()) && entry.createGenericInterfaceSupport()-»
	public boolean raiseEvent(String name) {
		«IF hasIncomingEvents()-»
		if (inEventMap.get(name) != null) {
			return statemachine.getOccuredEvents().add(inEventMap.get(name));
		}
		«ENDIF-»
		return false;
	}
	
	«IF hasIncomingEvents()-»
	@SuppressWarnings("unchecked")
	«ENDIF-»
	public boolean raiseEvent(String name, Object value) {
		«IF hasIncomingEvents()-»
		if (inEventMap.get(name) != null
				&& inEventMap.get(name) instanceof ValuedEvent) {
			ValuedEvent<?, ?> event = (ValuedEvent<?, ?>) inEventMap.get(name);
			if (event.getValue().getClass() == value.getClass()) {
				((ValuedEvent<Events, Object>) event).setValue(value);
				return statemachine.getOccuredEvents()
						.add(inEventMap.get(name));
			}
		}
		«ENDIF-»
		return false;
	}

	public boolean setVariable(String name, Object value) {
		«IF hasVariables()-»
		if (variableMap.get(name) != null
				&& variableMap.get(name).getClass() == value.getClass()) {
			Object oldValue = variableMap.get(name);
			variableMap.put(name, value);
			notifyListenersOnVariableChanged(new VariableNotification<Object>(
					Variables.valueOf(name), variableMap.get(name), oldValue));
			return true;
		}
		«ENDIF-»
		return false;
	}
	
	public Object getVariable(String name) {
		«IF hasVariables()-»
		return variableMap.get(name);
		«ELSE-»
		return null;
		«ENDIF-»
	}
	«ENDIF-»
}
«ENDFILE-»
«ENDDEFINE»