«REM»
Copyright (c) 2011 committers of YAKINDU and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html
Contributors:
	Markus Muehlbrandt - Initial contribution and API
«ENDREM»

«IMPORT sexec»
«IMPORT stext»
«IMPORT sgraph»

«EXTENSION org::yakindu::sct::generator::java::templates::ExecutionModelExtensions»
«EXTENSION org::yakindu::sct::generator::java::templates::TypeModelExtensions»
«EXTENSION org::yakindu::sct::generator::java::templates::Expression»
«EXTENSION org::yakindu::sct::generator::java::templates::GenmodelEntries»
«EXTENSION org::yakindu::sct::generator::java::templates::Naming»

«DEFINE file(sgen::GeneratorEntry entry) FOR ExecutionFlow-»
«FILE getImplementationPackagePath(entry)+"/"+getStatemachineClassName()+'.java'-»
«getLicenseHeader(entry)»
package «getImplementationPackageName(entry)»;

«EXPAND CoreStatemachine::Imports(entry) FOR this»

public class «getStatemachineClassName()» implements «getStatemachineInterfaceName()» {
	
	«EXPAND CoreStatemachine::FieldDeclarations(entry) FOR this»
	
	public «getStatemachineClassName()»() {
		
		«FOREACH getInterfaceScope() AS interface-»
		«interface.getInterfaceIdentifier()» = new «interface.getInterfaceImplName()»();
		«ENDFOREACH-»
		
		«FOREACH getTimeEvents() AS timeEvent-»
			«timeEvent.getEventIdentifier()».setStatemachine(this);
		«ENDFOREACH»
	}
	
	public void init() {
		«IF isTimedStatemachine()-»
		if (timerService == null) {
			throw new IllegalStateException("TimerService not set.");
		}
		«ENDIF-»
		for (int i = 0; i < «stateVector.size»; i++) {
			stateVector[i] = State.$NullState$;
		}
		
		«IF hasHistory()-»
		for (int i = 0; i < «historyVector.size»; i++) {
			historyVector[i] = State.$NullState$;
		}
		«ENDIF-»
		clearEvents();
		clearOutEvents();
	}
	
	protected void clearEvents() {
		«FOREACH getInterfaceScope() AS interface-»
			«IF interface.hasEvents()-»
				«interface.getInterfaceIdentifier()».clearEvents();
			«ENDIF-»
		«ENDFOREACH-»
		
		«IF isTimedStatemachine()-»
		for (int i=0; i<timeEvents.length; i++) {
			timeEvents[i] = false;
		}
		«ENDIF-»
	}
	
	protected void clearOutEvents() {
		«FOREACH getInterfaceScope() AS interface-»
			«IF interface.hasOutgoingEvents()-»
				«interface.getInterfaceIdentifier()».clearOutEvents();
			«ENDIF-»
		«ENDFOREACH-»
	}
	
	public boolean isStateActive(State state){
		switch (state) {
			«FOREACH states AS s»
			case «s.getName()» : 
				return «IF s.leaf»stateVector[«s.stateVector.offset»] == State.«s.getName()»
				«ELSE»stateVector[«s.stateVector.offset»].ordinal() >= State.«s.getName()».ordinal()
					&& stateVector[«s.stateVector.offset»].ordinal() <= State.«s.getSubStates().last().getName()».ordinal()«ENDIF»;
			«ENDFOREACH»
			default: return false;
		}
		/*
		for (int i=0;i<stateVector.length;i++){
			if (stateVector[i]==state) {
				return true;
			}
		}
		return false;
		*/
	}
	
	«IF isTimedStatemachine()-»
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}

	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void onTimeEventRaised(TimeEvent timeEvent) {
		timeEvents[timeEvent.getIndex()] = true;
	}
	«ENDIF-»
	
	«FOREACH scopes.typeSelect(InterfaceScope) AS interface-»
	public «interface.getInterfaceName()» get«interface.getInterfaceName()»() {
		return «interface.getInterfaceName().toFirstLower()»;
	}
	«ENDFOREACH-»
	
	«EXPAND CoreStatemachine::InternalScopeMethods FOR this»
	
	«EXPAND CoreStatemachine::DefaultInterfaceMethods(entry) FOREACH getDefaultInterface()»
	«REM»Create enterSequences for statemachine«ENDREM»
	«IF enterSequence.steps.size > 0 -»
		public void «enterSequenceName()»() {
			«IF isTimedStatemachine()-»
			if (timerService == null) {
				throw new IllegalStateException("TimerService not set.");
			}
			cycleStartTime = System.currentTimeMillis();
			«ENDIF-»
			«EXPAND CoreStatemachine::ActionCode FOREACH enterSequence.steps-»
		}
	«ENDIF-»
	
	«IF exitSequence.steps.size > 0-»
		public void «exitSequenceName()»(){
			«EXPAND CoreStatemachine::ActionCode FOREACH exitSequence.steps-»
		}
	«ENDIF»
	
«EXPAND CoreStatemachine::EnterMethodImplement FOR this»
«EXPAND CoreStatemachine::ExitMethodImplement FOR this»
«EXPAND CoreStatemachine::ConditionMethodsImplement FOR this-»
«EXPAND CoreStatemachine::ConditionMethodsImplement FOREACH this.states-»
«EXPAND CoreStatemachine::ConditionMethodsImplement FOREACH this.nodes-»
«EXPAND CoreStatemachine::StatementMethodsImplement FOR this-»
«EXPAND CoreStatemachine::StatementMethodsImplement FOREACH this.states-»
«EXPAND CoreStatemachine::StatementMethodsImplement FOREACH this.nodes-»
«EXPAND CoreStatemachine::EnterMethodImplement FOREACH this.states-»
«EXPAND CoreStatemachine::ExitMethodImplement FOREACH this.states-»
«EXPAND CoreStatemachine::EnterSequenceImplement FOREACH this.states-»
«EXPAND CoreStatemachine::ExitSequenceImplement FOREACH this.states-»
«EXPAND CoreStatemachine::EnterSequenceImplement FOREACH this.regions-»
«EXPAND CoreStatemachine::ExitSequenceImplement FOREACH this.regions-»
«EXPAND CoreStatemachine::DeepEnterSequenceImplement FOREACH this.regions-»
«EXPAND CoreStatemachine::ShallowEnterSequenceImplement FOREACH this.regions-»
«EXPAND CoreStatemachine::ReactMethodsImplement FOREACH this.states-»
«EXPAND CoreStatemachine::ReactMethodsImplement FOREACH this.nodes-»
	
	public void runCycle() {
	
		«IF isTimedStatemachine()-»
		cycleStartTime = System.currentTimeMillis();
		
		«ENDIF-»
		clearOutEvents();
		
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			
			switch (stateVector[nextStateIndex]) {
			«FOREACH this.states AS state-»
    		case «state.getName()»:
        		react«state.getName()»();
        		break;
			«ENDFOREACH-»
			default:
				// «getNullStateName()»
			}
		}
		
		clearEvents();
	}
}
«ENDFILE-»
«ENDDEFINE»