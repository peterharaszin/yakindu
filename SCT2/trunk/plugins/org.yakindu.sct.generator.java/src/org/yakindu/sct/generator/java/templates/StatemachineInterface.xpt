«REM»
Copyright (c) 2011 committers of YAKINDU and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html
Contributors:
	Markus Muehlbrandt - Initial contribution and API
«ENDREM»

«IMPORT sexec»
«IMPORT stext»
«IMPORT sgraph»

«EXTENSION org::yakindu::sct::generator::java::templates::ExecutionModelExtensions»
«EXTENSION org::yakindu::sct::generator::java::templates::TypeModelExtensions»
«EXTENSION org::yakindu::sct::generator::java::templates::Expression»
«EXTENSION org::yakindu::sct::generator::java::templates::GenmodelEntries»
«EXTENSION org::yakindu::sct::generator::java::templates::Naming»

«DEFINE operationSignature FOR OperationDefinition»
	public «type.getJavaType()» «identifier()»(
		«FOREACH parameters AS parameter ITERATOR iter-»
			«IF iter.counter0 > 0-»
				,
			«ENDIF-»
			«parameter.type.getJavaType()» 
			«IF parameter.name.isJavaKeyword()-»
				«parameter.name + "Arg"»
			«ELSE-»
				«parameter.name»
			«ENDIF-»
		«ENDFOREACH-»);
«ENDDEFINE»

«DEFINE file(sgen::GeneratorEntry entry) FOR ExecutionFlow-»
«FILE getImplementationPackagePath(entry)+"/"+getStatemachineInterfaceName()+'.java'-»
«getLicenseHeader(entry)»
package «getImplementationPackageName(entry)»;

«IF createInterfaceObserverSupport(entry) && hasOutgoingEvents()-»
import java.util.List;
«ENDIF-»
import «entry.getBasePackageName()».IStatemachine;
«IF isTimedStatemachine()-»
	import «entry.getBasePackageName()».ITimedStatemachine;
«ENDIF-»

public interface «getStatemachineInterfaceName()» extends «getStatemachineInterfaceExtensions(entry)» {
	
	«FOREACH scopes.typeSelect(InterfaceScope) AS interface»
	public interface «interface.getInterfaceName()»{
		«FOREACH interface.declarations.typeSelect(EventDefinition) AS event-»
		«IF  event.direction ==  Direction::IN-»
			«IF !event.type.isVoid()-»
				public void raise«event.name.toFirstUpper()»(«event.type.getJavaType()» value);
			«ELSE»
				public void raise«event.name.toFirstUpper()»();
			«ENDIF-»
		«ELSEIF event.direction ==  Direction::OUT-»
			public boolean isRaised«event.name.toFirstUpper()»();
		
			«IF !event.type.isVoid()-»
				public «event.type.getJavaType()» get«event.name.toFirstUpper()»Value();
			«ENDIF-»	
		«ENDIF-»
		«ENDFOREACH-»
		
		«FOREACH interface.declarations.typeSelect(VariableDefinition) AS variable-»
			public «variable.type.getJavaType()» get«variable.getVarName()»();
			«IF  !variable.readonly-»
				public void set«variable.getVarName()»(«variable.type.getJavaType()» value);	
			«ENDIF-»
		«ENDFOREACH-»
		
		«IF createInterfaceObserverSupport(entry) && hasOutgoingEvents(interface)-»
		public List<«interface.getInterfaceListenerName()»> getListeners();
		«ENDIF-»
		
		«IF interface.hasOperations()-»
		public void set«interface.getInterfaceOperationCallbackName()»(«interface.getInterfaceOperationCallbackName()» operationCallback);
		«ENDIF-»
	}
	
	«IF createInterfaceObserverSupport(entry) && hasOutgoingEvents(interface)-»
		public interface «interface.getInterfaceListenerName()» {
			«FOREACH interface.declarations.typeSelect(EventDefinition) AS event-»
			«IF  event.direction ==  Direction::OUT-»
				«IF !event.type.isVoid()-»
				public void on«event.name.toFirstUpper()»Raised(«event.type.getJavaType()» value);
				«ELSE»
				public void on«event.name.toFirstUpper()»Raised();
				«ENDIF-»	
			«ENDIF-»
			«ENDFOREACH-»
		}
		«ENDIF-»
	«IF interface.hasOperations()-»
		public interface «interface.getInterfaceOperationCallbackName()» {
		«FOREACH interface.getOperations() AS operation»
			«EXPAND operationSignature FOR operation»
		«ENDFOREACH»
		}
		«ENDIF-»
	«ENDFOREACH»
	
	«FOREACH scopes.typeSelect(InterfaceScope) AS interface»
	public «interface.getInterfaceName()» get«interface.getInterfaceName()»();
	«ENDFOREACH»
	
	«FOREACH scopes.typeSelect(InternalScope) AS internal»
	«IF internal.hasOperations()-»
		public interface «internal.getInternalOperationCallbackName()» {
			«FOREACH internal.getOperations() AS operation»
			«EXPAND operationSignature FOR operation»
			«ENDFOREACH»
		}
		
		public void set«internal.getInternalOperationCallbackName()»(«internal.getInternalOperationCallbackName()» operationCallback);
	«ENDIF-»
	«ENDFOREACH»
}
«ENDFILE-»
«ENDDEFINE»