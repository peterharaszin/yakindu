/*
* generated by Xtext
*/
package org.yakindu.sct.generator.model.base.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.yakindu.sct.generator.model.base.services.BaseGenGrammarAccess;

public class BaseGenParser extends AbstractContentAssistParser {
	
	@Inject
	private BaseGenGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.yakindu.sct.generator.model.base.ui.contentassist.antlr.internal.InternalBaseGenParser createParser() {
		org.yakindu.sct.generator.model.base.ui.contentassist.antlr.internal.InternalBaseGenParser result = new org.yakindu.sct.generator.model.base.ui.contentassist.antlr.internal.InternalBaseGenParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getBaseGeneratorModelAccess().getGroup(), "rule__BaseGeneratorModel__Group__0");
					put(grammarAccess.getStatechartReferencesAccess().getGroup(), "rule__StatechartReferences__Group__0");
					put(grammarAccess.getStatechartReferencesAccess().getGroup_3(), "rule__StatechartReferences__Group_3__0");
					put(grammarAccess.getOutletConfigurationAccess().getGroup(), "rule__OutletConfiguration__Group__0");
					put(grammarAccess.getBaseGeneratorModelAccess().getStatechartReferencesAssignment_2(), "rule__BaseGeneratorModel__StatechartReferencesAssignment_2");
					put(grammarAccess.getBaseGeneratorModelAccess().getConfigurationAssignment_3(), "rule__BaseGeneratorModel__ConfigurationAssignment_3");
					put(grammarAccess.getStatechartReferencesAccess().getStatechartsAssignment_2(), "rule__StatechartReferences__StatechartsAssignment_2");
					put(grammarAccess.getStatechartReferencesAccess().getStatechartsAssignment_3_1(), "rule__StatechartReferences__StatechartsAssignment_3_1");
					put(grammarAccess.getGeneratorConfigurationAccess().getConfigurationsAssignment(), "rule__GeneratorConfiguration__ConfigurationsAssignment");
					put(grammarAccess.getOutletConfigurationAccess().getProjectNameAssignment_5(), "rule__OutletConfiguration__ProjectNameAssignment_5");
					put(grammarAccess.getOutletConfigurationAccess().getTargetFolderAssignment_8(), "rule__OutletConfiguration__TargetFolderAssignment_8");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.yakindu.sct.generator.model.base.ui.contentassist.antlr.internal.InternalBaseGenParser typedParser = (org.yakindu.sct.generator.model.base.ui.contentassist.antlr.internal.InternalBaseGenParser) parser;
			typedParser.entryRuleBaseGeneratorModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public BaseGenGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(BaseGenGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
