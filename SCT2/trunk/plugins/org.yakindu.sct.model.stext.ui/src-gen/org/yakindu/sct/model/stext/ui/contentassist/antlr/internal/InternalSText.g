/*
* generated by Xtext
*/
grammar InternalSText;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.yakindu.sct.model.stext.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.yakindu.sct.model.stext.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.yakindu.sct.model.stext.services.STextGrammarAccess;

}

@parser::members {
 
 	private STextGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(STextGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleRoot
entryRuleRoot 
:
{ before(grammarAccess.getRootRule()); }
	 ruleRoot
{ after(grammarAccess.getRootRule()); } 
	 EOF 
;

// Rule Root
ruleRoot
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRootAccess().getRootsAssignment()); }
(rule__Root__RootsAssignment)*
{ after(grammarAccess.getRootAccess().getRootsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDefRoot
entryRuleDefRoot 
:
{ before(grammarAccess.getDefRootRule()); }
	 ruleDefRoot
{ after(grammarAccess.getDefRootRule()); } 
	 EOF 
;

// Rule DefRoot
ruleDefRoot
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDefRootAccess().getAlternatives()); }
(rule__DefRoot__Alternatives)
{ after(grammarAccess.getDefRootAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStatechartRoot
entryRuleStatechartRoot 
:
{ before(grammarAccess.getStatechartRootRule()); }
	 ruleStatechartRoot
{ after(grammarAccess.getStatechartRootRule()); } 
	 EOF 
;

// Rule StatechartRoot
ruleStatechartRoot
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatechartRootAccess().getGroup()); }
(rule__StatechartRoot__Group__0)
{ after(grammarAccess.getStatechartRootAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStateRoot
entryRuleStateRoot 
:
{ before(grammarAccess.getStateRootRule()); }
	 ruleStateRoot
{ after(grammarAccess.getStateRootRule()); } 
	 EOF 
;

// Rule StateRoot
ruleStateRoot
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStateRootAccess().getGroup()); }
(rule__StateRoot__Group__0)
{ after(grammarAccess.getStateRootAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTransitionRoot
entryRuleTransitionRoot 
:
{ before(grammarAccess.getTransitionRootRule()); }
	 ruleTransitionRoot
{ after(grammarAccess.getTransitionRootRule()); } 
	 EOF 
;

// Rule TransitionRoot
ruleTransitionRoot
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTransitionRootAccess().getGroup()); }
(rule__TransitionRoot__Group__0)
{ after(grammarAccess.getTransitionRootAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStatechartDefinition
entryRuleStatechartDefinition 
:
{ before(grammarAccess.getStatechartDefinitionRule()); }
	 ruleStatechartDefinition
{ after(grammarAccess.getStatechartDefinitionRule()); } 
	 EOF 
;

// Rule StatechartDefinition
ruleStatechartDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatechartDefinitionAccess().getGroup()); }
(rule__StatechartDefinition__Group__0)
{ after(grammarAccess.getStatechartDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStateDeclaration
entryRuleStateDeclaration 
:
{ before(grammarAccess.getStateDeclarationRule()); }
	 ruleStateDeclaration
{ after(grammarAccess.getStateDeclarationRule()); } 
	 EOF 
;

// Rule StateDeclaration
ruleStateDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStateDeclarationAccess().getScopeAssignment()); }
(rule__StateDeclaration__ScopeAssignment)
{ after(grammarAccess.getStateDeclarationAccess().getScopeAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTransitionStatement
entryRuleTransitionStatement 
:
{ before(grammarAccess.getTransitionStatementRule()); }
	 ruleTransitionStatement
{ after(grammarAccess.getTransitionStatementRule()); } 
	 EOF 
;

// Rule TransitionStatement
ruleTransitionStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTransitionStatementAccess().getTransitionReactionParserRuleCall()); }
	ruleTransitionReaction
{ after(grammarAccess.getTransitionStatementAccess().getTransitionReactionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleSimpleScope
entryRuleSimpleScope 
:
{ before(grammarAccess.getSimpleScopeRule()); }
	 ruleSimpleScope
{ after(grammarAccess.getSimpleScopeRule()); } 
	 EOF 
;

// Rule SimpleScope
ruleSimpleScope
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSimpleScopeAccess().getGroup()); }
(rule__SimpleScope__Group__0)
{ after(grammarAccess.getSimpleScopeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStatechartScope
entryRuleStatechartScope 
:
{ before(grammarAccess.getStatechartScopeRule()); }
	 ruleStatechartScope
{ after(grammarAccess.getStatechartScopeRule()); } 
	 EOF 
;

// Rule StatechartScope
ruleStatechartScope
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatechartScopeAccess().getAlternatives()); }
(rule__StatechartScope__Alternatives)
{ after(grammarAccess.getStatechartScopeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInterfaceScope
entryRuleInterfaceScope 
:
{ before(grammarAccess.getInterfaceScopeRule()); }
	 ruleInterfaceScope
{ after(grammarAccess.getInterfaceScopeRule()); } 
	 EOF 
;

// Rule InterfaceScope
ruleInterfaceScope
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInterfaceScopeAccess().getGroup()); }
(rule__InterfaceScope__Group__0)
{ after(grammarAccess.getInterfaceScopeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInternalScope
entryRuleInternalScope 
:
{ before(grammarAccess.getInternalScopeRule()); }
	 ruleInternalScope
{ after(grammarAccess.getInternalScopeRule()); } 
	 EOF 
;

// Rule InternalScope
ruleInternalScope
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInternalScopeAccess().getGroup()); }
(rule__InternalScope__Group__0)
{ after(grammarAccess.getInternalScopeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeclaration
entryRuleDeclaration 
:
{ before(grammarAccess.getDeclarationRule()); }
	 ruleDeclaration
{ after(grammarAccess.getDeclarationRule()); } 
	 EOF 
;

// Rule Declaration
ruleDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclarationAccess().getAlternatives()); }
(rule__Declaration__Alternatives)
{ after(grammarAccess.getDeclarationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEventDefinition
entryRuleEventDefinition 
:
{ before(grammarAccess.getEventDefinitionRule()); }
	 ruleEventDefinition
{ after(grammarAccess.getEventDefinitionRule()); } 
	 EOF 
;

// Rule EventDefinition
ruleEventDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEventDefinitionAccess().getGroup()); }
(rule__EventDefinition__Group__0)
{ after(grammarAccess.getEventDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEventDerivation
entryRuleEventDerivation 
:
{ before(grammarAccess.getEventDerivationRule()); }
	 ruleEventDerivation
{ after(grammarAccess.getEventDerivationRule()); } 
	 EOF 
;

// Rule EventDerivation
ruleEventDerivation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEventDerivationAccess().getGroup()); }
(rule__EventDerivation__Group__0)
{ after(grammarAccess.getEventDerivationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableDefinition
entryRuleVariableDefinition 
:
{ before(grammarAccess.getVariableDefinitionRule()); }
	 ruleVariableDefinition
{ after(grammarAccess.getVariableDefinitionRule()); } 
	 EOF 
;

// Rule VariableDefinition
ruleVariableDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableDefinitionAccess().getGroup()); }
(rule__VariableDefinition__Group__0)
{ after(grammarAccess.getVariableDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleClock
entryRuleClock 
:
{ before(grammarAccess.getClockRule()); }
	 ruleClock
{ after(grammarAccess.getClockRule()); } 
	 EOF 
;

// Rule Clock
ruleClock
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClockAccess().getGroup()); }
(rule__Clock__Group__0)
{ after(grammarAccess.getClockAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperation
entryRuleOperation 
:
{ before(grammarAccess.getOperationRule()); }
	 ruleOperation
{ after(grammarAccess.getOperationRule()); } 
	 EOF 
;

// Rule Operation
ruleOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOperationAccess().getGroup()); }
(rule__Operation__Group__0)
{ after(grammarAccess.getOperationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEntrypoint
entryRuleEntrypoint 
:
{ before(grammarAccess.getEntrypointRule()); }
	 ruleEntrypoint
{ after(grammarAccess.getEntrypointRule()); } 
	 EOF 
;

// Rule Entrypoint
ruleEntrypoint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEntrypointAccess().getGroup()); }
(rule__Entrypoint__Group__0)
{ after(grammarAccess.getEntrypointAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExitpoint
entryRuleExitpoint 
:
{ before(grammarAccess.getExitpointRule()); }
	 ruleExitpoint
{ after(grammarAccess.getExitpointRule()); } 
	 EOF 
;

// Rule Exitpoint
ruleExitpoint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExitpointAccess().getGroup()); }
(rule__Exitpoint__Group__0)
{ after(grammarAccess.getExitpointAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleLocalReaction
entryRuleLocalReaction 
:
{ before(grammarAccess.getLocalReactionRule()); }
	 ruleLocalReaction
{ after(grammarAccess.getLocalReactionRule()); } 
	 EOF 
;

// Rule LocalReaction
ruleLocalReaction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLocalReactionAccess().getGroup()); }
(rule__LocalReaction__Group__0)
{ after(grammarAccess.getLocalReactionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTransitionReaction
entryRuleTransitionReaction 
:
{ before(grammarAccess.getTransitionReactionRule()); }
	 ruleTransitionReaction
{ after(grammarAccess.getTransitionReactionRule()); } 
	 EOF 
;

// Rule TransitionReaction
ruleTransitionReaction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTransitionReactionAccess().getGroup()); }
(rule__TransitionReaction__Group__0)
{ after(grammarAccess.getTransitionReactionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReactionTrigger
entryRuleReactionTrigger 
:
{ before(grammarAccess.getReactionTriggerRule()); }
	 ruleReactionTrigger
{ after(grammarAccess.getReactionTriggerRule()); } 
	 EOF 
;

// Rule ReactionTrigger
ruleReactionTrigger
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReactionTriggerAccess().getGroup()); }
(rule__ReactionTrigger__Group__0)
{ after(grammarAccess.getReactionTriggerAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReactionEffect
entryRuleReactionEffect 
:
{ before(grammarAccess.getReactionEffectRule()); }
	 ruleReactionEffect
{ after(grammarAccess.getReactionEffectRule()); } 
	 EOF 
;

// Rule ReactionEffect
ruleReactionEffect
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReactionEffectAccess().getGroup()); }
(rule__ReactionEffect__Group__0)
{ after(grammarAccess.getReactionEffectAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReactionProperties
entryRuleReactionProperties 
:
{ before(grammarAccess.getReactionPropertiesRule()); }
	 ruleReactionProperties
{ after(grammarAccess.getReactionPropertiesRule()); } 
	 EOF 
;

// Rule ReactionProperties
ruleReactionProperties
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReactionPropertiesAccess().getGroup()); }
(rule__ReactionProperties__Group__0)
{ after(grammarAccess.getReactionPropertiesAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReactionProperty
entryRuleReactionProperty 
:
{ before(grammarAccess.getReactionPropertyRule()); }
	 ruleReactionProperty
{ after(grammarAccess.getReactionPropertyRule()); } 
	 EOF 
;

// Rule ReactionProperty
ruleReactionProperty
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReactionPropertyAccess().getAlternatives()); }
(rule__ReactionProperty__Alternatives)
{ after(grammarAccess.getReactionPropertyAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReactionPriority
entryRuleReactionPriority 
:
{ before(grammarAccess.getReactionPriorityRule()); }
	 ruleReactionPriority
{ after(grammarAccess.getReactionPriorityRule()); } 
	 EOF 
;

// Rule ReactionPriority
ruleReactionPriority
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReactionPriorityAccess().getPriorityAssignment()); }
(rule__ReactionPriority__PriorityAssignment)
{ after(grammarAccess.getReactionPriorityAccess().getPriorityAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEntryPointSpec
entryRuleEntryPointSpec 
:
{ before(grammarAccess.getEntryPointSpecRule()); }
	 ruleEntryPointSpec
{ after(grammarAccess.getEntryPointSpecRule()); } 
	 EOF 
;

// Rule EntryPointSpec
ruleEntryPointSpec
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEntryPointSpecAccess().getGroup()); }
(rule__EntryPointSpec__Group__0)
{ after(grammarAccess.getEntryPointSpecAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExitPointSpec
entryRuleExitPointSpec 
:
{ before(grammarAccess.getExitPointSpecRule()); }
	 ruleExitPointSpec
{ after(grammarAccess.getExitPointSpecRule()); } 
	 EOF 
;

// Rule ExitPointSpec
ruleExitPointSpec
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExitPointSpecAccess().getGroup()); }
(rule__ExitPointSpec__Group__0)
{ after(grammarAccess.getExitPointSpecAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEventSpec
entryRuleEventSpec 
:
{ before(grammarAccess.getEventSpecRule()); }
	 ruleEventSpec
{ after(grammarAccess.getEventSpecRule()); } 
	 EOF 
;

// Rule EventSpec
ruleEventSpec
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEventSpecAccess().getAlternatives()); }
(rule__EventSpec__Alternatives)
{ after(grammarAccess.getEventSpecAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRegularEventSpec
entryRuleRegularEventSpec 
:
{ before(grammarAccess.getRegularEventSpecRule()); }
	 ruleRegularEventSpec
{ after(grammarAccess.getRegularEventSpecRule()); } 
	 EOF 
;

// Rule RegularEventSpec
ruleRegularEventSpec
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRegularEventSpecAccess().getEventAssignment()); }
(rule__RegularEventSpec__EventAssignment)
{ after(grammarAccess.getRegularEventSpecAccess().getEventAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTimeEventSpec
entryRuleTimeEventSpec 
:
{ before(grammarAccess.getTimeEventSpecRule()); }
	 ruleTimeEventSpec
{ after(grammarAccess.getTimeEventSpecRule()); } 
	 EOF 
;

// Rule TimeEventSpec
ruleTimeEventSpec
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTimeEventSpecAccess().getGroup()); }
(rule__TimeEventSpec__Group__0)
{ after(grammarAccess.getTimeEventSpecAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBuiltinEventSpec
entryRuleBuiltinEventSpec 
:
{ before(grammarAccess.getBuiltinEventSpecRule()); }
	 ruleBuiltinEventSpec
{ after(grammarAccess.getBuiltinEventSpecRule()); } 
	 EOF 
;

// Rule BuiltinEventSpec
ruleBuiltinEventSpec
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBuiltinEventSpecAccess().getAlternatives()); }
(rule__BuiltinEventSpec__Alternatives)
{ after(grammarAccess.getBuiltinEventSpecAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEntryEvent
entryRuleEntryEvent 
:
{ before(grammarAccess.getEntryEventRule()); }
	 ruleEntryEvent
{ after(grammarAccess.getEntryEventRule()); } 
	 EOF 
;

// Rule EntryEvent
ruleEntryEvent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEntryEventAccess().getGroup()); }
(rule__EntryEvent__Group__0)
{ after(grammarAccess.getEntryEventAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExitEvent
entryRuleExitEvent 
:
{ before(grammarAccess.getExitEventRule()); }
	 ruleExitEvent
{ after(grammarAccess.getExitEventRule()); } 
	 EOF 
;

// Rule ExitEvent
ruleExitEvent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExitEventAccess().getGroup()); }
(rule__ExitEvent__Group__0)
{ after(grammarAccess.getExitEventAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOnCycleEvent
entryRuleOnCycleEvent 
:
{ before(grammarAccess.getOnCycleEventRule()); }
	 ruleOnCycleEvent
{ after(grammarAccess.getOnCycleEventRule()); } 
	 EOF 
;

// Rule OnCycleEvent
ruleOnCycleEvent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOnCycleEventAccess().getGroup()); }
(rule__OnCycleEvent__Group__0)
{ after(grammarAccess.getOnCycleEventAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAlwaysEvent
entryRuleAlwaysEvent 
:
{ before(grammarAccess.getAlwaysEventRule()); }
	 ruleAlwaysEvent
{ after(grammarAccess.getAlwaysEventRule()); } 
	 EOF 
;

// Rule AlwaysEvent
ruleAlwaysEvent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAlwaysEventAccess().getGroup()); }
(rule__AlwaysEvent__Group__0)
{ after(grammarAccess.getAlwaysEventAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStatement
entryRuleStatement 
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatementAccess().getAlternatives()); }
(rule__Statement__Alternatives)
{ after(grammarAccess.getStatementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssignment
entryRuleAssignment 
:
{ before(grammarAccess.getAssignmentRule()); }
	 ruleAssignment
{ after(grammarAccess.getAssignmentRule()); } 
	 EOF 
;

// Rule Assignment
ruleAssignment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignmentAccess().getGroup()); }
(rule__Assignment__Group__0)
{ after(grammarAccess.getAssignmentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEventRaising
entryRuleEventRaising 
:
{ before(grammarAccess.getEventRaisingRule()); }
	 ruleEventRaising
{ after(grammarAccess.getEventRaisingRule()); } 
	 EOF 
;

// Rule EventRaising
ruleEventRaising
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEventRaisingAccess().getGroup()); }
(rule__EventRaising__Group__0)
{ after(grammarAccess.getEventRaisingAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getLogicalOrExpressionParserRuleCall()); }
	ruleLogicalOrExpression
{ after(grammarAccess.getExpressionAccess().getLogicalOrExpressionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLogicalOrExpression
entryRuleLogicalOrExpression 
:
{ before(grammarAccess.getLogicalOrExpressionRule()); }
	 ruleLogicalOrExpression
{ after(grammarAccess.getLogicalOrExpressionRule()); } 
	 EOF 
;

// Rule LogicalOrExpression
ruleLogicalOrExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getGroup()); }
(rule__LogicalOrExpression__Group__0)
{ after(grammarAccess.getLogicalOrExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLogicalAndExpression
entryRuleLogicalAndExpression 
:
{ before(grammarAccess.getLogicalAndExpressionRule()); }
	 ruleLogicalAndExpression
{ after(grammarAccess.getLogicalAndExpressionRule()); } 
	 EOF 
;

// Rule LogicalAndExpression
ruleLogicalAndExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getGroup()); }
(rule__LogicalAndExpression__Group__0)
{ after(grammarAccess.getLogicalAndExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLogicalNotExpression
entryRuleLogicalNotExpression 
:
{ before(grammarAccess.getLogicalNotExpressionRule()); }
	 ruleLogicalNotExpression
{ after(grammarAccess.getLogicalNotExpressionRule()); } 
	 EOF 
;

// Rule LogicalNotExpression
ruleLogicalNotExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLogicalNotExpressionAccess().getAlternatives()); }
(rule__LogicalNotExpression__Alternatives)
{ after(grammarAccess.getLogicalNotExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLogicalRelationExpression
entryRuleLogicalRelationExpression 
:
{ before(grammarAccess.getLogicalRelationExpressionRule()); }
	 ruleLogicalRelationExpression
{ after(grammarAccess.getLogicalRelationExpressionRule()); } 
	 EOF 
;

// Rule LogicalRelationExpression
ruleLogicalRelationExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLogicalRelationExpressionAccess().getGroup()); }
(rule__LogicalRelationExpression__Group__0)
{ after(grammarAccess.getLogicalRelationExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumericalAddSubtractExpression
entryRuleNumericalAddSubtractExpression 
:
{ before(grammarAccess.getNumericalAddSubtractExpressionRule()); }
	 ruleNumericalAddSubtractExpression
{ after(grammarAccess.getNumericalAddSubtractExpressionRule()); } 
	 EOF 
;

// Rule NumericalAddSubtractExpression
ruleNumericalAddSubtractExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumericalAddSubtractExpressionAccess().getGroup()); }
(rule__NumericalAddSubtractExpression__Group__0)
{ after(grammarAccess.getNumericalAddSubtractExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumericalMultiplyDivideExpression
entryRuleNumericalMultiplyDivideExpression 
:
{ before(grammarAccess.getNumericalMultiplyDivideExpressionRule()); }
	 ruleNumericalMultiplyDivideExpression
{ after(grammarAccess.getNumericalMultiplyDivideExpressionRule()); } 
	 EOF 
;

// Rule NumericalMultiplyDivideExpression
ruleNumericalMultiplyDivideExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getGroup()); }
(rule__NumericalMultiplyDivideExpression__Group__0)
{ after(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumericalUnaryExpression
entryRuleNumericalUnaryExpression 
:
{ before(grammarAccess.getNumericalUnaryExpressionRule()); }
	 ruleNumericalUnaryExpression
{ after(grammarAccess.getNumericalUnaryExpressionRule()); } 
	 EOF 
;

// Rule NumericalUnaryExpression
ruleNumericalUnaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumericalUnaryExpressionAccess().getAlternatives()); }
(rule__NumericalUnaryExpression__Alternatives)
{ after(grammarAccess.getNumericalUnaryExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression 
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
(rule__PrimaryExpression__Alternatives)
{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValueExpression
entryRuleValueExpression 
:
{ before(grammarAccess.getValueExpressionRule()); }
	 ruleValueExpression
{ after(grammarAccess.getValueExpressionRule()); } 
	 EOF 
;

// Rule ValueExpression
ruleValueExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValueExpressionAccess().getAlternatives()); }
(rule__ValueExpression__Alternatives)
{ after(grammarAccess.getValueExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimitiveValueExpression
entryRulePrimitiveValueExpression 
:
{ before(grammarAccess.getPrimitiveValueExpressionRule()); }
	 rulePrimitiveValueExpression
{ after(grammarAccess.getPrimitiveValueExpressionRule()); } 
	 EOF 
;

// Rule PrimitiveValueExpression
rulePrimitiveValueExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimitiveValueExpressionAccess().getGroup()); }
(rule__PrimitiveValueExpression__Group__0)
{ after(grammarAccess.getPrimitiveValueExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleElementReferenceExpression
entryRuleElementReferenceExpression 
:
{ before(grammarAccess.getElementReferenceExpressionRule()); }
	 ruleElementReferenceExpression
{ after(grammarAccess.getElementReferenceExpressionRule()); } 
	 EOF 
;

// Rule ElementReferenceExpression
ruleElementReferenceExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getElementReferenceExpressionAccess().getGroup()); }
(rule__ElementReferenceExpression__Group__0)
{ after(grammarAccess.getElementReferenceExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperationCall
entryRuleOperationCall 
:
{ before(grammarAccess.getOperationCallRule()); }
	 ruleOperationCall
{ after(grammarAccess.getOperationCallRule()); } 
	 EOF 
;

// Rule OperationCall
ruleOperationCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOperationCallAccess().getGroup()); }
(rule__OperationCall__Group__0)
{ after(grammarAccess.getOperationCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteral
entryRuleLiteral 
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
(rule__Literal__Alternatives)
{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule Direction
ruleDirection
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDirectionAccess().getAlternatives()); }
(rule__Direction__Alternatives)
{ after(grammarAccess.getDirectionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule AdditiveOperator
ruleAdditiveOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveOperatorAccess().getAlternatives()); }
(rule__AdditiveOperator__Alternatives)
{ after(grammarAccess.getAdditiveOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule MultiplicativeOperator
ruleMultiplicativeOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeOperatorAccess().getAlternatives()); }
(rule__MultiplicativeOperator__Alternatives)
{ after(grammarAccess.getMultiplicativeOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule UnaryOperator
ruleUnaryOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperatorAccess().getAlternatives()); }
(rule__UnaryOperator__Alternatives)
{ after(grammarAccess.getUnaryOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule RelationalOperator
ruleRelationalOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalOperatorAccess().getAlternatives()); }
(rule__RelationalOperator__Alternatives)
{ after(grammarAccess.getRelationalOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule TimeUnit
ruleTimeUnit
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeUnitAccess().getAlternatives()); }
(rule__TimeUnit__Alternatives)
{ after(grammarAccess.getTimeUnitAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule Type
ruleType
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getAlternatives()); }
(rule__Type__Alternatives)
{ after(grammarAccess.getTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__DefRoot__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefRootAccess().getStatechartRootParserRuleCall_0()); }
	ruleStatechartRoot
{ after(grammarAccess.getDefRootAccess().getStatechartRootParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getDefRootAccess().getStateRootParserRuleCall_1()); }
	ruleStateRoot
{ after(grammarAccess.getDefRootAccess().getStateRootParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getDefRootAccess().getTransitionRootParserRuleCall_2()); }
	ruleTransitionRoot
{ after(grammarAccess.getDefRootAccess().getTransitionRootParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StatechartScope__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatechartScopeAccess().getInterfaceScopeParserRuleCall_0()); }
	ruleInterfaceScope
{ after(grammarAccess.getStatechartScopeAccess().getInterfaceScopeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getStatechartScopeAccess().getInternalScopeParserRuleCall_1()); }
	ruleInternalScope
{ after(grammarAccess.getStatechartScopeAccess().getInternalScopeParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getEventDefinitionParserRuleCall_0()); }
	ruleEventDefinition
{ after(grammarAccess.getDeclarationAccess().getEventDefinitionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getDeclarationAccess().getVariableDefinitionParserRuleCall_1()); }
	ruleVariableDefinition
{ after(grammarAccess.getDeclarationAccess().getVariableDefinitionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getDeclarationAccess().getClockParserRuleCall_2()); }
	ruleClock
{ after(grammarAccess.getDeclarationAccess().getClockParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getDeclarationAccess().getOperationParserRuleCall_3()); }
	ruleOperation
{ after(grammarAccess.getDeclarationAccess().getOperationParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getDeclarationAccess().getLocalReactionParserRuleCall_4()); }
	ruleLocalReaction
{ after(grammarAccess.getDeclarationAccess().getLocalReactionParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getDeclarationAccess().getEntrypointParserRuleCall_5()); }
	ruleEntrypoint
{ after(grammarAccess.getDeclarationAccess().getEntrypointParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getDeclarationAccess().getExitpointParserRuleCall_6()); }
	ruleExitpoint
{ after(grammarAccess.getDeclarationAccess().getExitpointParserRuleCall_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReactionProperty__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReactionPropertyAccess().getReactionPriorityParserRuleCall_0()); }
	ruleReactionPriority
{ after(grammarAccess.getReactionPropertyAccess().getReactionPriorityParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getReactionPropertyAccess().getEntryPointSpecParserRuleCall_1()); }
	ruleEntryPointSpec
{ after(grammarAccess.getReactionPropertyAccess().getEntryPointSpecParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getReactionPropertyAccess().getExitPointSpecParserRuleCall_2()); }
	ruleExitPointSpec
{ after(grammarAccess.getReactionPropertyAccess().getExitPointSpecParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventSpec__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventSpecAccess().getRegularEventSpecParserRuleCall_0()); }
	ruleRegularEventSpec
{ after(grammarAccess.getEventSpecAccess().getRegularEventSpecParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getEventSpecAccess().getTimeEventSpecParserRuleCall_1()); }
	ruleTimeEventSpec
{ after(grammarAccess.getEventSpecAccess().getTimeEventSpecParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getEventSpecAccess().getBuiltinEventSpecParserRuleCall_2()); }
	ruleBuiltinEventSpec
{ after(grammarAccess.getEventSpecAccess().getBuiltinEventSpecParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BuiltinEventSpec__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBuiltinEventSpecAccess().getEntryEventParserRuleCall_0()); }
	ruleEntryEvent
{ after(grammarAccess.getBuiltinEventSpecAccess().getEntryEventParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getBuiltinEventSpecAccess().getExitEventParserRuleCall_1()); }
	ruleExitEvent
{ after(grammarAccess.getBuiltinEventSpecAccess().getExitEventParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getBuiltinEventSpecAccess().getOnCycleEventParserRuleCall_2()); }
	ruleOnCycleEvent
{ after(grammarAccess.getBuiltinEventSpecAccess().getOnCycleEventParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getBuiltinEventSpecAccess().getAlwaysEventParserRuleCall_3()); }
	ruleAlwaysEvent
{ after(grammarAccess.getBuiltinEventSpecAccess().getAlwaysEventParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getAssignmentParserRuleCall_0()); }
	ruleAssignment
{ after(grammarAccess.getStatementAccess().getAssignmentParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getEventRaisingParserRuleCall_1()); }
	ruleEventRaising
{ after(grammarAccess.getStatementAccess().getEventRaisingParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getOperationCallParserRuleCall_2()); }
	ruleOperationCall
{ after(grammarAccess.getStatementAccess().getOperationCallParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalNotExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalNotExpressionAccess().getLogicalRelationExpressionParserRuleCall_0()); }
	ruleLogicalRelationExpression
{ after(grammarAccess.getLogicalNotExpressionAccess().getLogicalRelationExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLogicalNotExpressionAccess().getGroup_1()); }
(rule__LogicalNotExpression__Group_1__0)
{ after(grammarAccess.getLogicalNotExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalUnaryExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalUnaryExpressionAccess().getPrimaryExpressionParserRuleCall_0()); }
	rulePrimaryExpression
{ after(grammarAccess.getNumericalUnaryExpressionAccess().getPrimaryExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNumericalUnaryExpressionAccess().getGroup_1()); }
(rule__NumericalUnaryExpression__Group_1__0)
{ after(grammarAccess.getNumericalUnaryExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getValueExpressionParserRuleCall_0()); }
	ruleValueExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getValueExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_1()); }
(rule__PrimaryExpression__Group_1__0)
{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getOperationCallParserRuleCall_2()); }
	ruleOperationCall
{ after(grammarAccess.getPrimaryExpressionAccess().getOperationCallParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueExpressionAccess().getPrimitiveValueExpressionParserRuleCall_0()); }
	rulePrimitiveValueExpression
{ after(grammarAccess.getValueExpressionAccess().getPrimitiveValueExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getValueExpressionAccess().getElementReferenceExpressionParserRuleCall_1()); }
	ruleElementReferenceExpression
{ after(grammarAccess.getValueExpressionAccess().getElementReferenceExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getBOOLTerminalRuleCall_0()); }
	RULE_BOOL
{ after(grammarAccess.getLiteralAccess().getBOOLTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
{ after(grammarAccess.getLiteralAccess().getINTTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getSTRINGTerminalRuleCall_2()); }
	RULE_STRING
{ after(grammarAccess.getLiteralAccess().getSTRINGTerminalRuleCall_2()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getFLOATTerminalRuleCall_3()); }
	RULE_FLOAT
{ after(grammarAccess.getLiteralAccess().getFLOATTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Direction__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDirectionAccess().getINEnumLiteralDeclaration_0()); }
(	'in' 
)
{ after(grammarAccess.getDirectionAccess().getINEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getDirectionAccess().getOUTEnumLiteralDeclaration_1()); }
(	'out' 
)
{ after(grammarAccess.getDirectionAccess().getOUTEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveOperatorAccess().getPlusEnumLiteralDeclaration_0()); }
(	'+' 
)
{ after(grammarAccess.getAdditiveOperatorAccess().getPlusEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getAdditiveOperatorAccess().getMinusEnumLiteralDeclaration_1()); }
(	'-' 
)
{ after(grammarAccess.getAdditiveOperatorAccess().getMinusEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeOperatorAccess().getMulEnumLiteralDeclaration_0()); }
(	'*' 
)
{ after(grammarAccess.getMultiplicativeOperatorAccess().getMulEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getMultiplicativeOperatorAccess().getDivEnumLiteralDeclaration_1()); }
(	'/' 
)
{ after(grammarAccess.getMultiplicativeOperatorAccess().getDivEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getMultiplicativeOperatorAccess().getModEnumLiteralDeclaration_2()); }
(	'%' 
)
{ after(grammarAccess.getMultiplicativeOperatorAccess().getModEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperatorAccess().getPositiveEnumLiteralDeclaration_0()); }
(	'+' 
)
{ after(grammarAccess.getUnaryOperatorAccess().getPositiveEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getUnaryOperatorAccess().getNegativeEnumLiteralDeclaration_1()); }
(	'-' 
)
{ after(grammarAccess.getUnaryOperatorAccess().getNegativeEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getUnaryOperatorAccess().getComplementEnumLiteralDeclaration_2()); }
(	'~' 
)
{ after(grammarAccess.getUnaryOperatorAccess().getComplementEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalOperatorAccess().getSmallerEnumLiteralDeclaration_0()); }
(	'<' 
)
{ after(grammarAccess.getRelationalOperatorAccess().getSmallerEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getSmallerEqualEnumLiteralDeclaration_1()); }
(	'<=' 
)
{ after(grammarAccess.getRelationalOperatorAccess().getSmallerEqualEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getGreaterEnumLiteralDeclaration_2()); }
(	'>' 
)
{ after(grammarAccess.getRelationalOperatorAccess().getGreaterEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getGreaterEqualEnumLiteralDeclaration_3()); }
(	'>=' 
)
{ after(grammarAccess.getRelationalOperatorAccess().getGreaterEqualEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getEqualsEnumLiteralDeclaration_4()); }
(	'==' 
)
{ after(grammarAccess.getRelationalOperatorAccess().getEqualsEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getNotEqualsEnumLiteralDeclaration_5()); }
(	'!=' 
)
{ after(grammarAccess.getRelationalOperatorAccess().getNotEqualsEnumLiteralDeclaration_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TimeUnit__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeUnitAccess().getSecondEnumLiteralDeclaration_0()); }
(	's' 
)
{ after(grammarAccess.getTimeUnitAccess().getSecondEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getTimeUnitAccess().getMillisecondEnumLiteralDeclaration_1()); }
(	'ms' 
)
{ after(grammarAccess.getTimeUnitAccess().getMillisecondEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getTimeUnitAccess().getNanosecondEnumLiteralDeclaration_2()); }
(	'ns' 
)
{ after(grammarAccess.getTimeUnitAccess().getNanosecondEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getVoidEnumLiteralDeclaration_0()); }
(	'void' 
)
{ after(grammarAccess.getTypeAccess().getVoidEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getIntegerEnumLiteralDeclaration_1()); }
(	'integer' 
)
{ after(grammarAccess.getTypeAccess().getIntegerEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getRealEnumLiteralDeclaration_2()); }
(	'real' 
)
{ after(grammarAccess.getTypeAccess().getRealEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getBooleanEnumLiteralDeclaration_3()); }
(	'boolean' 
)
{ after(grammarAccess.getTypeAccess().getBooleanEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getStringEnumLiteralDeclaration_4()); }
(	'string' 
)
{ after(grammarAccess.getTypeAccess().getStringEnumLiteralDeclaration_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__StatechartRoot__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StatechartRoot__Group__0__Impl
	rule__StatechartRoot__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StatechartRoot__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatechartRootAccess().getStatechartKeyword_0()); }

	'@@statechart@@' 

{ after(grammarAccess.getStatechartRootAccess().getStatechartKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StatechartRoot__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StatechartRoot__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StatechartRoot__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatechartRootAccess().getDefAssignment_1()); }
(rule__StatechartRoot__DefAssignment_1)
{ after(grammarAccess.getStatechartRootAccess().getDefAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StateRoot__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateRoot__Group__0__Impl
	rule__StateRoot__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StateRoot__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateRootAccess().getStateKeyword_0()); }

	'@@state@@' 

{ after(grammarAccess.getStateRootAccess().getStateKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StateRoot__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateRoot__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StateRoot__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateRootAccess().getDefAssignment_1()); }
(rule__StateRoot__DefAssignment_1)
{ after(grammarAccess.getStateRootAccess().getDefAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TransitionRoot__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TransitionRoot__Group__0__Impl
	rule__TransitionRoot__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionRoot__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionRootAccess().getTransitionKeyword_0()); }

	'@@transition@@' 

{ after(grammarAccess.getTransitionRootAccess().getTransitionKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TransitionRoot__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TransitionRoot__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionRoot__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionRootAccess().getDefAssignment_1()); }
(rule__TransitionRoot__DefAssignment_1)
{ after(grammarAccess.getTransitionRootAccess().getDefAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StatechartDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StatechartDefinition__Group__0__Impl
	rule__StatechartDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StatechartDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatechartDefinitionAccess().getStatechartDefinitionAction_0()); }
(

)
{ after(grammarAccess.getStatechartDefinitionAccess().getStatechartDefinitionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StatechartDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StatechartDefinition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StatechartDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatechartDefinitionAccess().getDefinitionScopesAssignment_1()); }
(rule__StatechartDefinition__DefinitionScopesAssignment_1)*
{ after(grammarAccess.getStatechartDefinitionAccess().getDefinitionScopesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SimpleScope__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleScope__Group__0__Impl
	rule__SimpleScope__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleScope__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleScopeAccess().getSimpleScopeAction_0()); }
(

)
{ after(grammarAccess.getSimpleScopeAccess().getSimpleScopeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleScope__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleScope__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleScope__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleScopeAccess().getDeclarationsAssignment_1()); }
(rule__SimpleScope__DeclarationsAssignment_1)*
{ after(grammarAccess.getSimpleScopeAccess().getDeclarationsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InterfaceScope__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceScope__Group__0__Impl
	rule__InterfaceScope__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceScope__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceScopeAccess().getInterfaceScopeAction_0()); }
(

)
{ after(grammarAccess.getInterfaceScopeAccess().getInterfaceScopeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceScope__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceScope__Group__1__Impl
	rule__InterfaceScope__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceScope__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceScopeAccess().getInterfaceKeyword_1()); }

	'interface' 

{ after(grammarAccess.getInterfaceScopeAccess().getInterfaceKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceScope__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceScope__Group__2__Impl
	rule__InterfaceScope__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceScope__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceScopeAccess().getNameAssignment_2()); }
(rule__InterfaceScope__NameAssignment_2)?
{ after(grammarAccess.getInterfaceScopeAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceScope__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceScope__Group__3__Impl
	rule__InterfaceScope__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceScope__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceScopeAccess().getColonKeyword_3()); }

	':' 

{ after(grammarAccess.getInterfaceScopeAccess().getColonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceScope__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceScope__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceScope__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceScopeAccess().getDeclarationsAssignment_4()); }
(rule__InterfaceScope__DeclarationsAssignment_4)*
{ after(grammarAccess.getInterfaceScopeAccess().getDeclarationsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__InternalScope__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InternalScope__Group__0__Impl
	rule__InternalScope__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InternalScope__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInternalScopeAccess().getInternalScopeAction_0()); }
(

)
{ after(grammarAccess.getInternalScopeAccess().getInternalScopeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InternalScope__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InternalScope__Group__1__Impl
	rule__InternalScope__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InternalScope__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInternalScopeAccess().getInternalKeyword_1()); }

	'internal' 

{ after(grammarAccess.getInternalScopeAccess().getInternalKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InternalScope__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InternalScope__Group__2__Impl
	rule__InternalScope__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__InternalScope__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInternalScopeAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getInternalScopeAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InternalScope__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InternalScope__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InternalScope__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInternalScopeAccess().getDeclarationsAssignment_3()); }
(rule__InternalScope__DeclarationsAssignment_3)*
{ after(grammarAccess.getInternalScopeAccess().getDeclarationsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__EventDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDefinition__Group__0__Impl
	rule__EventDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDefinitionAccess().getEventDefinitionAction_0()); }
(

)
{ after(grammarAccess.getEventDefinitionAccess().getEventDefinitionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDefinition__Group__1__Impl
	rule__EventDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDefinitionAccess().getDirectionAssignment_1()); }
(rule__EventDefinition__DirectionAssignment_1)?
{ after(grammarAccess.getEventDefinitionAccess().getDirectionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDefinition__Group__2__Impl
	rule__EventDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDefinitionAccess().getEventKeyword_2()); }

	'event' 

{ after(grammarAccess.getEventDefinitionAccess().getEventKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventDefinition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDefinition__Group__3__Impl
	rule__EventDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDefinition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDefinitionAccess().getNameAssignment_3()); }
(rule__EventDefinition__NameAssignment_3)
{ after(grammarAccess.getEventDefinitionAccess().getNameAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventDefinition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDefinition__Group__4__Impl
	rule__EventDefinition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDefinition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDefinitionAccess().getGroup_4()); }
(rule__EventDefinition__Group_4__0)?
{ after(grammarAccess.getEventDefinitionAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventDefinition__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDefinition__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDefinition__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDefinitionAccess().getDerivationAssignment_5()); }
(rule__EventDefinition__DerivationAssignment_5)?
{ after(grammarAccess.getEventDefinitionAccess().getDerivationAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__EventDefinition__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDefinition__Group_4__0__Impl
	rule__EventDefinition__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDefinition__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDefinitionAccess().getColonKeyword_4_0()); }

	':' 

{ after(grammarAccess.getEventDefinitionAccess().getColonKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventDefinition__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDefinition__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDefinition__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDefinitionAccess().getTypeAssignment_4_1()); }
(rule__EventDefinition__TypeAssignment_4_1)
{ after(grammarAccess.getEventDefinitionAccess().getTypeAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EventDerivation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDerivation__Group__0__Impl
	rule__EventDerivation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDerivation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDerivationAccess().getEqualsSignKeyword_0()); }

	'=' 

{ after(grammarAccess.getEventDerivationAccess().getEqualsSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventDerivation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDerivation__Group__1__Impl
	rule__EventDerivation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDerivation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDerivationAccess().getConditionAssignment_1()); }
(rule__EventDerivation__ConditionAssignment_1)
{ after(grammarAccess.getEventDerivationAccess().getConditionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventDerivation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDerivation__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDerivation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDerivationAccess().getGroup_2()); }
(rule__EventDerivation__Group_2__0)?
{ after(grammarAccess.getEventDerivationAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__EventDerivation__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDerivation__Group_2__0__Impl
	rule__EventDerivation__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDerivation__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDerivationAccess().getColonKeyword_2_0()); }

	':' 

{ after(grammarAccess.getEventDerivationAccess().getColonKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventDerivation__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDerivation__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDerivation__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDerivationAccess().getValueAssignment_2_1()); }
(rule__EventDerivation__ValueAssignment_2_1)
{ after(grammarAccess.getEventDerivationAccess().getValueAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VariableDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDefinition__Group__0__Impl
	rule__VariableDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDefinitionAccess().getVariableDefinitionAction_0()); }
(

)
{ after(grammarAccess.getVariableDefinitionAccess().getVariableDefinitionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDefinition__Group__1__Impl
	rule__VariableDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDefinitionAccess().getVarKeyword_1()); }

	'var' 

{ after(grammarAccess.getVariableDefinitionAccess().getVarKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDefinition__Group__2__Impl
	rule__VariableDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDefinitionAccess().getUnorderedGroup_2()); }
(rule__VariableDefinition__UnorderedGroup_2)
{ after(grammarAccess.getVariableDefinitionAccess().getUnorderedGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDefinition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDefinition__Group__3__Impl
	rule__VariableDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDefinition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDefinitionAccess().getNameAssignment_3()); }
(rule__VariableDefinition__NameAssignment_3)
{ after(grammarAccess.getVariableDefinitionAccess().getNameAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDefinition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDefinition__Group__4__Impl
	rule__VariableDefinition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDefinition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDefinitionAccess().getColonKeyword_4()); }

	':' 

{ after(grammarAccess.getVariableDefinitionAccess().getColonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDefinition__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDefinition__Group__5__Impl
	rule__VariableDefinition__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDefinition__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDefinitionAccess().getTypeAssignment_5()); }
(rule__VariableDefinition__TypeAssignment_5)
{ after(grammarAccess.getVariableDefinitionAccess().getTypeAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDefinition__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDefinition__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDefinition__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDefinitionAccess().getGroup_6()); }
(rule__VariableDefinition__Group_6__0)?
{ after(grammarAccess.getVariableDefinitionAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__VariableDefinition__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDefinition__Group_6__0__Impl
	rule__VariableDefinition__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDefinition__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDefinitionAccess().getEqualsSignKeyword_6_0()); }

	'=' 

{ after(grammarAccess.getVariableDefinitionAccess().getEqualsSignKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDefinition__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDefinition__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDefinition__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDefinitionAccess().getInitialValueAssignment_6_1()); }
(rule__VariableDefinition__InitialValueAssignment_6_1)
{ after(grammarAccess.getVariableDefinitionAccess().getInitialValueAssignment_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Clock__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Clock__Group__0__Impl
	rule__Clock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Clock__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClockAccess().getClockAction_0()); }
(

)
{ after(grammarAccess.getClockAccess().getClockAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Clock__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Clock__Group__1__Impl
	rule__Clock__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Clock__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClockAccess().getClockKeyword_1()); }

	'clock' 

{ after(grammarAccess.getClockAccess().getClockKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Clock__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Clock__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Clock__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClockAccess().getNameAssignment_2()); }
(rule__Clock__NameAssignment_2)
{ after(grammarAccess.getClockAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Operation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group__0__Impl
	rule__Operation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getOperationAction_0()); }
(

)
{ after(grammarAccess.getOperationAccess().getOperationAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group__1__Impl
	rule__Operation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getOperationKeyword_1()); }

	'operation' 

{ after(grammarAccess.getOperationAccess().getOperationKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group__2__Impl
	rule__Operation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getNameAssignment_2()); }
(rule__Operation__NameAssignment_2)
{ after(grammarAccess.getOperationAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group__3__Impl
	rule__Operation__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getLeftParenthesisKeyword_3()); }

	'(' 

{ after(grammarAccess.getOperationAccess().getLeftParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group__4__Impl
	rule__Operation__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getGroup_4()); }
(rule__Operation__Group_4__0)?
{ after(grammarAccess.getOperationAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group__5__Impl
	rule__Operation__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getRightParenthesisKeyword_5()); }

	')' 

{ after(grammarAccess.getOperationAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getGroup_6()); }
(rule__Operation__Group_6__0)?
{ after(grammarAccess.getOperationAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Operation__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group_4__0__Impl
	rule__Operation__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getParamTypesAssignment_4_0()); }
(rule__Operation__ParamTypesAssignment_4_0)
{ after(grammarAccess.getOperationAccess().getParamTypesAssignment_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getGroup_4_1()); }
(rule__Operation__Group_4_1__0)*
{ after(grammarAccess.getOperationAccess().getGroup_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Operation__Group_4_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group_4_1__0__Impl
	rule__Operation__Group_4_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_4_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getCommaKeyword_4_1_0()); }

	',' 

{ after(grammarAccess.getOperationAccess().getCommaKeyword_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group_4_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group_4_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_4_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getParamTypesAssignment_4_1_1()); }
(rule__Operation__ParamTypesAssignment_4_1_1)
{ after(grammarAccess.getOperationAccess().getParamTypesAssignment_4_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Operation__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group_6__0__Impl
	rule__Operation__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getColonKeyword_6_0()); }

	':' 

{ after(grammarAccess.getOperationAccess().getColonKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getTypeAssignment_6_1()); }
(rule__Operation__TypeAssignment_6_1)
{ after(grammarAccess.getOperationAccess().getTypeAssignment_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Entrypoint__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Entrypoint__Group__0__Impl
	rule__Entrypoint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Entrypoint__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntrypointAccess().getEntrypointAction_0()); }
(

)
{ after(grammarAccess.getEntrypointAccess().getEntrypointAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Entrypoint__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Entrypoint__Group__1__Impl
	rule__Entrypoint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Entrypoint__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntrypointAccess().getEntrypointKeyword_1()); }

	'entrypoint' 

{ after(grammarAccess.getEntrypointAccess().getEntrypointKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Entrypoint__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Entrypoint__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Entrypoint__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntrypointAccess().getNameAssignment_2()); }
(rule__Entrypoint__NameAssignment_2)
{ after(grammarAccess.getEntrypointAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Exitpoint__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exitpoint__Group__0__Impl
	rule__Exitpoint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exitpoint__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExitpointAccess().getExitpointAction_0()); }
(

)
{ after(grammarAccess.getExitpointAccess().getExitpointAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Exitpoint__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exitpoint__Group__1__Impl
	rule__Exitpoint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Exitpoint__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExitpointAccess().getExitpointKeyword_1()); }

	'exitpoint' 

{ after(grammarAccess.getExitpointAccess().getExitpointKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Exitpoint__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exitpoint__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exitpoint__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExitpointAccess().getNameAssignment_2()); }
(rule__Exitpoint__NameAssignment_2)
{ after(grammarAccess.getExitpointAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LocalReaction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalReaction__Group__0__Impl
	rule__LocalReaction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalReaction__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalReactionAccess().getTriggerAssignment_0()); }
(rule__LocalReaction__TriggerAssignment_0)
{ after(grammarAccess.getLocalReactionAccess().getTriggerAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalReaction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalReaction__Group__1__Impl
	rule__LocalReaction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalReaction__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalReactionAccess().getGroup_1()); }
(rule__LocalReaction__Group_1__0)?
{ after(grammarAccess.getLocalReactionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalReaction__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalReaction__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalReaction__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalReactionAccess().getGroup_2()); }
(rule__LocalReaction__Group_2__0)?
{ after(grammarAccess.getLocalReactionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LocalReaction__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalReaction__Group_1__0__Impl
	rule__LocalReaction__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalReaction__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalReactionAccess().getSolidusKeyword_1_0()); }

	'/' 

{ after(grammarAccess.getLocalReactionAccess().getSolidusKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalReaction__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalReaction__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalReaction__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalReactionAccess().getEffectAssignment_1_1()); }
(rule__LocalReaction__EffectAssignment_1_1)
{ after(grammarAccess.getLocalReactionAccess().getEffectAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LocalReaction__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalReaction__Group_2__0__Impl
	rule__LocalReaction__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalReaction__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalReactionAccess().getNumberSignKeyword_2_0()); }

	'#' 

{ after(grammarAccess.getLocalReactionAccess().getNumberSignKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalReaction__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalReaction__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalReaction__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalReactionAccess().getPropertiesAssignment_2_1()); }
(rule__LocalReaction__PropertiesAssignment_2_1)
{ after(grammarAccess.getLocalReactionAccess().getPropertiesAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TransitionReaction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TransitionReaction__Group__0__Impl
	rule__TransitionReaction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionReaction__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionReactionAccess().getTransitionReactionAction_0()); }
(

)
{ after(grammarAccess.getTransitionReactionAccess().getTransitionReactionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TransitionReaction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TransitionReaction__Group__1__Impl
	rule__TransitionReaction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionReaction__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionReactionAccess().getTriggerAssignment_1()); }
(rule__TransitionReaction__TriggerAssignment_1)?
{ after(grammarAccess.getTransitionReactionAccess().getTriggerAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TransitionReaction__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TransitionReaction__Group__2__Impl
	rule__TransitionReaction__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionReaction__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionReactionAccess().getGroup_2()); }
(rule__TransitionReaction__Group_2__0)?
{ after(grammarAccess.getTransitionReactionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TransitionReaction__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TransitionReaction__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionReaction__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionReactionAccess().getGroup_3()); }
(rule__TransitionReaction__Group_3__0)?
{ after(grammarAccess.getTransitionReactionAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__TransitionReaction__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TransitionReaction__Group_2__0__Impl
	rule__TransitionReaction__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionReaction__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionReactionAccess().getSolidusKeyword_2_0()); }

	'/' 

{ after(grammarAccess.getTransitionReactionAccess().getSolidusKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TransitionReaction__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TransitionReaction__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionReaction__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionReactionAccess().getEffectAssignment_2_1()); }
(rule__TransitionReaction__EffectAssignment_2_1)
{ after(grammarAccess.getTransitionReactionAccess().getEffectAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TransitionReaction__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TransitionReaction__Group_3__0__Impl
	rule__TransitionReaction__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionReaction__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionReactionAccess().getNumberSignKeyword_3_0()); }

	'#' 

{ after(grammarAccess.getTransitionReactionAccess().getNumberSignKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TransitionReaction__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TransitionReaction__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionReaction__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionReactionAccess().getPropertiesAssignment_3_1()); }
(rule__TransitionReaction__PropertiesAssignment_3_1)
{ after(grammarAccess.getTransitionReactionAccess().getPropertiesAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ReactionTrigger__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReactionTrigger__Group__0__Impl
	rule__ReactionTrigger__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReactionTrigger__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReactionTriggerAccess().getReactionTriggerAction_0()); }
(

)
{ after(grammarAccess.getReactionTriggerAccess().getReactionTriggerAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReactionTrigger__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReactionTrigger__Group__1__Impl
	rule__ReactionTrigger__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ReactionTrigger__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReactionTriggerAccess().getGroup_1()); }
(rule__ReactionTrigger__Group_1__0)
{ after(grammarAccess.getReactionTriggerAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReactionTrigger__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReactionTrigger__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReactionTrigger__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReactionTriggerAccess().getGroup_2()); }
(rule__ReactionTrigger__Group_2__0)?
{ after(grammarAccess.getReactionTriggerAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ReactionTrigger__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReactionTrigger__Group_1__0__Impl
	rule__ReactionTrigger__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReactionTrigger__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReactionTriggerAccess().getTriggersAssignment_1_0()); }
(rule__ReactionTrigger__TriggersAssignment_1_0)
{ after(grammarAccess.getReactionTriggerAccess().getTriggersAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReactionTrigger__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReactionTrigger__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReactionTrigger__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReactionTriggerAccess().getGroup_1_1()); }
(rule__ReactionTrigger__Group_1_1__0)*
{ after(grammarAccess.getReactionTriggerAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ReactionTrigger__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReactionTrigger__Group_1_1__0__Impl
	rule__ReactionTrigger__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReactionTrigger__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReactionTriggerAccess().getCommaKeyword_1_1_0()); }

	',' 

{ after(grammarAccess.getReactionTriggerAccess().getCommaKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReactionTrigger__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReactionTrigger__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReactionTrigger__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReactionTriggerAccess().getTriggersAssignment_1_1_1()); }
(rule__ReactionTrigger__TriggersAssignment_1_1_1)
{ after(grammarAccess.getReactionTriggerAccess().getTriggersAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ReactionTrigger__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReactionTrigger__Group_2__0__Impl
	rule__ReactionTrigger__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReactionTrigger__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReactionTriggerAccess().getLeftSquareBracketKeyword_2_0()); }

	'[' 

{ after(grammarAccess.getReactionTriggerAccess().getLeftSquareBracketKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReactionTrigger__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReactionTrigger__Group_2__1__Impl
	rule__ReactionTrigger__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ReactionTrigger__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReactionTriggerAccess().getGuardExpressionAssignment_2_1()); }
(rule__ReactionTrigger__GuardExpressionAssignment_2_1)
{ after(grammarAccess.getReactionTriggerAccess().getGuardExpressionAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReactionTrigger__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReactionTrigger__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReactionTrigger__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReactionTriggerAccess().getRightSquareBracketKeyword_2_2()); }

	']' 

{ after(grammarAccess.getReactionTriggerAccess().getRightSquareBracketKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ReactionEffect__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReactionEffect__Group__0__Impl
	rule__ReactionEffect__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReactionEffect__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReactionEffectAccess().getReactionEffectAction_0()); }
(

)
{ after(grammarAccess.getReactionEffectAccess().getReactionEffectAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReactionEffect__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReactionEffect__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReactionEffect__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getReactionEffectAccess().getGroup_1()); }
(rule__ReactionEffect__Group_1__0)
{ after(grammarAccess.getReactionEffectAccess().getGroup_1()); }
)
(
{ before(grammarAccess.getReactionEffectAccess().getGroup_1()); }
(rule__ReactionEffect__Group_1__0)*
{ after(grammarAccess.getReactionEffectAccess().getGroup_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ReactionEffect__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReactionEffect__Group_1__0__Impl
	rule__ReactionEffect__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReactionEffect__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReactionEffectAccess().getActionsAssignment_1_0()); }
(rule__ReactionEffect__ActionsAssignment_1_0)
{ after(grammarAccess.getReactionEffectAccess().getActionsAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReactionEffect__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReactionEffect__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReactionEffect__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReactionEffectAccess().getSemicolonKeyword_1_1()); }

	';' 

{ after(grammarAccess.getReactionEffectAccess().getSemicolonKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ReactionProperties__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReactionProperties__Group__0__Impl
	rule__ReactionProperties__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReactionProperties__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReactionPropertiesAccess().getReactionPropertiesAction_0()); }
(

)
{ after(grammarAccess.getReactionPropertiesAccess().getReactionPropertiesAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReactionProperties__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReactionProperties__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReactionProperties__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReactionPropertiesAccess().getPropertiesAssignment_1()); }
(rule__ReactionProperties__PropertiesAssignment_1)*
{ after(grammarAccess.getReactionPropertiesAccess().getPropertiesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EntryPointSpec__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EntryPointSpec__Group__0__Impl
	rule__EntryPointSpec__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EntryPointSpec__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntryPointSpecAccess().getGreaterThanSignKeyword_0()); }

	'>' 

{ after(grammarAccess.getEntryPointSpecAccess().getGreaterThanSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EntryPointSpec__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EntryPointSpec__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EntryPointSpec__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntryPointSpecAccess().getEntrypointAssignment_1()); }
(rule__EntryPointSpec__EntrypointAssignment_1)
{ after(grammarAccess.getEntryPointSpecAccess().getEntrypointAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExitPointSpec__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExitPointSpec__Group__0__Impl
	rule__ExitPointSpec__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExitPointSpec__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExitPointSpecAccess().getExitpointAssignment_0()); }
(rule__ExitPointSpec__ExitpointAssignment_0)
{ after(grammarAccess.getExitPointSpecAccess().getExitpointAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExitPointSpec__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExitPointSpec__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExitPointSpec__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExitPointSpecAccess().getGreaterThanSignKeyword_1()); }

	'>' 

{ after(grammarAccess.getExitPointSpecAccess().getGreaterThanSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TimeEventSpec__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TimeEventSpec__Group__0__Impl
	rule__TimeEventSpec__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeEventSpec__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeEventSpecAccess().getAfterKeyword_0()); }

	'after' 

{ after(grammarAccess.getTimeEventSpecAccess().getAfterKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TimeEventSpec__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TimeEventSpec__Group__1__Impl
	rule__TimeEventSpec__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeEventSpec__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeEventSpecAccess().getValueAssignment_1()); }
(rule__TimeEventSpec__ValueAssignment_1)
{ after(grammarAccess.getTimeEventSpecAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TimeEventSpec__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TimeEventSpec__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeEventSpec__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeEventSpecAccess().getUnitAssignment_2()); }
(rule__TimeEventSpec__UnitAssignment_2)?
{ after(grammarAccess.getTimeEventSpecAccess().getUnitAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__EntryEvent__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EntryEvent__Group__0__Impl
	rule__EntryEvent__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EntryEvent__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntryEventAccess().getEntryEventAction_0()); }
(

)
{ after(grammarAccess.getEntryEventAccess().getEntryEventAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EntryEvent__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EntryEvent__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EntryEvent__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntryEventAccess().getEntryKeyword_1()); }

	'entry' 

{ after(grammarAccess.getEntryEventAccess().getEntryKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExitEvent__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExitEvent__Group__0__Impl
	rule__ExitEvent__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExitEvent__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExitEventAccess().getExitEventAction_0()); }
(

)
{ after(grammarAccess.getExitEventAccess().getExitEventAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExitEvent__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExitEvent__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExitEvent__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExitEventAccess().getExitKeyword_1()); }

	'exit' 

{ after(grammarAccess.getExitEventAccess().getExitKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OnCycleEvent__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OnCycleEvent__Group__0__Impl
	rule__OnCycleEvent__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OnCycleEvent__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOnCycleEventAccess().getOnCycleEventAction_0()); }
(

)
{ after(grammarAccess.getOnCycleEventAccess().getOnCycleEventAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OnCycleEvent__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OnCycleEvent__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OnCycleEvent__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOnCycleEventAccess().getOncycleKeyword_1()); }

	'oncycle' 

{ after(grammarAccess.getOnCycleEventAccess().getOncycleKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AlwaysEvent__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AlwaysEvent__Group__0__Impl
	rule__AlwaysEvent__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AlwaysEvent__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlwaysEventAccess().getAlwaysEventAction_0()); }
(

)
{ after(grammarAccess.getAlwaysEventAccess().getAlwaysEventAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AlwaysEvent__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AlwaysEvent__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AlwaysEvent__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlwaysEventAccess().getAlwaysKeyword_1()); }

	'always' 

{ after(grammarAccess.getAlwaysEventAccess().getAlwaysKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Assignment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__0__Impl
	rule__Assignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getVarRefAssignment_0()); }
(rule__Assignment__VarRefAssignment_0)
{ after(grammarAccess.getAssignmentAccess().getVarRefAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__1__Impl
	rule__Assignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getExpressionAssignment_2()); }
(rule__Assignment__ExpressionAssignment_2)
{ after(grammarAccess.getAssignmentAccess().getExpressionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__EventRaising__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventRaising__Group__0__Impl
	rule__EventRaising__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EventRaising__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventRaisingAccess().getRaiseKeyword_0()); }

	'raise' 

{ after(grammarAccess.getEventRaisingAccess().getRaiseKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventRaising__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventRaising__Group__1__Impl
	rule__EventRaising__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EventRaising__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventRaisingAccess().getEventAssignment_1()); }
(rule__EventRaising__EventAssignment_1)
{ after(grammarAccess.getEventRaisingAccess().getEventAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventRaising__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventRaising__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EventRaising__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventRaisingAccess().getGroup_2()); }
(rule__EventRaising__Group_2__0)?
{ after(grammarAccess.getEventRaisingAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__EventRaising__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventRaising__Group_2__0__Impl
	rule__EventRaising__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EventRaising__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventRaisingAccess().getColonKeyword_2_0()); }

	':' 

{ after(grammarAccess.getEventRaisingAccess().getColonKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventRaising__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventRaising__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EventRaising__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventRaisingAccess().getValueAssignment_2_1()); }
(rule__EventRaising__ValueAssignment_2_1)
{ after(grammarAccess.getEventRaisingAccess().getValueAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalOrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group__0__Impl
	rule__LogicalOrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getLogicalAndExpressionParserRuleCall_0()); }
	ruleLogicalAndExpression
{ after(grammarAccess.getLogicalOrExpressionAccess().getLogicalAndExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalOrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getGroup_1()); }
(rule__LogicalOrExpression__Group_1__0)*
{ after(grammarAccess.getLogicalOrExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalOrExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group_1__0__Impl
	rule__LogicalOrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getLogicalOrExpressionLeftOperandAction_1_0()); }
(

)
{ after(grammarAccess.getLogicalOrExpressionAccess().getLogicalOrExpressionLeftOperandAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalOrExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group_1__1__Impl
	rule__LogicalOrExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getVerticalLineVerticalLineKeyword_1_1()); }

	'||' 

{ after(grammarAccess.getLogicalOrExpressionAccess().getVerticalLineVerticalLineKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalOrExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getRightOperandAssignment_1_2()); }
(rule__LogicalOrExpression__RightOperandAssignment_1_2)
{ after(grammarAccess.getLogicalOrExpressionAccess().getRightOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LogicalAndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group__0__Impl
	rule__LogicalAndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getLogicalNotExpressionParserRuleCall_0()); }
	ruleLogicalNotExpression
{ after(grammarAccess.getLogicalAndExpressionAccess().getLogicalNotExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalAndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getGroup_1()); }
(rule__LogicalAndExpression__Group_1__0)*
{ after(grammarAccess.getLogicalAndExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalAndExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group_1__0__Impl
	rule__LogicalAndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getLogicalAndExpressionLeftOperandAction_1_0()); }
(

)
{ after(grammarAccess.getLogicalAndExpressionAccess().getLogicalAndExpressionLeftOperandAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalAndExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group_1__1__Impl
	rule__LogicalAndExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getAmpersandAmpersandKeyword_1_1()); }

	'&&' 

{ after(grammarAccess.getLogicalAndExpressionAccess().getAmpersandAmpersandKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalAndExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getRightOperandAssignment_1_2()); }
(rule__LogicalAndExpression__RightOperandAssignment_1_2)
{ after(grammarAccess.getLogicalAndExpressionAccess().getRightOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LogicalNotExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalNotExpression__Group_1__0__Impl
	rule__LogicalNotExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalNotExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalNotExpressionAccess().getLogicalNotExpressionAction_1_0()); }
(

)
{ after(grammarAccess.getLogicalNotExpressionAccess().getLogicalNotExpressionAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalNotExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalNotExpression__Group_1__1__Impl
	rule__LogicalNotExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalNotExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalNotExpressionAccess().getExclamationMarkKeyword_1_1()); }

	'!' 

{ after(grammarAccess.getLogicalNotExpressionAccess().getExclamationMarkKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalNotExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalNotExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalNotExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalNotExpressionAccess().getOperandAssignment_1_2()); }
(rule__LogicalNotExpression__OperandAssignment_1_2)
{ after(grammarAccess.getLogicalNotExpressionAccess().getOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LogicalRelationExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalRelationExpression__Group__0__Impl
	rule__LogicalRelationExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalRelationExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalRelationExpressionAccess().getNumericalAddSubtractExpressionParserRuleCall_0()); }
	ruleNumericalAddSubtractExpression
{ after(grammarAccess.getLogicalRelationExpressionAccess().getNumericalAddSubtractExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalRelationExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalRelationExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalRelationExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalRelationExpressionAccess().getGroup_1()); }
(rule__LogicalRelationExpression__Group_1__0)*
{ after(grammarAccess.getLogicalRelationExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalRelationExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalRelationExpression__Group_1__0__Impl
	rule__LogicalRelationExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalRelationExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalRelationExpressionAccess().getLogicalRelationExpressionLeftOperandAction_1_0()); }
(

)
{ after(grammarAccess.getLogicalRelationExpressionAccess().getLogicalRelationExpressionLeftOperandAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalRelationExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalRelationExpression__Group_1__1__Impl
	rule__LogicalRelationExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalRelationExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalRelationExpressionAccess().getOperatorAssignment_1_1()); }
(rule__LogicalRelationExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getLogicalRelationExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalRelationExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalRelationExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalRelationExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalRelationExpressionAccess().getRightOperandAssignment_1_2()); }
(rule__LogicalRelationExpression__RightOperandAssignment_1_2)
{ after(grammarAccess.getLogicalRelationExpressionAccess().getRightOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NumericalAddSubtractExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericalAddSubtractExpression__Group__0__Impl
	rule__NumericalAddSubtractExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalAddSubtractExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalAddSubtractExpressionAccess().getNumericalMultiplyDivideExpressionParserRuleCall_0()); }
	ruleNumericalMultiplyDivideExpression
{ after(grammarAccess.getNumericalAddSubtractExpressionAccess().getNumericalMultiplyDivideExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumericalAddSubtractExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericalAddSubtractExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalAddSubtractExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalAddSubtractExpressionAccess().getGroup_1()); }
(rule__NumericalAddSubtractExpression__Group_1__0)*
{ after(grammarAccess.getNumericalAddSubtractExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NumericalAddSubtractExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericalAddSubtractExpression__Group_1__0__Impl
	rule__NumericalAddSubtractExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalAddSubtractExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalAddSubtractExpressionAccess().getNumericalAddSubtractExpressionLeftOperandAction_1_0()); }
(

)
{ after(grammarAccess.getNumericalAddSubtractExpressionAccess().getNumericalAddSubtractExpressionLeftOperandAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumericalAddSubtractExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericalAddSubtractExpression__Group_1__1__Impl
	rule__NumericalAddSubtractExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalAddSubtractExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalAddSubtractExpressionAccess().getOperatorAssignment_1_1()); }
(rule__NumericalAddSubtractExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getNumericalAddSubtractExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumericalAddSubtractExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericalAddSubtractExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalAddSubtractExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalAddSubtractExpressionAccess().getRightOperandAssignment_1_2()); }
(rule__NumericalAddSubtractExpression__RightOperandAssignment_1_2)
{ after(grammarAccess.getNumericalAddSubtractExpressionAccess().getRightOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NumericalMultiplyDivideExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericalMultiplyDivideExpression__Group__0__Impl
	rule__NumericalMultiplyDivideExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalMultiplyDivideExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getNumericalUnaryExpressionParserRuleCall_0()); }
	ruleNumericalUnaryExpression
{ after(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getNumericalUnaryExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumericalMultiplyDivideExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericalMultiplyDivideExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalMultiplyDivideExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getGroup_1()); }
(rule__NumericalMultiplyDivideExpression__Group_1__0)*
{ after(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NumericalMultiplyDivideExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericalMultiplyDivideExpression__Group_1__0__Impl
	rule__NumericalMultiplyDivideExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalMultiplyDivideExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getNumericalMultiplyDivideExpressionLeftOperandAction_1_0()); }
(

)
{ after(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getNumericalMultiplyDivideExpressionLeftOperandAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumericalMultiplyDivideExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericalMultiplyDivideExpression__Group_1__1__Impl
	rule__NumericalMultiplyDivideExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalMultiplyDivideExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getOperatorAssignment_1_1()); }
(rule__NumericalMultiplyDivideExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumericalMultiplyDivideExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericalMultiplyDivideExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalMultiplyDivideExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getRightOperandAssignment_1_2()); }
(rule__NumericalMultiplyDivideExpression__RightOperandAssignment_1_2)
{ after(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getRightOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NumericalUnaryExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericalUnaryExpression__Group_1__0__Impl
	rule__NumericalUnaryExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalUnaryExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalUnaryExpressionAccess().getNumericalUnaryExpressionAction_1_0()); }
(

)
{ after(grammarAccess.getNumericalUnaryExpressionAccess().getNumericalUnaryExpressionAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumericalUnaryExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericalUnaryExpression__Group_1__1__Impl
	rule__NumericalUnaryExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalUnaryExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalUnaryExpressionAccess().getOperatorAssignment_1_1()); }
(rule__NumericalUnaryExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getNumericalUnaryExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumericalUnaryExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericalUnaryExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalUnaryExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalUnaryExpressionAccess().getOperandAssignment_1_2()); }
(rule__NumericalUnaryExpression__OperandAssignment_1_2)
{ after(grammarAccess.getNumericalUnaryExpressionAccess().getOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PrimaryExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_1__0__Impl
	rule__PrimaryExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_1__1__Impl
	rule__PrimaryExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getExpressionParserRuleCall_1_1()); }
	ruleExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getExpressionParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PrimitiveValueExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimitiveValueExpression__Group__0__Impl
	rule__PrimitiveValueExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveValueExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveValueExpressionAccess().getPrimitiveValueExpressionAction_0()); }
(

)
{ after(grammarAccess.getPrimitiveValueExpressionAccess().getPrimitiveValueExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimitiveValueExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimitiveValueExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveValueExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveValueExpressionAccess().getValueAssignment_1()); }
(rule__PrimitiveValueExpression__ValueAssignment_1)
{ after(grammarAccess.getPrimitiveValueExpressionAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ElementReferenceExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElementReferenceExpression__Group__0__Impl
	rule__ElementReferenceExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementReferenceExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementReferenceExpressionAccess().getElementReferenceExpressionAction_0()); }
(

)
{ after(grammarAccess.getElementReferenceExpressionAccess().getElementReferenceExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ElementReferenceExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElementReferenceExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementReferenceExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementReferenceExpressionAccess().getValueAssignment_1()); }
(rule__ElementReferenceExpression__ValueAssignment_1)
{ after(grammarAccess.getElementReferenceExpressionAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OperationCall__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperationCall__Group__0__Impl
	rule__OperationCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationCall__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationCallAccess().getOperationCallAction_0()); }
(

)
{ after(grammarAccess.getOperationCallAccess().getOperationCallAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperationCall__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperationCall__Group__1__Impl
	rule__OperationCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationCall__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationCallAccess().getOperationAssignment_1()); }
(rule__OperationCall__OperationAssignment_1)
{ after(grammarAccess.getOperationCallAccess().getOperationAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperationCall__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperationCall__Group__2__Impl
	rule__OperationCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationCall__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationCallAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getOperationCallAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperationCall__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperationCall__Group__3__Impl
	rule__OperationCall__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationCall__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationCallAccess().getGroup_3()); }
(rule__OperationCall__Group_3__0)?
{ after(grammarAccess.getOperationCallAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperationCall__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperationCall__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationCall__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationCallAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getOperationCallAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__OperationCall__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperationCall__Group_3__0__Impl
	rule__OperationCall__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationCall__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationCallAccess().getArgsAssignment_3_0()); }
(rule__OperationCall__ArgsAssignment_3_0)
{ after(grammarAccess.getOperationCallAccess().getArgsAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperationCall__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperationCall__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationCall__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationCallAccess().getGroup_3_1()); }
(rule__OperationCall__Group_3_1__0)*
{ after(grammarAccess.getOperationCallAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OperationCall__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperationCall__Group_3_1__0__Impl
	rule__OperationCall__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationCall__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationCallAccess().getCommaKeyword_3_1_0()); }

	',' 

{ after(grammarAccess.getOperationCallAccess().getCommaKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperationCall__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperationCall__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationCall__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationCallAccess().getArgsAssignment_3_1_1()); }
(rule__OperationCall__ArgsAssignment_3_1_1)
{ after(grammarAccess.getOperationCallAccess().getArgsAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__VariableDefinition__UnorderedGroup_2
    @init {
    	int stackSize = keepStackSize();
		getUnorderedGroupHelper().enter(grammarAccess.getVariableDefinitionAccess().getUnorderedGroup_2());
    }
:
	rule__VariableDefinition__UnorderedGroup_2__0
	?
	
;
finally {
	getUnorderedGroupHelper().leave(grammarAccess.getVariableDefinitionAccess().getUnorderedGroup_2());
	restoreStackSize(stackSize);
}


rule__VariableDefinition__UnorderedGroup_2__Impl
	@init {
		int stackSize = keepStackSize();
		boolean selected = false;
    }
:
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getVariableDefinitionAccess().getUnorderedGroup_2(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getVariableDefinitionAccess().getUnorderedGroup_2(), 0);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getVariableDefinitionAccess().getReadonlyAssignment_2_0()); }
						(rule__VariableDefinition__ReadonlyAssignment_2_0)
						{ after(grammarAccess.getVariableDefinitionAccess().getReadonlyAssignment_2_0()); }
					)
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getVariableDefinitionAccess().getUnorderedGroup_2(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getVariableDefinitionAccess().getUnorderedGroup_2(), 1);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getVariableDefinitionAccess().getExternalAssignment_2_1()); }
						(rule__VariableDefinition__ExternalAssignment_2_1)
						{ after(grammarAccess.getVariableDefinitionAccess().getExternalAssignment_2_1()); }
					)
 				)
			)  

		)
;
finally {
	if (selected)
		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getVariableDefinitionAccess().getUnorderedGroup_2());
	restoreStackSize(stackSize);
}


rule__VariableDefinition__UnorderedGroup_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDefinition__UnorderedGroup_2__Impl
	rule__VariableDefinition__UnorderedGroup_2__1?
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDefinition__UnorderedGroup_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDefinition__UnorderedGroup_2__Impl
;
finally {
	restoreStackSize(stackSize);
}






rule__Root__RootsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootAccess().getRootsDefRootParserRuleCall_0()); }
	ruleDefRoot{ after(grammarAccess.getRootAccess().getRootsDefRootParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StatechartRoot__DefAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatechartRootAccess().getDefStatechartDefinitionParserRuleCall_1_0()); }
	ruleStatechartDefinition{ after(grammarAccess.getStatechartRootAccess().getDefStatechartDefinitionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StateRoot__DefAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateRootAccess().getDefStateDeclarationParserRuleCall_1_0()); }
	ruleStateDeclaration{ after(grammarAccess.getStateRootAccess().getDefStateDeclarationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionRoot__DefAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionRootAccess().getDefTransitionStatementParserRuleCall_1_0()); }
	ruleTransitionStatement{ after(grammarAccess.getTransitionRootAccess().getDefTransitionStatementParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StatechartDefinition__DefinitionScopesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatechartDefinitionAccess().getDefinitionScopesStatechartScopeParserRuleCall_1_0()); }
	ruleStatechartScope{ after(grammarAccess.getStatechartDefinitionAccess().getDefinitionScopesStatechartScopeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StateDeclaration__ScopeAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateDeclarationAccess().getScopeSimpleScopeParserRuleCall_0()); }
	ruleSimpleScope{ after(grammarAccess.getStateDeclarationAccess().getScopeSimpleScopeParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleScope__DeclarationsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleScopeAccess().getDeclarationsDeclarationParserRuleCall_1_0()); }
	ruleDeclaration{ after(grammarAccess.getSimpleScopeAccess().getDeclarationsDeclarationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceScope__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceScopeAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getInterfaceScopeAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceScope__DeclarationsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceScopeAccess().getDeclarationsDeclarationParserRuleCall_4_0()); }
	ruleDeclaration{ after(grammarAccess.getInterfaceScopeAccess().getDeclarationsDeclarationParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InternalScope__DeclarationsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInternalScopeAccess().getDeclarationsDeclarationParserRuleCall_3_0()); }
	ruleDeclaration{ after(grammarAccess.getInternalScopeAccess().getDeclarationsDeclarationParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventDefinition__DirectionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDefinitionAccess().getDirectionDirectionEnumRuleCall_1_0()); }
	ruleDirection{ after(grammarAccess.getEventDefinitionAccess().getDirectionDirectionEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventDefinition__NameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDefinitionAccess().getNameIDTerminalRuleCall_3_0()); }
	RULE_ID{ after(grammarAccess.getEventDefinitionAccess().getNameIDTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventDefinition__TypeAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDefinitionAccess().getTypeTypeEnumRuleCall_4_1_0()); }
	ruleType{ after(grammarAccess.getEventDefinitionAccess().getTypeTypeEnumRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventDefinition__DerivationAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDefinitionAccess().getDerivationEventDerivationParserRuleCall_5_0()); }
	ruleEventDerivation{ after(grammarAccess.getEventDefinitionAccess().getDerivationEventDerivationParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventDerivation__ConditionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDerivationAccess().getConditionExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getEventDerivationAccess().getConditionExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventDerivation__ValueAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDerivationAccess().getValueExpressionParserRuleCall_2_1_0()); }
	ruleExpression{ after(grammarAccess.getEventDerivationAccess().getValueExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDefinition__ReadonlyAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDefinitionAccess().getReadonlyReadonlyKeyword_2_0_0()); }
(
{ before(grammarAccess.getVariableDefinitionAccess().getReadonlyReadonlyKeyword_2_0_0()); }

	'readonly' 

{ after(grammarAccess.getVariableDefinitionAccess().getReadonlyReadonlyKeyword_2_0_0()); }
)

{ after(grammarAccess.getVariableDefinitionAccess().getReadonlyReadonlyKeyword_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDefinition__ExternalAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDefinitionAccess().getExternalExternalKeyword_2_1_0()); }
(
{ before(grammarAccess.getVariableDefinitionAccess().getExternalExternalKeyword_2_1_0()); }

	'external' 

{ after(grammarAccess.getVariableDefinitionAccess().getExternalExternalKeyword_2_1_0()); }
)

{ after(grammarAccess.getVariableDefinitionAccess().getExternalExternalKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDefinition__NameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDefinitionAccess().getNameIDTerminalRuleCall_3_0()); }
	RULE_ID{ after(grammarAccess.getVariableDefinitionAccess().getNameIDTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDefinition__TypeAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDefinitionAccess().getTypeTypeEnumRuleCall_5_0()); }
	ruleType{ after(grammarAccess.getVariableDefinitionAccess().getTypeTypeEnumRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDefinition__InitialValueAssignment_6_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDefinitionAccess().getInitialValueLiteralParserRuleCall_6_1_0()); }
	ruleLiteral{ after(grammarAccess.getVariableDefinitionAccess().getInitialValueLiteralParserRuleCall_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Clock__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClockAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getClockAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getOperationAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__ParamTypesAssignment_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getParamTypesTypeEnumRuleCall_4_0_0()); }
	ruleType{ after(grammarAccess.getOperationAccess().getParamTypesTypeEnumRuleCall_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__ParamTypesAssignment_4_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getParamTypesTypeEnumRuleCall_4_1_1_0()); }
	ruleType{ after(grammarAccess.getOperationAccess().getParamTypesTypeEnumRuleCall_4_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__TypeAssignment_6_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getTypeTypeEnumRuleCall_6_1_0()); }
	ruleType{ after(grammarAccess.getOperationAccess().getTypeTypeEnumRuleCall_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Entrypoint__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntrypointAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getEntrypointAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Exitpoint__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExitpointAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getExitpointAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LocalReaction__TriggerAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalReactionAccess().getTriggerReactionTriggerParserRuleCall_0_0()); }
	ruleReactionTrigger{ after(grammarAccess.getLocalReactionAccess().getTriggerReactionTriggerParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LocalReaction__EffectAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalReactionAccess().getEffectReactionEffectParserRuleCall_1_1_0()); }
	ruleReactionEffect{ after(grammarAccess.getLocalReactionAccess().getEffectReactionEffectParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LocalReaction__PropertiesAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalReactionAccess().getPropertiesReactionPropertiesParserRuleCall_2_1_0()); }
	ruleReactionProperties{ after(grammarAccess.getLocalReactionAccess().getPropertiesReactionPropertiesParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionReaction__TriggerAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionReactionAccess().getTriggerReactionTriggerParserRuleCall_1_0()); }
	ruleReactionTrigger{ after(grammarAccess.getTransitionReactionAccess().getTriggerReactionTriggerParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionReaction__EffectAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionReactionAccess().getEffectReactionEffectParserRuleCall_2_1_0()); }
	ruleReactionEffect{ after(grammarAccess.getTransitionReactionAccess().getEffectReactionEffectParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionReaction__PropertiesAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionReactionAccess().getPropertiesReactionPropertiesParserRuleCall_3_1_0()); }
	ruleReactionProperties{ after(grammarAccess.getTransitionReactionAccess().getPropertiesReactionPropertiesParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReactionTrigger__TriggersAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReactionTriggerAccess().getTriggersEventSpecParserRuleCall_1_0_0()); }
	ruleEventSpec{ after(grammarAccess.getReactionTriggerAccess().getTriggersEventSpecParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReactionTrigger__TriggersAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReactionTriggerAccess().getTriggersEventSpecParserRuleCall_1_1_1_0()); }
	ruleEventSpec{ after(grammarAccess.getReactionTriggerAccess().getTriggersEventSpecParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReactionTrigger__GuardExpressionAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReactionTriggerAccess().getGuardExpressionExpressionParserRuleCall_2_1_0()); }
	ruleExpression{ after(grammarAccess.getReactionTriggerAccess().getGuardExpressionExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReactionEffect__ActionsAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReactionEffectAccess().getActionsStatementParserRuleCall_1_0_0()); }
	ruleStatement{ after(grammarAccess.getReactionEffectAccess().getActionsStatementParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReactionProperties__PropertiesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReactionPropertiesAccess().getPropertiesReactionPropertyParserRuleCall_1_0()); }
	ruleReactionProperty{ after(grammarAccess.getReactionPropertiesAccess().getPropertiesReactionPropertyParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReactionPriority__PriorityAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReactionPriorityAccess().getPriorityINTTerminalRuleCall_0()); }
	RULE_INT{ after(grammarAccess.getReactionPriorityAccess().getPriorityINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EntryPointSpec__EntrypointAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntryPointSpecAccess().getEntrypointEntrypointCrossReference_1_0()); }
(
{ before(grammarAccess.getEntryPointSpecAccess().getEntrypointEntrypointIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getEntryPointSpecAccess().getEntrypointEntrypointIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getEntryPointSpecAccess().getEntrypointEntrypointCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExitPointSpec__ExitpointAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExitPointSpecAccess().getExitpointExitpointCrossReference_0_0()); }
(
{ before(grammarAccess.getExitPointSpecAccess().getExitpointExitpointIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getExitPointSpecAccess().getExitpointExitpointIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getExitPointSpecAccess().getExitpointExitpointCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RegularEventSpec__EventAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegularEventSpecAccess().getEventEventCrossReference_0()); }
(
{ before(grammarAccess.getRegularEventSpecAccess().getEventEventIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getRegularEventSpecAccess().getEventEventIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getRegularEventSpecAccess().getEventEventCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TimeEventSpec__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeEventSpecAccess().getValueINTTerminalRuleCall_1_0()); }
	RULE_INT{ after(grammarAccess.getTimeEventSpecAccess().getValueINTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TimeEventSpec__UnitAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeEventSpecAccess().getUnitTimeUnitEnumRuleCall_2_0()); }
	ruleTimeUnit{ after(grammarAccess.getTimeEventSpecAccess().getUnitTimeUnitEnumRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__VarRefAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getVarRefVariableCrossReference_0_0()); }
(
{ before(grammarAccess.getAssignmentAccess().getVarRefVariableIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getAssignmentAccess().getVarRefVariableIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getAssignmentAccess().getVarRefVariableCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__ExpressionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getExpressionExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getAssignmentAccess().getExpressionExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventRaising__EventAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventRaisingAccess().getEventEventCrossReference_1_0()); }
(
{ before(grammarAccess.getEventRaisingAccess().getEventEventIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getEventRaisingAccess().getEventEventIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getEventRaisingAccess().getEventEventCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventRaising__ValueAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventRaisingAccess().getValueExpressionParserRuleCall_2_1_0()); }
	ruleExpression{ after(grammarAccess.getEventRaisingAccess().getValueExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__RightOperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getRightOperandLogicalAndExpressionParserRuleCall_1_2_0()); }
	ruleLogicalAndExpression{ after(grammarAccess.getLogicalOrExpressionAccess().getRightOperandLogicalAndExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__RightOperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getRightOperandLogicalNotExpressionParserRuleCall_1_2_0()); }
	ruleLogicalNotExpression{ after(grammarAccess.getLogicalAndExpressionAccess().getRightOperandLogicalNotExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalNotExpression__OperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalNotExpressionAccess().getOperandLogicalRelationExpressionParserRuleCall_1_2_0()); }
	ruleLogicalRelationExpression{ after(grammarAccess.getLogicalNotExpressionAccess().getOperandLogicalRelationExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalRelationExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalRelationExpressionAccess().getOperatorRelationalOperatorEnumRuleCall_1_1_0()); }
	ruleRelationalOperator{ after(grammarAccess.getLogicalRelationExpressionAccess().getOperatorRelationalOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalRelationExpression__RightOperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalRelationExpressionAccess().getRightOperandNumericalAddSubtractExpressionParserRuleCall_1_2_0()); }
	ruleNumericalAddSubtractExpression{ after(grammarAccess.getLogicalRelationExpressionAccess().getRightOperandNumericalAddSubtractExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalAddSubtractExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalAddSubtractExpressionAccess().getOperatorAdditiveOperatorEnumRuleCall_1_1_0()); }
	ruleAdditiveOperator{ after(grammarAccess.getNumericalAddSubtractExpressionAccess().getOperatorAdditiveOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalAddSubtractExpression__RightOperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalAddSubtractExpressionAccess().getRightOperandNumericalMultiplyDivideExpressionParserRuleCall_1_2_0()); }
	ruleNumericalMultiplyDivideExpression{ after(grammarAccess.getNumericalAddSubtractExpressionAccess().getRightOperandNumericalMultiplyDivideExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalMultiplyDivideExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getOperatorMultiplicativeOperatorEnumRuleCall_1_1_0()); }
	ruleMultiplicativeOperator{ after(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getOperatorMultiplicativeOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalMultiplyDivideExpression__RightOperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getRightOperandNumericalUnaryExpressionParserRuleCall_1_2_0()); }
	ruleNumericalUnaryExpression{ after(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getRightOperandNumericalUnaryExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalUnaryExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalUnaryExpressionAccess().getOperatorUnaryOperatorEnumRuleCall_1_1_0()); }
	ruleUnaryOperator{ after(grammarAccess.getNumericalUnaryExpressionAccess().getOperatorUnaryOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalUnaryExpression__OperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalUnaryExpressionAccess().getOperandPrimaryExpressionParserRuleCall_1_2_0()); }
	rulePrimaryExpression{ after(grammarAccess.getNumericalUnaryExpressionAccess().getOperandPrimaryExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveValueExpression__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveValueExpressionAccess().getValueLiteralParserRuleCall_1_0()); }
	ruleLiteral{ after(grammarAccess.getPrimitiveValueExpressionAccess().getValueLiteralParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ElementReferenceExpression__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementReferenceExpressionAccess().getValueDeclarationCrossReference_1_0()); }
(
{ before(grammarAccess.getElementReferenceExpressionAccess().getValueDeclarationIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getElementReferenceExpressionAccess().getValueDeclarationIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getElementReferenceExpressionAccess().getValueDeclarationCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperationCall__OperationAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationCallAccess().getOperationOperationCrossReference_1_0()); }
(
{ before(grammarAccess.getOperationCallAccess().getOperationOperationIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getOperationCallAccess().getOperationOperationIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getOperationCallAccess().getOperationOperationCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperationCall__ArgsAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationCallAccess().getArgsExpressionParserRuleCall_3_0_0()); }
	ruleExpression{ after(grammarAccess.getOperationCallAccess().getArgsExpressionParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperationCall__ArgsAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationCallAccess().getArgsExpressionParserRuleCall_3_1_1_0()); }
	ruleExpression{ after(grammarAccess.getOperationCallAccess().getArgsExpressionParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_BOOL : ('true'|'false');

RULE_FLOAT : ('-'|'+')? RULE_INT '.' RULE_INT ('e' ('-'|'+') RULE_INT)? ('f'|'F'|'d'|'D')?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


