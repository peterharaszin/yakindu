/*
* generated by Xtext
*/
grammar InternalSText;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.yakindu.sct.model.stext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.yakindu.sct.model.stext.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.yakindu.sct.model.stext.services.STextGrammarAccess;

}

@parser::members {

 	private STextGrammarAccess grammarAccess;
 	
    public InternalSTextParser(TokenStream input, STextGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Root";	
   	}
   	
   	@Override
   	protected STextGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleRoot
entryRuleRoot returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRootRule()); }
	 iv_ruleRoot=ruleRoot 
	 { $current=$iv_ruleRoot.current; } 
	 EOF 
;

// Rule Root
ruleRoot returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getRootAccess().getRootsDefRootParserRuleCall_0()); 
	    }
		lv_roots_0_0=ruleDefRoot		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRootRule());
	        }
       		add(
       			$current, 
       			"roots",
        		lv_roots_0_0, 
        		"DefRoot");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleDefRoot
entryRuleDefRoot returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefRootRule()); }
	 iv_ruleDefRoot=ruleDefRoot 
	 { $current=$iv_ruleDefRoot.current; } 
	 EOF 
;

// Rule DefRoot
ruleDefRoot returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDefRootAccess().getStatechartRootParserRuleCall_0()); 
    }
    this_StatechartRoot_0=ruleStatechartRoot
    { 
        $current = $this_StatechartRoot_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDefRootAccess().getStateRootParserRuleCall_1()); 
    }
    this_StateRoot_1=ruleStateRoot
    { 
        $current = $this_StateRoot_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDefRootAccess().getTransitionRootParserRuleCall_2()); 
    }
    this_TransitionRoot_2=ruleTransitionRoot
    { 
        $current = $this_TransitionRoot_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleStatechartRoot
entryRuleStatechartRoot returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatechartRootRule()); }
	 iv_ruleStatechartRoot=ruleStatechartRoot 
	 { $current=$iv_ruleStatechartRoot.current; } 
	 EOF 
;

// Rule StatechartRoot
ruleStatechartRoot returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@@statechart@@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStatechartRootAccess().getStatechartKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatechartRootAccess().getDefStatechartDefinitionParserRuleCall_1_0()); 
	    }
		lv_def_1_0=ruleStatechartDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatechartRootRule());
	        }
       		set(
       			$current, 
       			"def",
        		lv_def_1_0, 
        		"StatechartDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleStateRoot
entryRuleStateRoot returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateRootRule()); }
	 iv_ruleStateRoot=ruleStateRoot 
	 { $current=$iv_ruleStateRoot.current; } 
	 EOF 
;

// Rule StateRoot
ruleStateRoot returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@@state@@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStateRootAccess().getStateKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStateRootAccess().getDefStateDeclarationParserRuleCall_1_0()); 
	    }
		lv_def_1_0=ruleStateDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateRootRule());
	        }
       		set(
       			$current, 
       			"def",
        		lv_def_1_0, 
        		"StateDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTransitionRoot
entryRuleTransitionRoot returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransitionRootRule()); }
	 iv_ruleTransitionRoot=ruleTransitionRoot 
	 { $current=$iv_ruleTransitionRoot.current; } 
	 EOF 
;

// Rule TransitionRoot
ruleTransitionRoot returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@@transition@@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTransitionRootAccess().getTransitionKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionRootAccess().getDefTransitionStatementParserRuleCall_1_0()); 
	    }
		lv_def_1_0=ruleTransitionStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRootRule());
	        }
       		set(
       			$current, 
       			"def",
        		lv_def_1_0, 
        		"TransitionStatement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleStatechartDefinition
entryRuleStatechartDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatechartDefinitionRule()); }
	 iv_ruleStatechartDefinition=ruleStatechartDefinition 
	 { $current=$iv_ruleStatechartDefinition.current; } 
	 EOF 
;

// Rule StatechartDefinition
ruleStatechartDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStatechartDefinitionAccess().getStatechartDefinitionAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStatechartDefinitionAccess().getDefinitionScopesStatechartScopeParserRuleCall_1_0()); 
	    }
		lv_definitionScopes_1_0=ruleStatechartScope		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatechartDefinitionRule());
	        }
       		add(
       			$current, 
       			"definitionScopes",
        		lv_definitionScopes_1_0, 
        		"StatechartScope");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleStateDeclaration
entryRuleStateDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateDeclarationRule()); }
	 iv_ruleStateDeclaration=ruleStateDeclaration 
	 { $current=$iv_ruleStateDeclaration.current; } 
	 EOF 
;

// Rule StateDeclaration
ruleStateDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getStateDeclarationAccess().getScopeSimpleScopeParserRuleCall_0()); 
	    }
		lv_scope_0_0=ruleSimpleScope		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateDeclarationRule());
	        }
       		set(
       			$current, 
       			"scope",
        		lv_scope_0_0, 
        		"SimpleScope");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleTransitionStatement
entryRuleTransitionStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransitionStatementRule()); }
	 iv_ruleTransitionStatement=ruleTransitionStatement 
	 { $current=$iv_ruleTransitionStatement.current; } 
	 EOF 
;

// Rule TransitionStatement
ruleTransitionStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getTransitionStatementAccess().getTransitionReactionParserRuleCall()); 
    }
    this_TransitionReaction_0=ruleTransitionReaction
    { 
        $current = $this_TransitionReaction_0.current; 
        afterParserOrEnumRuleCall();
    }

;







// Entry rule entryRuleSimpleScope
entryRuleSimpleScope returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleScopeRule()); }
	 iv_ruleSimpleScope=ruleSimpleScope 
	 { $current=$iv_ruleSimpleScope.current; } 
	 EOF 
;

// Rule SimpleScope
ruleSimpleScope returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSimpleScopeAccess().getSimpleScopeAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleScopeAccess().getDeclarationsDeclarationParserRuleCall_1_0()); 
	    }
		lv_declarations_1_0=ruleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleScopeRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_1_0, 
        		"Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleStatechartScope
entryRuleStatechartScope returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatechartScopeRule()); }
	 iv_ruleStatechartScope=ruleStatechartScope 
	 { $current=$iv_ruleStatechartScope.current; } 
	 EOF 
;

// Rule StatechartScope
ruleStatechartScope returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStatechartScopeAccess().getInterfaceScopeParserRuleCall_0()); 
    }
    this_InterfaceScope_0=ruleInterfaceScope
    { 
        $current = $this_InterfaceScope_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatechartScopeAccess().getInternalScopeParserRuleCall_1()); 
    }
    this_InternalScope_1=ruleInternalScope
    { 
        $current = $this_InternalScope_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleInterfaceScope
entryRuleInterfaceScope returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterfaceScopeRule()); }
	 iv_ruleInterfaceScope=ruleInterfaceScope 
	 { $current=$iv_ruleInterfaceScope.current; } 
	 EOF 
;

// Rule InterfaceScope
ruleInterfaceScope returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getInterfaceScopeAccess().getInterfaceScopeAction_0(),
            $current);
    }
)	otherlv_1='interface' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInterfaceScopeAccess().getInterfaceKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getInterfaceScopeAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInterfaceScopeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)?	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getInterfaceScopeAccess().getColonKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceScopeAccess().getDeclarationsDeclarationParserRuleCall_4_0()); 
	    }
		lv_declarations_4_0=ruleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceScopeRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_4_0, 
        		"Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleInternalScope
entryRuleInternalScope returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInternalScopeRule()); }
	 iv_ruleInternalScope=ruleInternalScope 
	 { $current=$iv_ruleInternalScope.current; } 
	 EOF 
;

// Rule InternalScope
ruleInternalScope returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getInternalScopeAccess().getInternalScopeAction_0(),
            $current);
    }
)	otherlv_1='internal' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInternalScopeAccess().getInternalKeyword_1());
    }
	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInternalScopeAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInternalScopeAccess().getDeclarationsDeclarationParserRuleCall_3_0()); 
	    }
		lv_declarations_3_0=ruleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInternalScopeRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_3_0, 
        		"Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleDeclaration
entryRuleDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclarationRule()); }
	 iv_ruleDeclaration=ruleDeclaration 
	 { $current=$iv_ruleDeclaration.current; } 
	 EOF 
;

// Rule Declaration
ruleDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getEventDefinitionParserRuleCall_0()); 
    }
    this_EventDefinition_0=ruleEventDefinition
    { 
        $current = $this_EventDefinition_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getVariableDefinitionParserRuleCall_1()); 
    }
    this_VariableDefinition_1=ruleVariableDefinition
    { 
        $current = $this_VariableDefinition_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getClockParserRuleCall_2()); 
    }
    this_Clock_2=ruleClock
    { 
        $current = $this_Clock_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getOperationParserRuleCall_3()); 
    }
    this_Operation_3=ruleOperation
    { 
        $current = $this_Operation_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getLocalReactionParserRuleCall_4()); 
    }
    this_LocalReaction_4=ruleLocalReaction
    { 
        $current = $this_LocalReaction_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getEntrypointParserRuleCall_5()); 
    }
    this_Entrypoint_5=ruleEntrypoint
    { 
        $current = $this_Entrypoint_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getExitpointParserRuleCall_6()); 
    }
    this_Exitpoint_6=ruleExitpoint
    { 
        $current = $this_Exitpoint_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleEventDefinition
entryRuleEventDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEventDefinitionRule()); }
	 iv_ruleEventDefinition=ruleEventDefinition 
	 { $current=$iv_ruleEventDefinition.current; } 
	 EOF 
;

// Rule EventDefinition
ruleEventDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getEventDefinitionAccess().getEventDefinitionAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEventDefinitionAccess().getDirectionDirectionEnumRuleCall_1_0()); 
	    }
		lv_direction_1_0=ruleDirection		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventDefinitionRule());
	        }
       		set(
       			$current, 
       			"direction",
        		lv_direction_1_0, 
        		"Direction");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_2='event' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEventDefinitionAccess().getEventKeyword_2());
    }
(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getEventDefinitionAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEventDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)(	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getEventDefinitionAccess().getColonKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEventDefinitionAccess().getTypeTypeEnumRuleCall_4_1_0()); 
	    }
		lv_type_5_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventDefinitionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_5_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getEventDefinitionAccess().getDerivationEventDerivationParserRuleCall_5_0()); 
	    }
		lv_derivation_6_0=ruleEventDerivation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventDefinitionRule());
	        }
       		set(
       			$current, 
       			"derivation",
        		lv_derivation_6_0, 
        		"EventDerivation");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleEventDerivation
entryRuleEventDerivation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEventDerivationRule()); }
	 iv_ruleEventDerivation=ruleEventDerivation 
	 { $current=$iv_ruleEventDerivation.current; } 
	 EOF 
;

// Rule EventDerivation
ruleEventDerivation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='=' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEventDerivationAccess().getEqualsSignKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEventDerivationAccess().getConditionExpressionParserRuleCall_1_0()); 
	    }
		lv_condition_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventDerivationRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEventDerivationAccess().getColonKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEventDerivationAccess().getValueExpressionParserRuleCall_2_1_0()); 
	    }
		lv_value_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventDerivationRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleVariableDefinition
entryRuleVariableDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableDefinitionRule()); }
	 iv_ruleVariableDefinition=ruleVariableDefinition 
	 { $current=$iv_ruleVariableDefinition.current; } 
	 EOF 
;

// Rule VariableDefinition
ruleVariableDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getVariableDefinitionAccess().getVariableDefinitionAction_0(),
            $current);
    }
)	otherlv_1='var' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVariableDefinitionAccess().getVarKeyword_1());
    }
(

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getVariableDefinitionAccess().getUnorderedGroup_2());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getVariableDefinitionAccess().getUnorderedGroup_2(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getVariableDefinitionAccess().getUnorderedGroup_2(), 0);
	 				}
					({true}?=>(
(
		lv_readonly_3_0=	'readonly' 
    {
        newLeafNode(lv_readonly_3_0, grammarAccess.getVariableDefinitionAccess().getReadonlyReadonlyKeyword_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableDefinitionRule());
	        }
       		setWithLastConsumed($current, "readonly", true, "readonly");
	    }

)
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getVariableDefinitionAccess().getUnorderedGroup_2());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getVariableDefinitionAccess().getUnorderedGroup_2(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getVariableDefinitionAccess().getUnorderedGroup_2(), 1);
	 				}
					({true}?=>(
(
		lv_external_4_0=	'external' 
    {
        newLeafNode(lv_external_4_0, grammarAccess.getVariableDefinitionAccess().getExternalExternalKeyword_2_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableDefinitionRule());
	        }
       		setWithLastConsumed($current, "external", true, "external");
	    }

)
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getVariableDefinitionAccess().getUnorderedGroup_2());
	 				}
 				)
			)  

		)*	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getVariableDefinitionAccess().getUnorderedGroup_2());
	}

)(
(
		lv_name_5_0=RULE_ID
		{
			newLeafNode(lv_name_5_0, grammarAccess.getVariableDefinitionAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_5_0, 
        		"ID");
	    }

)
)	otherlv_6=':' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getVariableDefinitionAccess().getColonKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDefinitionAccess().getTypeTypeEnumRuleCall_5_0()); 
	    }
		lv_type_7_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDefinitionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_7_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_8='=' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getVariableDefinitionAccess().getEqualsSignKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDefinitionAccess().getInitialValueLiteralParserRuleCall_6_1_0()); 
	    }
		lv_initialValue_9_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDefinitionRule());
	        }
       		set(
       			$current, 
       			"initialValue",
        		lv_initialValue_9_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleClock
entryRuleClock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClockRule()); }
	 iv_ruleClock=ruleClock 
	 { $current=$iv_ruleClock.current; } 
	 EOF 
;

// Rule Clock
ruleClock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getClockAccess().getClockAction_0(),
            $current);
    }
)	otherlv_1='clock' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getClockAccess().getClockKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getClockAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClockRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleOperation
entryRuleOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperationRule()); }
	 iv_ruleOperation=ruleOperation 
	 { $current=$iv_ruleOperation.current; } 
	 EOF 
;

// Rule Operation
ruleOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getOperationAccess().getOperationAction_0(),
            $current);
    }
)	otherlv_1='operation' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOperationAccess().getOperationKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getOperationAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getOperationAccess().getLeftParenthesisKeyword_3());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getOperationAccess().getParamTypesTypeEnumRuleCall_4_0_0()); 
	    }
		lv_paramTypes_4_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationRule());
	        }
       		add(
       			$current, 
       			"paramTypes",
        		lv_paramTypes_4_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getOperationAccess().getCommaKeyword_4_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOperationAccess().getParamTypesTypeEnumRuleCall_4_1_1_0()); 
	    }
		lv_paramTypes_6_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationRule());
	        }
       		add(
       			$current, 
       			"paramTypes",
        		lv_paramTypes_6_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getOperationAccess().getRightParenthesisKeyword_5());
    }
(	otherlv_8=':' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getOperationAccess().getColonKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOperationAccess().getTypeTypeEnumRuleCall_6_1_0()); 
	    }
		lv_type_9_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_9_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleEntrypoint
entryRuleEntrypoint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEntrypointRule()); }
	 iv_ruleEntrypoint=ruleEntrypoint 
	 { $current=$iv_ruleEntrypoint.current; } 
	 EOF 
;

// Rule Entrypoint
ruleEntrypoint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getEntrypointAccess().getEntrypointAction_0(),
            $current);
    }
)	otherlv_1='entrypoint' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEntrypointAccess().getEntrypointKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getEntrypointAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEntrypointRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleExitpoint
entryRuleExitpoint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExitpointRule()); }
	 iv_ruleExitpoint=ruleExitpoint 
	 { $current=$iv_ruleExitpoint.current; } 
	 EOF 
;

// Rule Exitpoint
ruleExitpoint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getExitpointAccess().getExitpointAction_0(),
            $current);
    }
)	otherlv_1='exitpoint' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExitpointAccess().getExitpointKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getExitpointAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExitpointRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
))
;







// Entry rule entryRuleLocalReaction
entryRuleLocalReaction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocalReactionRule()); }
	 iv_ruleLocalReaction=ruleLocalReaction 
	 { $current=$iv_ruleLocalReaction.current; } 
	 EOF 
;

// Rule LocalReaction
ruleLocalReaction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLocalReactionAccess().getTriggerReactionTriggerParserRuleCall_0_0()); 
	    }
		lv_trigger_0_0=ruleReactionTrigger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalReactionRule());
	        }
       		set(
       			$current, 
       			"trigger",
        		lv_trigger_0_0, 
        		"ReactionTrigger");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='/' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLocalReactionAccess().getSolidusKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalReactionAccess().getEffectReactionEffectParserRuleCall_1_1_0()); 
	    }
		lv_effect_2_0=ruleReactionEffect		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalReactionRule());
	        }
       		set(
       			$current, 
       			"effect",
        		lv_effect_2_0, 
        		"ReactionEffect");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_3='#' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLocalReactionAccess().getNumberSignKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalReactionAccess().getPropertiesReactionPropertiesParserRuleCall_2_1_0()); 
	    }
		lv_properties_4_0=ruleReactionProperties		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalReactionRule());
	        }
       		set(
       			$current, 
       			"properties",
        		lv_properties_4_0, 
        		"ReactionProperties");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleTransitionReaction
entryRuleTransitionReaction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransitionReactionRule()); }
	 iv_ruleTransitionReaction=ruleTransitionReaction 
	 { $current=$iv_ruleTransitionReaction.current; } 
	 EOF 
;

// Rule TransitionReaction
ruleTransitionReaction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTransitionReactionAccess().getTransitionReactionAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionReactionAccess().getTriggerReactionTriggerParserRuleCall_1_0()); 
	    }
		lv_trigger_1_0=ruleReactionTrigger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionReactionRule());
	        }
       		set(
       			$current, 
       			"trigger",
        		lv_trigger_1_0, 
        		"ReactionTrigger");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_2='/' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTransitionReactionAccess().getSolidusKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionReactionAccess().getEffectReactionEffectParserRuleCall_2_1_0()); 
	    }
		lv_effect_3_0=ruleReactionEffect		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionReactionRule());
	        }
       		set(
       			$current, 
       			"effect",
        		lv_effect_3_0, 
        		"ReactionEffect");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_4='#' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTransitionReactionAccess().getNumberSignKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionReactionAccess().getPropertiesReactionPropertiesParserRuleCall_3_1_0()); 
	    }
		lv_properties_5_0=ruleReactionProperties		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionReactionRule());
	        }
       		set(
       			$current, 
       			"properties",
        		lv_properties_5_0, 
        		"ReactionProperties");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleReactionTrigger
entryRuleReactionTrigger returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReactionTriggerRule()); }
	 iv_ruleReactionTrigger=ruleReactionTrigger 
	 { $current=$iv_ruleReactionTrigger.current; } 
	 EOF 
;

// Rule ReactionTrigger
ruleReactionTrigger returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getReactionTriggerAccess().getReactionTriggerAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getReactionTriggerAccess().getTriggersEventSpecParserRuleCall_1_0_0()); 
	    }
		lv_triggers_1_0=ruleEventSpec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReactionTriggerRule());
	        }
       		add(
       			$current, 
       			"triggers",
        		lv_triggers_1_0, 
        		"EventSpec");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getReactionTriggerAccess().getCommaKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReactionTriggerAccess().getTriggersEventSpecParserRuleCall_1_1_1_0()); 
	    }
		lv_triggers_3_0=ruleEventSpec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReactionTriggerRule());
	        }
       		add(
       			$current, 
       			"triggers",
        		lv_triggers_3_0, 
        		"EventSpec");
	        afterParserOrEnumRuleCall();
	    }

)
))*)(	otherlv_4='[' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getReactionTriggerAccess().getLeftSquareBracketKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReactionTriggerAccess().getGuardExpressionExpressionParserRuleCall_2_1_0()); 
	    }
		lv_guardExpression_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReactionTriggerRule());
	        }
       		set(
       			$current, 
       			"guardExpression",
        		lv_guardExpression_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=']' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getReactionTriggerAccess().getRightSquareBracketKeyword_2_2());
    }
)?)
;





// Entry rule entryRuleReactionEffect
entryRuleReactionEffect returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReactionEffectRule()); }
	 iv_ruleReactionEffect=ruleReactionEffect 
	 { $current=$iv_ruleReactionEffect.current; } 
	 EOF 
;

// Rule ReactionEffect
ruleReactionEffect returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getReactionEffectAccess().getReactionEffectAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getReactionEffectAccess().getActionsStatementParserRuleCall_1_0_0()); 
	    }
		lv_actions_1_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReactionEffectRule());
	        }
       		add(
       			$current, 
       			"actions",
        		lv_actions_1_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getReactionEffectAccess().getSemicolonKeyword_1_1());
    }
)+)
;





// Entry rule entryRuleReactionProperties
entryRuleReactionProperties returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReactionPropertiesRule()); }
	 iv_ruleReactionProperties=ruleReactionProperties 
	 { $current=$iv_ruleReactionProperties.current; } 
	 EOF 
;

// Rule ReactionProperties
ruleReactionProperties returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getReactionPropertiesAccess().getReactionPropertiesAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getReactionPropertiesAccess().getPropertiesReactionPropertyParserRuleCall_1_0()); 
	    }
		lv_properties_1_0=ruleReactionProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReactionPropertiesRule());
	        }
       		add(
       			$current, 
       			"properties",
        		lv_properties_1_0, 
        		"ReactionProperty");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleReactionProperty
entryRuleReactionProperty returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReactionPropertyRule()); }
	 iv_ruleReactionProperty=ruleReactionProperty 
	 { $current=$iv_ruleReactionProperty.current; } 
	 EOF 
;

// Rule ReactionProperty
ruleReactionProperty returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getReactionPropertyAccess().getReactionPriorityParserRuleCall_0()); 
    }
    this_ReactionPriority_0=ruleReactionPriority
    { 
        $current = $this_ReactionPriority_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getReactionPropertyAccess().getEntryPointSpecParserRuleCall_1()); 
    }
    this_EntryPointSpec_1=ruleEntryPointSpec
    { 
        $current = $this_EntryPointSpec_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getReactionPropertyAccess().getExitPointSpecParserRuleCall_2()); 
    }
    this_ExitPointSpec_2=ruleExitPointSpec
    { 
        $current = $this_ExitPointSpec_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleReactionPriority
entryRuleReactionPriority returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReactionPriorityRule()); }
	 iv_ruleReactionPriority=ruleReactionPriority 
	 { $current=$iv_ruleReactionPriority.current; } 
	 EOF 
;

// Rule ReactionPriority
ruleReactionPriority returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_priority_0_0=RULE_INT
		{
			newLeafNode(lv_priority_0_0, grammarAccess.getReactionPriorityAccess().getPriorityINTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getReactionPriorityRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"priority",
        		lv_priority_0_0, 
        		"INT");
	    }

)
)
;





// Entry rule entryRuleEntryPointSpec
entryRuleEntryPointSpec returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEntryPointSpecRule()); }
	 iv_ruleEntryPointSpec=ruleEntryPointSpec 
	 { $current=$iv_ruleEntryPointSpec.current; } 
	 EOF 
;

// Rule EntryPointSpec
ruleEntryPointSpec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='>' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEntryPointSpecAccess().getGreaterThanSignKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEntryPointSpecRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getEntryPointSpecAccess().getEntrypointEntrypointCrossReference_1_0()); 
	}

)
))
;





// Entry rule entryRuleExitPointSpec
entryRuleExitPointSpec returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExitPointSpecRule()); }
	 iv_ruleExitPointSpec=ruleExitPointSpec 
	 { $current=$iv_ruleExitPointSpec.current; } 
	 EOF 
;

// Rule ExitPointSpec
ruleExitPointSpec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getExitPointSpecRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getExitPointSpecAccess().getExitpointExitpointCrossReference_0_0()); 
	}

)
)	otherlv_1='>' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExitPointSpecAccess().getGreaterThanSignKeyword_1());
    }
)
;





// Entry rule entryRuleEventSpec
entryRuleEventSpec returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEventSpecRule()); }
	 iv_ruleEventSpec=ruleEventSpec 
	 { $current=$iv_ruleEventSpec.current; } 
	 EOF 
;

// Rule EventSpec
ruleEventSpec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEventSpecAccess().getRegularEventSpecParserRuleCall_0()); 
    }
    this_RegularEventSpec_0=ruleRegularEventSpec
    { 
        $current = $this_RegularEventSpec_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getEventSpecAccess().getTimeEventSpecParserRuleCall_1()); 
    }
    this_TimeEventSpec_1=ruleTimeEventSpec
    { 
        $current = $this_TimeEventSpec_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getEventSpecAccess().getBuiltinEventSpecParserRuleCall_2()); 
    }
    this_BuiltinEventSpec_2=ruleBuiltinEventSpec
    { 
        $current = $this_BuiltinEventSpec_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleRegularEventSpec
entryRuleRegularEventSpec returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRegularEventSpecRule()); }
	 iv_ruleRegularEventSpec=ruleRegularEventSpec 
	 { $current=$iv_ruleRegularEventSpec.current; } 
	 EOF 
;

// Rule RegularEventSpec
ruleRegularEventSpec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRegularEventSpecRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getRegularEventSpecAccess().getEventEventCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleTimeEventSpec
entryRuleTimeEventSpec returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTimeEventSpecRule()); }
	 iv_ruleTimeEventSpec=ruleTimeEventSpec 
	 { $current=$iv_ruleTimeEventSpec.current; } 
	 EOF 
;

// Rule TimeEventSpec
ruleTimeEventSpec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='after' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTimeEventSpecAccess().getAfterKeyword_0());
    }
(
(
		lv_value_1_0=RULE_INT
		{
			newLeafNode(lv_value_1_0, grammarAccess.getTimeEventSpecAccess().getValueINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTimeEventSpecRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"INT");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTimeEventSpecAccess().getUnitTimeUnitEnumRuleCall_2_0()); 
	    }
		lv_unit_2_0=ruleTimeUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimeEventSpecRule());
	        }
       		set(
       			$current, 
       			"unit",
        		lv_unit_2_0, 
        		"TimeUnit");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleBuiltinEventSpec
entryRuleBuiltinEventSpec returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBuiltinEventSpecRule()); }
	 iv_ruleBuiltinEventSpec=ruleBuiltinEventSpec 
	 { $current=$iv_ruleBuiltinEventSpec.current; } 
	 EOF 
;

// Rule BuiltinEventSpec
ruleBuiltinEventSpec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBuiltinEventSpecAccess().getEntryEventParserRuleCall_0()); 
    }
    this_EntryEvent_0=ruleEntryEvent
    { 
        $current = $this_EntryEvent_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuiltinEventSpecAccess().getExitEventParserRuleCall_1()); 
    }
    this_ExitEvent_1=ruleExitEvent
    { 
        $current = $this_ExitEvent_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuiltinEventSpecAccess().getOnCycleEventParserRuleCall_2()); 
    }
    this_OnCycleEvent_2=ruleOnCycleEvent
    { 
        $current = $this_OnCycleEvent_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuiltinEventSpecAccess().getAlwaysEventParserRuleCall_3()); 
    }
    this_AlwaysEvent_3=ruleAlwaysEvent
    { 
        $current = $this_AlwaysEvent_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleEntryEvent
entryRuleEntryEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEntryEventRule()); }
	 iv_ruleEntryEvent=ruleEntryEvent 
	 { $current=$iv_ruleEntryEvent.current; } 
	 EOF 
;

// Rule EntryEvent
ruleEntryEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getEntryEventAccess().getEntryEventAction_0(),
            $current);
    }
)	otherlv_1='entry' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEntryEventAccess().getEntryKeyword_1());
    }
)
;





// Entry rule entryRuleExitEvent
entryRuleExitEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExitEventRule()); }
	 iv_ruleExitEvent=ruleExitEvent 
	 { $current=$iv_ruleExitEvent.current; } 
	 EOF 
;

// Rule ExitEvent
ruleExitEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getExitEventAccess().getExitEventAction_0(),
            $current);
    }
)	otherlv_1='exit' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExitEventAccess().getExitKeyword_1());
    }
)
;





// Entry rule entryRuleOnCycleEvent
entryRuleOnCycleEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOnCycleEventRule()); }
	 iv_ruleOnCycleEvent=ruleOnCycleEvent 
	 { $current=$iv_ruleOnCycleEvent.current; } 
	 EOF 
;

// Rule OnCycleEvent
ruleOnCycleEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getOnCycleEventAccess().getOnCycleEventAction_0(),
            $current);
    }
)	otherlv_1='oncycle' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOnCycleEventAccess().getOncycleKeyword_1());
    }
)
;





// Entry rule entryRuleAlwaysEvent
entryRuleAlwaysEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAlwaysEventRule()); }
	 iv_ruleAlwaysEvent=ruleAlwaysEvent 
	 { $current=$iv_ruleAlwaysEvent.current; } 
	 EOF 
;

// Rule AlwaysEvent
ruleAlwaysEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAlwaysEventAccess().getAlwaysEventAction_0(),
            $current);
    }
)	otherlv_1='always' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAlwaysEventAccess().getAlwaysKeyword_1());
    }
)
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getAssignmentParserRuleCall_0()); 
    }
    this_Assignment_0=ruleAssignment
    { 
        $current = $this_Assignment_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getEventRaisingParserRuleCall_1()); 
    }
    this_EventRaising_1=ruleEventRaising
    { 
        $current = $this_EventRaising_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getOperationCallParserRuleCall_2()); 
    }
    this_OperationCall_2=ruleOperationCall
    { 
        $current = $this_OperationCall_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	 iv_ruleAssignment=ruleAssignment 
	 { $current=$iv_ruleAssignment.current; } 
	 EOF 
;

// Rule Assignment
ruleAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAssignmentRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getAssignmentAccess().getVarRefVariableCrossReference_0_0()); 
	}

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getExpressionExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleEventRaising
entryRuleEventRaising returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEventRaisingRule()); }
	 iv_ruleEventRaising=ruleEventRaising 
	 { $current=$iv_ruleEventRaising.current; } 
	 EOF 
;

// Rule EventRaising
ruleEventRaising returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='raise' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEventRaisingAccess().getRaiseKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEventRaisingRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getEventRaisingAccess().getEventEventCrossReference_1_0()); 
	}

)
)(	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEventRaisingAccess().getColonKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEventRaisingAccess().getValueExpressionParserRuleCall_2_1_0()); 
	    }
		lv_value_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventRaisingRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getLogicalOrExpressionParserRuleCall()); 
    }
    this_LogicalOrExpression_0=ruleLogicalOrExpression
    { 
        $current = $this_LogicalOrExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleLogicalOrExpression
entryRuleLogicalOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalOrExpressionRule()); }
	 iv_ruleLogicalOrExpression=ruleLogicalOrExpression 
	 { $current=$iv_ruleLogicalOrExpression.current; } 
	 EOF 
;

// Rule LogicalOrExpression
ruleLogicalOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getLogicalAndExpressionParserRuleCall_0()); 
    }
    this_LogicalAndExpression_0=ruleLogicalAndExpression
    { 
        $current = $this_LogicalAndExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getLogicalOrExpressionAccess().getLogicalOrExpressionLeftOperandAction_1_0(),
            $current);
    }
)	otherlv_2='||' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLogicalOrExpressionAccess().getVerticalLineVerticalLineKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getRightOperandLogicalAndExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleLogicalAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalOrExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"LogicalAndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleLogicalAndExpression
entryRuleLogicalAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalAndExpressionRule()); }
	 iv_ruleLogicalAndExpression=ruleLogicalAndExpression 
	 { $current=$iv_ruleLogicalAndExpression.current; } 
	 EOF 
;

// Rule LogicalAndExpression
ruleLogicalAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getLogicalNotExpressionParserRuleCall_0()); 
    }
    this_LogicalNotExpression_0=ruleLogicalNotExpression
    { 
        $current = $this_LogicalNotExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getLogicalAndExpressionAccess().getLogicalAndExpressionLeftOperandAction_1_0(),
            $current);
    }
)	otherlv_2='&&' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLogicalAndExpressionAccess().getAmpersandAmpersandKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getRightOperandLogicalNotExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleLogicalNotExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalAndExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"LogicalNotExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleLogicalNotExpression
entryRuleLogicalNotExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalNotExpressionRule()); }
	 iv_ruleLogicalNotExpression=ruleLogicalNotExpression 
	 { $current=$iv_ruleLogicalNotExpression.current; } 
	 EOF 
;

// Rule LogicalNotExpression
ruleLogicalNotExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLogicalNotExpressionAccess().getLogicalRelationExpressionParserRuleCall_0()); 
    }
    this_LogicalRelationExpression_0=ruleLogicalRelationExpression
    { 
        $current = $this_LogicalRelationExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLogicalNotExpressionAccess().getLogicalNotExpressionAction_1_0(),
            $current);
    }
)	otherlv_2='!' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLogicalNotExpressionAccess().getExclamationMarkKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalNotExpressionAccess().getOperandLogicalRelationExpressionParserRuleCall_1_2_0()); 
	    }
		lv_operand_3_0=ruleLogicalRelationExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalNotExpressionRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_3_0, 
        		"LogicalRelationExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleLogicalRelationExpression
entryRuleLogicalRelationExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalRelationExpressionRule()); }
	 iv_ruleLogicalRelationExpression=ruleLogicalRelationExpression 
	 { $current=$iv_ruleLogicalRelationExpression.current; } 
	 EOF 
;

// Rule LogicalRelationExpression
ruleLogicalRelationExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLogicalRelationExpressionAccess().getNumericalAddSubtractExpressionParserRuleCall_0()); 
    }
    this_NumericalAddSubtractExpression_0=ruleNumericalAddSubtractExpression
    { 
        $current = $this_NumericalAddSubtractExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getLogicalRelationExpressionAccess().getLogicalRelationExpressionLeftOperandAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalRelationExpressionAccess().getOperatorRelationalOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleRelationalOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalRelationExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"RelationalOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalRelationExpressionAccess().getRightOperandNumericalAddSubtractExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleNumericalAddSubtractExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalRelationExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"NumericalAddSubtractExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleNumericalAddSubtractExpression
entryRuleNumericalAddSubtractExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumericalAddSubtractExpressionRule()); }
	 iv_ruleNumericalAddSubtractExpression=ruleNumericalAddSubtractExpression 
	 { $current=$iv_ruleNumericalAddSubtractExpression.current; } 
	 EOF 
;

// Rule NumericalAddSubtractExpression
ruleNumericalAddSubtractExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNumericalAddSubtractExpressionAccess().getNumericalMultiplyDivideExpressionParserRuleCall_0()); 
    }
    this_NumericalMultiplyDivideExpression_0=ruleNumericalMultiplyDivideExpression
    { 
        $current = $this_NumericalMultiplyDivideExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getNumericalAddSubtractExpressionAccess().getNumericalAddSubtractExpressionLeftOperandAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNumericalAddSubtractExpressionAccess().getOperatorAdditiveOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleAdditiveOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumericalAddSubtractExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"AdditiveOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNumericalAddSubtractExpressionAccess().getRightOperandNumericalMultiplyDivideExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleNumericalMultiplyDivideExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumericalAddSubtractExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"NumericalMultiplyDivideExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleNumericalMultiplyDivideExpression
entryRuleNumericalMultiplyDivideExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumericalMultiplyDivideExpressionRule()); }
	 iv_ruleNumericalMultiplyDivideExpression=ruleNumericalMultiplyDivideExpression 
	 { $current=$iv_ruleNumericalMultiplyDivideExpression.current; } 
	 EOF 
;

// Rule NumericalMultiplyDivideExpression
ruleNumericalMultiplyDivideExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getNumericalUnaryExpressionParserRuleCall_0()); 
    }
    this_NumericalUnaryExpression_0=ruleNumericalUnaryExpression
    { 
        $current = $this_NumericalUnaryExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getNumericalMultiplyDivideExpressionAccess().getNumericalMultiplyDivideExpressionLeftOperandAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getOperatorMultiplicativeOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleMultiplicativeOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumericalMultiplyDivideExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"MultiplicativeOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getRightOperandNumericalUnaryExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleNumericalUnaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumericalMultiplyDivideExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"NumericalUnaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleNumericalUnaryExpression
entryRuleNumericalUnaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumericalUnaryExpressionRule()); }
	 iv_ruleNumericalUnaryExpression=ruleNumericalUnaryExpression 
	 { $current=$iv_ruleNumericalUnaryExpression.current; } 
	 EOF 
;

// Rule NumericalUnaryExpression
ruleNumericalUnaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNumericalUnaryExpressionAccess().getPrimaryExpressionParserRuleCall_0()); 
    }
    this_PrimaryExpression_0=rulePrimaryExpression
    { 
        $current = $this_PrimaryExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNumericalUnaryExpressionAccess().getNumericalUnaryExpressionAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNumericalUnaryExpressionAccess().getOperatorUnaryOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleUnaryOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumericalUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"UnaryOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNumericalUnaryExpressionAccess().getOperandPrimaryExpressionParserRuleCall_1_2_0()); 
	    }
		lv_operand_3_0=rulePrimaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumericalUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_3_0, 
        		"PrimaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current; } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getValueExpressionParserRuleCall_0()); 
    }
    this_ValueExpression_0=ruleValueExpression
    { 
        $current = $this_ValueExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_1_0());
    }

    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getExpressionParserRuleCall_1_1()); 
    }
    this_Expression_2=ruleExpression
    { 
        $current = $this_Expression_2.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_1_2());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getOperationCallParserRuleCall_2()); 
    }
    this_OperationCall_4=ruleOperationCall
    { 
        $current = $this_OperationCall_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleValueExpression
entryRuleValueExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueExpressionRule()); }
	 iv_ruleValueExpression=ruleValueExpression 
	 { $current=$iv_ruleValueExpression.current; } 
	 EOF 
;

// Rule ValueExpression
ruleValueExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getValueExpressionAccess().getPrimitiveValueExpressionParserRuleCall_0()); 
    }
    this_PrimitiveValueExpression_0=rulePrimitiveValueExpression
    { 
        $current = $this_PrimitiveValueExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueExpressionAccess().getElementReferenceExpressionParserRuleCall_1()); 
    }
    this_ElementReferenceExpression_1=ruleElementReferenceExpression
    { 
        $current = $this_ElementReferenceExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePrimitiveValueExpression
entryRulePrimitiveValueExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimitiveValueExpressionRule()); }
	 iv_rulePrimitiveValueExpression=rulePrimitiveValueExpression 
	 { $current=$iv_rulePrimitiveValueExpression.current; } 
	 EOF 
;

// Rule PrimitiveValueExpression
rulePrimitiveValueExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimitiveValueExpressionAccess().getPrimitiveValueExpressionAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimitiveValueExpressionAccess().getValueLiteralParserRuleCall_1_0()); 
	    }
		lv_value_1_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimitiveValueExpressionRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleElementReferenceExpression
entryRuleElementReferenceExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElementReferenceExpressionRule()); }
	 iv_ruleElementReferenceExpression=ruleElementReferenceExpression 
	 { $current=$iv_ruleElementReferenceExpression.current; } 
	 EOF 
;

// Rule ElementReferenceExpression
ruleElementReferenceExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getElementReferenceExpressionAccess().getElementReferenceExpressionAction_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getElementReferenceExpressionRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getElementReferenceExpressionAccess().getValueDeclarationCrossReference_1_0()); 
	}

)
))
;





// Entry rule entryRuleOperationCall
entryRuleOperationCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperationCallRule()); }
	 iv_ruleOperationCall=ruleOperationCall 
	 { $current=$iv_ruleOperationCall.current; } 
	 EOF 
;

// Rule OperationCall
ruleOperationCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getOperationCallAccess().getOperationCallAction_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperationCallRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getOperationCallAccess().getOperationOperationCrossReference_1_0()); 
	}

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOperationCallAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getOperationCallAccess().getArgsExpressionParserRuleCall_3_0_0()); 
	    }
		lv_args_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationCallRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getOperationCallAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOperationCallAccess().getArgsExpressionParserRuleCall_3_1_1_0()); 
	    }
		lv_args_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationCallRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getOperationCallAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); } 
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current.getText(); }  
	 EOF 
;

// Rule Literal
ruleLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_BOOL_0=RULE_BOOL    {
		$current.merge(this_BOOL_0);
    }

    { 
    newLeafNode(this_BOOL_0, grammarAccess.getLiteralAccess().getBOOLTerminalRuleCall_0()); 
    }

    |    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getLiteralAccess().getINTTerminalRuleCall_1()); 
    }

    |    this_STRING_2=RULE_STRING    {
		$current.merge(this_STRING_2);
    }

    { 
    newLeafNode(this_STRING_2, grammarAccess.getLiteralAccess().getSTRINGTerminalRuleCall_2()); 
    }

    |    this_FLOAT_3=RULE_FLOAT    {
		$current.merge(this_FLOAT_3);
    }

    { 
    newLeafNode(this_FLOAT_3, grammarAccess.getLiteralAccess().getFLOATTerminalRuleCall_3()); 
    }
)
    ;





// Rule Direction
ruleDirection returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='in' 
	{
        $current = grammarAccess.getDirectionAccess().getINEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getDirectionAccess().getINEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='out' 
	{
        $current = grammarAccess.getDirectionAccess().getOUTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getDirectionAccess().getOUTEnumLiteralDeclaration_1()); 
    }
));



// Rule AdditiveOperator
ruleAdditiveOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='+' 
	{
        $current = grammarAccess.getAdditiveOperatorAccess().getPlusEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAdditiveOperatorAccess().getPlusEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='-' 
	{
        $current = grammarAccess.getAdditiveOperatorAccess().getMinusEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getAdditiveOperatorAccess().getMinusEnumLiteralDeclaration_1()); 
    }
));



// Rule MultiplicativeOperator
ruleMultiplicativeOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='*' 
	{
        $current = grammarAccess.getMultiplicativeOperatorAccess().getMulEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getMultiplicativeOperatorAccess().getMulEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='/' 
	{
        $current = grammarAccess.getMultiplicativeOperatorAccess().getDivEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getMultiplicativeOperatorAccess().getDivEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='%' 
	{
        $current = grammarAccess.getMultiplicativeOperatorAccess().getModEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getMultiplicativeOperatorAccess().getModEnumLiteralDeclaration_2()); 
    }
));



// Rule UnaryOperator
ruleUnaryOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='+' 
	{
        $current = grammarAccess.getUnaryOperatorAccess().getPositiveEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getUnaryOperatorAccess().getPositiveEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='-' 
	{
        $current = grammarAccess.getUnaryOperatorAccess().getNegativeEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getUnaryOperatorAccess().getNegativeEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='~' 
	{
        $current = grammarAccess.getUnaryOperatorAccess().getComplementEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getUnaryOperatorAccess().getComplementEnumLiteralDeclaration_2()); 
    }
));



// Rule RelationalOperator
ruleRelationalOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='<' 
	{
        $current = grammarAccess.getRelationalOperatorAccess().getSmallerEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getRelationalOperatorAccess().getSmallerEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='<=' 
	{
        $current = grammarAccess.getRelationalOperatorAccess().getSmallerEqualEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getRelationalOperatorAccess().getSmallerEqualEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='>' 
	{
        $current = grammarAccess.getRelationalOperatorAccess().getGreaterEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getRelationalOperatorAccess().getGreaterEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='>=' 
	{
        $current = grammarAccess.getRelationalOperatorAccess().getGreaterEqualEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getRelationalOperatorAccess().getGreaterEqualEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='==' 
	{
        $current = grammarAccess.getRelationalOperatorAccess().getEqualsEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getRelationalOperatorAccess().getEqualsEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='!=' 
	{
        $current = grammarAccess.getRelationalOperatorAccess().getNotEqualsEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getRelationalOperatorAccess().getNotEqualsEnumLiteralDeclaration_5()); 
    }
));



// Rule TimeUnit
ruleTimeUnit returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='s' 
	{
        $current = grammarAccess.getTimeUnitAccess().getSecondEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getTimeUnitAccess().getSecondEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='ms' 
	{
        $current = grammarAccess.getTimeUnitAccess().getMillisecondEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getTimeUnitAccess().getMillisecondEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='ns' 
	{
        $current = grammarAccess.getTimeUnitAccess().getNanosecondEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getTimeUnitAccess().getNanosecondEnumLiteralDeclaration_2()); 
    }
));



// Rule Type
ruleType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='void' 
	{
        $current = grammarAccess.getTypeAccess().getVoidEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getTypeAccess().getVoidEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='integer' 
	{
        $current = grammarAccess.getTypeAccess().getIntegerEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getTypeAccess().getIntegerEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='real' 
	{
        $current = grammarAccess.getTypeAccess().getRealEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getTypeAccess().getRealEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='boolean' 
	{
        $current = grammarAccess.getTypeAccess().getBooleanEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getTypeAccess().getBooleanEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='string' 
	{
        $current = grammarAccess.getTypeAccess().getStringEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getTypeAccess().getStringEnumLiteralDeclaration_4()); 
    }
));



RULE_BOOL : ('true'|'false');

RULE_FLOAT : ('-'|'+')? RULE_INT '.' RULE_INT ('e' ('-'|'+') RULE_INT)? ('f'|'F'|'d'|'D')?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


