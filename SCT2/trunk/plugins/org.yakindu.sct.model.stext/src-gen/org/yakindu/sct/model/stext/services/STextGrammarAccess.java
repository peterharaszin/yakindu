/*
* generated by Xtext
*/

package org.yakindu.sct.model.stext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class STextGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class RootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Root");
		private final Assignment cRootsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRootsDefRootParserRuleCall_0 = (RuleCall)cRootsAssignment.eContents().get(0);
		
		/// * ---- root rules ----
		//These root rules are not relevant for the grammar integration in the statechart. They just integrate the different start rules consistently 
		//into a single grammar. 
		// * / Root:
		//	roots+=DefRoot*;
		public ParserRule getRule() { return rule; }

		//roots+=DefRoot*
		public Assignment getRootsAssignment() { return cRootsAssignment; }

		//DefRoot
		public RuleCall getRootsDefRootParserRuleCall_0() { return cRootsDefRootParserRuleCall_0; }
	}

	public class DefRootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefRoot");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStatechartRootParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStateRootParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTransitionRootParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//DefRoot:
		//	StatechartRoot | StateRoot | TransitionRoot;
		public ParserRule getRule() { return rule; }

		//StatechartRoot | StateRoot | TransitionRoot
		public Alternatives getAlternatives() { return cAlternatives; }

		//StatechartRoot
		public RuleCall getStatechartRootParserRuleCall_0() { return cStatechartRootParserRuleCall_0; }

		//StateRoot
		public RuleCall getStateRootParserRuleCall_1() { return cStateRootParserRuleCall_1; }

		//TransitionRoot
		public RuleCall getTransitionRootParserRuleCall_2() { return cTransitionRootParserRuleCall_2; }
	}

	public class StatechartRootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StatechartRoot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStatechartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefStatechartDefinitionParserRuleCall_1_0 = (RuleCall)cDefAssignment_1.eContents().get(0);
		
		//StatechartRoot:
		//	"@@statechart@@" def=StatechartDefinition;
		public ParserRule getRule() { return rule; }

		//"@@statechart@@" def=StatechartDefinition
		public Group getGroup() { return cGroup; }

		//"@@statechart@@"
		public Keyword getStatechartKeyword_0() { return cStatechartKeyword_0; }

		//def=StatechartDefinition
		public Assignment getDefAssignment_1() { return cDefAssignment_1; }

		//StatechartDefinition
		public RuleCall getDefStatechartDefinitionParserRuleCall_1_0() { return cDefStatechartDefinitionParserRuleCall_1_0; }
	}

	public class StateRootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateRoot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefStateDeclarationParserRuleCall_1_0 = (RuleCall)cDefAssignment_1.eContents().get(0);
		
		//StateRoot:
		//	"@@state@@" def=StateDeclaration;
		public ParserRule getRule() { return rule; }

		//"@@state@@" def=StateDeclaration
		public Group getGroup() { return cGroup; }

		//"@@state@@"
		public Keyword getStateKeyword_0() { return cStateKeyword_0; }

		//def=StateDeclaration
		public Assignment getDefAssignment_1() { return cDefAssignment_1; }

		//StateDeclaration
		public RuleCall getDefStateDeclarationParserRuleCall_1_0() { return cDefStateDeclarationParserRuleCall_1_0; }
	}

	public class TransitionRootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransitionRoot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefTransitionStatementParserRuleCall_1_0 = (RuleCall)cDefAssignment_1.eContents().get(0);
		
		//TransitionRoot:
		//	"@@transition@@" def=TransitionStatement;
		public ParserRule getRule() { return rule; }

		//"@@transition@@" def=TransitionStatement
		public Group getGroup() { return cGroup; }

		//"@@transition@@"
		public Keyword getTransitionKeyword_0() { return cTransitionKeyword_0; }

		//def=TransitionStatement
		public Assignment getDefAssignment_1() { return cDefAssignment_1; }

		//TransitionStatement
		public RuleCall getDefTransitionStatementParserRuleCall_1_0() { return cDefTransitionStatementParserRuleCall_1_0; }
	}

	public class StatechartDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StatechartDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStatechartDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cNamespaceKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNamespaceAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNamespaceFQNParserRuleCall_1_1_0 = (RuleCall)cNamespaceAssignment_1_1.eContents().get(0);
		private final Assignment cDefinitionScopesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDefinitionScopesStatechartScopeParserRuleCall_2_0 = (RuleCall)cDefinitionScopesAssignment_2.eContents().get(0);
		
		/// * ---- start rules ----
		//Define the starting points used by the statechart integration. These rules hook in the concrete rules of the specific grammar.
		// * / StatechartDefinition:
		//	{StatechartDefinition} ("namespace" namespace=FQN)? definitionScopes+=StatechartScope*;
		public ParserRule getRule() { return rule; }

		//{StatechartDefinition} ("namespace" namespace=FQN)? definitionScopes+=StatechartScope*
		public Group getGroup() { return cGroup; }

		//{StatechartDefinition}
		public Action getStatechartDefinitionAction_0() { return cStatechartDefinitionAction_0; }

		//("namespace" namespace=FQN)?
		public Group getGroup_1() { return cGroup_1; }

		//"namespace"
		public Keyword getNamespaceKeyword_1_0() { return cNamespaceKeyword_1_0; }

		//namespace=FQN
		public Assignment getNamespaceAssignment_1_1() { return cNamespaceAssignment_1_1; }

		//FQN
		public RuleCall getNamespaceFQNParserRuleCall_1_1_0() { return cNamespaceFQNParserRuleCall_1_1_0; }

		//definitionScopes+=StatechartScope*
		public Assignment getDefinitionScopesAssignment_2() { return cDefinitionScopesAssignment_2; }

		//StatechartScope
		public RuleCall getDefinitionScopesStatechartScopeParserRuleCall_2_0() { return cDefinitionScopesStatechartScopeParserRuleCall_2_0; }
	}

	public class StateDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateDeclaration");
		private final Assignment cScopeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cScopeSimpleScopeParserRuleCall_0 = (RuleCall)cScopeAssignment.eContents().get(0);
		
		//StateDeclaration:
		//	scope=SimpleScope;
		public ParserRule getRule() { return rule; }

		//scope=SimpleScope
		public Assignment getScopeAssignment() { return cScopeAssignment; }

		//SimpleScope
		public RuleCall getScopeSimpleScopeParserRuleCall_0() { return cScopeSimpleScopeParserRuleCall_0; }
	}

	public class TransitionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransitionStatement");
		private final RuleCall cTransitionReactionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//TransitionStatement: //	Reaction;
		//	TransitionReaction;
		public ParserRule getRule() { return rule; }

		////	Reaction;
		//TransitionReaction
		public RuleCall getTransitionReactionParserRuleCall() { return cTransitionReactionParserRuleCall; }
	}

	public class ScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Scope");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleScopeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStatechartScopeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// * ---- scope rules ----
		//Defines different kinds of scopes that contain element definitions. Scopes are used for element definitions in statechart, regions, and state 
		// * / Scope returns sct::Scope:
		//	SimpleScope | StatechartScope;
		public ParserRule getRule() { return rule; }

		//SimpleScope | StatechartScope
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleScope
		public RuleCall getSimpleScopeParserRuleCall_0() { return cSimpleScopeParserRuleCall_0; }

		//StatechartScope
		public RuleCall getStatechartScopeParserRuleCall_1() { return cStatechartScopeParserRuleCall_1; }
	}

	public class SimpleScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleScope");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSimpleScopeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDeclarationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_1_0 = (RuleCall)cDeclarationsAssignment_1.eContents().get(0);
		
		//// a SimpleScope is used for states and regions
		//SimpleScope returns sct::Scope:
		//	{SimpleScope} declarations+=Declaration*;
		public ParserRule getRule() { return rule; }

		//{SimpleScope} declarations+=Declaration*
		public Group getGroup() { return cGroup; }

		//{SimpleScope}
		public Action getSimpleScopeAction_0() { return cSimpleScopeAction_0; }

		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_1() { return cDeclarationsAssignment_1; }

		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_1_0() { return cDeclarationsDeclarationParserRuleCall_1_0; }
	}

	public class StatechartScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StatechartScope");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInterfaceScopeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInternalScopeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// defines the poosible scopes for statecharts
		//StatechartScope returns sct::Scope:
		//	InterfaceScope | InternalScope;
		public ParserRule getRule() { return rule; }

		//InterfaceScope | InternalScope
		public Alternatives getAlternatives() { return cAlternatives; }

		//InterfaceScope
		public RuleCall getInterfaceScopeParserRuleCall_0() { return cInterfaceScopeParserRuleCall_0; }

		//InternalScope
		public RuleCall getInternalScopeParserRuleCall_1() { return cInternalScopeParserRuleCall_1; }
	}

	public class InterfaceScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfaceScope");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInterfaceScopeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInterfaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDeclarationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_4_0 = (RuleCall)cDeclarationsAssignment_4.eContents().get(0);
		
		//InterfaceScope returns sct::Scope:
		//	{InterfaceScope} "interface" name=ID? ":" declarations+=Declaration*;
		public ParserRule getRule() { return rule; }

		//{InterfaceScope} "interface" name=ID? ":" declarations+=Declaration*
		public Group getGroup() { return cGroup; }

		//{InterfaceScope}
		public Action getInterfaceScopeAction_0() { return cInterfaceScopeAction_0; }

		//"interface"
		public Keyword getInterfaceKeyword_1() { return cInterfaceKeyword_1; }

		//name=ID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_4() { return cDeclarationsAssignment_4; }

		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_4_0() { return cDeclarationsDeclarationParserRuleCall_4_0; }
	}

	public class InternalScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InternalScope");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInternalScopeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInternalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDeclarationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_3_0 = (RuleCall)cDeclarationsAssignment_3.eContents().get(0);
		
		//InternalScope returns sct::Scope:
		//	{InternalScope} "internal" ":" declarations+=Declaration*;
		public ParserRule getRule() { return rule; }

		//{InternalScope} "internal" ":" declarations+=Declaration*
		public Group getGroup() { return cGroup; }

		//{InternalScope}
		public Action getInternalScopeAction_0() { return cInternalScopeAction_0; }

		//"internal"
		public Keyword getInternalKeyword_1() { return cInternalKeyword_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_3() { return cDeclarationsAssignment_3; }

		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_3_0() { return cDeclarationsDeclarationParserRuleCall_3_0; }
	}

	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEventDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cClockParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOperationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLocalReactionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cEntrypointParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cExitpointParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		/// * ---- declarations ----
		//a definition is a top level element of a definition scope. * / Declaration returns sct::Declaration:
		//	EventDefinition | VariableDefinition | Clock | Operation | LocalReaction | Entrypoint | Exitpoint;
		public ParserRule getRule() { return rule; }

		//EventDefinition | VariableDefinition | Clock | Operation | LocalReaction | Entrypoint | Exitpoint
		public Alternatives getAlternatives() { return cAlternatives; }

		//EventDefinition
		public RuleCall getEventDefinitionParserRuleCall_0() { return cEventDefinitionParserRuleCall_0; }

		//VariableDefinition
		public RuleCall getVariableDefinitionParserRuleCall_1() { return cVariableDefinitionParserRuleCall_1; }

		//Clock
		public RuleCall getClockParserRuleCall_2() { return cClockParserRuleCall_2; }

		//Operation
		public RuleCall getOperationParserRuleCall_3() { return cOperationParserRuleCall_3; }

		//LocalReaction
		public RuleCall getLocalReactionParserRuleCall_4() { return cLocalReactionParserRuleCall_4; }

		//Entrypoint
		public RuleCall getEntrypointParserRuleCall_5() { return cEntrypointParserRuleCall_5; }

		//Exitpoint
		public RuleCall getExitpointParserRuleCall_6() { return cExitpointParserRuleCall_6; }
	}

	public class EventDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEventDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDirectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDirectionDirectionEnumRuleCall_1_0 = (RuleCall)cDirectionAssignment_1.eContents().get(0);
		private final Keyword cEventKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTypeTypeEnumRuleCall_4_1_0 = (RuleCall)cTypeAssignment_4_1.eContents().get(0);
		private final Assignment cDerivationAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDerivationEventDerivationParserRuleCall_5_0 = (RuleCall)cDerivationAssignment_5.eContents().get(0);
		
		//// DataElement: EventDefinition | VariableDefinition;
		/// * ---- event definition ---- * / EventDefinition returns sct::Event:
		//	{EventDefinition} direction=Direction? "event" name=ID (":" type=Type)? derivation=EventDerivation?;
		public ParserRule getRule() { return rule; }

		//{EventDefinition} direction=Direction? "event" name=ID (":" type=Type)? derivation=EventDerivation?
		public Group getGroup() { return cGroup; }

		//{EventDefinition}
		public Action getEventDefinitionAction_0() { return cEventDefinitionAction_0; }

		//direction=Direction?
		public Assignment getDirectionAssignment_1() { return cDirectionAssignment_1; }

		//Direction
		public RuleCall getDirectionDirectionEnumRuleCall_1_0() { return cDirectionDirectionEnumRuleCall_1_0; }

		//"event"
		public Keyword getEventKeyword_2() { return cEventKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//(":" type=Type)?
		public Group getGroup_4() { return cGroup_4; }

		//":"
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }

		//type=Type
		public Assignment getTypeAssignment_4_1() { return cTypeAssignment_4_1; }

		//Type
		public RuleCall getTypeTypeEnumRuleCall_4_1_0() { return cTypeTypeEnumRuleCall_4_1_0; }

		//derivation=EventDerivation?
		public Assignment getDerivationAssignment_5() { return cDerivationAssignment_5; }

		//EventDerivation
		public RuleCall getDerivationEventDerivationParserRuleCall_5_0() { return cDerivationEventDerivationParserRuleCall_5_0; }
	}

	public class EventDerivationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventDerivation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		
		//EventDerivation:
		//	"=" condition=Expression (":" value=Expression)?;
		public ParserRule getRule() { return rule; }

		//"=" condition=Expression (":" value=Expression)?
		public Group getGroup() { return cGroup; }

		//"="
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }

		//condition=Expression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//Expression
		public RuleCall getConditionExpressionParserRuleCall_1_0() { return cConditionExpressionParserRuleCall_1_0; }

		//(":" value=Expression)?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//value=Expression
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_1_0() { return cValueExpressionParserRuleCall_2_1_0; }
	}

	public class VariableDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cReadonlyAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cReadonlyReadonlyKeyword_2_0_0 = (Keyword)cReadonlyAssignment_2_0.eContents().get(0);
		private final Assignment cExternalAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cExternalExternalKeyword_2_1_0 = (Keyword)cExternalAssignment_2_1.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTypeTypeEnumRuleCall_5_0 = (RuleCall)cTypeAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cInitialValueAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cInitialValueLiteralParserRuleCall_6_1_0 = (RuleCall)cInitialValueAssignment_6_1.eContents().get(0);
		
		/// * ---- variable definition ---- * / VariableDefinition returns sct::Variable:
		//	{VariableDefinition} "var" (readonly?="readonly"? & external?="external"?) name=ID ":" type=Type ("="
		//	initialValue=Literal)?;
		public ParserRule getRule() { return rule; }

		//{VariableDefinition} "var" (readonly?="readonly"? & external?="external"?) name=ID ":" type=Type ("="
		//initialValue=Literal)?
		public Group getGroup() { return cGroup; }

		//{VariableDefinition}
		public Action getVariableDefinitionAction_0() { return cVariableDefinitionAction_0; }

		//"var"
		public Keyword getVarKeyword_1() { return cVarKeyword_1; }

		//readonly?="readonly"? & external?="external"?
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }

		//readonly?="readonly"?
		public Assignment getReadonlyAssignment_2_0() { return cReadonlyAssignment_2_0; }

		//"readonly"
		public Keyword getReadonlyReadonlyKeyword_2_0_0() { return cReadonlyReadonlyKeyword_2_0_0; }

		//external?="external"?
		public Assignment getExternalAssignment_2_1() { return cExternalAssignment_2_1; }

		//"external"
		public Keyword getExternalExternalKeyword_2_1_0() { return cExternalExternalKeyword_2_1_0; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//type=Type
		public Assignment getTypeAssignment_5() { return cTypeAssignment_5; }

		//Type
		public RuleCall getTypeTypeEnumRuleCall_5_0() { return cTypeTypeEnumRuleCall_5_0; }

		//("=" initialValue=Literal)?
		public Group getGroup_6() { return cGroup_6; }

		//"="
		public Keyword getEqualsSignKeyword_6_0() { return cEqualsSignKeyword_6_0; }

		//initialValue=Literal
		public Assignment getInitialValueAssignment_6_1() { return cInitialValueAssignment_6_1; }

		//Literal
		public RuleCall getInitialValueLiteralParserRuleCall_6_1_0() { return cInitialValueLiteralParserRuleCall_6_1_0; }
	}

	public class ClockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Clock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cClockKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		/// * ---- clock definition ---- * / Clock returns sct::Declaration:
		//	{Clock} "clock" name=ID;
		public ParserRule getRule() { return rule; }

		//{Clock} "clock" name=ID
		public Group getGroup() { return cGroup; }

		//{Clock}
		public Action getClockAction_0() { return cClockAction_0; }

		//"clock"
		public Keyword getClockKeyword_1() { return cClockKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOperationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOperationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParamTypesAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParamTypesTypeEnumRuleCall_4_0_0 = (RuleCall)cParamTypesAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParamTypesAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParamTypesTypeEnumRuleCall_4_1_1_0 = (RuleCall)cParamTypesAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cTypeAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cTypeTypeEnumRuleCall_6_1_0 = (RuleCall)cTypeAssignment_6_1.eContents().get(0);
		
		/// * ---- clock definition ---- * / Operation returns sct::Declaration:
		//	{Operation} "operation" name=ID "(" (paramTypes+=Type ("," paramTypes+=Type)*)? ")" (":" type=Type)?;
		public ParserRule getRule() { return rule; }

		//{Operation} "operation" name=ID "(" (paramTypes+=Type ("," paramTypes+=Type)*)? ")" (":" type=Type)?
		public Group getGroup() { return cGroup; }

		//{Operation}
		public Action getOperationAction_0() { return cOperationAction_0; }

		//"operation"
		public Keyword getOperationKeyword_1() { return cOperationKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(paramTypes+=Type ("," paramTypes+=Type)*)?
		public Group getGroup_4() { return cGroup_4; }

		//paramTypes+=Type
		public Assignment getParamTypesAssignment_4_0() { return cParamTypesAssignment_4_0; }

		//Type
		public RuleCall getParamTypesTypeEnumRuleCall_4_0_0() { return cParamTypesTypeEnumRuleCall_4_0_0; }

		//("," paramTypes+=Type)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//paramTypes+=Type
		public Assignment getParamTypesAssignment_4_1_1() { return cParamTypesAssignment_4_1_1; }

		//Type
		public RuleCall getParamTypesTypeEnumRuleCall_4_1_1_0() { return cParamTypesTypeEnumRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//(":" type=Type)?
		public Group getGroup_6() { return cGroup_6; }

		//":"
		public Keyword getColonKeyword_6_0() { return cColonKeyword_6_0; }

		//type=Type
		public Assignment getTypeAssignment_6_1() { return cTypeAssignment_6_1; }

		//Type
		public RuleCall getTypeTypeEnumRuleCall_6_1_0() { return cTypeTypeEnumRuleCall_6_1_0; }
	}

	public class EntrypointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entrypoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEntrypointAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEntrypointKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		/// * ---- entrypoint definition ---- * / Entrypoint returns sct::Declaration:
		//	{Entrypoint} "entrypoint" name=ID;
		public ParserRule getRule() { return rule; }

		//{Entrypoint} "entrypoint" name=ID
		public Group getGroup() { return cGroup; }

		//{Entrypoint}
		public Action getEntrypointAction_0() { return cEntrypointAction_0; }

		//"entrypoint"
		public Keyword getEntrypointKeyword_1() { return cEntrypointKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class ExitpointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exitpoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExitpointAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExitpointKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		/// * ---- exitpoint definition ---- * / Exitpoint returns sct::Declaration:
		//	{Exitpoint} "exitpoint" name=ID;
		public ParserRule getRule() { return rule; }

		//{Exitpoint} "exitpoint" name=ID
		public Group getGroup() { return cGroup; }

		//{Exitpoint}
		public Action getExitpointAction_0() { return cExitpointAction_0; }

		//"exitpoint"
		public Keyword getExitpointKeyword_1() { return cExitpointKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		/// * ---- Datatype rules ---- * / FQN:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class ReactionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Reaction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLocalReactionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTransitionReactionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// * ---- reaction rules ----
		//Define the structure of reactions that are central for describing the statecharts behavior. 
		// * / Reaction returns sct::Reaction:
		//	LocalReaction | TransitionReaction;
		public ParserRule getRule() { return rule; }

		//LocalReaction | TransitionReaction
		public Alternatives getAlternatives() { return cAlternatives; }

		//LocalReaction
		public RuleCall getLocalReactionParserRuleCall_0() { return cLocalReactionParserRuleCall_0; }

		//TransitionReaction
		public RuleCall getTransitionReactionParserRuleCall_1() { return cTransitionReactionParserRuleCall_1; }
	}

	public class LocalReactionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalReaction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTriggerAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTriggerReactionTriggerParserRuleCall_0_0 = (RuleCall)cTriggerAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSolidusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cEffectAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEffectReactionEffectParserRuleCall_1_1_0 = (RuleCall)cEffectAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cNumberSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPropertiesReactionPropertiesParserRuleCall_2_1_0 = (RuleCall)cPropertiesAssignment_2_1.eContents().get(0);
		
		//LocalReaction:
		//	trigger=ReactionTrigger ("/" effect=ReactionEffect) ("#" properties=ReactionProperties)?;
		public ParserRule getRule() { return rule; }

		//trigger=ReactionTrigger ("/" effect=ReactionEffect) ("#" properties=ReactionProperties)?
		public Group getGroup() { return cGroup; }

		//trigger=ReactionTrigger
		public Assignment getTriggerAssignment_0() { return cTriggerAssignment_0; }

		//ReactionTrigger
		public RuleCall getTriggerReactionTriggerParserRuleCall_0_0() { return cTriggerReactionTriggerParserRuleCall_0_0; }

		//"/" effect=ReactionEffect
		public Group getGroup_1() { return cGroup_1; }

		//"/"
		public Keyword getSolidusKeyword_1_0() { return cSolidusKeyword_1_0; }

		//effect=ReactionEffect
		public Assignment getEffectAssignment_1_1() { return cEffectAssignment_1_1; }

		//ReactionEffect
		public RuleCall getEffectReactionEffectParserRuleCall_1_1_0() { return cEffectReactionEffectParserRuleCall_1_1_0; }

		//("#" properties=ReactionProperties)?
		public Group getGroup_2() { return cGroup_2; }

		//"#"
		public Keyword getNumberSignKeyword_2_0() { return cNumberSignKeyword_2_0; }

		//properties=ReactionProperties
		public Assignment getPropertiesAssignment_2_1() { return cPropertiesAssignment_2_1; }

		//ReactionProperties
		public RuleCall getPropertiesReactionPropertiesParserRuleCall_2_1_0() { return cPropertiesReactionPropertiesParserRuleCall_2_1_0; }
	}

	public class TransitionReactionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransitionReaction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTransitionReactionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTriggerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTriggerReactionTriggerParserRuleCall_1_0 = (RuleCall)cTriggerAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSolidusKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cEffectAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cEffectReactionEffectParserRuleCall_2_1_0 = (RuleCall)cEffectAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cNumberSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPropertiesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPropertiesReactionPropertiesParserRuleCall_3_1_0 = (RuleCall)cPropertiesAssignment_3_1.eContents().get(0);
		
		//TransitionReaction:
		//	{TransitionReaction} trigger=ReactionTrigger? ("/" effect=ReactionEffect)? ("#" properties=ReactionProperties)?;
		public ParserRule getRule() { return rule; }

		//{TransitionReaction} trigger=ReactionTrigger? ("/" effect=ReactionEffect)? ("#" properties=ReactionProperties)?
		public Group getGroup() { return cGroup; }

		//{TransitionReaction}
		public Action getTransitionReactionAction_0() { return cTransitionReactionAction_0; }

		//trigger=ReactionTrigger?
		public Assignment getTriggerAssignment_1() { return cTriggerAssignment_1; }

		//ReactionTrigger
		public RuleCall getTriggerReactionTriggerParserRuleCall_1_0() { return cTriggerReactionTriggerParserRuleCall_1_0; }

		//("/" effect=ReactionEffect)?
		public Group getGroup_2() { return cGroup_2; }

		//"/"
		public Keyword getSolidusKeyword_2_0() { return cSolidusKeyword_2_0; }

		//effect=ReactionEffect
		public Assignment getEffectAssignment_2_1() { return cEffectAssignment_2_1; }

		//ReactionEffect
		public RuleCall getEffectReactionEffectParserRuleCall_2_1_0() { return cEffectReactionEffectParserRuleCall_2_1_0; }

		//("#" properties=ReactionProperties)?
		public Group getGroup_3() { return cGroup_3; }

		//"#"
		public Keyword getNumberSignKeyword_3_0() { return cNumberSignKeyword_3_0; }

		//properties=ReactionProperties
		public Assignment getPropertiesAssignment_3_1() { return cPropertiesAssignment_3_1; }

		//ReactionProperties
		public RuleCall getPropertiesReactionPropertiesParserRuleCall_3_1_0() { return cPropertiesReactionPropertiesParserRuleCall_3_1_0; }
	}

	public class ReactionTriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReactionTrigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReactionTriggerAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cTriggersAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cTriggersEventSpecParserRuleCall_1_0_0_0 = (RuleCall)cTriggersAssignment_1_0_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Assignment cTriggersAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cTriggersEventSpecParserRuleCall_1_0_1_1_0 = (RuleCall)cTriggersAssignment_1_0_1_1.eContents().get(0);
		private final Group cGroup_1_0_2 = (Group)cGroup_1_0.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_1_0_2_0 = (Keyword)cGroup_1_0_2.eContents().get(0);
		private final Assignment cGuardExpressionAssignment_1_0_2_1 = (Assignment)cGroup_1_0_2.eContents().get(1);
		private final RuleCall cGuardExpressionExpressionParserRuleCall_1_0_2_1_0 = (RuleCall)cGuardExpressionAssignment_1_0_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_0_2_2 = (Keyword)cGroup_1_0_2.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cGuardExpressionAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cGuardExpressionExpressionParserRuleCall_1_1_1_0 = (RuleCall)cGuardExpressionAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//ReactionTrigger returns sct::Trigger:
		//	{ReactionTrigger} (triggers+=EventSpec ("," triggers+=EventSpec)* ("[" guardExpression=Expression "]")? | "["
		//	guardExpression=Expression "]");
		public ParserRule getRule() { return rule; }

		//{ReactionTrigger} (triggers+=EventSpec ("," triggers+=EventSpec)* ("[" guardExpression=Expression "]")? | "["
		//guardExpression=Expression "]")
		public Group getGroup() { return cGroup; }

		//{ReactionTrigger}
		public Action getReactionTriggerAction_0() { return cReactionTriggerAction_0; }

		//triggers+=EventSpec ("," triggers+=EventSpec)* ("[" guardExpression=Expression "]")? | "[" guardExpression=Expression
		//"]"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//triggers+=EventSpec ("," triggers+=EventSpec)* ("[" guardExpression=Expression "]")?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//triggers+=EventSpec
		public Assignment getTriggersAssignment_1_0_0() { return cTriggersAssignment_1_0_0; }

		//EventSpec
		public RuleCall getTriggersEventSpecParserRuleCall_1_0_0_0() { return cTriggersEventSpecParserRuleCall_1_0_0_0; }

		//("," triggers+=EventSpec)*
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//","
		public Keyword getCommaKeyword_1_0_1_0() { return cCommaKeyword_1_0_1_0; }

		//triggers+=EventSpec
		public Assignment getTriggersAssignment_1_0_1_1() { return cTriggersAssignment_1_0_1_1; }

		//EventSpec
		public RuleCall getTriggersEventSpecParserRuleCall_1_0_1_1_0() { return cTriggersEventSpecParserRuleCall_1_0_1_1_0; }

		//(=> "[" guardExpression=Expression "]")?
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//=> "["
		public Keyword getLeftSquareBracketKeyword_1_0_2_0() { return cLeftSquareBracketKeyword_1_0_2_0; }

		//guardExpression=Expression
		public Assignment getGuardExpressionAssignment_1_0_2_1() { return cGuardExpressionAssignment_1_0_2_1; }

		//Expression
		public RuleCall getGuardExpressionExpressionParserRuleCall_1_0_2_1_0() { return cGuardExpressionExpressionParserRuleCall_1_0_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_0_2_2() { return cRightSquareBracketKeyword_1_0_2_2; }

		//"[" guardExpression=Expression "]"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1_0() { return cLeftSquareBracketKeyword_1_1_0; }

		//guardExpression=Expression
		public Assignment getGuardExpressionAssignment_1_1_1() { return cGuardExpressionAssignment_1_1_1; }

		//Expression
		public RuleCall getGuardExpressionExpressionParserRuleCall_1_1_1_0() { return cGuardExpressionExpressionParserRuleCall_1_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_1_2() { return cRightSquareBracketKeyword_1_1_2; }
	}

	public class ReactionEffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReactionEffect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReactionEffectAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cActionsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cActionsStatementParserRuleCall_1_0_0 = (RuleCall)cActionsAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//ReactionEffect returns sct::Effect:
		//	{ReactionEffect} (actions+=Statement ";")+;
		public ParserRule getRule() { return rule; }

		//{ReactionEffect} (actions+=Statement ";")+
		public Group getGroup() { return cGroup; }

		//{ReactionEffect}
		public Action getReactionEffectAction_0() { return cReactionEffectAction_0; }

		//(actions+=Statement ";")+
		public Group getGroup_1() { return cGroup_1; }

		//actions+=Statement
		public Assignment getActionsAssignment_1_0() { return cActionsAssignment_1_0; }

		//Statement
		public RuleCall getActionsStatementParserRuleCall_1_0_0() { return cActionsStatementParserRuleCall_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}

	public class ReactionPropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReactionProperties");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReactionPropertiesAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPropertiesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropertiesReactionPropertyParserRuleCall_1_0 = (RuleCall)cPropertiesAssignment_1.eContents().get(0);
		
		//ReactionProperties:
		//	{ReactionProperties} properties+=ReactionProperty*;
		public ParserRule getRule() { return rule; }

		//{ReactionProperties} properties+=ReactionProperty*
		public Group getGroup() { return cGroup; }

		//{ReactionProperties}
		public Action getReactionPropertiesAction_0() { return cReactionPropertiesAction_0; }

		//properties+=ReactionProperty*
		public Assignment getPropertiesAssignment_1() { return cPropertiesAssignment_1; }

		//ReactionProperty
		public RuleCall getPropertiesReactionPropertyParserRuleCall_1_0() { return cPropertiesReactionPropertyParserRuleCall_1_0; }
	}

	public class ReactionPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReactionProperty");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cReactionPriorityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEntryPointSpecParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExitPointSpecParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ReactionProperty:
		//	ReactionPriority | EntryPointSpec | ExitPointSpec;
		public ParserRule getRule() { return rule; }

		//ReactionPriority | EntryPointSpec | ExitPointSpec
		public Alternatives getAlternatives() { return cAlternatives; }

		//ReactionPriority
		public RuleCall getReactionPriorityParserRuleCall_0() { return cReactionPriorityParserRuleCall_0; }

		//EntryPointSpec
		public RuleCall getEntryPointSpecParserRuleCall_1() { return cEntryPointSpecParserRuleCall_1; }

		//ExitPointSpec
		public RuleCall getExitPointSpecParserRuleCall_2() { return cExitPointSpecParserRuleCall_2; }
	}

	public class ReactionPriorityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReactionPriority");
		private final Assignment cPriorityAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPriorityINTTerminalRuleCall_0 = (RuleCall)cPriorityAssignment.eContents().get(0);
		
		//ReactionPriority:
		//	priority=INT;
		public ParserRule getRule() { return rule; }

		//priority=INT
		public Assignment getPriorityAssignment() { return cPriorityAssignment; }

		//INT
		public RuleCall getPriorityINTTerminalRuleCall_0() { return cPriorityINTTerminalRuleCall_0; }
	}

	public class EntryPointSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EntryPointSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEntrypointAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEntrypointEntrypointCrossReference_1_0 = (CrossReference)cEntrypointAssignment_1.eContents().get(0);
		private final RuleCall cEntrypointEntrypointFQNParserRuleCall_1_0_1 = (RuleCall)cEntrypointEntrypointCrossReference_1_0.eContents().get(1);
		
		//EntryPointSpec:
		//	">" entrypoint=[Entrypoint|FQN];
		public ParserRule getRule() { return rule; }

		//">" entrypoint=[Entrypoint|FQN]
		public Group getGroup() { return cGroup; }

		//">"
		public Keyword getGreaterThanSignKeyword_0() { return cGreaterThanSignKeyword_0; }

		//entrypoint=[Entrypoint|FQN]
		public Assignment getEntrypointAssignment_1() { return cEntrypointAssignment_1; }

		//[Entrypoint|FQN]
		public CrossReference getEntrypointEntrypointCrossReference_1_0() { return cEntrypointEntrypointCrossReference_1_0; }

		//FQN
		public RuleCall getEntrypointEntrypointFQNParserRuleCall_1_0_1() { return cEntrypointEntrypointFQNParserRuleCall_1_0_1; }
	}

	public class ExitPointSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExitPointSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExitpointAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cExitpointExitpointCrossReference_0_0 = (CrossReference)cExitpointAssignment_0.eContents().get(0);
		private final RuleCall cExitpointExitpointFQNParserRuleCall_0_0_1 = (RuleCall)cExitpointExitpointCrossReference_0_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ExitPointSpec:
		//	exitpoint=[Exitpoint|FQN] ">";
		public ParserRule getRule() { return rule; }

		//exitpoint=[Exitpoint|FQN] ">"
		public Group getGroup() { return cGroup; }

		//exitpoint=[Exitpoint|FQN]
		public Assignment getExitpointAssignment_0() { return cExitpointAssignment_0; }

		//[Exitpoint|FQN]
		public CrossReference getExitpointExitpointCrossReference_0_0() { return cExitpointExitpointCrossReference_0_0; }

		//FQN
		public RuleCall getExitpointExitpointFQNParserRuleCall_0_0_1() { return cExitpointExitpointFQNParserRuleCall_0_0_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_1() { return cGreaterThanSignKeyword_1; }
	}

	public class EventSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventSpec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRegularEventSpecParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTimeEventSpecParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBuiltinEventSpecParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//EventSpec:
		//	RegularEventSpec | TimeEventSpec | BuiltinEventSpec;
		public ParserRule getRule() { return rule; }

		//RegularEventSpec | TimeEventSpec | BuiltinEventSpec
		public Alternatives getAlternatives() { return cAlternatives; }

		//RegularEventSpec
		public RuleCall getRegularEventSpecParserRuleCall_0() { return cRegularEventSpecParserRuleCall_0; }

		//TimeEventSpec
		public RuleCall getTimeEventSpecParserRuleCall_1() { return cTimeEventSpecParserRuleCall_1; }

		//BuiltinEventSpec
		public RuleCall getBuiltinEventSpecParserRuleCall_2() { return cBuiltinEventSpecParserRuleCall_2; }
	}

	public class RegularEventSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RegularEventSpec");
		private final Assignment cEventAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cEventEventCrossReference_0 = (CrossReference)cEventAssignment.eContents().get(0);
		private final RuleCall cEventEventFQNParserRuleCall_0_1 = (RuleCall)cEventEventCrossReference_0.eContents().get(1);
		
		//RegularEventSpec:
		//	event=[sct::Event|FQN];
		public ParserRule getRule() { return rule; }

		//event=[sct::Event|FQN]
		public Assignment getEventAssignment() { return cEventAssignment; }

		//[sct::Event|FQN]
		public CrossReference getEventEventCrossReference_0() { return cEventEventCrossReference_0; }

		//FQN
		public RuleCall getEventEventFQNParserRuleCall_0_1() { return cEventEventFQNParserRuleCall_0_1; }
	}

	public class TimeEventSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimeEventSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTimeEventTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cUnitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUnitTimeUnitEnumRuleCall_2_0 = (RuleCall)cUnitAssignment_2.eContents().get(0);
		
		//// TODO: redefine after trigger - we need to use it with clocks
		//TimeEventSpec:
		//	type=TimeEventType value=INT unit=TimeUnit?;
		public ParserRule getRule() { return rule; }

		//type=TimeEventType value=INT unit=TimeUnit?
		public Group getGroup() { return cGroup; }

		//type=TimeEventType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//TimeEventType
		public RuleCall getTypeTimeEventTypeEnumRuleCall_0_0() { return cTypeTimeEventTypeEnumRuleCall_0_0; }

		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }

		//unit=TimeUnit?
		public Assignment getUnitAssignment_2() { return cUnitAssignment_2; }

		//TimeUnit
		public RuleCall getUnitTimeUnitEnumRuleCall_2_0() { return cUnitTimeUnitEnumRuleCall_2_0; }
	}

	public class BuiltinEventSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuiltinEventSpec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntryEventParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExitEventParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOnCycleEventParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAlwaysEventParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// TODO: add dereived events like in(state), entered(state)	
		//BuiltinEventSpec:
		//	EntryEvent | ExitEvent | OnCycleEvent | AlwaysEvent;
		public ParserRule getRule() { return rule; }

		//EntryEvent | ExitEvent | OnCycleEvent | AlwaysEvent
		public Alternatives getAlternatives() { return cAlternatives; }

		//EntryEvent
		public RuleCall getEntryEventParserRuleCall_0() { return cEntryEventParserRuleCall_0; }

		//ExitEvent
		public RuleCall getExitEventParserRuleCall_1() { return cExitEventParserRuleCall_1; }

		//OnCycleEvent
		public RuleCall getOnCycleEventParserRuleCall_2() { return cOnCycleEventParserRuleCall_2; }

		//AlwaysEvent
		public RuleCall getAlwaysEventParserRuleCall_3() { return cAlwaysEventParserRuleCall_3; }
	}

	public class EntryEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EntryEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEntryEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEntryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//EntryEvent:
		//	{EntryEvent} "entry";
		public ParserRule getRule() { return rule; }

		//{EntryEvent} "entry"
		public Group getGroup() { return cGroup; }

		//{EntryEvent}
		public Action getEntryEventAction_0() { return cEntryEventAction_0; }

		//"entry"
		public Keyword getEntryKeyword_1() { return cEntryKeyword_1; }
	}

	public class ExitEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExitEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExitEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ExitEvent:
		//	{ExitEvent} "exit";
		public ParserRule getRule() { return rule; }

		//{ExitEvent} "exit"
		public Group getGroup() { return cGroup; }

		//{ExitEvent}
		public Action getExitEventAction_0() { return cExitEventAction_0; }

		//"exit"
		public Keyword getExitKeyword_1() { return cExitKeyword_1; }
	}

	public class OnCycleEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OnCycleEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOnCycleEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOncycleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//// TODO: ?!? better 'ontick' ?!?
		//OnCycleEvent:
		//	{OnCycleEvent} "oncycle";
		public ParserRule getRule() { return rule; }

		//{OnCycleEvent} "oncycle"
		public Group getGroup() { return cGroup; }

		//{OnCycleEvent}
		public Action getOnCycleEventAction_0() { return cOnCycleEventAction_0; }

		//"oncycle"
		public Keyword getOncycleKeyword_1() { return cOncycleKeyword_1; }
	}

	public class AlwaysEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AlwaysEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAlwaysEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAlwaysKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//AlwaysEvent:
		//	{AlwaysEvent} "always";
		public ParserRule getRule() { return rule; }

		//{AlwaysEvent} "always"
		public Group getGroup() { return cGroup; }

		//{AlwaysEvent}
		public Action getAlwaysEventAction_0() { return cAlwaysEventAction_0; }

		//"always"
		public Keyword getAlwaysKeyword_1() { return cAlwaysKeyword_1; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssignmentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEventRaisingParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOperationCallParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		/// * --- statements --- * / Statement returns sct::Statement:
		//	Assignment | EventRaising | OperationCall;
		public ParserRule getRule() { return rule; }

		//Assignment | EventRaising | OperationCall
		public Alternatives getAlternatives() { return cAlternatives; }

		//Assignment
		public RuleCall getAssignmentParserRuleCall_0() { return cAssignmentParserRuleCall_0; }

		//EventRaising
		public RuleCall getEventRaisingParserRuleCall_1() { return cEventRaisingParserRuleCall_1; }

		//OperationCall
		public RuleCall getOperationCallParserRuleCall_2() { return cOperationCallParserRuleCall_2; }
	}

	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVarRefVariableCrossReference_0_0 = (CrossReference)cVarRefAssignment_0.eContents().get(0);
		private final RuleCall cVarRefVariableFQNParserRuleCall_0_0_1 = (RuleCall)cVarRefVariableCrossReference_0_0.eContents().get(1);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorAssignmentOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//Assignment:
		//	varRef=[sct::Variable|FQN] operator=AssignmentOperator expression=Expression;
		public ParserRule getRule() { return rule; }

		//varRef=[sct::Variable|FQN] operator=AssignmentOperator expression=Expression
		public Group getGroup() { return cGroup; }

		//varRef=[sct::Variable|FQN]
		public Assignment getVarRefAssignment_0() { return cVarRefAssignment_0; }

		//[sct::Variable|FQN]
		public CrossReference getVarRefVariableCrossReference_0_0() { return cVarRefVariableCrossReference_0_0; }

		//FQN
		public RuleCall getVarRefVariableFQNParserRuleCall_0_0_1() { return cVarRefVariableFQNParserRuleCall_0_0_1; }

		//operator=AssignmentOperator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//AssignmentOperator
		public RuleCall getOperatorAssignmentOperatorEnumRuleCall_1_0() { return cOperatorAssignmentOperatorEnumRuleCall_1_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}

	public class EventRaisingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventRaising");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRaiseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEventAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEventEventCrossReference_1_0 = (CrossReference)cEventAssignment_1.eContents().get(0);
		private final RuleCall cEventEventFQNParserRuleCall_1_0_1 = (RuleCall)cEventEventCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		
		//EventRaising:
		//	"raise" event=[sct::Event|FQN] (":" value=Expression)?;
		public ParserRule getRule() { return rule; }

		//"raise" event=[sct::Event|FQN] (":" value=Expression)?
		public Group getGroup() { return cGroup; }

		//"raise"
		public Keyword getRaiseKeyword_0() { return cRaiseKeyword_0; }

		//event=[sct::Event|FQN]
		public Assignment getEventAssignment_1() { return cEventAssignment_1; }

		//[sct::Event|FQN]
		public CrossReference getEventEventCrossReference_1_0() { return cEventEventCrossReference_1_0; }

		//FQN
		public RuleCall getEventEventFQNParserRuleCall_1_0_1() { return cEventEventFQNParserRuleCall_1_0_1; }

		//(":" value=Expression)?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//value=Expression
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_1_0() { return cValueExpressionParserRuleCall_2_1_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final RuleCall cConditionalExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// ****************
		//// Expression Grammar
		//// ****************
		////ExpressionRule:
		////	expression=(LogicalOrExpression | RaiseEventExpression);
		//Expression:
		//	ConditionalExpression;
		public ParserRule getRule() { return rule; }

		//ConditionalExpression
		public RuleCall getConditionalExpressionParserRuleCall() { return cConditionalExpressionParserRuleCall; }
	}

	public class ConditionalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cConditionalExpressionConditionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTrueCaseAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTrueCaseLogicalOrExpressionParserRuleCall_1_2_0 = (RuleCall)cTrueCaseAssignment_1_2.eContents().get(0);
		private final Keyword cColonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cFalseCaseAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cFalseCaseLogicalOrExpressionParserRuleCall_1_4_0 = (RuleCall)cFalseCaseAssignment_1_4.eContents().get(0);
		
		//ConditionalExpression returns Expression:
		//	LogicalOrExpression ({ConditionalExpression.condition=current} "?" trueCase=LogicalOrExpression ":"
		//	falseCase=LogicalOrExpression)?;
		public ParserRule getRule() { return rule; }

		//LogicalOrExpression ({ConditionalExpression.condition=current} "?" trueCase=LogicalOrExpression ":"
		//falseCase=LogicalOrExpression)?
		public Group getGroup() { return cGroup; }

		//LogicalOrExpression
		public RuleCall getLogicalOrExpressionParserRuleCall_0() { return cLogicalOrExpressionParserRuleCall_0; }

		//({ConditionalExpression.condition=current} "?" trueCase=LogicalOrExpression ":" falseCase=LogicalOrExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//{ConditionalExpression.condition=current}
		public Action getConditionalExpressionConditionAction_1_0() { return cConditionalExpressionConditionAction_1_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_1_1() { return cQuestionMarkKeyword_1_1; }

		//trueCase=LogicalOrExpression
		public Assignment getTrueCaseAssignment_1_2() { return cTrueCaseAssignment_1_2; }

		//LogicalOrExpression
		public RuleCall getTrueCaseLogicalOrExpressionParserRuleCall_1_2_0() { return cTrueCaseLogicalOrExpressionParserRuleCall_1_2_0; }

		//":"
		public Keyword getColonKeyword_1_3() { return cColonKeyword_1_3; }

		//falseCase=LogicalOrExpression
		public Assignment getFalseCaseAssignment_1_4() { return cFalseCaseAssignment_1_4; }

		//LogicalOrExpression
		public RuleCall getFalseCaseLogicalOrExpressionParserRuleCall_1_4_0() { return cFalseCaseLogicalOrExpressionParserRuleCall_1_4_0; }
	}

	public class LogicalOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicalOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicalOrExpressionLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandLogicalAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//LogicalOrExpression returns Expression:
		//	LogicalAndExpression ({LogicalOrExpression.leftOperand=current} "||" rightOperand=LogicalAndExpression)*;
		public ParserRule getRule() { return rule; }

		//LogicalAndExpression ({LogicalOrExpression.leftOperand=current} "||" rightOperand=LogicalAndExpression)*
		public Group getGroup() { return cGroup; }

		//LogicalAndExpression
		public RuleCall getLogicalAndExpressionParserRuleCall_0() { return cLogicalAndExpressionParserRuleCall_0; }

		//({LogicalOrExpression.leftOperand=current} "||" rightOperand=LogicalAndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{LogicalOrExpression.leftOperand=current}
		public Action getLogicalOrExpressionLeftOperandAction_1_0() { return cLogicalOrExpressionLeftOperandAction_1_0; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }

		//rightOperand=LogicalAndExpression
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//LogicalAndExpression
		public RuleCall getRightOperandLogicalAndExpressionParserRuleCall_1_2_0() { return cRightOperandLogicalAndExpressionParserRuleCall_1_2_0; }
	}

	public class LogicalAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicalAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalNotExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicalAndExpressionLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandLogicalNotExpressionParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//LogicalAndExpression returns Expression:
		//	LogicalNotExpression ({LogicalAndExpression.leftOperand=current} "&&" rightOperand=LogicalNotExpression)*;
		public ParserRule getRule() { return rule; }

		//LogicalNotExpression ({LogicalAndExpression.leftOperand=current} "&&" rightOperand=LogicalNotExpression)*
		public Group getGroup() { return cGroup; }

		//LogicalNotExpression
		public RuleCall getLogicalNotExpressionParserRuleCall_0() { return cLogicalNotExpressionParserRuleCall_0; }

		//({LogicalAndExpression.leftOperand=current} "&&" rightOperand=LogicalNotExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{LogicalAndExpression.leftOperand=current}
		public Action getLogicalAndExpressionLeftOperandAction_1_0() { return cLogicalAndExpressionLeftOperandAction_1_0; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }

		//rightOperand=LogicalNotExpression
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//LogicalNotExpression
		public RuleCall getRightOperandLogicalNotExpressionParserRuleCall_1_2_0() { return cRightOperandLogicalNotExpressionParserRuleCall_1_2_0; }
	}

	public class LogicalNotExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicalNotExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBitwiseXorExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cLogicalNotExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperandBitwiseXorExpressionParserRuleCall_1_2_0 = (RuleCall)cOperandAssignment_1_2.eContents().get(0);
		
		//LogicalNotExpression returns Expression:
		//	BitwiseXorExpression | {LogicalNotExpression} "!" operand=BitwiseXorExpression;
		public ParserRule getRule() { return rule; }

		//BitwiseXorExpression | {LogicalNotExpression} "!" operand=BitwiseXorExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//BitwiseXorExpression
		public RuleCall getBitwiseXorExpressionParserRuleCall_0() { return cBitwiseXorExpressionParserRuleCall_0; }

		//{LogicalNotExpression} "!" operand=BitwiseXorExpression
		public Group getGroup_1() { return cGroup_1; }

		//{LogicalNotExpression}
		public Action getLogicalNotExpressionAction_1_0() { return cLogicalNotExpressionAction_1_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_1_1() { return cExclamationMarkKeyword_1_1; }

		//operand=BitwiseXorExpression
		public Assignment getOperandAssignment_1_2() { return cOperandAssignment_1_2; }

		//BitwiseXorExpression
		public RuleCall getOperandBitwiseXorExpressionParserRuleCall_1_2_0() { return cOperandBitwiseXorExpressionParserRuleCall_1_2_0; }
	}

	public class BitwiseXorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BitwiseXorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitwiseOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBitwiseXorExpressionLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandBitwiseOrExpressionParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//BitwiseXorExpression returns Expression:
		//	BitwiseOrExpression ({BitwiseXorExpression.leftOperand=current} "^" rightOperand=BitwiseOrExpression)*;
		public ParserRule getRule() { return rule; }

		//BitwiseOrExpression ({BitwiseXorExpression.leftOperand=current} "^" rightOperand=BitwiseOrExpression)*
		public Group getGroup() { return cGroup; }

		//BitwiseOrExpression
		public RuleCall getBitwiseOrExpressionParserRuleCall_0() { return cBitwiseOrExpressionParserRuleCall_0; }

		//({BitwiseXorExpression.leftOperand=current} "^" rightOperand=BitwiseOrExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{BitwiseXorExpression.leftOperand=current}
		public Action getBitwiseXorExpressionLeftOperandAction_1_0() { return cBitwiseXorExpressionLeftOperandAction_1_0; }

		//"^"
		public Keyword getCircumflexAccentKeyword_1_1() { return cCircumflexAccentKeyword_1_1; }

		//rightOperand=BitwiseOrExpression
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//BitwiseOrExpression
		public RuleCall getRightOperandBitwiseOrExpressionParserRuleCall_1_2_0() { return cRightOperandBitwiseOrExpressionParserRuleCall_1_2_0; }
	}

	public class BitwiseOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BitwiseOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitwiseAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBitwiseOrExpressionLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandBitwiseAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//BitwiseOrExpression returns Expression:
		//	BitwiseAndExpression ({BitwiseOrExpression.leftOperand=current} "|" rightOperand=BitwiseAndExpression)*;
		public ParserRule getRule() { return rule; }

		//BitwiseAndExpression ({BitwiseOrExpression.leftOperand=current} "|" rightOperand=BitwiseAndExpression)*
		public Group getGroup() { return cGroup; }

		//BitwiseAndExpression
		public RuleCall getBitwiseAndExpressionParserRuleCall_0() { return cBitwiseAndExpressionParserRuleCall_0; }

		//({BitwiseOrExpression.leftOperand=current} "|" rightOperand=BitwiseAndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{BitwiseOrExpression.leftOperand=current}
		public Action getBitwiseOrExpressionLeftOperandAction_1_0() { return cBitwiseOrExpressionLeftOperandAction_1_0; }

		//"|"
		public Keyword getVerticalLineKeyword_1_1() { return cVerticalLineKeyword_1_1; }

		//rightOperand=BitwiseAndExpression
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//BitwiseAndExpression
		public RuleCall getRightOperandBitwiseAndExpressionParserRuleCall_1_2_0() { return cRightOperandBitwiseAndExpressionParserRuleCall_1_2_0; }
	}

	public class BitwiseAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BitwiseAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalRelationExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBitwiseAndExpressionLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandLogicalRelationExpressionParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//BitwiseAndExpression returns Expression:
		//	LogicalRelationExpression ({BitwiseAndExpression.leftOperand=current} "&" rightOperand=LogicalRelationExpression)*;
		public ParserRule getRule() { return rule; }

		//LogicalRelationExpression ({BitwiseAndExpression.leftOperand=current} "&" rightOperand=LogicalRelationExpression)*
		public Group getGroup() { return cGroup; }

		//LogicalRelationExpression
		public RuleCall getLogicalRelationExpressionParserRuleCall_0() { return cLogicalRelationExpressionParserRuleCall_0; }

		//({BitwiseAndExpression.leftOperand=current} "&" rightOperand=LogicalRelationExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{BitwiseAndExpression.leftOperand=current}
		public Action getBitwiseAndExpressionLeftOperandAction_1_0() { return cBitwiseAndExpressionLeftOperandAction_1_0; }

		//"&"
		public Keyword getAmpersandKeyword_1_1() { return cAmpersandKeyword_1_1; }

		//rightOperand=LogicalRelationExpression
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//LogicalRelationExpression
		public RuleCall getRightOperandLogicalRelationExpressionParserRuleCall_1_2_0() { return cRightOperandLogicalRelationExpressionParserRuleCall_1_2_0; }
	}

	public class LogicalRelationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicalRelationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cShiftExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicalRelationExpressionLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorRelationalOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandShiftExpressionParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//LogicalRelationExpression returns Expression:
		//	ShiftExpression ({LogicalRelationExpression.leftOperand=current} operator=RelationalOperator
		//	rightOperand=ShiftExpression)*;
		public ParserRule getRule() { return rule; }

		//ShiftExpression ({LogicalRelationExpression.leftOperand=current} operator=RelationalOperator
		//rightOperand=ShiftExpression)*
		public Group getGroup() { return cGroup; }

		//ShiftExpression
		public RuleCall getShiftExpressionParserRuleCall_0() { return cShiftExpressionParserRuleCall_0; }

		//({LogicalRelationExpression.leftOperand=current} operator=RelationalOperator rightOperand=ShiftExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{LogicalRelationExpression.leftOperand=current}
		public Action getLogicalRelationExpressionLeftOperandAction_1_0() { return cLogicalRelationExpressionLeftOperandAction_1_0; }

		//operator=RelationalOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//RelationalOperator
		public RuleCall getOperatorRelationalOperatorEnumRuleCall_1_1_0() { return cOperatorRelationalOperatorEnumRuleCall_1_1_0; }

		//rightOperand=ShiftExpression
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//ShiftExpression
		public RuleCall getRightOperandShiftExpressionParserRuleCall_1_2_0() { return cRightOperandShiftExpressionParserRuleCall_1_2_0; }
	}

	public class ShiftExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShiftExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNumericalAddSubtractExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cShiftExpressionLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorShiftOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandNumericalAddSubtractExpressionParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//ShiftExpression returns Expression:
		//	NumericalAddSubtractExpression ({ShiftExpression.leftOperand=current} operator=ShiftOperator
		//	rightOperand=NumericalAddSubtractExpression)*;
		public ParserRule getRule() { return rule; }

		//NumericalAddSubtractExpression ({ShiftExpression.leftOperand=current} operator=ShiftOperator
		//rightOperand=NumericalAddSubtractExpression)*
		public Group getGroup() { return cGroup; }

		//NumericalAddSubtractExpression
		public RuleCall getNumericalAddSubtractExpressionParserRuleCall_0() { return cNumericalAddSubtractExpressionParserRuleCall_0; }

		//({ShiftExpression.leftOperand=current} operator=ShiftOperator rightOperand=NumericalAddSubtractExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{ShiftExpression.leftOperand=current}
		public Action getShiftExpressionLeftOperandAction_1_0() { return cShiftExpressionLeftOperandAction_1_0; }

		//operator=ShiftOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//ShiftOperator
		public RuleCall getOperatorShiftOperatorEnumRuleCall_1_1_0() { return cOperatorShiftOperatorEnumRuleCall_1_1_0; }

		//rightOperand=NumericalAddSubtractExpression
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//NumericalAddSubtractExpression
		public RuleCall getRightOperandNumericalAddSubtractExpressionParserRuleCall_1_2_0() { return cRightOperandNumericalAddSubtractExpressionParserRuleCall_1_2_0; }
	}

	public class NumericalAddSubtractExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumericalAddSubtractExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNumericalMultiplyDivideExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cNumericalAddSubtractExpressionLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorAdditiveOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandNumericalMultiplyDivideExpressionParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//NumericalAddSubtractExpression returns Expression:
		//	NumericalMultiplyDivideExpression ({NumericalAddSubtractExpression.leftOperand=current} operator=AdditiveOperator
		//	rightOperand=NumericalMultiplyDivideExpression)*;
		public ParserRule getRule() { return rule; }

		//NumericalMultiplyDivideExpression ({NumericalAddSubtractExpression.leftOperand=current} operator=AdditiveOperator
		//rightOperand=NumericalMultiplyDivideExpression)*
		public Group getGroup() { return cGroup; }

		//NumericalMultiplyDivideExpression
		public RuleCall getNumericalMultiplyDivideExpressionParserRuleCall_0() { return cNumericalMultiplyDivideExpressionParserRuleCall_0; }

		//({NumericalAddSubtractExpression.leftOperand=current} operator=AdditiveOperator
		//rightOperand=NumericalMultiplyDivideExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{NumericalAddSubtractExpression.leftOperand=current}
		public Action getNumericalAddSubtractExpressionLeftOperandAction_1_0() { return cNumericalAddSubtractExpressionLeftOperandAction_1_0; }

		//operator=AdditiveOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//AdditiveOperator
		public RuleCall getOperatorAdditiveOperatorEnumRuleCall_1_1_0() { return cOperatorAdditiveOperatorEnumRuleCall_1_1_0; }

		//rightOperand=NumericalMultiplyDivideExpression
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//NumericalMultiplyDivideExpression
		public RuleCall getRightOperandNumericalMultiplyDivideExpressionParserRuleCall_1_2_0() { return cRightOperandNumericalMultiplyDivideExpressionParserRuleCall_1_2_0; }
	}

	public class NumericalMultiplyDivideExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumericalMultiplyDivideExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNumericalUnaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cNumericalMultiplyDivideExpressionLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorMultiplicativeOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandNumericalUnaryExpressionParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//NumericalMultiplyDivideExpression returns Expression:
		//	NumericalUnaryExpression ({NumericalMultiplyDivideExpression.leftOperand=current} operator=MultiplicativeOperator
		//	rightOperand=NumericalUnaryExpression)*;
		public ParserRule getRule() { return rule; }

		//NumericalUnaryExpression ({NumericalMultiplyDivideExpression.leftOperand=current} operator=MultiplicativeOperator
		//rightOperand=NumericalUnaryExpression)*
		public Group getGroup() { return cGroup; }

		//NumericalUnaryExpression
		public RuleCall getNumericalUnaryExpressionParserRuleCall_0() { return cNumericalUnaryExpressionParserRuleCall_0; }

		//({NumericalMultiplyDivideExpression.leftOperand=current} operator=MultiplicativeOperator
		//rightOperand=NumericalUnaryExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{NumericalMultiplyDivideExpression.leftOperand=current}
		public Action getNumericalMultiplyDivideExpressionLeftOperandAction_1_0() { return cNumericalMultiplyDivideExpressionLeftOperandAction_1_0; }

		//operator=MultiplicativeOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//MultiplicativeOperator
		public RuleCall getOperatorMultiplicativeOperatorEnumRuleCall_1_1_0() { return cOperatorMultiplicativeOperatorEnumRuleCall_1_1_0; }

		//rightOperand=NumericalUnaryExpression
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//NumericalUnaryExpression
		public RuleCall getRightOperandNumericalUnaryExpressionParserRuleCall_1_2_0() { return cRightOperandNumericalUnaryExpressionParserRuleCall_1_2_0; }
	}

	public class NumericalUnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumericalUnaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNumericalUnaryExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorUnaryOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperandPrimaryExpressionParserRuleCall_1_2_0 = (RuleCall)cOperandAssignment_1_2.eContents().get(0);
		
		//NumericalUnaryExpression returns Expression:
		//	PrimaryExpression | {NumericalUnaryExpression} operator=UnaryOperator operand=PrimaryExpression;
		public ParserRule getRule() { return rule; }

		//PrimaryExpression | {NumericalUnaryExpression} operator=UnaryOperator operand=PrimaryExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }

		//{NumericalUnaryExpression} operator=UnaryOperator operand=PrimaryExpression
		public Group getGroup_1() { return cGroup_1; }

		//{NumericalUnaryExpression}
		public Action getNumericalUnaryExpressionAction_1_0() { return cNumericalUnaryExpressionAction_1_0; }

		//operator=UnaryOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//UnaryOperator
		public RuleCall getOperatorUnaryOperatorEnumRuleCall_1_1_0() { return cOperatorUnaryOperatorEnumRuleCall_1_1_0; }

		//operand=PrimaryExpression
		public Assignment getOperandAssignment_1_2() { return cOperandAssignment_1_2; }

		//PrimaryExpression
		public RuleCall getOperandPrimaryExpressionParserRuleCall_1_2_0() { return cOperandPrimaryExpressionParserRuleCall_1_2_0; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cOperationCallParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//PrimaryExpression returns Expression:
		//	ValueExpression | "(" Expression ")" | OperationCall;
		public ParserRule getRule() { return rule; }

		//ValueExpression | "(" Expression ")" | OperationCall
		public Alternatives getAlternatives() { return cAlternatives; }

		//ValueExpression
		public RuleCall getValueExpressionParserRuleCall_0() { return cValueExpressionParserRuleCall_0; }

		//"(" Expression ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1_1() { return cExpressionParserRuleCall_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }

		//OperationCall
		public RuleCall getOperationCallParserRuleCall_2() { return cOperationCallParserRuleCall_2; }
	}

	public class ValueExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveValueExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cElementReferenceExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ValueExpression returns Expression:
		//	PrimitiveValueExpression | ElementReferenceExpression;
		public ParserRule getRule() { return rule; }

		//PrimitiveValueExpression | ElementReferenceExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//PrimitiveValueExpression
		public RuleCall getPrimitiveValueExpressionParserRuleCall_0() { return cPrimitiveValueExpressionParserRuleCall_0; }

		//ElementReferenceExpression
		public RuleCall getElementReferenceExpressionParserRuleCall_1() { return cElementReferenceExpressionParserRuleCall_1; }
	}

	public class PrimitiveValueExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveValueExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimitiveValueExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueLiteralParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//PrimitiveValueExpression returns Expression:
		//	{PrimitiveValueExpression} value=Literal;
		public ParserRule getRule() { return rule; }

		//{PrimitiveValueExpression} value=Literal
		public Group getGroup() { return cGroup; }

		//{PrimitiveValueExpression}
		public Action getPrimitiveValueExpressionAction_0() { return cPrimitiveValueExpressionAction_0; }

		//value=Literal
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//Literal
		public RuleCall getValueLiteralParserRuleCall_1_0() { return cValueLiteralParserRuleCall_1_0; }
	}

	public class ElementReferenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElementReferenceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cElementReferenceExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cValueDeclarationCrossReference_1_0 = (CrossReference)cValueAssignment_1.eContents().get(0);
		private final RuleCall cValueDeclarationFQNParserRuleCall_1_0_1 = (RuleCall)cValueDeclarationCrossReference_1_0.eContents().get(1);
		
		//ElementReferenceExpression returns Expression:
		//	{ElementReferenceExpression} value=[sct::Declaration|FQN];
		public ParserRule getRule() { return rule; }

		//{ElementReferenceExpression} value=[sct::Declaration|FQN]
		public Group getGroup() { return cGroup; }

		//{ElementReferenceExpression}
		public Action getElementReferenceExpressionAction_0() { return cElementReferenceExpressionAction_0; }

		//value=[sct::Declaration|FQN]
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//[sct::Declaration|FQN]
		public CrossReference getValueDeclarationCrossReference_1_0() { return cValueDeclarationCrossReference_1_0; }

		//FQN
		public RuleCall getValueDeclarationFQNParserRuleCall_1_0_1() { return cValueDeclarationFQNParserRuleCall_1_0_1; }
	}

	public class OperationCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperationCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOperationCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOperationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cOperationOperationCrossReference_1_0 = (CrossReference)cOperationAssignment_1.eContents().get(0);
		private final RuleCall cOperationOperationFQNParserRuleCall_1_0_1 = (RuleCall)cOperationOperationCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgsExpressionParserRuleCall_3_0_0 = (RuleCall)cArgsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cArgsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_3_1_1_0 = (RuleCall)cArgsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OperationCall returns Expression:
		//	{OperationCall} operation=[Operation|FQN] "(" (args+=Expression ("," args+=Expression)*)? ")";
		public ParserRule getRule() { return rule; }

		//{OperationCall} operation=[Operation|FQN] "(" (args+=Expression ("," args+=Expression)*)? ")"
		public Group getGroup() { return cGroup; }

		//{OperationCall}
		public Action getOperationCallAction_0() { return cOperationCallAction_0; }

		//operation=[Operation|FQN]
		public Assignment getOperationAssignment_1() { return cOperationAssignment_1; }

		//[Operation|FQN]
		public CrossReference getOperationOperationCrossReference_1_0() { return cOperationOperationCrossReference_1_0; }

		//FQN
		public RuleCall getOperationOperationFQNParserRuleCall_1_0_1() { return cOperationOperationFQNParserRuleCall_1_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(args+=Expression ("," args+=Expression)*)?
		public Group getGroup_3() { return cGroup_3; }

		//args+=Expression
		public Assignment getArgsAssignment_3_0() { return cArgsAssignment_3_0; }

		//Expression
		public RuleCall getArgsExpressionParserRuleCall_3_0_0() { return cArgsExpressionParserRuleCall_3_0_0; }

		//("," args+=Expression)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//args+=Expression
		public Assignment getArgsAssignment_3_1_1() { return cArgsAssignment_3_1_1; }

		//Expression
		public RuleCall getArgsExpressionParserRuleCall_3_1_1_0() { return cArgsExpressionParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBOOLTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHEXTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSTRINGTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFLOATTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Literal:
		//	BOOL | INT | HEX | STRING | FLOAT;
		public ParserRule getRule() { return rule; }

		//BOOL | INT | HEX | STRING | FLOAT
		public Alternatives getAlternatives() { return cAlternatives; }

		//BOOL
		public RuleCall getBOOLTerminalRuleCall_0() { return cBOOLTerminalRuleCall_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//HEX
		public RuleCall getHEXTerminalRuleCall_2() { return cHEXTerminalRuleCall_2; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_3() { return cSTRINGTerminalRuleCall_3; }

		//FLOAT
		public RuleCall getFLOATTerminalRuleCall_4() { return cFLOATTerminalRuleCall_4; }
	}
	
	
	public class DirectionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Direction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLOCALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLOCALLocalKeyword_0_0 = (Keyword)cLOCALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cINEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cINInKeyword_1_0 = (Keyword)cINEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cOUTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cOUTOutKeyword_2_0 = (Keyword)cOUTEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Direction:
		//	LOCAL="local" | IN="in" | OUT="out";
		public EnumRule getRule() { return rule; }

		//LOCAL="local" | IN="in" | OUT="out"
		public Alternatives getAlternatives() { return cAlternatives; }

		//LOCAL="local"
		public EnumLiteralDeclaration getLOCALEnumLiteralDeclaration_0() { return cLOCALEnumLiteralDeclaration_0; }

		//"local"
		public Keyword getLOCALLocalKeyword_0_0() { return cLOCALLocalKeyword_0_0; }

		//IN="in"
		public EnumLiteralDeclaration getINEnumLiteralDeclaration_1() { return cINEnumLiteralDeclaration_1; }

		//"in"
		public Keyword getINInKeyword_1_0() { return cINInKeyword_1_0; }

		//OUT="out"
		public EnumLiteralDeclaration getOUTEnumLiteralDeclaration_2() { return cOUTEnumLiteralDeclaration_2; }

		//"out"
		public Keyword getOUTOutKeyword_2_0() { return cOUTOutKeyword_2_0; }
	}

	public class TimeEventTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "TimeEventType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAfterEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAfterAfterKeyword_0_0 = (Keyword)cAfterEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cEveryEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cEveryEveryKeyword_1_0 = (Keyword)cEveryEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum TimeEventType:
		//	after | every;
		public EnumRule getRule() { return rule; }

		//after | every
		public Alternatives getAlternatives() { return cAlternatives; }

		//after
		public EnumLiteralDeclaration getAfterEnumLiteralDeclaration_0() { return cAfterEnumLiteralDeclaration_0; }

		//"after"
		public Keyword getAfterAfterKeyword_0_0() { return cAfterAfterKeyword_0_0; }

		//every
		public EnumLiteralDeclaration getEveryEnumLiteralDeclaration_1() { return cEveryEnumLiteralDeclaration_1; }

		//"every"
		public Keyword getEveryEveryKeyword_1_0() { return cEveryEveryKeyword_1_0; }
	}

	public class AssignmentOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "AssignmentOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAssignEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAssignEqualsSignKeyword_0_0 = (Keyword)cAssignEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMultAssignEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMultAssignAsteriskEqualsSignKeyword_1_0 = (Keyword)cMultAssignEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDivAssignEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDivAssignSolidusEqualsSignKeyword_2_0 = (Keyword)cDivAssignEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cModAssignEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cModAssignPercentSignEqualsSignKeyword_3_0 = (Keyword)cModAssignEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cAddAssignEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cAddAssignPlusSignEqualsSignKeyword_4_0 = (Keyword)cAddAssignEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cSubAssignEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cSubAssignHyphenMinusEqualsSignKeyword_5_0 = (Keyword)cSubAssignEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cLeftShiftAssignEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cLeftShiftAssignLessThanSignLessThanSignEqualsSignKeyword_6_0 = (Keyword)cLeftShiftAssignEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cRightShiftAssignEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cRightShiftAssignGreaterThanSignGreaterThanSignEqualsSignKeyword_7_0 = (Keyword)cRightShiftAssignEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cAndAssignEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cAndAssignAmpersandEqualsSignKeyword_8_0 = (Keyword)cAndAssignEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cXorAssignEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cXorAssignCircumflexAccentEqualsSignKeyword_9_0 = (Keyword)cXorAssignEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cOrAssignEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cOrAssignVerticalLineEqualsSignKeyword_10_0 = (Keyword)cOrAssignEnumLiteralDeclaration_10.eContents().get(0);
		
		//enum AssignmentOperator:
		//	assign="=" | multAssign="*=" | divAssign="/=" | modAssign="%=" | addAssign="+=" | subAssign="-=" |
		//	leftShiftAssign="<<=" | rightShiftAssign=">>=" | andAssign="&=" | xorAssign="^=" | orAssign="|=";
		public EnumRule getRule() { return rule; }

		//assign="=" | multAssign="*=" | divAssign="/=" | modAssign="%=" | addAssign="+=" | subAssign="-=" | leftShiftAssign="<<="
		//| rightShiftAssign=">>=" | andAssign="&=" | xorAssign="^=" | orAssign="|="
		public Alternatives getAlternatives() { return cAlternatives; }

		//assign="="
		public EnumLiteralDeclaration getAssignEnumLiteralDeclaration_0() { return cAssignEnumLiteralDeclaration_0; }

		//"="
		public Keyword getAssignEqualsSignKeyword_0_0() { return cAssignEqualsSignKeyword_0_0; }

		//multAssign="*="
		public EnumLiteralDeclaration getMultAssignEnumLiteralDeclaration_1() { return cMultAssignEnumLiteralDeclaration_1; }

		//"*="
		public Keyword getMultAssignAsteriskEqualsSignKeyword_1_0() { return cMultAssignAsteriskEqualsSignKeyword_1_0; }

		//divAssign="/="
		public EnumLiteralDeclaration getDivAssignEnumLiteralDeclaration_2() { return cDivAssignEnumLiteralDeclaration_2; }

		//"/="
		public Keyword getDivAssignSolidusEqualsSignKeyword_2_0() { return cDivAssignSolidusEqualsSignKeyword_2_0; }

		//modAssign="%="
		public EnumLiteralDeclaration getModAssignEnumLiteralDeclaration_3() { return cModAssignEnumLiteralDeclaration_3; }

		//"%="
		public Keyword getModAssignPercentSignEqualsSignKeyword_3_0() { return cModAssignPercentSignEqualsSignKeyword_3_0; }

		//addAssign="+="
		public EnumLiteralDeclaration getAddAssignEnumLiteralDeclaration_4() { return cAddAssignEnumLiteralDeclaration_4; }

		//"+="
		public Keyword getAddAssignPlusSignEqualsSignKeyword_4_0() { return cAddAssignPlusSignEqualsSignKeyword_4_0; }

		//subAssign="-="
		public EnumLiteralDeclaration getSubAssignEnumLiteralDeclaration_5() { return cSubAssignEnumLiteralDeclaration_5; }

		//"-="
		public Keyword getSubAssignHyphenMinusEqualsSignKeyword_5_0() { return cSubAssignHyphenMinusEqualsSignKeyword_5_0; }

		//leftShiftAssign="<<="
		public EnumLiteralDeclaration getLeftShiftAssignEnumLiteralDeclaration_6() { return cLeftShiftAssignEnumLiteralDeclaration_6; }

		//"<<="
		public Keyword getLeftShiftAssignLessThanSignLessThanSignEqualsSignKeyword_6_0() { return cLeftShiftAssignLessThanSignLessThanSignEqualsSignKeyword_6_0; }

		//rightShiftAssign=">>="
		public EnumLiteralDeclaration getRightShiftAssignEnumLiteralDeclaration_7() { return cRightShiftAssignEnumLiteralDeclaration_7; }

		//">>="
		public Keyword getRightShiftAssignGreaterThanSignGreaterThanSignEqualsSignKeyword_7_0() { return cRightShiftAssignGreaterThanSignGreaterThanSignEqualsSignKeyword_7_0; }

		//andAssign="&="
		public EnumLiteralDeclaration getAndAssignEnumLiteralDeclaration_8() { return cAndAssignEnumLiteralDeclaration_8; }

		//"&="
		public Keyword getAndAssignAmpersandEqualsSignKeyword_8_0() { return cAndAssignAmpersandEqualsSignKeyword_8_0; }

		//xorAssign="^="
		public EnumLiteralDeclaration getXorAssignEnumLiteralDeclaration_9() { return cXorAssignEnumLiteralDeclaration_9; }

		//"^="
		public Keyword getXorAssignCircumflexAccentEqualsSignKeyword_9_0() { return cXorAssignCircumflexAccentEqualsSignKeyword_9_0; }

		//orAssign="|="
		public EnumLiteralDeclaration getOrAssignEnumLiteralDeclaration_10() { return cOrAssignEnumLiteralDeclaration_10; }

		//"|="
		public Keyword getOrAssignVerticalLineEqualsSignKeyword_10_0() { return cOrAssignVerticalLineEqualsSignKeyword_10_0; }
	}

	public class ShiftOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ShiftOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLeftEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLeftLessThanSignLessThanSignKeyword_0_0 = (Keyword)cLeftEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRightEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRightGreaterThanSignGreaterThanSignKeyword_1_0 = (Keyword)cRightEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ShiftOperator:
		//	left="<<" | right=">>";
		public EnumRule getRule() { return rule; }

		//left="<<" | right=">>"
		public Alternatives getAlternatives() { return cAlternatives; }

		//left="<<"
		public EnumLiteralDeclaration getLeftEnumLiteralDeclaration_0() { return cLeftEnumLiteralDeclaration_0; }

		//"<<"
		public Keyword getLeftLessThanSignLessThanSignKeyword_0_0() { return cLeftLessThanSignLessThanSignKeyword_0_0; }

		//right=">>"
		public EnumLiteralDeclaration getRightEnumLiteralDeclaration_1() { return cRightEnumLiteralDeclaration_1; }

		//">>"
		public Keyword getRightGreaterThanSignGreaterThanSignKeyword_1_0() { return cRightGreaterThanSignGreaterThanSignKeyword_1_0; }
	}

	public class AdditiveOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "AdditiveOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPlusEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPlusPlusSignKeyword_0_0 = (Keyword)cPlusEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMinusEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMinusHyphenMinusKeyword_1_0 = (Keyword)cMinusEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum AdditiveOperator:
		//	plus="+" | minus="-";
		public EnumRule getRule() { return rule; }

		//plus="+" | minus="-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//plus="+"
		public EnumLiteralDeclaration getPlusEnumLiteralDeclaration_0() { return cPlusEnumLiteralDeclaration_0; }

		//"+"
		public Keyword getPlusPlusSignKeyword_0_0() { return cPlusPlusSignKeyword_0_0; }

		//minus="-"
		public EnumLiteralDeclaration getMinusEnumLiteralDeclaration_1() { return cMinusEnumLiteralDeclaration_1; }

		//"-"
		public Keyword getMinusHyphenMinusKeyword_1_0() { return cMinusHyphenMinusKeyword_1_0; }
	}

	public class MultiplicativeOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicativeOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMulEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMulAsteriskKeyword_0_0 = (Keyword)cMulEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDivEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDivSolidusKeyword_1_0 = (Keyword)cDivEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cModEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cModPercentSignKeyword_2_0 = (Keyword)cModEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum MultiplicativeOperator:
		//	mul="*" | div="/" | mod="%";
		public EnumRule getRule() { return rule; }

		//mul="*" | div="/" | mod="%"
		public Alternatives getAlternatives() { return cAlternatives; }

		//mul="*"
		public EnumLiteralDeclaration getMulEnumLiteralDeclaration_0() { return cMulEnumLiteralDeclaration_0; }

		//"*"
		public Keyword getMulAsteriskKeyword_0_0() { return cMulAsteriskKeyword_0_0; }

		//div="/"
		public EnumLiteralDeclaration getDivEnumLiteralDeclaration_1() { return cDivEnumLiteralDeclaration_1; }

		//"/"
		public Keyword getDivSolidusKeyword_1_0() { return cDivSolidusKeyword_1_0; }

		//mod="%"
		public EnumLiteralDeclaration getModEnumLiteralDeclaration_2() { return cModEnumLiteralDeclaration_2; }

		//"%"
		public Keyword getModPercentSignKeyword_2_0() { return cModPercentSignKeyword_2_0; }
	}

	public class UnaryOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPositiveEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPositivePlusSignKeyword_0_0 = (Keyword)cPositiveEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNegativeEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNegativeHyphenMinusKeyword_1_0 = (Keyword)cNegativeEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cComplementEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cComplementTildeKeyword_2_0 = (Keyword)cComplementEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum UnaryOperator:
		//	positive="+" | negative="-" | complement="~";
		public EnumRule getRule() { return rule; }

		//positive="+" | negative="-" | complement="~"
		public Alternatives getAlternatives() { return cAlternatives; }

		//positive="+"
		public EnumLiteralDeclaration getPositiveEnumLiteralDeclaration_0() { return cPositiveEnumLiteralDeclaration_0; }

		//"+"
		public Keyword getPositivePlusSignKeyword_0_0() { return cPositivePlusSignKeyword_0_0; }

		//negative="-"
		public EnumLiteralDeclaration getNegativeEnumLiteralDeclaration_1() { return cNegativeEnumLiteralDeclaration_1; }

		//"-"
		public Keyword getNegativeHyphenMinusKeyword_1_0() { return cNegativeHyphenMinusKeyword_1_0; }

		//complement="~"
		public EnumLiteralDeclaration getComplementEnumLiteralDeclaration_2() { return cComplementEnumLiteralDeclaration_2; }

		//"~"
		public Keyword getComplementTildeKeyword_2_0() { return cComplementTildeKeyword_2_0; }
	}

	public class RelationalOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "RelationalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSmallerEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSmallerLessThanSignKeyword_0_0 = (Keyword)cSmallerEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSmallerEqualEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSmallerEqualLessThanSignEqualsSignKeyword_1_0 = (Keyword)cSmallerEqualEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGreaterGreaterThanSignKeyword_2_0 = (Keyword)cGreaterEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterEqualEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGreaterEqualGreaterThanSignEqualsSignKeyword_3_0 = (Keyword)cGreaterEqualEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cEqualsEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cEqualsEqualsSignEqualsSignKeyword_4_0 = (Keyword)cEqualsEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cNotEqualsEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cNotEqualsExclamationMarkEqualsSignKeyword_5_0 = (Keyword)cNotEqualsEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum RelationalOperator:
		//	smaller="<" | smallerEqual="<=" | greater=">" | greaterEqual=">=" | equals="==" | notEquals="!=";
		public EnumRule getRule() { return rule; }

		//smaller="<" | smallerEqual="<=" | greater=">" | greaterEqual=">=" | equals="==" | notEquals="!="
		public Alternatives getAlternatives() { return cAlternatives; }

		//smaller="<"
		public EnumLiteralDeclaration getSmallerEnumLiteralDeclaration_0() { return cSmallerEnumLiteralDeclaration_0; }

		//"<"
		public Keyword getSmallerLessThanSignKeyword_0_0() { return cSmallerLessThanSignKeyword_0_0; }

		//smallerEqual="<="
		public EnumLiteralDeclaration getSmallerEqualEnumLiteralDeclaration_1() { return cSmallerEqualEnumLiteralDeclaration_1; }

		//"<="
		public Keyword getSmallerEqualLessThanSignEqualsSignKeyword_1_0() { return cSmallerEqualLessThanSignEqualsSignKeyword_1_0; }

		//greater=">"
		public EnumLiteralDeclaration getGreaterEnumLiteralDeclaration_2() { return cGreaterEnumLiteralDeclaration_2; }

		//">"
		public Keyword getGreaterGreaterThanSignKeyword_2_0() { return cGreaterGreaterThanSignKeyword_2_0; }

		//greaterEqual=">="
		public EnumLiteralDeclaration getGreaterEqualEnumLiteralDeclaration_3() { return cGreaterEqualEnumLiteralDeclaration_3; }

		//">="
		public Keyword getGreaterEqualGreaterThanSignEqualsSignKeyword_3_0() { return cGreaterEqualGreaterThanSignEqualsSignKeyword_3_0; }

		//equals="=="
		public EnumLiteralDeclaration getEqualsEnumLiteralDeclaration_4() { return cEqualsEnumLiteralDeclaration_4; }

		//"=="
		public Keyword getEqualsEqualsSignEqualsSignKeyword_4_0() { return cEqualsEqualsSignEqualsSignKeyword_4_0; }

		//notEquals="!="
		public EnumLiteralDeclaration getNotEqualsEnumLiteralDeclaration_5() { return cNotEqualsEnumLiteralDeclaration_5; }

		//"!="
		public Keyword getNotEqualsExclamationMarkEqualsSignKeyword_5_0() { return cNotEqualsExclamationMarkEqualsSignKeyword_5_0; }
	}

	public class TimeUnitElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "TimeUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSecondEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSecondSKeyword_0_0 = (Keyword)cSecondEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMillisecondEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMillisecondMsKeyword_1_0 = (Keyword)cMillisecondEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNanosecondEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNanosecondNsKeyword_2_0 = (Keyword)cNanosecondEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum TimeUnit:
		//	second="s" | millisecond="ms" | nanosecond="ns";
		public EnumRule getRule() { return rule; }

		//second="s" | millisecond="ms" | nanosecond="ns"
		public Alternatives getAlternatives() { return cAlternatives; }

		//second="s"
		public EnumLiteralDeclaration getSecondEnumLiteralDeclaration_0() { return cSecondEnumLiteralDeclaration_0; }

		//"s"
		public Keyword getSecondSKeyword_0_0() { return cSecondSKeyword_0_0; }

		//millisecond="ms"
		public EnumLiteralDeclaration getMillisecondEnumLiteralDeclaration_1() { return cMillisecondEnumLiteralDeclaration_1; }

		//"ms"
		public Keyword getMillisecondMsKeyword_1_0() { return cMillisecondMsKeyword_1_0; }

		//nanosecond="ns"
		public EnumLiteralDeclaration getNanosecondEnumLiteralDeclaration_2() { return cNanosecondEnumLiteralDeclaration_2; }

		//"ns"
		public Keyword getNanosecondNsKeyword_2_0() { return cNanosecondNsKeyword_2_0; }
	}

	public class TypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cVoidEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cVoidVoidKeyword_0_0 = (Keyword)cVoidEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIntegerEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIntegerIntegerKeyword_1_0 = (Keyword)cIntegerEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cRealEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cRealRealKeyword_2_0 = (Keyword)cRealEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cBooleanEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cBooleanBooleanKeyword_3_0 = (Keyword)cBooleanEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cStringStringKeyword_4_0 = (Keyword)cStringEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum Type:
		//	void | integer | real | boolean | string;
		public EnumRule getRule() { return rule; }

		//void | integer | real | boolean | string
		public Alternatives getAlternatives() { return cAlternatives; }

		//void
		public EnumLiteralDeclaration getVoidEnumLiteralDeclaration_0() { return cVoidEnumLiteralDeclaration_0; }

		//"void"
		public Keyword getVoidVoidKeyword_0_0() { return cVoidVoidKeyword_0_0; }

		//integer
		public EnumLiteralDeclaration getIntegerEnumLiteralDeclaration_1() { return cIntegerEnumLiteralDeclaration_1; }

		//"integer"
		public Keyword getIntegerIntegerKeyword_1_0() { return cIntegerIntegerKeyword_1_0; }

		//real
		public EnumLiteralDeclaration getRealEnumLiteralDeclaration_2() { return cRealEnumLiteralDeclaration_2; }

		//"real"
		public Keyword getRealRealKeyword_2_0() { return cRealRealKeyword_2_0; }

		//boolean
		public EnumLiteralDeclaration getBooleanEnumLiteralDeclaration_3() { return cBooleanEnumLiteralDeclaration_3; }

		//"boolean"
		public Keyword getBooleanBooleanKeyword_3_0() { return cBooleanBooleanKeyword_3_0; }

		//string
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_4() { return cStringEnumLiteralDeclaration_4; }

		//"string"
		public Keyword getStringStringKeyword_4_0() { return cStringStringKeyword_4_0; }
	}
	
	private RootElements pRoot;
	private DefRootElements pDefRoot;
	private StatechartRootElements pStatechartRoot;
	private StateRootElements pStateRoot;
	private TransitionRootElements pTransitionRoot;
	private StatechartDefinitionElements pStatechartDefinition;
	private StateDeclarationElements pStateDeclaration;
	private TransitionStatementElements pTransitionStatement;
	private ScopeElements pScope;
	private SimpleScopeElements pSimpleScope;
	private StatechartScopeElements pStatechartScope;
	private InterfaceScopeElements pInterfaceScope;
	private InternalScopeElements pInternalScope;
	private DeclarationElements pDeclaration;
	private EventDefinitionElements pEventDefinition;
	private EventDerivationElements pEventDerivation;
	private DirectionElements unknownRuleDirection;
	private VariableDefinitionElements pVariableDefinition;
	private ClockElements pClock;
	private OperationElements pOperation;
	private EntrypointElements pEntrypoint;
	private ExitpointElements pExitpoint;
	private FQNElements pFQN;
	private ReactionElements pReaction;
	private LocalReactionElements pLocalReaction;
	private TransitionReactionElements pTransitionReaction;
	private ReactionTriggerElements pReactionTrigger;
	private ReactionEffectElements pReactionEffect;
	private ReactionPropertiesElements pReactionProperties;
	private ReactionPropertyElements pReactionProperty;
	private ReactionPriorityElements pReactionPriority;
	private EntryPointSpecElements pEntryPointSpec;
	private ExitPointSpecElements pExitPointSpec;
	private EventSpecElements pEventSpec;
	private RegularEventSpecElements pRegularEventSpec;
	private TimeEventSpecElements pTimeEventSpec;
	private TimeEventTypeElements unknownRuleTimeEventType;
	private BuiltinEventSpecElements pBuiltinEventSpec;
	private EntryEventElements pEntryEvent;
	private ExitEventElements pExitEvent;
	private OnCycleEventElements pOnCycleEvent;
	private AlwaysEventElements pAlwaysEvent;
	private StatementElements pStatement;
	private AssignmentElements pAssignment;
	private AssignmentOperatorElements unknownRuleAssignmentOperator;
	private EventRaisingElements pEventRaising;
	private ExpressionElements pExpression;
	private ConditionalExpressionElements pConditionalExpression;
	private LogicalOrExpressionElements pLogicalOrExpression;
	private LogicalAndExpressionElements pLogicalAndExpression;
	private LogicalNotExpressionElements pLogicalNotExpression;
	private BitwiseXorExpressionElements pBitwiseXorExpression;
	private BitwiseOrExpressionElements pBitwiseOrExpression;
	private BitwiseAndExpressionElements pBitwiseAndExpression;
	private LogicalRelationExpressionElements pLogicalRelationExpression;
	private ShiftExpressionElements pShiftExpression;
	private ShiftOperatorElements unknownRuleShiftOperator;
	private NumericalAddSubtractExpressionElements pNumericalAddSubtractExpression;
	private NumericalMultiplyDivideExpressionElements pNumericalMultiplyDivideExpression;
	private NumericalUnaryExpressionElements pNumericalUnaryExpression;
	private PrimaryExpressionElements pPrimaryExpression;
	private AdditiveOperatorElements unknownRuleAdditiveOperator;
	private MultiplicativeOperatorElements unknownRuleMultiplicativeOperator;
	private UnaryOperatorElements unknownRuleUnaryOperator;
	private RelationalOperatorElements unknownRuleRelationalOperator;
	private TimeUnitElements unknownRuleTimeUnit;
	private TypeElements unknownRuleType;
	private ValueExpressionElements pValueExpression;
	private PrimitiveValueExpressionElements pPrimitiveValueExpression;
	private ElementReferenceExpressionElements pElementReferenceExpression;
	private OperationCallElements pOperationCall;
	private LiteralElements pLiteral;
	private TerminalRule tBOOL;
	private TerminalRule tHEX;
	private TerminalRule tFLOAT;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public STextGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// * ---- root rules ----
	//These root rules are not relevant for the grammar integration in the statechart. They just integrate the different start rules consistently 
	//into a single grammar. 
	// * / Root:
	//	roots+=DefRoot*;
	public RootElements getRootAccess() {
		return (pRoot != null) ? pRoot : (pRoot = new RootElements());
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}

	//DefRoot:
	//	StatechartRoot | StateRoot | TransitionRoot;
	public DefRootElements getDefRootAccess() {
		return (pDefRoot != null) ? pDefRoot : (pDefRoot = new DefRootElements());
	}
	
	public ParserRule getDefRootRule() {
		return getDefRootAccess().getRule();
	}

	//StatechartRoot:
	//	"@@statechart@@" def=StatechartDefinition;
	public StatechartRootElements getStatechartRootAccess() {
		return (pStatechartRoot != null) ? pStatechartRoot : (pStatechartRoot = new StatechartRootElements());
	}
	
	public ParserRule getStatechartRootRule() {
		return getStatechartRootAccess().getRule();
	}

	//StateRoot:
	//	"@@state@@" def=StateDeclaration;
	public StateRootElements getStateRootAccess() {
		return (pStateRoot != null) ? pStateRoot : (pStateRoot = new StateRootElements());
	}
	
	public ParserRule getStateRootRule() {
		return getStateRootAccess().getRule();
	}

	//TransitionRoot:
	//	"@@transition@@" def=TransitionStatement;
	public TransitionRootElements getTransitionRootAccess() {
		return (pTransitionRoot != null) ? pTransitionRoot : (pTransitionRoot = new TransitionRootElements());
	}
	
	public ParserRule getTransitionRootRule() {
		return getTransitionRootAccess().getRule();
	}

	/// * ---- start rules ----
	//Define the starting points used by the statechart integration. These rules hook in the concrete rules of the specific grammar.
	// * / StatechartDefinition:
	//	{StatechartDefinition} ("namespace" namespace=FQN)? definitionScopes+=StatechartScope*;
	public StatechartDefinitionElements getStatechartDefinitionAccess() {
		return (pStatechartDefinition != null) ? pStatechartDefinition : (pStatechartDefinition = new StatechartDefinitionElements());
	}
	
	public ParserRule getStatechartDefinitionRule() {
		return getStatechartDefinitionAccess().getRule();
	}

	//StateDeclaration:
	//	scope=SimpleScope;
	public StateDeclarationElements getStateDeclarationAccess() {
		return (pStateDeclaration != null) ? pStateDeclaration : (pStateDeclaration = new StateDeclarationElements());
	}
	
	public ParserRule getStateDeclarationRule() {
		return getStateDeclarationAccess().getRule();
	}

	//TransitionStatement: //	Reaction;
	//	TransitionReaction;
	public TransitionStatementElements getTransitionStatementAccess() {
		return (pTransitionStatement != null) ? pTransitionStatement : (pTransitionStatement = new TransitionStatementElements());
	}
	
	public ParserRule getTransitionStatementRule() {
		return getTransitionStatementAccess().getRule();
	}

	/// * ---- scope rules ----
	//Defines different kinds of scopes that contain element definitions. Scopes are used for element definitions in statechart, regions, and state 
	// * / Scope returns sct::Scope:
	//	SimpleScope | StatechartScope;
	public ScopeElements getScopeAccess() {
		return (pScope != null) ? pScope : (pScope = new ScopeElements());
	}
	
	public ParserRule getScopeRule() {
		return getScopeAccess().getRule();
	}

	//// a SimpleScope is used for states and regions
	//SimpleScope returns sct::Scope:
	//	{SimpleScope} declarations+=Declaration*;
	public SimpleScopeElements getSimpleScopeAccess() {
		return (pSimpleScope != null) ? pSimpleScope : (pSimpleScope = new SimpleScopeElements());
	}
	
	public ParserRule getSimpleScopeRule() {
		return getSimpleScopeAccess().getRule();
	}

	//// defines the poosible scopes for statecharts
	//StatechartScope returns sct::Scope:
	//	InterfaceScope | InternalScope;
	public StatechartScopeElements getStatechartScopeAccess() {
		return (pStatechartScope != null) ? pStatechartScope : (pStatechartScope = new StatechartScopeElements());
	}
	
	public ParserRule getStatechartScopeRule() {
		return getStatechartScopeAccess().getRule();
	}

	//InterfaceScope returns sct::Scope:
	//	{InterfaceScope} "interface" name=ID? ":" declarations+=Declaration*;
	public InterfaceScopeElements getInterfaceScopeAccess() {
		return (pInterfaceScope != null) ? pInterfaceScope : (pInterfaceScope = new InterfaceScopeElements());
	}
	
	public ParserRule getInterfaceScopeRule() {
		return getInterfaceScopeAccess().getRule();
	}

	//InternalScope returns sct::Scope:
	//	{InternalScope} "internal" ":" declarations+=Declaration*;
	public InternalScopeElements getInternalScopeAccess() {
		return (pInternalScope != null) ? pInternalScope : (pInternalScope = new InternalScopeElements());
	}
	
	public ParserRule getInternalScopeRule() {
		return getInternalScopeAccess().getRule();
	}

	/// * ---- declarations ----
	//a definition is a top level element of a definition scope. * / Declaration returns sct::Declaration:
	//	EventDefinition | VariableDefinition | Clock | Operation | LocalReaction | Entrypoint | Exitpoint;
	public DeclarationElements getDeclarationAccess() {
		return (pDeclaration != null) ? pDeclaration : (pDeclaration = new DeclarationElements());
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	//// DataElement: EventDefinition | VariableDefinition;
	/// * ---- event definition ---- * / EventDefinition returns sct::Event:
	//	{EventDefinition} direction=Direction? "event" name=ID (":" type=Type)? derivation=EventDerivation?;
	public EventDefinitionElements getEventDefinitionAccess() {
		return (pEventDefinition != null) ? pEventDefinition : (pEventDefinition = new EventDefinitionElements());
	}
	
	public ParserRule getEventDefinitionRule() {
		return getEventDefinitionAccess().getRule();
	}

	//EventDerivation:
	//	"=" condition=Expression (":" value=Expression)?;
	public EventDerivationElements getEventDerivationAccess() {
		return (pEventDerivation != null) ? pEventDerivation : (pEventDerivation = new EventDerivationElements());
	}
	
	public ParserRule getEventDerivationRule() {
		return getEventDerivationAccess().getRule();
	}

	//enum Direction:
	//	LOCAL="local" | IN="in" | OUT="out";
	public DirectionElements getDirectionAccess() {
		return (unknownRuleDirection != null) ? unknownRuleDirection : (unknownRuleDirection = new DirectionElements());
	}
	
	public EnumRule getDirectionRule() {
		return getDirectionAccess().getRule();
	}

	/// * ---- variable definition ---- * / VariableDefinition returns sct::Variable:
	//	{VariableDefinition} "var" (readonly?="readonly"? & external?="external"?) name=ID ":" type=Type ("="
	//	initialValue=Literal)?;
	public VariableDefinitionElements getVariableDefinitionAccess() {
		return (pVariableDefinition != null) ? pVariableDefinition : (pVariableDefinition = new VariableDefinitionElements());
	}
	
	public ParserRule getVariableDefinitionRule() {
		return getVariableDefinitionAccess().getRule();
	}

	/// * ---- clock definition ---- * / Clock returns sct::Declaration:
	//	{Clock} "clock" name=ID;
	public ClockElements getClockAccess() {
		return (pClock != null) ? pClock : (pClock = new ClockElements());
	}
	
	public ParserRule getClockRule() {
		return getClockAccess().getRule();
	}

	/// * ---- clock definition ---- * / Operation returns sct::Declaration:
	//	{Operation} "operation" name=ID "(" (paramTypes+=Type ("," paramTypes+=Type)*)? ")" (":" type=Type)?;
	public OperationElements getOperationAccess() {
		return (pOperation != null) ? pOperation : (pOperation = new OperationElements());
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}

	/// * ---- entrypoint definition ---- * / Entrypoint returns sct::Declaration:
	//	{Entrypoint} "entrypoint" name=ID;
	public EntrypointElements getEntrypointAccess() {
		return (pEntrypoint != null) ? pEntrypoint : (pEntrypoint = new EntrypointElements());
	}
	
	public ParserRule getEntrypointRule() {
		return getEntrypointAccess().getRule();
	}

	/// * ---- exitpoint definition ---- * / Exitpoint returns sct::Declaration:
	//	{Exitpoint} "exitpoint" name=ID;
	public ExitpointElements getExitpointAccess() {
		return (pExitpoint != null) ? pExitpoint : (pExitpoint = new ExitpointElements());
	}
	
	public ParserRule getExitpointRule() {
		return getExitpointAccess().getRule();
	}

	/// * ---- Datatype rules ---- * / FQN:
	//	ID ("." ID)*;
	public FQNElements getFQNAccess() {
		return (pFQN != null) ? pFQN : (pFQN = new FQNElements());
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}

	/// * ---- reaction rules ----
	//Define the structure of reactions that are central for describing the statecharts behavior. 
	// * / Reaction returns sct::Reaction:
	//	LocalReaction | TransitionReaction;
	public ReactionElements getReactionAccess() {
		return (pReaction != null) ? pReaction : (pReaction = new ReactionElements());
	}
	
	public ParserRule getReactionRule() {
		return getReactionAccess().getRule();
	}

	//LocalReaction:
	//	trigger=ReactionTrigger ("/" effect=ReactionEffect) ("#" properties=ReactionProperties)?;
	public LocalReactionElements getLocalReactionAccess() {
		return (pLocalReaction != null) ? pLocalReaction : (pLocalReaction = new LocalReactionElements());
	}
	
	public ParserRule getLocalReactionRule() {
		return getLocalReactionAccess().getRule();
	}

	//TransitionReaction:
	//	{TransitionReaction} trigger=ReactionTrigger? ("/" effect=ReactionEffect)? ("#" properties=ReactionProperties)?;
	public TransitionReactionElements getTransitionReactionAccess() {
		return (pTransitionReaction != null) ? pTransitionReaction : (pTransitionReaction = new TransitionReactionElements());
	}
	
	public ParserRule getTransitionReactionRule() {
		return getTransitionReactionAccess().getRule();
	}

	//ReactionTrigger returns sct::Trigger:
	//	{ReactionTrigger} (triggers+=EventSpec ("," triggers+=EventSpec)* ("[" guardExpression=Expression "]")? | "["
	//	guardExpression=Expression "]");
	public ReactionTriggerElements getReactionTriggerAccess() {
		return (pReactionTrigger != null) ? pReactionTrigger : (pReactionTrigger = new ReactionTriggerElements());
	}
	
	public ParserRule getReactionTriggerRule() {
		return getReactionTriggerAccess().getRule();
	}

	//ReactionEffect returns sct::Effect:
	//	{ReactionEffect} (actions+=Statement ";")+;
	public ReactionEffectElements getReactionEffectAccess() {
		return (pReactionEffect != null) ? pReactionEffect : (pReactionEffect = new ReactionEffectElements());
	}
	
	public ParserRule getReactionEffectRule() {
		return getReactionEffectAccess().getRule();
	}

	//ReactionProperties:
	//	{ReactionProperties} properties+=ReactionProperty*;
	public ReactionPropertiesElements getReactionPropertiesAccess() {
		return (pReactionProperties != null) ? pReactionProperties : (pReactionProperties = new ReactionPropertiesElements());
	}
	
	public ParserRule getReactionPropertiesRule() {
		return getReactionPropertiesAccess().getRule();
	}

	//ReactionProperty:
	//	ReactionPriority | EntryPointSpec | ExitPointSpec;
	public ReactionPropertyElements getReactionPropertyAccess() {
		return (pReactionProperty != null) ? pReactionProperty : (pReactionProperty = new ReactionPropertyElements());
	}
	
	public ParserRule getReactionPropertyRule() {
		return getReactionPropertyAccess().getRule();
	}

	//ReactionPriority:
	//	priority=INT;
	public ReactionPriorityElements getReactionPriorityAccess() {
		return (pReactionPriority != null) ? pReactionPriority : (pReactionPriority = new ReactionPriorityElements());
	}
	
	public ParserRule getReactionPriorityRule() {
		return getReactionPriorityAccess().getRule();
	}

	//EntryPointSpec:
	//	">" entrypoint=[Entrypoint|FQN];
	public EntryPointSpecElements getEntryPointSpecAccess() {
		return (pEntryPointSpec != null) ? pEntryPointSpec : (pEntryPointSpec = new EntryPointSpecElements());
	}
	
	public ParserRule getEntryPointSpecRule() {
		return getEntryPointSpecAccess().getRule();
	}

	//ExitPointSpec:
	//	exitpoint=[Exitpoint|FQN] ">";
	public ExitPointSpecElements getExitPointSpecAccess() {
		return (pExitPointSpec != null) ? pExitPointSpec : (pExitPointSpec = new ExitPointSpecElements());
	}
	
	public ParserRule getExitPointSpecRule() {
		return getExitPointSpecAccess().getRule();
	}

	//EventSpec:
	//	RegularEventSpec | TimeEventSpec | BuiltinEventSpec;
	public EventSpecElements getEventSpecAccess() {
		return (pEventSpec != null) ? pEventSpec : (pEventSpec = new EventSpecElements());
	}
	
	public ParserRule getEventSpecRule() {
		return getEventSpecAccess().getRule();
	}

	//RegularEventSpec:
	//	event=[sct::Event|FQN];
	public RegularEventSpecElements getRegularEventSpecAccess() {
		return (pRegularEventSpec != null) ? pRegularEventSpec : (pRegularEventSpec = new RegularEventSpecElements());
	}
	
	public ParserRule getRegularEventSpecRule() {
		return getRegularEventSpecAccess().getRule();
	}

	//// TODO: redefine after trigger - we need to use it with clocks
	//TimeEventSpec:
	//	type=TimeEventType value=INT unit=TimeUnit?;
	public TimeEventSpecElements getTimeEventSpecAccess() {
		return (pTimeEventSpec != null) ? pTimeEventSpec : (pTimeEventSpec = new TimeEventSpecElements());
	}
	
	public ParserRule getTimeEventSpecRule() {
		return getTimeEventSpecAccess().getRule();
	}

	//enum TimeEventType:
	//	after | every;
	public TimeEventTypeElements getTimeEventTypeAccess() {
		return (unknownRuleTimeEventType != null) ? unknownRuleTimeEventType : (unknownRuleTimeEventType = new TimeEventTypeElements());
	}
	
	public EnumRule getTimeEventTypeRule() {
		return getTimeEventTypeAccess().getRule();
	}

	//// TODO: add dereived events like in(state), entered(state)	
	//BuiltinEventSpec:
	//	EntryEvent | ExitEvent | OnCycleEvent | AlwaysEvent;
	public BuiltinEventSpecElements getBuiltinEventSpecAccess() {
		return (pBuiltinEventSpec != null) ? pBuiltinEventSpec : (pBuiltinEventSpec = new BuiltinEventSpecElements());
	}
	
	public ParserRule getBuiltinEventSpecRule() {
		return getBuiltinEventSpecAccess().getRule();
	}

	//EntryEvent:
	//	{EntryEvent} "entry";
	public EntryEventElements getEntryEventAccess() {
		return (pEntryEvent != null) ? pEntryEvent : (pEntryEvent = new EntryEventElements());
	}
	
	public ParserRule getEntryEventRule() {
		return getEntryEventAccess().getRule();
	}

	//ExitEvent:
	//	{ExitEvent} "exit";
	public ExitEventElements getExitEventAccess() {
		return (pExitEvent != null) ? pExitEvent : (pExitEvent = new ExitEventElements());
	}
	
	public ParserRule getExitEventRule() {
		return getExitEventAccess().getRule();
	}

	//// TODO: ?!? better 'ontick' ?!?
	//OnCycleEvent:
	//	{OnCycleEvent} "oncycle";
	public OnCycleEventElements getOnCycleEventAccess() {
		return (pOnCycleEvent != null) ? pOnCycleEvent : (pOnCycleEvent = new OnCycleEventElements());
	}
	
	public ParserRule getOnCycleEventRule() {
		return getOnCycleEventAccess().getRule();
	}

	//AlwaysEvent:
	//	{AlwaysEvent} "always";
	public AlwaysEventElements getAlwaysEventAccess() {
		return (pAlwaysEvent != null) ? pAlwaysEvent : (pAlwaysEvent = new AlwaysEventElements());
	}
	
	public ParserRule getAlwaysEventRule() {
		return getAlwaysEventAccess().getRule();
	}

	/// * --- statements --- * / Statement returns sct::Statement:
	//	Assignment | EventRaising | OperationCall;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//Assignment:
	//	varRef=[sct::Variable|FQN] operator=AssignmentOperator expression=Expression;
	public AssignmentElements getAssignmentAccess() {
		return (pAssignment != null) ? pAssignment : (pAssignment = new AssignmentElements());
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//enum AssignmentOperator:
	//	assign="=" | multAssign="*=" | divAssign="/=" | modAssign="%=" | addAssign="+=" | subAssign="-=" |
	//	leftShiftAssign="<<=" | rightShiftAssign=">>=" | andAssign="&=" | xorAssign="^=" | orAssign="|=";
	public AssignmentOperatorElements getAssignmentOperatorAccess() {
		return (unknownRuleAssignmentOperator != null) ? unknownRuleAssignmentOperator : (unknownRuleAssignmentOperator = new AssignmentOperatorElements());
	}
	
	public EnumRule getAssignmentOperatorRule() {
		return getAssignmentOperatorAccess().getRule();
	}

	//EventRaising:
	//	"raise" event=[sct::Event|FQN] (":" value=Expression)?;
	public EventRaisingElements getEventRaisingAccess() {
		return (pEventRaising != null) ? pEventRaising : (pEventRaising = new EventRaisingElements());
	}
	
	public ParserRule getEventRaisingRule() {
		return getEventRaisingAccess().getRule();
	}

	//// ****************
	//// Expression Grammar
	//// ****************
	////ExpressionRule:
	////	expression=(LogicalOrExpression | RaiseEventExpression);
	//Expression:
	//	ConditionalExpression;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//ConditionalExpression returns Expression:
	//	LogicalOrExpression ({ConditionalExpression.condition=current} "?" trueCase=LogicalOrExpression ":"
	//	falseCase=LogicalOrExpression)?;
	public ConditionalExpressionElements getConditionalExpressionAccess() {
		return (pConditionalExpression != null) ? pConditionalExpression : (pConditionalExpression = new ConditionalExpressionElements());
	}
	
	public ParserRule getConditionalExpressionRule() {
		return getConditionalExpressionAccess().getRule();
	}

	//LogicalOrExpression returns Expression:
	//	LogicalAndExpression ({LogicalOrExpression.leftOperand=current} "||" rightOperand=LogicalAndExpression)*;
	public LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return (pLogicalOrExpression != null) ? pLogicalOrExpression : (pLogicalOrExpression = new LogicalOrExpressionElements());
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}

	//LogicalAndExpression returns Expression:
	//	LogicalNotExpression ({LogicalAndExpression.leftOperand=current} "&&" rightOperand=LogicalNotExpression)*;
	public LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return (pLogicalAndExpression != null) ? pLogicalAndExpression : (pLogicalAndExpression = new LogicalAndExpressionElements());
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}

	//LogicalNotExpression returns Expression:
	//	BitwiseXorExpression | {LogicalNotExpression} "!" operand=BitwiseXorExpression;
	public LogicalNotExpressionElements getLogicalNotExpressionAccess() {
		return (pLogicalNotExpression != null) ? pLogicalNotExpression : (pLogicalNotExpression = new LogicalNotExpressionElements());
	}
	
	public ParserRule getLogicalNotExpressionRule() {
		return getLogicalNotExpressionAccess().getRule();
	}

	//BitwiseXorExpression returns Expression:
	//	BitwiseOrExpression ({BitwiseXorExpression.leftOperand=current} "^" rightOperand=BitwiseOrExpression)*;
	public BitwiseXorExpressionElements getBitwiseXorExpressionAccess() {
		return (pBitwiseXorExpression != null) ? pBitwiseXorExpression : (pBitwiseXorExpression = new BitwiseXorExpressionElements());
	}
	
	public ParserRule getBitwiseXorExpressionRule() {
		return getBitwiseXorExpressionAccess().getRule();
	}

	//BitwiseOrExpression returns Expression:
	//	BitwiseAndExpression ({BitwiseOrExpression.leftOperand=current} "|" rightOperand=BitwiseAndExpression)*;
	public BitwiseOrExpressionElements getBitwiseOrExpressionAccess() {
		return (pBitwiseOrExpression != null) ? pBitwiseOrExpression : (pBitwiseOrExpression = new BitwiseOrExpressionElements());
	}
	
	public ParserRule getBitwiseOrExpressionRule() {
		return getBitwiseOrExpressionAccess().getRule();
	}

	//BitwiseAndExpression returns Expression:
	//	LogicalRelationExpression ({BitwiseAndExpression.leftOperand=current} "&" rightOperand=LogicalRelationExpression)*;
	public BitwiseAndExpressionElements getBitwiseAndExpressionAccess() {
		return (pBitwiseAndExpression != null) ? pBitwiseAndExpression : (pBitwiseAndExpression = new BitwiseAndExpressionElements());
	}
	
	public ParserRule getBitwiseAndExpressionRule() {
		return getBitwiseAndExpressionAccess().getRule();
	}

	//LogicalRelationExpression returns Expression:
	//	ShiftExpression ({LogicalRelationExpression.leftOperand=current} operator=RelationalOperator
	//	rightOperand=ShiftExpression)*;
	public LogicalRelationExpressionElements getLogicalRelationExpressionAccess() {
		return (pLogicalRelationExpression != null) ? pLogicalRelationExpression : (pLogicalRelationExpression = new LogicalRelationExpressionElements());
	}
	
	public ParserRule getLogicalRelationExpressionRule() {
		return getLogicalRelationExpressionAccess().getRule();
	}

	//ShiftExpression returns Expression:
	//	NumericalAddSubtractExpression ({ShiftExpression.leftOperand=current} operator=ShiftOperator
	//	rightOperand=NumericalAddSubtractExpression)*;
	public ShiftExpressionElements getShiftExpressionAccess() {
		return (pShiftExpression != null) ? pShiftExpression : (pShiftExpression = new ShiftExpressionElements());
	}
	
	public ParserRule getShiftExpressionRule() {
		return getShiftExpressionAccess().getRule();
	}

	//enum ShiftOperator:
	//	left="<<" | right=">>";
	public ShiftOperatorElements getShiftOperatorAccess() {
		return (unknownRuleShiftOperator != null) ? unknownRuleShiftOperator : (unknownRuleShiftOperator = new ShiftOperatorElements());
	}
	
	public EnumRule getShiftOperatorRule() {
		return getShiftOperatorAccess().getRule();
	}

	//NumericalAddSubtractExpression returns Expression:
	//	NumericalMultiplyDivideExpression ({NumericalAddSubtractExpression.leftOperand=current} operator=AdditiveOperator
	//	rightOperand=NumericalMultiplyDivideExpression)*;
	public NumericalAddSubtractExpressionElements getNumericalAddSubtractExpressionAccess() {
		return (pNumericalAddSubtractExpression != null) ? pNumericalAddSubtractExpression : (pNumericalAddSubtractExpression = new NumericalAddSubtractExpressionElements());
	}
	
	public ParserRule getNumericalAddSubtractExpressionRule() {
		return getNumericalAddSubtractExpressionAccess().getRule();
	}

	//NumericalMultiplyDivideExpression returns Expression:
	//	NumericalUnaryExpression ({NumericalMultiplyDivideExpression.leftOperand=current} operator=MultiplicativeOperator
	//	rightOperand=NumericalUnaryExpression)*;
	public NumericalMultiplyDivideExpressionElements getNumericalMultiplyDivideExpressionAccess() {
		return (pNumericalMultiplyDivideExpression != null) ? pNumericalMultiplyDivideExpression : (pNumericalMultiplyDivideExpression = new NumericalMultiplyDivideExpressionElements());
	}
	
	public ParserRule getNumericalMultiplyDivideExpressionRule() {
		return getNumericalMultiplyDivideExpressionAccess().getRule();
	}

	//NumericalUnaryExpression returns Expression:
	//	PrimaryExpression | {NumericalUnaryExpression} operator=UnaryOperator operand=PrimaryExpression;
	public NumericalUnaryExpressionElements getNumericalUnaryExpressionAccess() {
		return (pNumericalUnaryExpression != null) ? pNumericalUnaryExpression : (pNumericalUnaryExpression = new NumericalUnaryExpressionElements());
	}
	
	public ParserRule getNumericalUnaryExpressionRule() {
		return getNumericalUnaryExpressionAccess().getRule();
	}

	//PrimaryExpression returns Expression:
	//	ValueExpression | "(" Expression ")" | OperationCall;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return (pPrimaryExpression != null) ? pPrimaryExpression : (pPrimaryExpression = new PrimaryExpressionElements());
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//enum AdditiveOperator:
	//	plus="+" | minus="-";
	public AdditiveOperatorElements getAdditiveOperatorAccess() {
		return (unknownRuleAdditiveOperator != null) ? unknownRuleAdditiveOperator : (unknownRuleAdditiveOperator = new AdditiveOperatorElements());
	}
	
	public EnumRule getAdditiveOperatorRule() {
		return getAdditiveOperatorAccess().getRule();
	}

	//enum MultiplicativeOperator:
	//	mul="*" | div="/" | mod="%";
	public MultiplicativeOperatorElements getMultiplicativeOperatorAccess() {
		return (unknownRuleMultiplicativeOperator != null) ? unknownRuleMultiplicativeOperator : (unknownRuleMultiplicativeOperator = new MultiplicativeOperatorElements());
	}
	
	public EnumRule getMultiplicativeOperatorRule() {
		return getMultiplicativeOperatorAccess().getRule();
	}

	//enum UnaryOperator:
	//	positive="+" | negative="-" | complement="~";
	public UnaryOperatorElements getUnaryOperatorAccess() {
		return (unknownRuleUnaryOperator != null) ? unknownRuleUnaryOperator : (unknownRuleUnaryOperator = new UnaryOperatorElements());
	}
	
	public EnumRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}

	//enum RelationalOperator:
	//	smaller="<" | smallerEqual="<=" | greater=">" | greaterEqual=">=" | equals="==" | notEquals="!=";
	public RelationalOperatorElements getRelationalOperatorAccess() {
		return (unknownRuleRelationalOperator != null) ? unknownRuleRelationalOperator : (unknownRuleRelationalOperator = new RelationalOperatorElements());
	}
	
	public EnumRule getRelationalOperatorRule() {
		return getRelationalOperatorAccess().getRule();
	}

	//enum TimeUnit:
	//	second="s" | millisecond="ms" | nanosecond="ns";
	public TimeUnitElements getTimeUnitAccess() {
		return (unknownRuleTimeUnit != null) ? unknownRuleTimeUnit : (unknownRuleTimeUnit = new TimeUnitElements());
	}
	
	public EnumRule getTimeUnitRule() {
		return getTimeUnitAccess().getRule();
	}

	//enum Type:
	//	void | integer | real | boolean | string;
	public TypeElements getTypeAccess() {
		return (unknownRuleType != null) ? unknownRuleType : (unknownRuleType = new TypeElements());
	}
	
	public EnumRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//ValueExpression returns Expression:
	//	PrimitiveValueExpression | ElementReferenceExpression;
	public ValueExpressionElements getValueExpressionAccess() {
		return (pValueExpression != null) ? pValueExpression : (pValueExpression = new ValueExpressionElements());
	}
	
	public ParserRule getValueExpressionRule() {
		return getValueExpressionAccess().getRule();
	}

	//PrimitiveValueExpression returns Expression:
	//	{PrimitiveValueExpression} value=Literal;
	public PrimitiveValueExpressionElements getPrimitiveValueExpressionAccess() {
		return (pPrimitiveValueExpression != null) ? pPrimitiveValueExpression : (pPrimitiveValueExpression = new PrimitiveValueExpressionElements());
	}
	
	public ParserRule getPrimitiveValueExpressionRule() {
		return getPrimitiveValueExpressionAccess().getRule();
	}

	//ElementReferenceExpression returns Expression:
	//	{ElementReferenceExpression} value=[sct::Declaration|FQN];
	public ElementReferenceExpressionElements getElementReferenceExpressionAccess() {
		return (pElementReferenceExpression != null) ? pElementReferenceExpression : (pElementReferenceExpression = new ElementReferenceExpressionElements());
	}
	
	public ParserRule getElementReferenceExpressionRule() {
		return getElementReferenceExpressionAccess().getRule();
	}

	//OperationCall returns Expression:
	//	{OperationCall} operation=[Operation|FQN] "(" (args+=Expression ("," args+=Expression)*)? ")";
	public OperationCallElements getOperationCallAccess() {
		return (pOperationCall != null) ? pOperationCall : (pOperationCall = new OperationCallElements());
	}
	
	public ParserRule getOperationCallRule() {
		return getOperationCallAccess().getRule();
	}

	//Literal:
	//	BOOL | INT | HEX | STRING | FLOAT;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//terminal BOOL:
	//	"true" | "false";
	public TerminalRule getBOOLRule() {
		return (tBOOL != null) ? tBOOL : (tBOOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOL"));
	} 

	//terminal HEX:
	//	"0" ("x" | "X") ("0".."9" | "a".."f" | "A".."F")+;
	public TerminalRule getHEXRule() {
		return (tHEX != null) ? tHEX : (tHEX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEX"));
	} 

	//terminal FLOAT:
	//	(INT "." INT) ("e" ("-" | "+") INT)? ("f" | "F" | "d" | "D")?;
	public TerminalRule getFLOATRule() {
		return (tFLOAT != null) ? tFLOAT : (tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
