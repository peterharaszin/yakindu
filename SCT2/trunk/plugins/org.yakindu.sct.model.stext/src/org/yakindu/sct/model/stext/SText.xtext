grammar org.yakindu.sct.model.stext.SText with org.eclipse.xtext.common.Terminals

generate stext "http://www.yakindu.org/sct/statechart/SText"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/org.yakindu.sct.model.sgraph/model/emf/sgraph.ecore" as sgraph
import "platform:/resource/org.yakindu.base.types/model/types.ecore" as types

/* ---- root rules ----
These root rules are not relevant for the grammar integration in the statechart. They just integrate the different start rules consistently 
into a single grammar. 
*/
Root:
	(roots+=DefRoot)*;

DefRoot:
	StatechartRoot | StateRoot | TransitionRoot;

StatechartRoot:
	'@@statechart@@' def=StatechartSpecification;

StateRoot:
	'@@state@@' def=StateSpecification;

TransitionRoot:
	'@@transition@@' def=TransitionSpecification;

	/* ---- start rules ----
Define the starting points used by the statechart integration. These rules hook in the concrete rules of the specific grammar.
*/
StatechartSpecification:
	{StatechartSpecification}
	('namespace' namespace=FQN)?
	(definitionScopes+=StatechartScope)*;

StateSpecification:
	scope=StateScope;

TransitionSpecification:
	reaction=TransitionReaction;

	/* ---- scope rules ----
Defines different kinds of scopes that contain element definitions. Scopes are used for element definitions in statechart, regions, and state 
*/
Scope returns sgraph::Scope:
	(StateScope | StatechartScope);

	// a SimpleScope is used for states and regions
StateScope returns sgraph::Scope:
	{SimpleScope} (declarations+=(LocalReaction | Entrypoint | Exitpoint))*;

	// defines the poosible scopes for statecharts
StatechartScope returns sgraph::Scope:
	InterfaceScope | InternalScope;

InterfaceScope returns sgraph::Scope:
	{InterfaceScope} 'interface' (name=ID)? ':' (declarations+=(EventDefinition | VariableDefinition | Entrypoint |
	Exitpoint))*;

InternalScope returns sgraph::Scope:
	{InternalScope} 'internal' ':' (declarations+=(EventDefinition | VariableDefinition | Operation | LocalReaction))*;

	/* ---- declarations ----
a definition is a top level element of a definition scope. */
Declaration returns sgraph::Declaration:
	EventDefinition | VariableDefinition | Operation | LocalReaction | Entrypoint | Exitpoint;

	// DataElement: EventDefinition | VariableDefinition;

/* ---- event definition ---- */
EventDefinition returns sgraph::Event:
	{EventDefinition} (direction=Direction)? 'event' name=ID (':' type=[types::Type|FQN])? (derivation=EventDerivation)?;

EventDerivation:
	'=' condition=Expression (':' value=Expression)?;

enum Direction:
	LOCAL='local' | IN='in' | OUT='out';

/* ---- variable definition ---- */
VariableDefinition returns sgraph::Variable:
	{VariableDefinition} 'var' ((readonly?='readonly')? & (external?='external')?) name=ID ':' type=[types::Type|FQN] ('='
	initialValue=Expression)?;

/* ---- operation definition ---- */
Operation returns sgraph::Declaration:
	{Operation} 'operation' name=ID '(' (paramTypes+=[types::Type|FQN] (',' paramTypes+=[types::Type|FQN])*)? ')' (':' type=[types::Type|FQN])?;

/* ---- entrypoint definition ---- */
Entrypoint returns sgraph::Declaration:
	{Entrypoint} 'entrypoint' name=ID;

/* ---- exitpoint definition ---- */
Exitpoint returns sgraph::Declaration:
	{Exitpoint} 'exitpoint' name=ID;

/* ---- Datatype rules ---- */
FQN:
	ID ('.' ID)*;

	/* ---- reaction rules ----
Define the structure of reactions that are central for describing the statecharts behavior. 
*/
Reaction returns sgraph::Reaction:
	LocalReaction | TransitionReaction;

LocalReaction:
	(trigger=ReactionTrigger) ('/' effect=ReactionEffect) ('#' properties=ReactionProperties)?;

TransitionReaction:
	{TransitionReaction} (trigger=ReactionTrigger)? ('/' effect=ReactionEffect)? ('#' properties=ReactionProperties)?;

ReactionTrigger returns sgraph::Trigger:
	{ReactionTrigger} ((triggers+=EventSpec ("," triggers+=EventSpec)* (=> '[' guardExpression=Expression ']')?)
	| ('[' guardExpression=Expression ']'));

ReactionEffect returns sgraph::Effect:
	{ReactionEffect} actions+=Statement (';' actions+=Statement )* (';')?;

ReactionProperties:
	{ReactionProperties} (properties+=ReactionProperty)*;

ReactionProperty:
	ReactionPriority | EntryPointSpec | ExitPointSpec;

ReactionPriority:
	priority=INT;

EntryPointSpec:
	'>' entrypoint=[Entrypoint|FQN];

ExitPointSpec:
	exitpoint=[Exitpoint|FQN] '>';

EventSpec:
	RegularEventSpec | TimeEventSpec | BuiltinEventSpec;

RegularEventSpec:
	event=[sgraph::Event|FQN];

	// TODO: redefine after trigger - we need to use it with clocks
TimeEventSpec:
	type=TimeEventType value=INT (unit=TimeUnit)?;

enum TimeEventType:
	after | every;

	//TODO: Group OnCycleEvent and AlwaysEvent, maybe replace it by a DoEvent
BuiltinEventSpec:
	EntryEvent | ExitEvent | OnCycleEvent | AlwaysEvent | DefaultEvent;

EntryEvent:
	{EntryEvent} 'entry';

ExitEvent:
	{ExitEvent} 'exit';

OnCycleEvent:
	{OnCycleEvent} 'oncycle'; 
	
AlwaysEvent:
	{AlwaysEvent} 'always';

DefaultEvent:
	{DefaultEvent} ('default' | 'else')
;

/* --- statements --- */
Statement returns sgraph::Statement:
	Assignment | EventRaising | OperationCall; 

Assignment:
	varRef=[sgraph::Variable|FQN] operator=AssignmentOperator expression=Expression;

enum AssignmentOperator:
	assign='='
	| multAssign='*='
	| divAssign='/='
	| modAssign='%='
	| addAssign='+='
	| subAssign='-='
	| leftShiftAssign='<<='
	| rightShiftAssign='>>='
	| andAssign='&='
	| xorAssign='^='
	| orAssign='|=';

EventRaising:
	'raise' event=[sgraph::Event|FQN] (':' value=Expression)?;

	//****************
// Expression Grammar
//****************
//ExpressionRule:
//	expression=(LogicalOrExpression | RaiseEventExpression);
Expression returns Expression:
	ConditionalExpression;

ConditionalExpression returns Expression:
	LogicalOrExpression ({ConditionalExpression.condition=current} '?' trueCase=LogicalOrExpression ':'
	falseCase=LogicalOrExpression)?;

LogicalOrExpression returns Expression:
	LogicalAndExpression ({LogicalOrExpression.leftOperand=current} '||'
	rightOperand=LogicalAndExpression)*;

LogicalAndExpression returns Expression:
	LogicalNotExpression ({LogicalAndExpression.leftOperand=current}
	'&&' rightOperand=LogicalNotExpression)*;

LogicalNotExpression returns Expression:
	BitwiseXorExpression | {LogicalNotExpression} '!'
	operand=BitwiseXorExpression;

BitwiseXorExpression returns Expression:
	BitwiseOrExpression ({BitwiseXorExpression.leftOperand=current} '^' rightOperand=BitwiseOrExpression)*;

BitwiseOrExpression returns Expression:
	BitwiseAndExpression ({BitwiseOrExpression.leftOperand=current} '|' rightOperand=BitwiseAndExpression)*;

BitwiseAndExpression returns Expression:
	LogicalRelationExpression ({BitwiseAndExpression.leftOperand=current} '&' rightOperand=LogicalRelationExpression)*;

LogicalRelationExpression returns Expression:
	ShiftExpression
	({LogicalRelationExpression.leftOperand=current} operator=RelationalOperator
	rightOperand=ShiftExpression)*;

ShiftExpression returns Expression:
	NumericalAddSubtractExpression ({ShiftExpression.leftOperand=current} operator=ShiftOperator
	rightOperand=NumericalAddSubtractExpression)*;

enum ShiftOperator:
	left='<<'
	| right='>>';

NumericalAddSubtractExpression returns Expression:
	NumericalMultiplyDivideExpression
	({NumericalAddSubtractExpression.leftOperand=current}
	operator=AdditiveOperator
	rightOperand=NumericalMultiplyDivideExpression)*;

NumericalMultiplyDivideExpression returns Expression:
	NumericalUnaryExpression
	({NumericalMultiplyDivideExpression.leftOperand=current}
	operator=MultiplicativeOperator
	rightOperand=NumericalUnaryExpression)*;

NumericalUnaryExpression returns Expression:
	PrimaryExpression | {NumericalUnaryExpression}
	operator=UnaryOperator operand=PrimaryExpression;

PrimaryExpression returns Expression:
	ValueExpression | '(' Expression ')' | OperationCall;

enum AdditiveOperator:
	plus='+' | minus='-';

enum MultiplicativeOperator:
	mul='*' | div='/' | mod='%';

enum UnaryOperator:
	positive='+' | negative='-' | complement='~';

enum RelationalOperator:
	smaller='<' | smallerEqual='<=' | greater='>' | greaterEqual='>=' |
	equals='==' | notEquals='!=';

enum TimeUnit:
	second='s'
	| millisecond='ms'
	| microsend = 'µs'
	| nanosecond='ns';

ValueExpression returns Expression:
	PrimitiveValueExpression | ElementReferenceExpression | ActiveStateReferenceExpression | EventValueReferenceExpression
	| EventRaisedReferenceExpression;

PrimitiveValueExpression returns Expression:
	{PrimitiveValueExpression} value=Literal;

ElementReferenceExpression:
	{ElementReferenceExpression} value=[sgraph::Declaration|FQN];

EventValueReferenceExpression:
	{EventValueReferenceExpression} 'valueof' '(' value=[sgraph::Event|FQN] ')';

EventRaisedReferenceExpression:
	{EventRaisedReferenceExpression} 'raised' '(' value=[sgraph::Event|FQN] ')';

ActiveStateReferenceExpression:
	{ActiveStateReferenceExpression} 'active' '(' value=[sgraph::RegularState|FQN] ')';

OperationCall returns Expression:
	{OperationCall} operation=[Operation|FQN] '(' (args+=Expression (',' args+=Expression)*)? ')';

Literal:
	BoolLiteral | IntLiteral | HexLiteral | RealLiteral;

BoolLiteral:
	{BoolLiteral} value=BOOL;

IntLiteral:
	{IntLiteral} value=INT;

RealLiteral:
	{RealLiteral} value=FLOAT;

HexLiteral:
	{HexLiteral} value=HEX;

terminal BOOL returns ecore::EBoolean:
	'true' | 'false' | 'yes' | 'no';

terminal HEX returns ecore::EInt:
	('0') ('x' | 'X') ('0'..'9' | 'a'..'f' | 'A'..'F')+;

terminal FLOAT returns ecore::EFloat:
	(INT '.' INT) ('e' ('-' | '+') INT)? ('f' | 'F' | 'd' | 'D')?;


