/*
* generated by Xtext
*/
grammar InternalExpressions;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.yakindu.sct.statechart.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.yakindu.sct.statechart.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.yakindu.sct.statechart.services.ExpressionsGrammarAccess;

}

@parser::members {
 
 	private ExpressionsGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(ExpressionsGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleRoot
entryRuleRoot 
:
{ before(grammarAccess.getRootRule()); }
	 ruleRoot
{ after(grammarAccess.getRootRule()); } 
	 EOF 
;

// Rule Root
ruleRoot
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRootAccess().getRootsAssignment()); }
(rule__Root__RootsAssignment)*
{ after(grammarAccess.getRootAccess().getRootsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDefRoot
entryRuleDefRoot 
:
{ before(grammarAccess.getDefRootRule()); }
	 ruleDefRoot
{ after(grammarAccess.getDefRootRule()); } 
	 EOF 
;

// Rule DefRoot
ruleDefRoot
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDefRootAccess().getAlternatives()); }
(rule__DefRoot__Alternatives)
{ after(grammarAccess.getDefRootAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStatechartRoot
entryRuleStatechartRoot 
:
{ before(grammarAccess.getStatechartRootRule()); }
	 ruleStatechartRoot
{ after(grammarAccess.getStatechartRootRule()); } 
	 EOF 
;

// Rule StatechartRoot
ruleStatechartRoot
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatechartRootAccess().getGroup()); }
(rule__StatechartRoot__Group__0)
{ after(grammarAccess.getStatechartRootAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStateRoot
entryRuleStateRoot 
:
{ before(grammarAccess.getStateRootRule()); }
	 ruleStateRoot
{ after(grammarAccess.getStateRootRule()); } 
	 EOF 
;

// Rule StateRoot
ruleStateRoot
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStateRootAccess().getGroup()); }
(rule__StateRoot__Group__0)
{ after(grammarAccess.getStateRootAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTransitionRoot
entryRuleTransitionRoot 
:
{ before(grammarAccess.getTransitionRootRule()); }
	 ruleTransitionRoot
{ after(grammarAccess.getTransitionRootRule()); } 
	 EOF 
;

// Rule TransitionRoot
ruleTransitionRoot
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTransitionRootAccess().getGroup()); }
(rule__TransitionRoot__Group__0)
{ after(grammarAccess.getTransitionRootAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStatechartDefinition
entryRuleStatechartDefinition 
:
{ before(grammarAccess.getStatechartDefinitionRule()); }
	 ruleStatechartDefinition
{ after(grammarAccess.getStatechartDefinitionRule()); } 
	 EOF 
;

// Rule StatechartDefinition
ruleStatechartDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatechartDefinitionAccess().getGroup()); }
(rule__StatechartDefinition__Group__0)
{ after(grammarAccess.getStatechartDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStateDefinition
entryRuleStateDefinition 
:
{ before(grammarAccess.getStateDefinitionRule()); }
	 ruleStateDefinition
{ after(grammarAccess.getStateDefinitionRule()); } 
	 EOF 
;

// Rule StateDefinition
ruleStateDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStateDefinitionAccess().getSimpleScopeParserRuleCall()); }
	ruleSimpleScope
{ after(grammarAccess.getStateDefinitionAccess().getSimpleScopeParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTransitionStatement
entryRuleTransitionStatement 
:
{ before(grammarAccess.getTransitionStatementRule()); }
	 ruleTransitionStatement
{ after(grammarAccess.getTransitionStatementRule()); } 
	 EOF 
;

// Rule TransitionStatement
ruleTransitionStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTransitionStatementAccess().getReactionParserRuleCall()); }
	ruleReaction
{ after(grammarAccess.getTransitionStatementAccess().getReactionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleSimpleScope
entryRuleSimpleScope 
:
{ before(grammarAccess.getSimpleScopeRule()); }
	 ruleSimpleScope
{ after(grammarAccess.getSimpleScopeRule()); } 
	 EOF 
;

// Rule SimpleScope
ruleSimpleScope
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSimpleScopeAccess().getGroup()); }
(rule__SimpleScope__Group__0)
{ after(grammarAccess.getSimpleScopeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStatechartScope
entryRuleStatechartScope 
:
{ before(grammarAccess.getStatechartScopeRule()); }
	 ruleStatechartScope
{ after(grammarAccess.getStatechartScopeRule()); } 
	 EOF 
;

// Rule StatechartScope
ruleStatechartScope
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatechartScopeAccess().getAlternatives()); }
(rule__StatechartScope__Alternatives)
{ after(grammarAccess.getStatechartScopeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInterfaceScope
entryRuleInterfaceScope 
:
{ before(grammarAccess.getInterfaceScopeRule()); }
	 ruleInterfaceScope
{ after(grammarAccess.getInterfaceScopeRule()); } 
	 EOF 
;

// Rule InterfaceScope
ruleInterfaceScope
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInterfaceScopeAccess().getGroup()); }
(rule__InterfaceScope__Group__0)
{ after(grammarAccess.getInterfaceScopeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInternalScope
entryRuleInternalScope 
:
{ before(grammarAccess.getInternalScopeRule()); }
	 ruleInternalScope
{ after(grammarAccess.getInternalScopeRule()); } 
	 EOF 
;

// Rule InternalScope
ruleInternalScope
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInternalScopeAccess().getGroup()); }
(rule__InternalScope__Group__0)
{ after(grammarAccess.getInternalScopeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDefinition
entryRuleDefinition 
:
{ before(grammarAccess.getDefinitionRule()); }
	 ruleDefinition
{ after(grammarAccess.getDefinitionRule()); } 
	 EOF 
;

// Rule Definition
ruleDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDefinitionAccess().getAlternatives()); }
(rule__Definition__Alternatives)
{ after(grammarAccess.getDefinitionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleEventDefinition
entryRuleEventDefinition 
:
{ before(grammarAccess.getEventDefinitionRule()); }
	 ruleEventDefinition
{ after(grammarAccess.getEventDefinitionRule()); } 
	 EOF 
;

// Rule EventDefinition
ruleEventDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEventDefinitionAccess().getGroup()); }
(rule__EventDefinition__Group__0)
{ after(grammarAccess.getEventDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEventDerivation
entryRuleEventDerivation 
:
{ before(grammarAccess.getEventDerivationRule()); }
	 ruleEventDerivation
{ after(grammarAccess.getEventDerivationRule()); } 
	 EOF 
;

// Rule EventDerivation
ruleEventDerivation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEventDerivationAccess().getGroup()); }
(rule__EventDerivation__Group__0)
{ after(grammarAccess.getEventDerivationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleVariableDefinition
entryRuleVariableDefinition 
:
{ before(grammarAccess.getVariableDefinitionRule()); }
	 ruleVariableDefinition
{ after(grammarAccess.getVariableDefinitionRule()); } 
	 EOF 
;

// Rule VariableDefinition
ruleVariableDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableDefinitionAccess().getGroup()); }
(rule__VariableDefinition__Group__0)
{ after(grammarAccess.getVariableDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleClock
entryRuleClock 
:
{ before(grammarAccess.getClockRule()); }
	 ruleClock
{ after(grammarAccess.getClockRule()); } 
	 EOF 
;

// Rule Clock
ruleClock
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClockAccess().getGroup()); }
(rule__Clock__Group__0)
{ after(grammarAccess.getClockAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperation
entryRuleOperation 
:
{ before(grammarAccess.getOperationRule()); }
	 ruleOperation
{ after(grammarAccess.getOperationRule()); } 
	 EOF 
;

// Rule Operation
ruleOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOperationAccess().getGroup()); }
(rule__Operation__Group__0)
{ after(grammarAccess.getOperationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEntrypoint
entryRuleEntrypoint 
:
{ before(grammarAccess.getEntrypointRule()); }
	 ruleEntrypoint
{ after(grammarAccess.getEntrypointRule()); } 
	 EOF 
;

// Rule Entrypoint
ruleEntrypoint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEntrypointAccess().getGroup()); }
(rule__Entrypoint__Group__0)
{ after(grammarAccess.getEntrypointAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExitpoint
entryRuleExitpoint 
:
{ before(grammarAccess.getExitpointRule()); }
	 ruleExitpoint
{ after(grammarAccess.getExitpointRule()); } 
	 EOF 
;

// Rule Exitpoint
ruleExitpoint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExitpointAccess().getGroup()); }
(rule__Exitpoint__Group__0)
{ after(grammarAccess.getExitpointAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReaction
entryRuleReaction 
:
{ before(grammarAccess.getReactionRule()); }
	 ruleReaction
{ after(grammarAccess.getReactionRule()); } 
	 EOF 
;

// Rule Reaction
ruleReaction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReactionAccess().getGroup()); }
(rule__Reaction__Group__0)
{ after(grammarAccess.getReactionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReactionTrigger
entryRuleReactionTrigger 
:
{ before(grammarAccess.getReactionTriggerRule()); }
	 ruleReactionTrigger
{ after(grammarAccess.getReactionTriggerRule()); } 
	 EOF 
;

// Rule ReactionTrigger
ruleReactionTrigger
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReactionTriggerAccess().getGroup()); }
(rule__ReactionTrigger__Group__0)
{ after(grammarAccess.getReactionTriggerAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAction
entryRuleAction 
:
{ before(grammarAccess.getActionRule()); }
	 ruleAction
{ after(grammarAccess.getActionRule()); } 
	 EOF 
;

// Rule Action
ruleAction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getActionAccess().getActionAssignment()); }
(rule__Action__ActionAssignment)
{ after(grammarAccess.getActionAccess().getActionAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReactionProperties
entryRuleReactionProperties 
:
{ before(grammarAccess.getReactionPropertiesRule()); }
	 ruleReactionProperties
{ after(grammarAccess.getReactionPropertiesRule()); } 
	 EOF 
;

// Rule ReactionProperties
ruleReactionProperties
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReactionPropertiesAccess().getGroup()); }
(rule__ReactionProperties__Group__0)
{ after(grammarAccess.getReactionPropertiesAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReactionProperty
entryRuleReactionProperty 
:
{ before(grammarAccess.getReactionPropertyRule()); }
	 ruleReactionProperty
{ after(grammarAccess.getReactionPropertyRule()); } 
	 EOF 
;

// Rule ReactionProperty
ruleReactionProperty
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReactionPropertyAccess().getAlternatives()); }
(rule__ReactionProperty__Alternatives)
{ after(grammarAccess.getReactionPropertyAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReactionPriority
entryRuleReactionPriority 
:
{ before(grammarAccess.getReactionPriorityRule()); }
	 ruleReactionPriority
{ after(grammarAccess.getReactionPriorityRule()); } 
	 EOF 
;

// Rule ReactionPriority
ruleReactionPriority
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReactionPriorityAccess().getPriorityAssignment()); }
(rule__ReactionPriority__PriorityAssignment)
{ after(grammarAccess.getReactionPriorityAccess().getPriorityAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEntryPointSpec
entryRuleEntryPointSpec 
:
{ before(grammarAccess.getEntryPointSpecRule()); }
	 ruleEntryPointSpec
{ after(grammarAccess.getEntryPointSpecRule()); } 
	 EOF 
;

// Rule EntryPointSpec
ruleEntryPointSpec
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEntryPointSpecAccess().getGroup()); }
(rule__EntryPointSpec__Group__0)
{ after(grammarAccess.getEntryPointSpecAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExitPointSpec
entryRuleExitPointSpec 
:
{ before(grammarAccess.getExitPointSpecRule()); }
	 ruleExitPointSpec
{ after(grammarAccess.getExitPointSpecRule()); } 
	 EOF 
;

// Rule ExitPointSpec
ruleExitPointSpec
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExitPointSpecAccess().getGroup()); }
(rule__ExitPointSpec__Group__0)
{ after(grammarAccess.getExitPointSpecAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleEntryExpression
entryRuleEntryExpression 
:
{ before(grammarAccess.getEntryExpressionRule()); }
	 ruleEntryExpression
{ after(grammarAccess.getEntryExpressionRule()); } 
	 EOF 
;

// Rule EntryExpression
ruleEntryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEntryExpressionAccess().getGroup()); }
(rule__EntryExpression__Group__0)
{ after(grammarAccess.getEntryExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExitExpression
entryRuleExitExpression 
:
{ before(grammarAccess.getExitExpressionRule()); }
	 ruleExitExpression
{ after(grammarAccess.getExitExpressionRule()); } 
	 EOF 
;

// Rule ExitExpression
ruleExitExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExitExpressionAccess().getGroup()); }
(rule__ExitExpression__Group__0)
{ after(grammarAccess.getExitExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOnTickExpression
entryRuleOnTickExpression 
:
{ before(grammarAccess.getOnTickExpressionRule()); }
	 ruleOnTickExpression
{ after(grammarAccess.getOnTickExpressionRule()); } 
	 EOF 
;

// Rule OnTickExpression
ruleOnTickExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOnTickExpressionAccess().getGroup()); }
(rule__OnTickExpression__Group__0)
{ after(grammarAccess.getOnTickExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpressionRule
entryRuleExpressionRule 
:
{ before(grammarAccess.getExpressionRuleRule()); }
	 ruleExpressionRule
{ after(grammarAccess.getExpressionRuleRule()); } 
	 EOF 
;

// Rule ExpressionRule
ruleExpressionRule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionRuleAccess().getExpressionAssignment()); }
(rule__ExpressionRule__ExpressionAssignment)
{ after(grammarAccess.getExpressionRuleAccess().getExpressionAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRaiseEventExpression
entryRuleRaiseEventExpression 
:
{ before(grammarAccess.getRaiseEventExpressionRule()); }
	 ruleRaiseEventExpression
{ after(grammarAccess.getRaiseEventExpressionRule()); } 
	 EOF 
;

// Rule RaiseEventExpression
ruleRaiseEventExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRaiseEventExpressionAccess().getGroup()); }
(rule__RaiseEventExpression__Group__0)
{ after(grammarAccess.getRaiseEventExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLogicalOrExpression
entryRuleLogicalOrExpression 
:
{ before(grammarAccess.getLogicalOrExpressionRule()); }
	 ruleLogicalOrExpression
{ after(grammarAccess.getLogicalOrExpressionRule()); } 
	 EOF 
;

// Rule LogicalOrExpression
ruleLogicalOrExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getGroup()); }
(rule__LogicalOrExpression__Group__0)
{ after(grammarAccess.getLogicalOrExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLogicalAndExpression
entryRuleLogicalAndExpression 
:
{ before(grammarAccess.getLogicalAndExpressionRule()); }
	 ruleLogicalAndExpression
{ after(grammarAccess.getLogicalAndExpressionRule()); } 
	 EOF 
;

// Rule LogicalAndExpression
ruleLogicalAndExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getGroup()); }
(rule__LogicalAndExpression__Group__0)
{ after(grammarAccess.getLogicalAndExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLogicalNotExpression
entryRuleLogicalNotExpression 
:
{ before(grammarAccess.getLogicalNotExpressionRule()); }
	 ruleLogicalNotExpression
{ after(grammarAccess.getLogicalNotExpressionRule()); } 
	 EOF 
;

// Rule LogicalNotExpression
ruleLogicalNotExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLogicalNotExpressionAccess().getAlternatives()); }
(rule__LogicalNotExpression__Alternatives)
{ after(grammarAccess.getLogicalNotExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLogicalRelationExpression
entryRuleLogicalRelationExpression 
:
{ before(grammarAccess.getLogicalRelationExpressionRule()); }
	 ruleLogicalRelationExpression
{ after(grammarAccess.getLogicalRelationExpressionRule()); } 
	 EOF 
;

// Rule LogicalRelationExpression
ruleLogicalRelationExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLogicalRelationExpressionAccess().getGroup()); }
(rule__LogicalRelationExpression__Group__0)
{ after(grammarAccess.getLogicalRelationExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumericalAddSubtractExpression
entryRuleNumericalAddSubtractExpression 
:
{ before(grammarAccess.getNumericalAddSubtractExpressionRule()); }
	 ruleNumericalAddSubtractExpression
{ after(grammarAccess.getNumericalAddSubtractExpressionRule()); } 
	 EOF 
;

// Rule NumericalAddSubtractExpression
ruleNumericalAddSubtractExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumericalAddSubtractExpressionAccess().getGroup()); }
(rule__NumericalAddSubtractExpression__Group__0)
{ after(grammarAccess.getNumericalAddSubtractExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumericalMultiplyDivideExpression
entryRuleNumericalMultiplyDivideExpression 
:
{ before(grammarAccess.getNumericalMultiplyDivideExpressionRule()); }
	 ruleNumericalMultiplyDivideExpression
{ after(grammarAccess.getNumericalMultiplyDivideExpressionRule()); } 
	 EOF 
;

// Rule NumericalMultiplyDivideExpression
ruleNumericalMultiplyDivideExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getGroup()); }
(rule__NumericalMultiplyDivideExpression__Group__0)
{ after(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumericalUnaryExpression
entryRuleNumericalUnaryExpression 
:
{ before(grammarAccess.getNumericalUnaryExpressionRule()); }
	 ruleNumericalUnaryExpression
{ after(grammarAccess.getNumericalUnaryExpressionRule()); } 
	 EOF 
;

// Rule NumericalUnaryExpression
ruleNumericalUnaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumericalUnaryExpressionAccess().getAlternatives()); }
(rule__NumericalUnaryExpression__Alternatives)
{ after(grammarAccess.getNumericalUnaryExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression 
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
(rule__PrimaryExpression__Alternatives)
{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValueExpression
entryRuleValueExpression 
:
{ before(grammarAccess.getValueExpressionRule()); }
	 ruleValueExpression
{ after(grammarAccess.getValueExpressionRule()); } 
	 EOF 
;

// Rule ValueExpression
ruleValueExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValueExpressionAccess().getAlternatives()); }
(rule__ValueExpression__Alternatives)
{ after(grammarAccess.getValueExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimitiveValueExpression
entryRulePrimitiveValueExpression 
:
{ before(grammarAccess.getPrimitiveValueExpressionRule()); }
	 rulePrimitiveValueExpression
{ after(grammarAccess.getPrimitiveValueExpressionRule()); } 
	 EOF 
;

// Rule PrimitiveValueExpression
rulePrimitiveValueExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimitiveValueExpressionAccess().getGroup()); }
(rule__PrimitiveValueExpression__Group__0)
{ after(grammarAccess.getPrimitiveValueExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableReferenceExpression
entryRuleVariableReferenceExpression 
:
{ before(grammarAccess.getVariableReferenceExpressionRule()); }
	 ruleVariableReferenceExpression
{ after(grammarAccess.getVariableReferenceExpressionRule()); } 
	 EOF 
;

// Rule VariableReferenceExpression
ruleVariableReferenceExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableReferenceExpressionAccess().getGroup()); }
(rule__VariableReferenceExpression__Group__0)
{ after(grammarAccess.getVariableReferenceExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteral
entryRuleLiteral 
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
(rule__Literal__Alternatives)
{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule Direction
ruleDirection
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDirectionAccess().getAlternatives()); }
(rule__Direction__Alternatives)
{ after(grammarAccess.getDirectionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule AdditiveOperator
ruleAdditiveOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveOperatorAccess().getAlternatives()); }
(rule__AdditiveOperator__Alternatives)
{ after(grammarAccess.getAdditiveOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule MultiplicativeOperator
ruleMultiplicativeOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeOperatorAccess().getAlternatives()); }
(rule__MultiplicativeOperator__Alternatives)
{ after(grammarAccess.getMultiplicativeOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule UnaryOperator
ruleUnaryOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperatorAccess().getAlternatives()); }
(rule__UnaryOperator__Alternatives)
{ after(grammarAccess.getUnaryOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule RelationalOperator
ruleRelationalOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalOperatorAccess().getAlternatives()); }
(rule__RelationalOperator__Alternatives)
{ after(grammarAccess.getRelationalOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}







// Rule Type
ruleType
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getAlternatives()); }
(rule__Type__Alternatives)
{ after(grammarAccess.getTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__DefRoot__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefRootAccess().getStatechartRootParserRuleCall_0()); }
	ruleStatechartRoot
{ after(grammarAccess.getDefRootAccess().getStatechartRootParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getDefRootAccess().getStateRootParserRuleCall_1()); }
	ruleStateRoot
{ after(grammarAccess.getDefRootAccess().getStateRootParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getDefRootAccess().getTransitionRootParserRuleCall_2()); }
	ruleTransitionRoot
{ after(grammarAccess.getDefRootAccess().getTransitionRootParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StatechartScope__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatechartScopeAccess().getInterfaceScopeParserRuleCall_0()); }
	ruleInterfaceScope
{ after(grammarAccess.getStatechartScopeAccess().getInterfaceScopeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getStatechartScopeAccess().getInternalScopeParserRuleCall_1()); }
	ruleInternalScope
{ after(grammarAccess.getStatechartScopeAccess().getInternalScopeParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefinitionAccess().getEventDefinitionParserRuleCall_0()); }
	ruleEventDefinition
{ after(grammarAccess.getDefinitionAccess().getEventDefinitionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getDefinitionAccess().getVariableDefinitionParserRuleCall_1()); }
	ruleVariableDefinition
{ after(grammarAccess.getDefinitionAccess().getVariableDefinitionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getDefinitionAccess().getClockParserRuleCall_2()); }
	ruleClock
{ after(grammarAccess.getDefinitionAccess().getClockParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getDefinitionAccess().getOperationParserRuleCall_3()); }
	ruleOperation
{ after(grammarAccess.getDefinitionAccess().getOperationParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getDefinitionAccess().getReactionParserRuleCall_4()); }
	ruleReaction
{ after(grammarAccess.getDefinitionAccess().getReactionParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getDefinitionAccess().getEntrypointParserRuleCall_5()); }
	ruleEntrypoint
{ after(grammarAccess.getDefinitionAccess().getEntrypointParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getDefinitionAccess().getExitpointParserRuleCall_6()); }
	ruleExitpoint
{ after(grammarAccess.getDefinitionAccess().getExitpointParserRuleCall_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReactionProperty__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReactionPropertyAccess().getReactionPriorityParserRuleCall_0()); }
	ruleReactionPriority
{ after(grammarAccess.getReactionPropertyAccess().getReactionPriorityParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getReactionPropertyAccess().getEntryPointSpecParserRuleCall_1()); }
	ruleEntryPointSpec
{ after(grammarAccess.getReactionPropertyAccess().getEntryPointSpecParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getReactionPropertyAccess().getExitPointSpecParserRuleCall_2()); }
	ruleExitPointSpec
{ after(grammarAccess.getReactionPropertyAccess().getExitPointSpecParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionRule__ExpressionAlternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionRuleAccess().getExpressionLogicalOrExpressionParserRuleCall_0_0()); }
	ruleLogicalOrExpression
{ after(grammarAccess.getExpressionRuleAccess().getExpressionLogicalOrExpressionParserRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getExpressionRuleAccess().getExpressionRaiseEventExpressionParserRuleCall_0_1()); }
	ruleRaiseEventExpression
{ after(grammarAccess.getExpressionRuleAccess().getExpressionRaiseEventExpressionParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalNotExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalNotExpressionAccess().getLogicalRelationExpressionParserRuleCall_0()); }
	ruleLogicalRelationExpression
{ after(grammarAccess.getLogicalNotExpressionAccess().getLogicalRelationExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLogicalNotExpressionAccess().getGroup_1()); }
(rule__LogicalNotExpression__Group_1__0)
{ after(grammarAccess.getLogicalNotExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalUnaryExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalUnaryExpressionAccess().getPrimaryExpressionParserRuleCall_0()); }
	rulePrimaryExpression
{ after(grammarAccess.getNumericalUnaryExpressionAccess().getPrimaryExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNumericalUnaryExpressionAccess().getGroup_1()); }
(rule__NumericalUnaryExpression__Group_1__0)
{ after(grammarAccess.getNumericalUnaryExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getValueExpressionParserRuleCall_0()); }
	ruleValueExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getValueExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_1()); }
(rule__PrimaryExpression__Group_1__0)
{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueExpressionAccess().getPrimitiveValueExpressionParserRuleCall_0()); }
	rulePrimitiveValueExpression
{ after(grammarAccess.getValueExpressionAccess().getPrimitiveValueExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getValueExpressionAccess().getVariableReferenceExpressionParserRuleCall_1()); }
	ruleVariableReferenceExpression
{ after(grammarAccess.getValueExpressionAccess().getVariableReferenceExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getBOOLTerminalRuleCall_0()); }
	RULE_BOOL
{ after(grammarAccess.getLiteralAccess().getBOOLTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
{ after(grammarAccess.getLiteralAccess().getINTTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getSTRINGTerminalRuleCall_2()); }
	RULE_STRING
{ after(grammarAccess.getLiteralAccess().getSTRINGTerminalRuleCall_2()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getFLOATTerminalRuleCall_3()); }
	RULE_FLOAT
{ after(grammarAccess.getLiteralAccess().getFLOATTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Direction__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDirectionAccess().getINEnumLiteralDeclaration_0()); }
(	'in' 
)
{ after(grammarAccess.getDirectionAccess().getINEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getDirectionAccess().getOUTEnumLiteralDeclaration_1()); }
(	'out' 
)
{ after(grammarAccess.getDirectionAccess().getOUTEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveOperatorAccess().getPlusEnumLiteralDeclaration_0()); }
(	'+' 
)
{ after(grammarAccess.getAdditiveOperatorAccess().getPlusEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getAdditiveOperatorAccess().getMinusEnumLiteralDeclaration_1()); }
(	'-' 
)
{ after(grammarAccess.getAdditiveOperatorAccess().getMinusEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeOperatorAccess().getMulEnumLiteralDeclaration_0()); }
(	'*' 
)
{ after(grammarAccess.getMultiplicativeOperatorAccess().getMulEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getMultiplicativeOperatorAccess().getDivEnumLiteralDeclaration_1()); }
(	'/' 
)
{ after(grammarAccess.getMultiplicativeOperatorAccess().getDivEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getMultiplicativeOperatorAccess().getModEnumLiteralDeclaration_2()); }
(	'%' 
)
{ after(grammarAccess.getMultiplicativeOperatorAccess().getModEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperatorAccess().getPositiveEnumLiteralDeclaration_0()); }
(	'+' 
)
{ after(grammarAccess.getUnaryOperatorAccess().getPositiveEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getUnaryOperatorAccess().getNegativeEnumLiteralDeclaration_1()); }
(	'-' 
)
{ after(grammarAccess.getUnaryOperatorAccess().getNegativeEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getUnaryOperatorAccess().getComplementEnumLiteralDeclaration_2()); }
(	'~' 
)
{ after(grammarAccess.getUnaryOperatorAccess().getComplementEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalOperatorAccess().getSmallerEnumLiteralDeclaration_0()); }
(	'<' 
)
{ after(grammarAccess.getRelationalOperatorAccess().getSmallerEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getSmallerEqualEnumLiteralDeclaration_1()); }
(	'<=' 
)
{ after(grammarAccess.getRelationalOperatorAccess().getSmallerEqualEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getGreaterEnumLiteralDeclaration_2()); }
(	'>' 
)
{ after(grammarAccess.getRelationalOperatorAccess().getGreaterEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getGreaterEqualEnumLiteralDeclaration_3()); }
(	'>=' 
)
{ after(grammarAccess.getRelationalOperatorAccess().getGreaterEqualEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getEqualsEnumLiteralDeclaration_4()); }
(	'==' 
)
{ after(grammarAccess.getRelationalOperatorAccess().getEqualsEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getNotEqualsEnumLiteralDeclaration_5()); }
(	'!=' 
)
{ after(grammarAccess.getRelationalOperatorAccess().getNotEqualsEnumLiteralDeclaration_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Type__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getVoidEnumLiteralDeclaration_0()); }
(	'void' 
)
{ after(grammarAccess.getTypeAccess().getVoidEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getIntegerEnumLiteralDeclaration_1()); }
(	'integer' 
)
{ after(grammarAccess.getTypeAccess().getIntegerEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getRealEnumLiteralDeclaration_2()); }
(	'real' 
)
{ after(grammarAccess.getTypeAccess().getRealEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getBooleanEnumLiteralDeclaration_3()); }
(	'boolean' 
)
{ after(grammarAccess.getTypeAccess().getBooleanEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getStringEnumLiteralDeclaration_4()); }
(	'string' 
)
{ after(grammarAccess.getTypeAccess().getStringEnumLiteralDeclaration_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__StatechartRoot__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StatechartRoot__Group__0__Impl
	rule__StatechartRoot__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StatechartRoot__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatechartRootAccess().getStatechartKeyword_0()); }

	'@@statechart@@' 

{ after(grammarAccess.getStatechartRootAccess().getStatechartKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StatechartRoot__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StatechartRoot__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StatechartRoot__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatechartRootAccess().getDefAssignment_1()); }
(rule__StatechartRoot__DefAssignment_1)
{ after(grammarAccess.getStatechartRootAccess().getDefAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StateRoot__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateRoot__Group__0__Impl
	rule__StateRoot__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StateRoot__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateRootAccess().getStateKeyword_0()); }

	'@@state@@' 

{ after(grammarAccess.getStateRootAccess().getStateKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StateRoot__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateRoot__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StateRoot__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateRootAccess().getDefAssignment_1()); }
(rule__StateRoot__DefAssignment_1)
{ after(grammarAccess.getStateRootAccess().getDefAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TransitionRoot__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TransitionRoot__Group__0__Impl
	rule__TransitionRoot__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionRoot__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionRootAccess().getTransitionKeyword_0()); }

	'@@transition@@' 

{ after(grammarAccess.getTransitionRootAccess().getTransitionKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TransitionRoot__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TransitionRoot__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionRoot__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionRootAccess().getDefAssignment_1()); }
(rule__TransitionRoot__DefAssignment_1)
{ after(grammarAccess.getTransitionRootAccess().getDefAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StatechartDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StatechartDefinition__Group__0__Impl
	rule__StatechartDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StatechartDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatechartDefinitionAccess().getStatechartDefinitionAction_0()); }
(

)
{ after(grammarAccess.getStatechartDefinitionAccess().getStatechartDefinitionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StatechartDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StatechartDefinition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StatechartDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatechartDefinitionAccess().getDefinitionScopesAssignment_1()); }
(rule__StatechartDefinition__DefinitionScopesAssignment_1)*
{ after(grammarAccess.getStatechartDefinitionAccess().getDefinitionScopesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SimpleScope__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleScope__Group__0__Impl
	rule__SimpleScope__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleScope__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleScopeAccess().getSimpleScopeAction_0()); }
(

)
{ after(grammarAccess.getSimpleScopeAccess().getSimpleScopeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleScope__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleScope__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleScope__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleScopeAccess().getDefinitionsAssignment_1()); }
(rule__SimpleScope__DefinitionsAssignment_1)*
{ after(grammarAccess.getSimpleScopeAccess().getDefinitionsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InterfaceScope__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceScope__Group__0__Impl
	rule__InterfaceScope__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceScope__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceScopeAccess().getInterfaceScopeAction_0()); }
(

)
{ after(grammarAccess.getInterfaceScopeAccess().getInterfaceScopeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceScope__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceScope__Group__1__Impl
	rule__InterfaceScope__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceScope__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceScopeAccess().getInterfaceKeyword_1()); }

	'interface' 

{ after(grammarAccess.getInterfaceScopeAccess().getInterfaceKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceScope__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceScope__Group__2__Impl
	rule__InterfaceScope__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceScope__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceScopeAccess().getNameAssignment_2()); }
(rule__InterfaceScope__NameAssignment_2)?
{ after(grammarAccess.getInterfaceScopeAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceScope__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceScope__Group__3__Impl
	rule__InterfaceScope__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceScope__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceScopeAccess().getColonKeyword_3()); }

	':' 

{ after(grammarAccess.getInterfaceScopeAccess().getColonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceScope__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceScope__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceScope__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceScopeAccess().getDefinitionsAssignment_4()); }
(rule__InterfaceScope__DefinitionsAssignment_4)*
{ after(grammarAccess.getInterfaceScopeAccess().getDefinitionsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__InternalScope__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InternalScope__Group__0__Impl
	rule__InternalScope__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InternalScope__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInternalScopeAccess().getInternalScopeAction_0()); }
(

)
{ after(grammarAccess.getInternalScopeAccess().getInternalScopeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InternalScope__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InternalScope__Group__1__Impl
	rule__InternalScope__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InternalScope__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInternalScopeAccess().getInternalKeyword_1()); }

	'internal' 

{ after(grammarAccess.getInternalScopeAccess().getInternalKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InternalScope__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InternalScope__Group__2__Impl
	rule__InternalScope__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__InternalScope__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInternalScopeAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getInternalScopeAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InternalScope__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InternalScope__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InternalScope__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInternalScopeAccess().getDefinitionsAssignment_3()); }
(rule__InternalScope__DefinitionsAssignment_3)*
{ after(grammarAccess.getInternalScopeAccess().getDefinitionsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__EventDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDefinition__Group__0__Impl
	rule__EventDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDefinitionAccess().getDirectionAssignment_0()); }
(rule__EventDefinition__DirectionAssignment_0)?
{ after(grammarAccess.getEventDefinitionAccess().getDirectionAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDefinition__Group__1__Impl
	rule__EventDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDefinitionAccess().getEventKeyword_1()); }

	'event' 

{ after(grammarAccess.getEventDefinitionAccess().getEventKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDefinition__Group__2__Impl
	rule__EventDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDefinitionAccess().getNameAssignment_2()); }
(rule__EventDefinition__NameAssignment_2)
{ after(grammarAccess.getEventDefinitionAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventDefinition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDefinition__Group__3__Impl
	rule__EventDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDefinition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDefinitionAccess().getGroup_3()); }
(rule__EventDefinition__Group_3__0)?
{ after(grammarAccess.getEventDefinitionAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventDefinition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDefinition__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDefinition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDefinitionAccess().getDerivationAssignment_4()); }
(rule__EventDefinition__DerivationAssignment_4)?
{ after(grammarAccess.getEventDefinitionAccess().getDerivationAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__EventDefinition__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDefinition__Group_3__0__Impl
	rule__EventDefinition__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDefinition__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDefinitionAccess().getColonKeyword_3_0()); }

	':' 

{ after(grammarAccess.getEventDefinitionAccess().getColonKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventDefinition__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDefinition__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDefinition__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDefinitionAccess().getTypeAssignment_3_1()); }
(rule__EventDefinition__TypeAssignment_3_1)
{ after(grammarAccess.getEventDefinitionAccess().getTypeAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EventDerivation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDerivation__Group__0__Impl
	rule__EventDerivation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDerivation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDerivationAccess().getEqualsSignKeyword_0()); }

	'=' 

{ after(grammarAccess.getEventDerivationAccess().getEqualsSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventDerivation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDerivation__Group__1__Impl
	rule__EventDerivation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDerivation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDerivationAccess().getConditionAssignment_1()); }
(rule__EventDerivation__ConditionAssignment_1)
{ after(grammarAccess.getEventDerivationAccess().getConditionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventDerivation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDerivation__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDerivation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDerivationAccess().getGroup_2()); }
(rule__EventDerivation__Group_2__0)?
{ after(grammarAccess.getEventDerivationAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__EventDerivation__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDerivation__Group_2__0__Impl
	rule__EventDerivation__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDerivation__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDerivationAccess().getColonKeyword_2_0()); }

	':' 

{ after(grammarAccess.getEventDerivationAccess().getColonKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventDerivation__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDerivation__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDerivation__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDerivationAccess().getValueAssignment_2_1()); }
(rule__EventDerivation__ValueAssignment_2_1)
{ after(grammarAccess.getEventDerivationAccess().getValueAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VariableDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDefinition__Group__0__Impl
	rule__VariableDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDefinitionAccess().getVarKeyword_0()); }

	'var' 

{ after(grammarAccess.getVariableDefinitionAccess().getVarKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDefinition__Group__1__Impl
	rule__VariableDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDefinitionAccess().getUnorderedGroup_1()); }
(rule__VariableDefinition__UnorderedGroup_1)
{ after(grammarAccess.getVariableDefinitionAccess().getUnorderedGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDefinition__Group__2__Impl
	rule__VariableDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDefinitionAccess().getNameAssignment_2()); }
(rule__VariableDefinition__NameAssignment_2)
{ after(grammarAccess.getVariableDefinitionAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDefinition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDefinition__Group__3__Impl
	rule__VariableDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDefinition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDefinitionAccess().getColonKeyword_3()); }

	':' 

{ after(grammarAccess.getVariableDefinitionAccess().getColonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDefinition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDefinition__Group__4__Impl
	rule__VariableDefinition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDefinition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDefinitionAccess().getTypeAssignment_4()); }
(rule__VariableDefinition__TypeAssignment_4)
{ after(grammarAccess.getVariableDefinitionAccess().getTypeAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDefinition__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDefinition__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDefinition__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDefinitionAccess().getGroup_5()); }
(rule__VariableDefinition__Group_5__0)?
{ after(grammarAccess.getVariableDefinitionAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__VariableDefinition__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDefinition__Group_5__0__Impl
	rule__VariableDefinition__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDefinition__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDefinitionAccess().getEqualsSignKeyword_5_0()); }

	'=' 

{ after(grammarAccess.getVariableDefinitionAccess().getEqualsSignKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDefinition__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDefinition__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDefinition__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDefinitionAccess().getValueAssignment_5_1()); }
(rule__VariableDefinition__ValueAssignment_5_1)
{ after(grammarAccess.getVariableDefinitionAccess().getValueAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Clock__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Clock__Group__0__Impl
	rule__Clock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Clock__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClockAccess().getClockKeyword_0()); }

	'clock' 

{ after(grammarAccess.getClockAccess().getClockKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Clock__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Clock__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Clock__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClockAccess().getNameAssignment_1()); }
(rule__Clock__NameAssignment_1)
{ after(grammarAccess.getClockAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Operation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group__0__Impl
	rule__Operation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getOperationKeyword_0()); }

	'operation' 

{ after(grammarAccess.getOperationAccess().getOperationKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group__1__Impl
	rule__Operation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getNameAssignment_1()); }
(rule__Operation__NameAssignment_1)
{ after(grammarAccess.getOperationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group__2__Impl
	rule__Operation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getOperationAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group__3__Impl
	rule__Operation__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getGroup_3()); }
(rule__Operation__Group_3__0)?
{ after(grammarAccess.getOperationAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group__4__Impl
	rule__Operation__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getOperationAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getGroup_5()); }
(rule__Operation__Group_5__0)?
{ after(grammarAccess.getOperationAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Operation__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group_3__0__Impl
	rule__Operation__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getParamTypesAssignment_3_0()); }
(rule__Operation__ParamTypesAssignment_3_0)
{ after(grammarAccess.getOperationAccess().getParamTypesAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getGroup_3_1()); }
(rule__Operation__Group_3_1__0)*
{ after(grammarAccess.getOperationAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Operation__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group_3_1__0__Impl
	rule__Operation__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getCommaKeyword_3_1_0()); }

	',' 

{ after(grammarAccess.getOperationAccess().getCommaKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getParamTypesAssignment_3_1_1()); }
(rule__Operation__ParamTypesAssignment_3_1_1)
{ after(grammarAccess.getOperationAccess().getParamTypesAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Operation__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group_5__0__Impl
	rule__Operation__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getColonKeyword_5_0()); }

	':' 

{ after(grammarAccess.getOperationAccess().getColonKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getTypeAssignment_5_1()); }
(rule__Operation__TypeAssignment_5_1)
{ after(grammarAccess.getOperationAccess().getTypeAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Entrypoint__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Entrypoint__Group__0__Impl
	rule__Entrypoint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Entrypoint__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntrypointAccess().getEntrypointKeyword_0()); }

	'entrypoint' 

{ after(grammarAccess.getEntrypointAccess().getEntrypointKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Entrypoint__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Entrypoint__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Entrypoint__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntrypointAccess().getNameAssignment_1()); }
(rule__Entrypoint__NameAssignment_1)
{ after(grammarAccess.getEntrypointAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Exitpoint__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exitpoint__Group__0__Impl
	rule__Exitpoint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exitpoint__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExitpointAccess().getExitpointKeyword_0()); }

	'exitpoint' 

{ after(grammarAccess.getExitpointAccess().getExitpointKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Exitpoint__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exitpoint__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exitpoint__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExitpointAccess().getNameAssignment_1()); }
(rule__Exitpoint__NameAssignment_1)
{ after(grammarAccess.getExitpointAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Reaction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Reaction__Group__0__Impl
	rule__Reaction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Reaction__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReactionAccess().getTriggerAssignment_0()); }
(rule__Reaction__TriggerAssignment_0)
{ after(grammarAccess.getReactionAccess().getTriggerAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Reaction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Reaction__Group__1__Impl
	rule__Reaction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Reaction__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReactionAccess().getGroup_1()); }
(rule__Reaction__Group_1__0)?
{ after(grammarAccess.getReactionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Reaction__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Reaction__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Reaction__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReactionAccess().getGroup_2()); }
(rule__Reaction__Group_2__0)?
{ after(grammarAccess.getReactionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Reaction__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Reaction__Group_1__0__Impl
	rule__Reaction__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Reaction__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReactionAccess().getSolidusKeyword_1_0()); }

	'/' 

{ after(grammarAccess.getReactionAccess().getSolidusKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Reaction__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Reaction__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Reaction__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReactionAccess().getActionAssignment_1_1()); }
(rule__Reaction__ActionAssignment_1_1)
{ after(grammarAccess.getReactionAccess().getActionAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Reaction__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Reaction__Group_2__0__Impl
	rule__Reaction__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Reaction__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReactionAccess().getNumberSignKeyword_2_0()); }

	'#' 

{ after(grammarAccess.getReactionAccess().getNumberSignKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Reaction__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Reaction__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Reaction__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReactionAccess().getPropertiesAssignment_2_1()); }
(rule__Reaction__PropertiesAssignment_2_1)
{ after(grammarAccess.getReactionAccess().getPropertiesAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ReactionTrigger__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReactionTrigger__Group__0__Impl
	rule__ReactionTrigger__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReactionTrigger__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReactionTriggerAccess().getGroup_0()); }
(rule__ReactionTrigger__Group_0__0)
{ after(grammarAccess.getReactionTriggerAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReactionTrigger__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReactionTrigger__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReactionTrigger__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReactionTriggerAccess().getGroup_1()); }
(rule__ReactionTrigger__Group_1__0)?
{ after(grammarAccess.getReactionTriggerAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ReactionTrigger__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReactionTrigger__Group_0__0__Impl
	rule__ReactionTrigger__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReactionTrigger__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReactionTriggerAccess().getTriggersAssignment_0_0()); }
(rule__ReactionTrigger__TriggersAssignment_0_0)
{ after(grammarAccess.getReactionTriggerAccess().getTriggersAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReactionTrigger__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReactionTrigger__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReactionTrigger__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReactionTriggerAccess().getGroup_0_1()); }
(rule__ReactionTrigger__Group_0_1__0)*
{ after(grammarAccess.getReactionTriggerAccess().getGroup_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ReactionTrigger__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReactionTrigger__Group_0_1__0__Impl
	rule__ReactionTrigger__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReactionTrigger__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReactionTriggerAccess().getCommaKeyword_0_1_0()); }

	',' 

{ after(grammarAccess.getReactionTriggerAccess().getCommaKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReactionTrigger__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReactionTrigger__Group_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReactionTrigger__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReactionTriggerAccess().getTriggersAssignment_0_1_1()); }
(rule__ReactionTrigger__TriggersAssignment_0_1_1)
{ after(grammarAccess.getReactionTriggerAccess().getTriggersAssignment_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ReactionTrigger__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReactionTrigger__Group_1__0__Impl
	rule__ReactionTrigger__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReactionTrigger__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReactionTriggerAccess().getLeftSquareBracketKeyword_1_0()); }

	'[' 

{ after(grammarAccess.getReactionTriggerAccess().getLeftSquareBracketKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReactionTrigger__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReactionTrigger__Group_1__1__Impl
	rule__ReactionTrigger__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ReactionTrigger__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReactionTriggerAccess().getGuardExpressionAssignment_1_1()); }
(rule__ReactionTrigger__GuardExpressionAssignment_1_1)
{ after(grammarAccess.getReactionTriggerAccess().getGuardExpressionAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReactionTrigger__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReactionTrigger__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReactionTrigger__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReactionTriggerAccess().getRightSquareBracketKeyword_1_2()); }

	']' 

{ after(grammarAccess.getReactionTriggerAccess().getRightSquareBracketKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ReactionProperties__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReactionProperties__Group__0__Impl
	rule__ReactionProperties__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReactionProperties__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReactionPropertiesAccess().getReactionPropertiesAction_0()); }
(

)
{ after(grammarAccess.getReactionPropertiesAccess().getReactionPropertiesAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReactionProperties__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReactionProperties__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReactionProperties__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReactionPropertiesAccess().getPropertiesAssignment_1()); }
(rule__ReactionProperties__PropertiesAssignment_1)*
{ after(grammarAccess.getReactionPropertiesAccess().getPropertiesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EntryPointSpec__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EntryPointSpec__Group__0__Impl
	rule__EntryPointSpec__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EntryPointSpec__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntryPointSpecAccess().getGreaterThanSignKeyword_0()); }

	'>' 

{ after(grammarAccess.getEntryPointSpecAccess().getGreaterThanSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EntryPointSpec__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EntryPointSpec__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EntryPointSpec__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntryPointSpecAccess().getEntrypointAssignment_1()); }
(rule__EntryPointSpec__EntrypointAssignment_1)
{ after(grammarAccess.getEntryPointSpecAccess().getEntrypointAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExitPointSpec__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExitPointSpec__Group__0__Impl
	rule__ExitPointSpec__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExitPointSpec__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExitPointSpecAccess().getExitpointAssignment_0()); }
(rule__ExitPointSpec__ExitpointAssignment_0)
{ after(grammarAccess.getExitPointSpecAccess().getExitpointAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExitPointSpec__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExitPointSpec__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExitPointSpec__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExitPointSpecAccess().getGreaterThanSignKeyword_1()); }

	'>' 

{ after(grammarAccess.getExitPointSpecAccess().getGreaterThanSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__EntryExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EntryExpression__Group__0__Impl
	rule__EntryExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EntryExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntryExpressionAccess().getEntryKeyword_0()); }

	'entry:' 

{ after(grammarAccess.getEntryExpressionAccess().getEntryKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EntryExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EntryExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EntryExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntryExpressionAccess().getExpressionAssignment_1()); }
(rule__EntryExpression__ExpressionAssignment_1)
{ after(grammarAccess.getEntryExpressionAccess().getExpressionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExitExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExitExpression__Group__0__Impl
	rule__ExitExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExitExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExitExpressionAccess().getExitKeyword_0()); }

	'exit:' 

{ after(grammarAccess.getExitExpressionAccess().getExitKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExitExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExitExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExitExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExitExpressionAccess().getExpressionAssignment_1()); }
(rule__ExitExpression__ExpressionAssignment_1)
{ after(grammarAccess.getExitExpressionAccess().getExpressionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OnTickExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OnTickExpression__Group__0__Impl
	rule__OnTickExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OnTickExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOnTickExpressionAccess().getDoKeyword_0()); }

	'do:' 

{ after(grammarAccess.getOnTickExpressionAccess().getDoKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OnTickExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OnTickExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OnTickExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOnTickExpressionAccess().getExpressionAssignment_1()); }
(rule__OnTickExpression__ExpressionAssignment_1)
{ after(grammarAccess.getOnTickExpressionAccess().getExpressionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RaiseEventExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RaiseEventExpression__Group__0__Impl
	rule__RaiseEventExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RaiseEventExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRaiseEventExpressionAccess().getRaiseKeyword_0()); }

	'raise' 

{ after(grammarAccess.getRaiseEventExpressionAccess().getRaiseKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RaiseEventExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RaiseEventExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RaiseEventExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRaiseEventExpressionAccess().getEventAssignment_1()); }
(rule__RaiseEventExpression__EventAssignment_1)
{ after(grammarAccess.getRaiseEventExpressionAccess().getEventAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalOrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group__0__Impl
	rule__LogicalOrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getLogicalAndExpressionParserRuleCall_0()); }
	ruleLogicalAndExpression
{ after(grammarAccess.getLogicalOrExpressionAccess().getLogicalAndExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalOrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getGroup_1()); }
(rule__LogicalOrExpression__Group_1__0)*
{ after(grammarAccess.getLogicalOrExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalOrExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group_1__0__Impl
	rule__LogicalOrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getLogicalOrExpressionLeftOperandAction_1_0()); }
(

)
{ after(grammarAccess.getLogicalOrExpressionAccess().getLogicalOrExpressionLeftOperandAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalOrExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group_1__1__Impl
	rule__LogicalOrExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getVerticalLineVerticalLineKeyword_1_1()); }

	'||' 

{ after(grammarAccess.getLogicalOrExpressionAccess().getVerticalLineVerticalLineKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalOrExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getRightOperandAssignment_1_2()); }
(rule__LogicalOrExpression__RightOperandAssignment_1_2)
{ after(grammarAccess.getLogicalOrExpressionAccess().getRightOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LogicalAndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group__0__Impl
	rule__LogicalAndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getLogicalNotExpressionParserRuleCall_0()); }
	ruleLogicalNotExpression
{ after(grammarAccess.getLogicalAndExpressionAccess().getLogicalNotExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalAndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getGroup_1()); }
(rule__LogicalAndExpression__Group_1__0)*
{ after(grammarAccess.getLogicalAndExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalAndExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group_1__0__Impl
	rule__LogicalAndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getLogicalAndExpressionLeftOperandAction_1_0()); }
(

)
{ after(grammarAccess.getLogicalAndExpressionAccess().getLogicalAndExpressionLeftOperandAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalAndExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group_1__1__Impl
	rule__LogicalAndExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getAmpersandAmpersandKeyword_1_1()); }

	'&&' 

{ after(grammarAccess.getLogicalAndExpressionAccess().getAmpersandAmpersandKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalAndExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getRightOperandAssignment_1_2()); }
(rule__LogicalAndExpression__RightOperandAssignment_1_2)
{ after(grammarAccess.getLogicalAndExpressionAccess().getRightOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LogicalNotExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalNotExpression__Group_1__0__Impl
	rule__LogicalNotExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalNotExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalNotExpressionAccess().getLogicalNotExpressionAction_1_0()); }
(

)
{ after(grammarAccess.getLogicalNotExpressionAccess().getLogicalNotExpressionAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalNotExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalNotExpression__Group_1__1__Impl
	rule__LogicalNotExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalNotExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalNotExpressionAccess().getExclamationMarkKeyword_1_1()); }

	'!' 

{ after(grammarAccess.getLogicalNotExpressionAccess().getExclamationMarkKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalNotExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalNotExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalNotExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalNotExpressionAccess().getOperandAssignment_1_2()); }
(rule__LogicalNotExpression__OperandAssignment_1_2)
{ after(grammarAccess.getLogicalNotExpressionAccess().getOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LogicalRelationExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalRelationExpression__Group__0__Impl
	rule__LogicalRelationExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalRelationExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalRelationExpressionAccess().getNumericalAddSubtractExpressionParserRuleCall_0()); }
	ruleNumericalAddSubtractExpression
{ after(grammarAccess.getLogicalRelationExpressionAccess().getNumericalAddSubtractExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalRelationExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalRelationExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalRelationExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalRelationExpressionAccess().getGroup_1()); }
(rule__LogicalRelationExpression__Group_1__0)*
{ after(grammarAccess.getLogicalRelationExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalRelationExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalRelationExpression__Group_1__0__Impl
	rule__LogicalRelationExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalRelationExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalRelationExpressionAccess().getLogicalRelationExpressionLeftOperandAction_1_0()); }
(

)
{ after(grammarAccess.getLogicalRelationExpressionAccess().getLogicalRelationExpressionLeftOperandAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalRelationExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalRelationExpression__Group_1__1__Impl
	rule__LogicalRelationExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalRelationExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalRelationExpressionAccess().getOperatorAssignment_1_1()); }
(rule__LogicalRelationExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getLogicalRelationExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalRelationExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalRelationExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalRelationExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalRelationExpressionAccess().getRightOperandAssignment_1_2()); }
(rule__LogicalRelationExpression__RightOperandAssignment_1_2)
{ after(grammarAccess.getLogicalRelationExpressionAccess().getRightOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NumericalAddSubtractExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericalAddSubtractExpression__Group__0__Impl
	rule__NumericalAddSubtractExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalAddSubtractExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalAddSubtractExpressionAccess().getNumericalMultiplyDivideExpressionParserRuleCall_0()); }
	ruleNumericalMultiplyDivideExpression
{ after(grammarAccess.getNumericalAddSubtractExpressionAccess().getNumericalMultiplyDivideExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumericalAddSubtractExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericalAddSubtractExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalAddSubtractExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalAddSubtractExpressionAccess().getGroup_1()); }
(rule__NumericalAddSubtractExpression__Group_1__0)*
{ after(grammarAccess.getNumericalAddSubtractExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NumericalAddSubtractExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericalAddSubtractExpression__Group_1__0__Impl
	rule__NumericalAddSubtractExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalAddSubtractExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalAddSubtractExpressionAccess().getNumericalAddSubtractExpressionLeftOperandAction_1_0()); }
(

)
{ after(grammarAccess.getNumericalAddSubtractExpressionAccess().getNumericalAddSubtractExpressionLeftOperandAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumericalAddSubtractExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericalAddSubtractExpression__Group_1__1__Impl
	rule__NumericalAddSubtractExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalAddSubtractExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalAddSubtractExpressionAccess().getOperatorAssignment_1_1()); }
(rule__NumericalAddSubtractExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getNumericalAddSubtractExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumericalAddSubtractExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericalAddSubtractExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalAddSubtractExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalAddSubtractExpressionAccess().getRightOperandAssignment_1_2()); }
(rule__NumericalAddSubtractExpression__RightOperandAssignment_1_2)
{ after(grammarAccess.getNumericalAddSubtractExpressionAccess().getRightOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NumericalMultiplyDivideExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericalMultiplyDivideExpression__Group__0__Impl
	rule__NumericalMultiplyDivideExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalMultiplyDivideExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getNumericalUnaryExpressionParserRuleCall_0()); }
	ruleNumericalUnaryExpression
{ after(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getNumericalUnaryExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumericalMultiplyDivideExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericalMultiplyDivideExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalMultiplyDivideExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getGroup_1()); }
(rule__NumericalMultiplyDivideExpression__Group_1__0)*
{ after(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NumericalMultiplyDivideExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericalMultiplyDivideExpression__Group_1__0__Impl
	rule__NumericalMultiplyDivideExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalMultiplyDivideExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getNumericalMultiplyDivideExpressionLeftOperandAction_1_0()); }
(

)
{ after(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getNumericalMultiplyDivideExpressionLeftOperandAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumericalMultiplyDivideExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericalMultiplyDivideExpression__Group_1__1__Impl
	rule__NumericalMultiplyDivideExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalMultiplyDivideExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getOperatorAssignment_1_1()); }
(rule__NumericalMultiplyDivideExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumericalMultiplyDivideExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericalMultiplyDivideExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalMultiplyDivideExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getRightOperandAssignment_1_2()); }
(rule__NumericalMultiplyDivideExpression__RightOperandAssignment_1_2)
{ after(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getRightOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NumericalUnaryExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericalUnaryExpression__Group_1__0__Impl
	rule__NumericalUnaryExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalUnaryExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalUnaryExpressionAccess().getNumericalUnaryExpressionAction_1_0()); }
(

)
{ after(grammarAccess.getNumericalUnaryExpressionAccess().getNumericalUnaryExpressionAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumericalUnaryExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericalUnaryExpression__Group_1__1__Impl
	rule__NumericalUnaryExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalUnaryExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalUnaryExpressionAccess().getOperatorAssignment_1_1()); }
(rule__NumericalUnaryExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getNumericalUnaryExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumericalUnaryExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumericalUnaryExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalUnaryExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalUnaryExpressionAccess().getOperandAssignment_1_2()); }
(rule__NumericalUnaryExpression__OperandAssignment_1_2)
{ after(grammarAccess.getNumericalUnaryExpressionAccess().getOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PrimaryExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_1__0__Impl
	rule__PrimaryExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_1__1__Impl
	rule__PrimaryExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getLogicalOrExpressionParserRuleCall_1_1()); }
	ruleLogicalOrExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getLogicalOrExpressionParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PrimitiveValueExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimitiveValueExpression__Group__0__Impl
	rule__PrimitiveValueExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveValueExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveValueExpressionAccess().getPrimitiveValueExpressionAction_0()); }
(

)
{ after(grammarAccess.getPrimitiveValueExpressionAccess().getPrimitiveValueExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimitiveValueExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimitiveValueExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveValueExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveValueExpressionAccess().getValueAssignment_1()); }
(rule__PrimitiveValueExpression__ValueAssignment_1)
{ after(grammarAccess.getPrimitiveValueExpressionAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VariableReferenceExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableReferenceExpression__Group__0__Impl
	rule__VariableReferenceExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReferenceExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceExpressionAccess().getPropertyReferenceExpressionAction_0()); }
(

)
{ after(grammarAccess.getVariableReferenceExpressionAccess().getPropertyReferenceExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableReferenceExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableReferenceExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReferenceExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceExpressionAccess().getValueAssignment_1()); }
(rule__VariableReferenceExpression__ValueAssignment_1)
{ after(grammarAccess.getVariableReferenceExpressionAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__VariableDefinition__UnorderedGroup_1
    @init {
    	int stackSize = keepStackSize();
		getUnorderedGroupHelper().enter(grammarAccess.getVariableDefinitionAccess().getUnorderedGroup_1());
    }
:
	rule__VariableDefinition__UnorderedGroup_1__0
	?
	
;
finally {
	getUnorderedGroupHelper().leave(grammarAccess.getVariableDefinitionAccess().getUnorderedGroup_1());
	restoreStackSize(stackSize);
}


rule__VariableDefinition__UnorderedGroup_1__Impl
	@init {
		int stackSize = keepStackSize();
		boolean selected = false;
    }
:
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getVariableDefinitionAccess().getUnorderedGroup_1(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getVariableDefinitionAccess().getUnorderedGroup_1(), 0);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getVariableDefinitionAccess().getReadonlyAssignment_1_0()); }
						(rule__VariableDefinition__ReadonlyAssignment_1_0)
						{ after(grammarAccess.getVariableDefinitionAccess().getReadonlyAssignment_1_0()); }
					)
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getVariableDefinitionAccess().getUnorderedGroup_1(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getVariableDefinitionAccess().getUnorderedGroup_1(), 1);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getVariableDefinitionAccess().getExternalAssignment_1_1()); }
						(rule__VariableDefinition__ExternalAssignment_1_1)
						{ after(grammarAccess.getVariableDefinitionAccess().getExternalAssignment_1_1()); }
					)
 				)
			)  

		)
;
finally {
	if (selected)
		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getVariableDefinitionAccess().getUnorderedGroup_1());
	restoreStackSize(stackSize);
}


rule__VariableDefinition__UnorderedGroup_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDefinition__UnorderedGroup_1__Impl
	rule__VariableDefinition__UnorderedGroup_1__1?
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDefinition__UnorderedGroup_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDefinition__UnorderedGroup_1__Impl
;
finally {
	restoreStackSize(stackSize);
}






rule__Root__RootsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootAccess().getRootsDefRootParserRuleCall_0()); }
	ruleDefRoot{ after(grammarAccess.getRootAccess().getRootsDefRootParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StatechartRoot__DefAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatechartRootAccess().getDefStatechartDefinitionParserRuleCall_1_0()); }
	ruleStatechartDefinition{ after(grammarAccess.getStatechartRootAccess().getDefStatechartDefinitionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StateRoot__DefAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateRootAccess().getDefStateDefinitionParserRuleCall_1_0()); }
	ruleStateDefinition{ after(grammarAccess.getStateRootAccess().getDefStateDefinitionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionRoot__DefAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionRootAccess().getDefTransitionStatementParserRuleCall_1_0()); }
	ruleTransitionStatement{ after(grammarAccess.getTransitionRootAccess().getDefTransitionStatementParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StatechartDefinition__DefinitionScopesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatechartDefinitionAccess().getDefinitionScopesStatechartScopeParserRuleCall_1_0()); }
	ruleStatechartScope{ after(grammarAccess.getStatechartDefinitionAccess().getDefinitionScopesStatechartScopeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleScope__DefinitionsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleScopeAccess().getDefinitionsDefinitionParserRuleCall_1_0()); }
	ruleDefinition{ after(grammarAccess.getSimpleScopeAccess().getDefinitionsDefinitionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceScope__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceScopeAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getInterfaceScopeAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceScope__DefinitionsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceScopeAccess().getDefinitionsDefinitionParserRuleCall_4_0()); }
	ruleDefinition{ after(grammarAccess.getInterfaceScopeAccess().getDefinitionsDefinitionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InternalScope__DefinitionsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInternalScopeAccess().getDefinitionsDefinitionParserRuleCall_3_0()); }
	ruleDefinition{ after(grammarAccess.getInternalScopeAccess().getDefinitionsDefinitionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventDefinition__DirectionAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDefinitionAccess().getDirectionDirectionEnumRuleCall_0_0()); }
	ruleDirection{ after(grammarAccess.getEventDefinitionAccess().getDirectionDirectionEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventDefinition__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDefinitionAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getEventDefinitionAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventDefinition__TypeAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDefinitionAccess().getTypeTypeEnumRuleCall_3_1_0()); }
	ruleType{ after(grammarAccess.getEventDefinitionAccess().getTypeTypeEnumRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventDefinition__DerivationAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDefinitionAccess().getDerivationEventDerivationParserRuleCall_4_0()); }
	ruleEventDerivation{ after(grammarAccess.getEventDefinitionAccess().getDerivationEventDerivationParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventDerivation__ConditionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDerivationAccess().getConditionExpressionRuleParserRuleCall_1_0()); }
	ruleExpressionRule{ after(grammarAccess.getEventDerivationAccess().getConditionExpressionRuleParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventDerivation__ValueAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDerivationAccess().getValueExpressionRuleParserRuleCall_2_1_0()); }
	ruleExpressionRule{ after(grammarAccess.getEventDerivationAccess().getValueExpressionRuleParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDefinition__ReadonlyAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDefinitionAccess().getReadonlyReadonlyKeyword_1_0_0()); }
(
{ before(grammarAccess.getVariableDefinitionAccess().getReadonlyReadonlyKeyword_1_0_0()); }

	'readonly' 

{ after(grammarAccess.getVariableDefinitionAccess().getReadonlyReadonlyKeyword_1_0_0()); }
)

{ after(grammarAccess.getVariableDefinitionAccess().getReadonlyReadonlyKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDefinition__ExternalAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDefinitionAccess().getExternalExternalKeyword_1_1_0()); }
(
{ before(grammarAccess.getVariableDefinitionAccess().getExternalExternalKeyword_1_1_0()); }

	'external' 

{ after(grammarAccess.getVariableDefinitionAccess().getExternalExternalKeyword_1_1_0()); }
)

{ after(grammarAccess.getVariableDefinitionAccess().getExternalExternalKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDefinition__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDefinitionAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getVariableDefinitionAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDefinition__TypeAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDefinitionAccess().getTypeTypeEnumRuleCall_4_0()); }
	ruleType{ after(grammarAccess.getVariableDefinitionAccess().getTypeTypeEnumRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDefinition__ValueAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDefinitionAccess().getValueLiteralParserRuleCall_5_1_0()); }
	ruleLiteral{ after(grammarAccess.getVariableDefinitionAccess().getValueLiteralParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Clock__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClockAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getClockAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getOperationAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__ParamTypesAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getParamTypesTypeEnumRuleCall_3_0_0()); }
	ruleType{ after(grammarAccess.getOperationAccess().getParamTypesTypeEnumRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__ParamTypesAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getParamTypesTypeEnumRuleCall_3_1_1_0()); }
	ruleType{ after(grammarAccess.getOperationAccess().getParamTypesTypeEnumRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__TypeAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getTypeTypeEnumRuleCall_5_1_0()); }
	ruleType{ after(grammarAccess.getOperationAccess().getTypeTypeEnumRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Entrypoint__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntrypointAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getEntrypointAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Exitpoint__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExitpointAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getExitpointAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Reaction__TriggerAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReactionAccess().getTriggerReactionTriggerParserRuleCall_0_0()); }
	ruleReactionTrigger{ after(grammarAccess.getReactionAccess().getTriggerReactionTriggerParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Reaction__ActionAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReactionAccess().getActionActionParserRuleCall_1_1_0()); }
	ruleAction{ after(grammarAccess.getReactionAccess().getActionActionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Reaction__PropertiesAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReactionAccess().getPropertiesReactionPropertiesParserRuleCall_2_1_0()); }
	ruleReactionProperties{ after(grammarAccess.getReactionAccess().getPropertiesReactionPropertiesParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReactionTrigger__TriggersAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReactionTriggerAccess().getTriggersEventCrossReference_0_0_0()); }
(
{ before(grammarAccess.getReactionTriggerAccess().getTriggersEventIDTerminalRuleCall_0_0_0_1()); }
	RULE_ID{ after(grammarAccess.getReactionTriggerAccess().getTriggersEventIDTerminalRuleCall_0_0_0_1()); }
)
{ after(grammarAccess.getReactionTriggerAccess().getTriggersEventCrossReference_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReactionTrigger__TriggersAssignment_0_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReactionTriggerAccess().getTriggersEventCrossReference_0_1_1_0()); }
(
{ before(grammarAccess.getReactionTriggerAccess().getTriggersEventIDTerminalRuleCall_0_1_1_0_1()); }
	RULE_ID{ after(grammarAccess.getReactionTriggerAccess().getTriggersEventIDTerminalRuleCall_0_1_1_0_1()); }
)
{ after(grammarAccess.getReactionTriggerAccess().getTriggersEventCrossReference_0_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReactionTrigger__GuardExpressionAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReactionTriggerAccess().getGuardExpressionLogicalOrExpressionParserRuleCall_1_1_0()); }
	ruleLogicalOrExpression{ after(grammarAccess.getReactionTriggerAccess().getGuardExpressionLogicalOrExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Action__ActionAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getActionExpressionRuleParserRuleCall_0()); }
	ruleExpressionRule{ after(grammarAccess.getActionAccess().getActionExpressionRuleParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReactionProperties__PropertiesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReactionPropertiesAccess().getPropertiesReactionPropertyParserRuleCall_1_0()); }
	ruleReactionProperty{ after(grammarAccess.getReactionPropertiesAccess().getPropertiesReactionPropertyParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReactionPriority__PriorityAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReactionPriorityAccess().getPriorityINTTerminalRuleCall_0()); }
	RULE_INT{ after(grammarAccess.getReactionPriorityAccess().getPriorityINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EntryPointSpec__EntrypointAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntryPointSpecAccess().getEntrypointEntrypointCrossReference_1_0()); }
(
{ before(grammarAccess.getEntryPointSpecAccess().getEntrypointEntrypointIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getEntryPointSpecAccess().getEntrypointEntrypointIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getEntryPointSpecAccess().getEntrypointEntrypointCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExitPointSpec__ExitpointAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExitPointSpecAccess().getExitpointExitpointCrossReference_0_0()); }
(
{ before(grammarAccess.getExitPointSpecAccess().getExitpointExitpointIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getExitPointSpecAccess().getExitpointExitpointIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getExitPointSpecAccess().getExitpointExitpointCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__EntryExpression__ExpressionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntryExpressionAccess().getExpressionExpressionRuleParserRuleCall_1_0()); }
	ruleExpressionRule{ after(grammarAccess.getEntryExpressionAccess().getExpressionExpressionRuleParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExitExpression__ExpressionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExitExpressionAccess().getExpressionExpressionRuleParserRuleCall_1_0()); }
	ruleExpressionRule{ after(grammarAccess.getExitExpressionAccess().getExpressionExpressionRuleParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OnTickExpression__ExpressionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOnTickExpressionAccess().getExpressionExpressionRuleParserRuleCall_1_0()); }
	ruleExpressionRule{ after(grammarAccess.getOnTickExpressionAccess().getExpressionExpressionRuleParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionRule__ExpressionAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionRuleAccess().getExpressionAlternatives_0()); }
(rule__ExpressionRule__ExpressionAlternatives_0)
{ after(grammarAccess.getExpressionRuleAccess().getExpressionAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RaiseEventExpression__EventAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRaiseEventExpressionAccess().getEventEventCrossReference_1_0()); }
(
{ before(grammarAccess.getRaiseEventExpressionAccess().getEventEventIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getRaiseEventExpressionAccess().getEventEventIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getRaiseEventExpressionAccess().getEventEventCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__RightOperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getRightOperandLogicalAndExpressionParserRuleCall_1_2_0()); }
	ruleLogicalAndExpression{ after(grammarAccess.getLogicalOrExpressionAccess().getRightOperandLogicalAndExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__RightOperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getRightOperandLogicalNotExpressionParserRuleCall_1_2_0()); }
	ruleLogicalNotExpression{ after(grammarAccess.getLogicalAndExpressionAccess().getRightOperandLogicalNotExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalNotExpression__OperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalNotExpressionAccess().getOperandLogicalRelationExpressionParserRuleCall_1_2_0()); }
	ruleLogicalRelationExpression{ after(grammarAccess.getLogicalNotExpressionAccess().getOperandLogicalRelationExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalRelationExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalRelationExpressionAccess().getOperatorRelationalOperatorEnumRuleCall_1_1_0()); }
	ruleRelationalOperator{ after(grammarAccess.getLogicalRelationExpressionAccess().getOperatorRelationalOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalRelationExpression__RightOperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalRelationExpressionAccess().getRightOperandNumericalAddSubtractExpressionParserRuleCall_1_2_0()); }
	ruleNumericalAddSubtractExpression{ after(grammarAccess.getLogicalRelationExpressionAccess().getRightOperandNumericalAddSubtractExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalAddSubtractExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalAddSubtractExpressionAccess().getOperatorAdditiveOperatorEnumRuleCall_1_1_0()); }
	ruleAdditiveOperator{ after(grammarAccess.getNumericalAddSubtractExpressionAccess().getOperatorAdditiveOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalAddSubtractExpression__RightOperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalAddSubtractExpressionAccess().getRightOperandNumericalMultiplyDivideExpressionParserRuleCall_1_2_0()); }
	ruleNumericalMultiplyDivideExpression{ after(grammarAccess.getNumericalAddSubtractExpressionAccess().getRightOperandNumericalMultiplyDivideExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalMultiplyDivideExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getOperatorMultiplicativeOperatorEnumRuleCall_1_1_0()); }
	ruleMultiplicativeOperator{ after(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getOperatorMultiplicativeOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalMultiplyDivideExpression__RightOperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getRightOperandNumericalUnaryExpressionParserRuleCall_1_2_0()); }
	ruleNumericalUnaryExpression{ after(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getRightOperandNumericalUnaryExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalUnaryExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalUnaryExpressionAccess().getOperatorUnaryOperatorEnumRuleCall_1_1_0()); }
	ruleUnaryOperator{ after(grammarAccess.getNumericalUnaryExpressionAccess().getOperatorUnaryOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumericalUnaryExpression__OperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumericalUnaryExpressionAccess().getOperandPrimaryExpressionParserRuleCall_1_2_0()); }
	rulePrimaryExpression{ after(grammarAccess.getNumericalUnaryExpressionAccess().getOperandPrimaryExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveValueExpression__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveValueExpressionAccess().getValueLiteralParserRuleCall_1_0()); }
	ruleLiteral{ after(grammarAccess.getPrimitiveValueExpressionAccess().getValueLiteralParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReferenceExpression__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceExpressionAccess().getValueVariableCrossReference_1_0()); }
(
{ before(grammarAccess.getVariableReferenceExpressionAccess().getValueVariableIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getVariableReferenceExpressionAccess().getValueVariableIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getVariableReferenceExpressionAccess().getValueVariableCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_BOOL : ('true'|'false');

RULE_FLOAT : ('-'|'+')? RULE_INT '.' RULE_INT ('e' ('-'|'+') RULE_INT)?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


