/*
* generated by Xtext
*/
grammar InternalExpressions;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.yakindu.sct.statechart.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.yakindu.sct.statechart.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.yakindu.sct.statechart.services.ExpressionsGrammarAccess;

}

@parser::members {

 	private ExpressionsGrammarAccess grammarAccess;
 	
    public InternalExpressionsParser(TokenStream input, IAstFactory factory, ExpressionsGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/yakindu/sct/statechart/parser/antlr/internal/InternalExpressions.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Root";	
   	}
   	
   	@Override
   	protected ExpressionsGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleRoot
entryRuleRoot returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRootRule(), currentNode); }
	 iv_ruleRoot=ruleRoot 
	 { $current=$iv_ruleRoot.current; } 
	 EOF 
;

// Rule Root
ruleRoot returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRootAccess().getRootsDefRootParserRuleCall_0(), currentNode); 
	    }
		lv_roots_0_0=ruleDefRoot		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRootRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"roots",
	        		lv_roots_0_0, 
	        		"DefRoot", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*
;





// Entry rule entryRuleDefRoot
entryRuleDefRoot returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDefRootRule(), currentNode); }
	 iv_ruleDefRoot=ruleDefRoot 
	 { $current=$iv_ruleDefRoot.current; } 
	 EOF 
;

// Rule DefRoot
ruleDefRoot returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getDefRootAccess().getStatechartRootParserRuleCall_0(), currentNode); 
    }
    this_StatechartRoot_0=ruleStatechartRoot
    { 
        $current = $this_StatechartRoot_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getDefRootAccess().getStateRootParserRuleCall_1(), currentNode); 
    }
    this_StateRoot_1=ruleStateRoot
    { 
        $current = $this_StateRoot_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getDefRootAccess().getTransitionRootParserRuleCall_2(), currentNode); 
    }
    this_TransitionRoot_2=ruleTransitionRoot
    { 
        $current = $this_TransitionRoot_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleStatechartRoot
entryRuleStatechartRoot returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStatechartRootRule(), currentNode); }
	 iv_ruleStatechartRoot=ruleStatechartRoot 
	 { $current=$iv_ruleStatechartRoot.current; } 
	 EOF 
;

// Rule StatechartRoot
ruleStatechartRoot returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'@@statechart@@' 
    {
        createLeafNode(grammarAccess.getStatechartRootAccess().getStatechartKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStatechartRootAccess().getDefStatechartDefinitionParserRuleCall_1_0(), currentNode); 
	    }
		lv_def_1_0=ruleStatechartDefinition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatechartRootRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"def",
	        		lv_def_1_0, 
	        		"StatechartDefinition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleStateRoot
entryRuleStateRoot returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStateRootRule(), currentNode); }
	 iv_ruleStateRoot=ruleStateRoot 
	 { $current=$iv_ruleStateRoot.current; } 
	 EOF 
;

// Rule StateRoot
ruleStateRoot returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'@@state@@' 
    {
        createLeafNode(grammarAccess.getStateRootAccess().getStateKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStateRootAccess().getDefStateDefinitionParserRuleCall_1_0(), currentNode); 
	    }
		lv_def_1_0=ruleStateDefinition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRootRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"def",
	        		lv_def_1_0, 
	        		"StateDefinition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleTransitionRoot
entryRuleTransitionRoot returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTransitionRootRule(), currentNode); }
	 iv_ruleTransitionRoot=ruleTransitionRoot 
	 { $current=$iv_ruleTransitionRoot.current; } 
	 EOF 
;

// Rule TransitionRoot
ruleTransitionRoot returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'@@transition@@' 
    {
        createLeafNode(grammarAccess.getTransitionRootAccess().getTransitionKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTransitionRootAccess().getDefTransitionStatementParserRuleCall_1_0(), currentNode); 
	    }
		lv_def_1_0=ruleTransitionStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionRootRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"def",
	        		lv_def_1_0, 
	        		"TransitionStatement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleStatechartDefinition
entryRuleStatechartDefinition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStatechartDefinitionRule(), currentNode); }
	 iv_ruleStatechartDefinition=ruleStatechartDefinition 
	 { $current=$iv_ruleStatechartDefinition.current; } 
	 EOF 
;

// Rule StatechartDefinition
ruleStatechartDefinition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getStatechartDefinitionAccess().getStatechartDefinitionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getStatechartDefinitionAccess().getStatechartDefinitionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStatechartDefinitionAccess().getDefinitionScopesStatechartScopeParserRuleCall_1_0(), currentNode); 
	    }
		lv_definitionScopes_1_0=ruleStatechartScope		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatechartDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"definitionScopes",
	        		lv_definitionScopes_1_0, 
	        		"StatechartScope", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;





// Entry rule entryRuleStateDefinition
entryRuleStateDefinition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStateDefinitionRule(), currentNode); }
	 iv_ruleStateDefinition=ruleStateDefinition 
	 { $current=$iv_ruleStateDefinition.current; } 
	 EOF 
;

// Rule StateDefinition
ruleStateDefinition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getStateDefinitionAccess().getSimpleScopeParserRuleCall(), currentNode); 
    }
    this_SimpleScope_0=ruleSimpleScope
    { 
        $current = $this_SimpleScope_0.current; 
        currentNode = currentNode.getParent();
    }

;





// Entry rule entryRuleTransitionStatement
entryRuleTransitionStatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTransitionStatementRule(), currentNode); }
	 iv_ruleTransitionStatement=ruleTransitionStatement 
	 { $current=$iv_ruleTransitionStatement.current; } 
	 EOF 
;

// Rule TransitionStatement
ruleTransitionStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getTransitionStatementAccess().getTransitionReactionParserRuleCall(), currentNode); 
    }
    this_TransitionReaction_0=ruleTransitionReaction
    { 
        $current = $this_TransitionReaction_0.current; 
        currentNode = currentNode.getParent();
    }

;







// Entry rule entryRuleSimpleScope
entryRuleSimpleScope returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSimpleScopeRule(), currentNode); }
	 iv_ruleSimpleScope=ruleSimpleScope 
	 { $current=$iv_ruleSimpleScope.current; } 
	 EOF 
;

// Rule SimpleScope
ruleSimpleScope returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getSimpleScopeAccess().getSimpleScopeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getSimpleScopeAccess().getSimpleScopeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSimpleScopeAccess().getDefinitionsDefinitionParserRuleCall_1_0(), currentNode); 
	    }
		lv_definitions_1_0=ruleDefinition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSimpleScopeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"definitions",
	        		lv_definitions_1_0, 
	        		"Definition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;





// Entry rule entryRuleStatechartScope
entryRuleStatechartScope returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStatechartScopeRule(), currentNode); }
	 iv_ruleStatechartScope=ruleStatechartScope 
	 { $current=$iv_ruleStatechartScope.current; } 
	 EOF 
;

// Rule StatechartScope
ruleStatechartScope returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getStatechartScopeAccess().getInterfaceScopeParserRuleCall_0(), currentNode); 
    }
    this_InterfaceScope_0=ruleInterfaceScope
    { 
        $current = $this_InterfaceScope_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatechartScopeAccess().getInternalScopeParserRuleCall_1(), currentNode); 
    }
    this_InternalScope_1=ruleInternalScope
    { 
        $current = $this_InternalScope_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleInterfaceScope
entryRuleInterfaceScope returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInterfaceScopeRule(), currentNode); }
	 iv_ruleInterfaceScope=ruleInterfaceScope 
	 { $current=$iv_ruleInterfaceScope.current; } 
	 EOF 
;

// Rule InterfaceScope
ruleInterfaceScope returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getInterfaceScopeAccess().getInterfaceScopeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getInterfaceScopeAccess().getInterfaceScopeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'interface' 
    {
        createLeafNode(grammarAccess.getInterfaceScopeAccess().getInterfaceKeyword_1(), null); 
    }
(
(
		lv_name_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getInterfaceScopeAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInterfaceScopeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?	':' 
    {
        createLeafNode(grammarAccess.getInterfaceScopeAccess().getColonKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInterfaceScopeAccess().getDefinitionsDefinitionParserRuleCall_4_0(), currentNode); 
	    }
		lv_definitions_4_0=ruleDefinition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInterfaceScopeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"definitions",
	        		lv_definitions_4_0, 
	        		"Definition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;





// Entry rule entryRuleInternalScope
entryRuleInternalScope returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInternalScopeRule(), currentNode); }
	 iv_ruleInternalScope=ruleInternalScope 
	 { $current=$iv_ruleInternalScope.current; } 
	 EOF 
;

// Rule InternalScope
ruleInternalScope returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getInternalScopeAccess().getInternalScopeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getInternalScopeAccess().getInternalScopeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'internal' 
    {
        createLeafNode(grammarAccess.getInternalScopeAccess().getInternalKeyword_1(), null); 
    }
	':' 
    {
        createLeafNode(grammarAccess.getInternalScopeAccess().getColonKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInternalScopeAccess().getDefinitionsDefinitionParserRuleCall_3_0(), currentNode); 
	    }
		lv_definitions_3_0=ruleDefinition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInternalScopeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"definitions",
	        		lv_definitions_3_0, 
	        		"Definition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;





// Entry rule entryRuleDefinition
entryRuleDefinition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDefinitionRule(), currentNode); }
	 iv_ruleDefinition=ruleDefinition 
	 { $current=$iv_ruleDefinition.current; } 
	 EOF 
;

// Rule Definition
ruleDefinition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getDefinitionAccess().getEventDefinitionParserRuleCall_0(), currentNode); 
    }
    this_EventDefinition_0=ruleEventDefinition
    { 
        $current = $this_EventDefinition_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getDefinitionAccess().getVariableDefinitionParserRuleCall_1(), currentNode); 
    }
    this_VariableDefinition_1=ruleVariableDefinition
    { 
        $current = $this_VariableDefinition_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getDefinitionAccess().getClockParserRuleCall_2(), currentNode); 
    }
    this_Clock_2=ruleClock
    { 
        $current = $this_Clock_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getDefinitionAccess().getOperationParserRuleCall_3(), currentNode); 
    }
    this_Operation_3=ruleOperation
    { 
        $current = $this_Operation_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getDefinitionAccess().getLocalReactionParserRuleCall_4(), currentNode); 
    }
    this_LocalReaction_4=ruleLocalReaction
    { 
        $current = $this_LocalReaction_4.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getDefinitionAccess().getEntrypointParserRuleCall_5(), currentNode); 
    }
    this_Entrypoint_5=ruleEntrypoint
    { 
        $current = $this_Entrypoint_5.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getDefinitionAccess().getExitpointParserRuleCall_6(), currentNode); 
    }
    this_Exitpoint_6=ruleExitpoint
    { 
        $current = $this_Exitpoint_6.current; 
        currentNode = currentNode.getParent();
    }
)
;







// Entry rule entryRuleEventDefinition
entryRuleEventDefinition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEventDefinitionRule(), currentNode); }
	 iv_ruleEventDefinition=ruleEventDefinition 
	 { $current=$iv_ruleEventDefinition.current; } 
	 EOF 
;

// Rule EventDefinition
ruleEventDefinition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEventDefinitionAccess().getDirectionDirectionEnumRuleCall_0_0(), currentNode); 
	    }
		lv_direction_0_0=ruleDirection		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEventDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"direction",
	        		lv_direction_0_0, 
	        		"Direction", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	'event' 
    {
        createLeafNode(grammarAccess.getEventDefinitionAccess().getEventKeyword_1(), null); 
    }
(
(
		lv_name_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getEventDefinitionAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEventDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	':' 
    {
        createLeafNode(grammarAccess.getEventDefinitionAccess().getColonKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEventDefinitionAccess().getTypeTypeEnumRuleCall_3_1_0(), currentNode); 
	    }
		lv_type_4_0=ruleType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEventDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_4_0, 
	        		"Type", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEventDefinitionAccess().getDerivationEventDerivationParserRuleCall_4_0(), currentNode); 
	    }
		lv_derivation_5_0=ruleEventDerivation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEventDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"derivation",
	        		lv_derivation_5_0, 
	        		"EventDerivation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleEventDerivation
entryRuleEventDerivation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEventDerivationRule(), currentNode); }
	 iv_ruleEventDerivation=ruleEventDerivation 
	 { $current=$iv_ruleEventDerivation.current; } 
	 EOF 
;

// Rule EventDerivation
ruleEventDerivation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'=' 
    {
        createLeafNode(grammarAccess.getEventDerivationAccess().getEqualsSignKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEventDerivationAccess().getConditionLogicalOrExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_condition_1_0=ruleLogicalOrExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEventDerivationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"condition",
	        		lv_condition_1_0, 
	        		"LogicalOrExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	':' 
    {
        createLeafNode(grammarAccess.getEventDerivationAccess().getColonKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEventDerivationAccess().getValueLogicalOrExpressionParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_value_3_0=ruleLogicalOrExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEventDerivationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_3_0, 
	        		"LogicalOrExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;







// Entry rule entryRuleVariableDefinition
entryRuleVariableDefinition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVariableDefinitionRule(), currentNode); }
	 iv_ruleVariableDefinition=ruleVariableDefinition 
	 { $current=$iv_ruleVariableDefinition.current; } 
	 EOF 
;

// Rule VariableDefinition
ruleVariableDefinition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'var' 
    {
        createLeafNode(grammarAccess.getVariableDefinitionAccess().getVarKeyword_0(), null); 
    }
(

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getVariableDefinitionAccess().getUnorderedGroup_1());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getVariableDefinitionAccess().getUnorderedGroup_1(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getVariableDefinitionAccess().getUnorderedGroup_1(), 0);
	 				}
					(
(
		lv_readonly_2_0=	'readonly' 
    {
        createLeafNode(grammarAccess.getVariableDefinitionAccess().getReadonlyReadonlyKeyword_1_0_0(), "readonly"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "readonly", true, "readonly", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getVariableDefinitionAccess().getUnorderedGroup_1());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getVariableDefinitionAccess().getUnorderedGroup_1(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getVariableDefinitionAccess().getUnorderedGroup_1(), 1);
	 				}
					(
(
		lv_external_3_0=	'external' 
    {
        createLeafNode(grammarAccess.getVariableDefinitionAccess().getExternalExternalKeyword_1_1_0(), "external"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "external", true, "external", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getVariableDefinitionAccess().getUnorderedGroup_1());
	 				}
 				)
			)  

		)*	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getVariableDefinitionAccess().getUnorderedGroup_1());
	}

)(
(
		lv_name_4_0=RULE_ID
		{
			createLeafNode(grammarAccess.getVariableDefinitionAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_4_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getVariableDefinitionAccess().getColonKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVariableDefinitionAccess().getTypeTypeEnumRuleCall_4_0(), currentNode); 
	    }
		lv_type_6_0=ruleType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_6_0, 
	        		"Type", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'=' 
    {
        createLeafNode(grammarAccess.getVariableDefinitionAccess().getEqualsSignKeyword_5_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVariableDefinitionAccess().getInitialValueLiteralParserRuleCall_5_1_0(), currentNode); 
	    }
		lv_initialValue_8_0=ruleLiteral		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"initialValue",
	        		lv_initialValue_8_0, 
	        		"Literal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleClock
entryRuleClock returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getClockRule(), currentNode); }
	 iv_ruleClock=ruleClock 
	 { $current=$iv_ruleClock.current; } 
	 EOF 
;

// Rule Clock
ruleClock returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'clock' 
    {
        createLeafNode(grammarAccess.getClockAccess().getClockKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getClockAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClockRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleOperation
entryRuleOperation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOperationRule(), currentNode); }
	 iv_ruleOperation=ruleOperation 
	 { $current=$iv_ruleOperation.current; } 
	 EOF 
;

// Rule Operation
ruleOperation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'operation' 
    {
        createLeafNode(grammarAccess.getOperationAccess().getOperationKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getOperationAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getOperationAccess().getLeftParenthesisKeyword_2(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationAccess().getParamTypesTypeEnumRuleCall_3_0_0(), currentNode); 
	    }
		lv_paramTypes_3_0=ruleType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"paramTypes",
	        		lv_paramTypes_3_0, 
	        		"Type", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getOperationAccess().getCommaKeyword_3_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationAccess().getParamTypesTypeEnumRuleCall_3_1_1_0(), currentNode); 
	    }
		lv_paramTypes_5_0=ruleType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"paramTypes",
	        		lv_paramTypes_5_0, 
	        		"Type", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	')' 
    {
        createLeafNode(grammarAccess.getOperationAccess().getRightParenthesisKeyword_4(), null); 
    }
(	':' 
    {
        createLeafNode(grammarAccess.getOperationAccess().getColonKeyword_5_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationAccess().getTypeTypeEnumRuleCall_5_1_0(), currentNode); 
	    }
		lv_type_8_0=ruleType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_8_0, 
	        		"Type", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleEntrypoint
entryRuleEntrypoint returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEntrypointRule(), currentNode); }
	 iv_ruleEntrypoint=ruleEntrypoint 
	 { $current=$iv_ruleEntrypoint.current; } 
	 EOF 
;

// Rule Entrypoint
ruleEntrypoint returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'entrypoint' 
    {
        createLeafNode(grammarAccess.getEntrypointAccess().getEntrypointKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getEntrypointAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEntrypointRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleExitpoint
entryRuleExitpoint returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExitpointRule(), currentNode); }
	 iv_ruleExitpoint=ruleExitpoint 
	 { $current=$iv_ruleExitpoint.current; } 
	 EOF 
;

// Rule Exitpoint
ruleExitpoint returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'exitpoint' 
    {
        createLeafNode(grammarAccess.getExitpointAccess().getExitpointKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getExitpointAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExitpointRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;







// Entry rule entryRuleLocalReaction
entryRuleLocalReaction returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLocalReactionRule(), currentNode); }
	 iv_ruleLocalReaction=ruleLocalReaction 
	 { $current=$iv_ruleLocalReaction.current; } 
	 EOF 
;

// Rule LocalReaction
ruleLocalReaction returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLocalReactionAccess().getTriggerReactionTriggerParserRuleCall_0_0(), currentNode); 
	    }
		lv_trigger_0_0=ruleReactionTrigger		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLocalReactionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"trigger",
	        		lv_trigger_0_0, 
	        		"ReactionTrigger", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'/' 
    {
        createLeafNode(grammarAccess.getLocalReactionAccess().getSolidusKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLocalReactionAccess().getEffectEffectParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_effect_2_0=ruleEffect		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLocalReactionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"effect",
	        		lv_effect_2_0, 
	        		"Effect", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(	'#' 
    {
        createLeafNode(grammarAccess.getLocalReactionAccess().getNumberSignKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLocalReactionAccess().getPropertiesReactionPropertiesParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_properties_4_0=ruleReactionProperties		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLocalReactionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"properties",
	        		lv_properties_4_0, 
	        		"ReactionProperties", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleTransitionReaction
entryRuleTransitionReaction returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTransitionReactionRule(), currentNode); }
	 iv_ruleTransitionReaction=ruleTransitionReaction 
	 { $current=$iv_ruleTransitionReaction.current; } 
	 EOF 
;

// Rule TransitionReaction
ruleTransitionReaction returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getTransitionReactionAccess().getTransitionReactionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTransitionReactionAccess().getTransitionReactionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTransitionReactionAccess().getTriggerReactionTriggerParserRuleCall_1_0(), currentNode); 
	    }
		lv_trigger_1_0=ruleReactionTrigger		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionReactionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"trigger",
	        		lv_trigger_1_0, 
	        		"ReactionTrigger", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(	'/' 
    {
        createLeafNode(grammarAccess.getTransitionReactionAccess().getSolidusKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTransitionReactionAccess().getEffectEffectParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_effect_3_0=ruleEffect		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionReactionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"effect",
	        		lv_effect_3_0, 
	        		"Effect", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(	'#' 
    {
        createLeafNode(grammarAccess.getTransitionReactionAccess().getNumberSignKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTransitionReactionAccess().getPropertiesReactionPropertiesParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_properties_5_0=ruleReactionProperties		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionReactionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"properties",
	        		lv_properties_5_0, 
	        		"ReactionProperties", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleReactionTrigger
entryRuleReactionTrigger returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getReactionTriggerRule(), currentNode); }
	 iv_ruleReactionTrigger=ruleReactionTrigger 
	 { $current=$iv_ruleReactionTrigger.current; } 
	 EOF 
;

// Rule ReactionTrigger
ruleReactionTrigger returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getReactionTriggerAccess().getTriggersEventSpecParserRuleCall_0_0_0(), currentNode); 
	    }
		lv_triggers_0_0=ruleEventSpec		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReactionTriggerRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"triggers",
	        		lv_triggers_0_0, 
	        		"EventSpec", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getReactionTriggerAccess().getCommaKeyword_0_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getReactionTriggerAccess().getTriggersEventSpecParserRuleCall_0_1_1_0(), currentNode); 
	    }
		lv_triggers_2_0=ruleEventSpec		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReactionTriggerRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"triggers",
	        		lv_triggers_2_0, 
	        		"EventSpec", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)(	'[' 
    {
        createLeafNode(grammarAccess.getReactionTriggerAccess().getLeftSquareBracketKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getReactionTriggerAccess().getGuardExpressionLogicalOrExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_guardExpression_4_0=ruleLogicalOrExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReactionTriggerRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"guardExpression",
	        		lv_guardExpression_4_0, 
	        		"LogicalOrExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	']' 
    {
        createLeafNode(grammarAccess.getReactionTriggerAccess().getRightSquareBracketKeyword_1_2(), null); 
    }
)?)
;





// Entry rule entryRuleEffect
entryRuleEffect returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEffectRule(), currentNode); }
	 iv_ruleEffect=ruleEffect 
	 { $current=$iv_ruleEffect.current; } 
	 EOF 
;

// Rule Effect
ruleEffect returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEffectAccess().getActionsStatementParserRuleCall_0_0(), currentNode); 
	    }
		lv_actions_0_0=ruleStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEffectRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"actions",
	        		lv_actions_0_0, 
	        		"Statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getEffectAccess().getSemicolonKeyword_1(), null); 
    }
)+
;





// Entry rule entryRuleReactionProperties
entryRuleReactionProperties returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getReactionPropertiesRule(), currentNode); }
	 iv_ruleReactionProperties=ruleReactionProperties 
	 { $current=$iv_ruleReactionProperties.current; } 
	 EOF 
;

// Rule ReactionProperties
ruleReactionProperties returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getReactionPropertiesAccess().getReactionPropertiesAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getReactionPropertiesAccess().getReactionPropertiesAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getReactionPropertiesAccess().getPropertiesReactionPropertyParserRuleCall_1_0(), currentNode); 
	    }
		lv_properties_1_0=ruleReactionProperty		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReactionPropertiesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"properties",
	        		lv_properties_1_0, 
	        		"ReactionProperty", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;





// Entry rule entryRuleReactionProperty
entryRuleReactionProperty returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getReactionPropertyRule(), currentNode); }
	 iv_ruleReactionProperty=ruleReactionProperty 
	 { $current=$iv_ruleReactionProperty.current; } 
	 EOF 
;

// Rule ReactionProperty
ruleReactionProperty returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getReactionPropertyAccess().getReactionPriorityParserRuleCall_0(), currentNode); 
    }
    this_ReactionPriority_0=ruleReactionPriority
    { 
        $current = $this_ReactionPriority_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getReactionPropertyAccess().getEntryPointSpecParserRuleCall_1(), currentNode); 
    }
    this_EntryPointSpec_1=ruleEntryPointSpec
    { 
        $current = $this_EntryPointSpec_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getReactionPropertyAccess().getExitPointSpecParserRuleCall_2(), currentNode); 
    }
    this_ExitPointSpec_2=ruleExitPointSpec
    { 
        $current = $this_ExitPointSpec_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleReactionPriority
entryRuleReactionPriority returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getReactionPriorityRule(), currentNode); }
	 iv_ruleReactionPriority=ruleReactionPriority 
	 { $current=$iv_ruleReactionPriority.current; } 
	 EOF 
;

// Rule ReactionPriority
ruleReactionPriority returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_priority_0_0=RULE_INT
		{
			createLeafNode(grammarAccess.getReactionPriorityAccess().getPriorityINTTerminalRuleCall_0(), "priority"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReactionPriorityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"priority",
	        		lv_priority_0_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleEntryPointSpec
entryRuleEntryPointSpec returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEntryPointSpecRule(), currentNode); }
	 iv_ruleEntryPointSpec=ruleEntryPointSpec 
	 { $current=$iv_ruleEntryPointSpec.current; } 
	 EOF 
;

// Rule EntryPointSpec
ruleEntryPointSpec returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'>' 
    {
        createLeafNode(grammarAccess.getEntryPointSpecAccess().getGreaterThanSignKeyword_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getEntryPointSpecRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getEntryPointSpecAccess().getEntrypointEntrypointCrossReference_1_0(), "entrypoint"); 
	}

)
))
;





// Entry rule entryRuleExitPointSpec
entryRuleExitPointSpec returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExitPointSpecRule(), currentNode); }
	 iv_ruleExitPointSpec=ruleExitPointSpec 
	 { $current=$iv_ruleExitPointSpec.current; } 
	 EOF 
;

// Rule ExitPointSpec
ruleExitPointSpec returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getExitPointSpecRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getExitPointSpecAccess().getExitpointExitpointCrossReference_0_0(), "exitpoint"); 
	}

)
)	'>' 
    {
        createLeafNode(grammarAccess.getExitPointSpecAccess().getGreaterThanSignKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleEventSpec
entryRuleEventSpec returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEventSpecRule(), currentNode); }
	 iv_ruleEventSpec=ruleEventSpec 
	 { $current=$iv_ruleEventSpec.current; } 
	 EOF 
;

// Rule EventSpec
ruleEventSpec returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getEventSpecAccess().getRegularEventSpecParserRuleCall_0(), currentNode); 
    }
    this_RegularEventSpec_0=ruleRegularEventSpec
    { 
        $current = $this_RegularEventSpec_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getEventSpecAccess().getTimeEventSpecParserRuleCall_1(), currentNode); 
    }
    this_TimeEventSpec_1=ruleTimeEventSpec
    { 
        $current = $this_TimeEventSpec_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getEventSpecAccess().getBuiltinEventSpecParserRuleCall_2(), currentNode); 
    }
    this_BuiltinEventSpec_2=ruleBuiltinEventSpec
    { 
        $current = $this_BuiltinEventSpec_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleRegularEventSpec
entryRuleRegularEventSpec returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRegularEventSpecRule(), currentNode); }
	 iv_ruleRegularEventSpec=ruleRegularEventSpec 
	 { $current=$iv_ruleRegularEventSpec.current; } 
	 EOF 
;

// Rule RegularEventSpec
ruleRegularEventSpec returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getRegularEventSpecRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getRegularEventSpecAccess().getEventEventCrossReference_0(), "event"); 
	}

)
)
;





// Entry rule entryRuleTimeEventSpec
entryRuleTimeEventSpec returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTimeEventSpecRule(), currentNode); }
	 iv_ruleTimeEventSpec=ruleTimeEventSpec 
	 { $current=$iv_ruleTimeEventSpec.current; } 
	 EOF 
;

// Rule TimeEventSpec
ruleTimeEventSpec returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'after' 
    {
        createLeafNode(grammarAccess.getTimeEventSpecAccess().getAfterKeyword_0(), null); 
    }
(
(
		lv_value_1_0=RULE_INT
		{
			createLeafNode(grammarAccess.getTimeEventSpecAccess().getValueINTTerminalRuleCall_1_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTimeEventSpecRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_1_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTimeEventSpecAccess().getUnitTimeUnitEnumRuleCall_2_0(), currentNode); 
	    }
		lv_unit_2_0=ruleTimeUnit		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTimeEventSpecRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"unit",
	        		lv_unit_2_0, 
	        		"TimeUnit", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleBuiltinEventSpec
entryRuleBuiltinEventSpec returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBuiltinEventSpecRule(), currentNode); }
	 iv_ruleBuiltinEventSpec=ruleBuiltinEventSpec 
	 { $current=$iv_ruleBuiltinEventSpec.current; } 
	 EOF 
;

// Rule BuiltinEventSpec
ruleBuiltinEventSpec returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getBuiltinEventSpecAccess().getEnterEventParserRuleCall_0(), currentNode); 
    }
    this_EnterEvent_0=ruleEnterEvent
    { 
        $current = $this_EnterEvent_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getBuiltinEventSpecAccess().getExitEventParserRuleCall_1(), currentNode); 
    }
    this_ExitEvent_1=ruleExitEvent
    { 
        $current = $this_ExitEvent_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getBuiltinEventSpecAccess().getOnCycleEventParserRuleCall_2(), currentNode); 
    }
    this_OnCycleEvent_2=ruleOnCycleEvent
    { 
        $current = $this_OnCycleEvent_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getBuiltinEventSpecAccess().getAlwaysEventParserRuleCall_3(), currentNode); 
    }
    this_AlwaysEvent_3=ruleAlwaysEvent
    { 
        $current = $this_AlwaysEvent_3.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleEnterEvent
entryRuleEnterEvent returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEnterEventRule(), currentNode); }
	 iv_ruleEnterEvent=ruleEnterEvent 
	 { $current=$iv_ruleEnterEvent.current; } 
	 EOF 
;

// Rule EnterEvent
ruleEnterEvent returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getEnterEventAccess().getEnterEventAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getEnterEventAccess().getEnterEventAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'enter' 
    {
        createLeafNode(grammarAccess.getEnterEventAccess().getEnterKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleExitEvent
entryRuleExitEvent returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExitEventRule(), currentNode); }
	 iv_ruleExitEvent=ruleExitEvent 
	 { $current=$iv_ruleExitEvent.current; } 
	 EOF 
;

// Rule ExitEvent
ruleExitEvent returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getExitEventAccess().getExitEventAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getExitEventAccess().getExitEventAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'exit' 
    {
        createLeafNode(grammarAccess.getExitEventAccess().getExitKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleOnCycleEvent
entryRuleOnCycleEvent returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOnCycleEventRule(), currentNode); }
	 iv_ruleOnCycleEvent=ruleOnCycleEvent 
	 { $current=$iv_ruleOnCycleEvent.current; } 
	 EOF 
;

// Rule OnCycleEvent
ruleOnCycleEvent returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getOnCycleEventAccess().getOnCycleEventAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getOnCycleEventAccess().getOnCycleEventAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'oncycle' 
    {
        createLeafNode(grammarAccess.getOnCycleEventAccess().getOncycleKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleAlwaysEvent
entryRuleAlwaysEvent returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAlwaysEventRule(), currentNode); }
	 iv_ruleAlwaysEvent=ruleAlwaysEvent 
	 { $current=$iv_ruleAlwaysEvent.current; } 
	 EOF 
;

// Rule AlwaysEvent
ruleAlwaysEvent returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getAlwaysEventAccess().getAlwaysEventAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAlwaysEventAccess().getAlwaysEventAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'always' 
    {
        createLeafNode(grammarAccess.getAlwaysEventAccess().getAlwaysKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStatementRule(), currentNode); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getAssignmentParserRuleCall_0(), currentNode); 
    }
    this_Assignment_0=ruleAssignment
    { 
        $current = $this_Assignment_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getEventRaisingParserRuleCall_1(), currentNode); 
    }
    this_EventRaising_1=ruleEventRaising
    { 
        $current = $this_EventRaising_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAssignmentRule(), currentNode); }
	 iv_ruleAssignment=ruleAssignment 
	 { $current=$iv_ruleAssignment.current; } 
	 EOF 
;

// Rule Assignment
ruleAssignment returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getAssignmentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getAssignmentAccess().getVarRefVariableCrossReference_0_0(), "varRef"); 
	}

)
)	'=' 
    {
        createLeafNode(grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAssignmentAccess().getExpressionLogicalOrExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_expression_2_0=ruleLogicalOrExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssignmentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_2_0, 
	        		"LogicalOrExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleEventRaising
entryRuleEventRaising returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEventRaisingRule(), currentNode); }
	 iv_ruleEventRaising=ruleEventRaising 
	 { $current=$iv_ruleEventRaising.current; } 
	 EOF 
;

// Rule EventRaising
ruleEventRaising returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'raise' 
    {
        createLeafNode(grammarAccess.getEventRaisingAccess().getRaiseKeyword_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getEventRaisingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getEventRaisingAccess().getEventEventCrossReference_1_0(), "event"); 
	}

)
)(	':' 
    {
        createLeafNode(grammarAccess.getEventRaisingAccess().getColonKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEventRaisingAccess().getValueLogicalOrExpressionParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_value_3_0=ruleLogicalOrExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEventRaisingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_3_0, 
	        		"LogicalOrExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleLogicalOrExpression
entryRuleLogicalOrExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLogicalOrExpressionRule(), currentNode); }
	 iv_ruleLogicalOrExpression=ruleLogicalOrExpression 
	 { $current=$iv_ruleLogicalOrExpression.current; } 
	 EOF 
;

// Rule LogicalOrExpression
ruleLogicalOrExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getLogicalAndExpressionParserRuleCall_0(), currentNode); 
    }
    this_LogicalAndExpression_0=ruleLogicalAndExpression
    { 
        $current = $this_LogicalAndExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getLogicalOrExpressionAccess().getLogicalOrExpressionLeftOperandAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "leftOperand", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getLogicalOrExpressionLeftOperandAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'||' 
    {
        createLeafNode(grammarAccess.getLogicalOrExpressionAccess().getVerticalLineVerticalLineKeyword_1_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getRightOperandLogicalAndExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_rightOperand_3_0=ruleLogicalAndExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLogicalOrExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rightOperand",
	        		lv_rightOperand_3_0, 
	        		"LogicalAndExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleLogicalAndExpression
entryRuleLogicalAndExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLogicalAndExpressionRule(), currentNode); }
	 iv_ruleLogicalAndExpression=ruleLogicalAndExpression 
	 { $current=$iv_ruleLogicalAndExpression.current; } 
	 EOF 
;

// Rule LogicalAndExpression
ruleLogicalAndExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getLogicalNotExpressionParserRuleCall_0(), currentNode); 
    }
    this_LogicalNotExpression_0=ruleLogicalNotExpression
    { 
        $current = $this_LogicalNotExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getLogicalAndExpressionAccess().getLogicalAndExpressionLeftOperandAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "leftOperand", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getLogicalAndExpressionLeftOperandAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'&&' 
    {
        createLeafNode(grammarAccess.getLogicalAndExpressionAccess().getAmpersandAmpersandKeyword_1_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getRightOperandLogicalNotExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_rightOperand_3_0=ruleLogicalNotExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLogicalAndExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rightOperand",
	        		lv_rightOperand_3_0, 
	        		"LogicalNotExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleLogicalNotExpression
entryRuleLogicalNotExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLogicalNotExpressionRule(), currentNode); }
	 iv_ruleLogicalNotExpression=ruleLogicalNotExpression 
	 { $current=$iv_ruleLogicalNotExpression.current; } 
	 EOF 
;

// Rule LogicalNotExpression
ruleLogicalNotExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getLogicalNotExpressionAccess().getLogicalRelationExpressionParserRuleCall_0(), currentNode); 
    }
    this_LogicalRelationExpression_0=ruleLogicalRelationExpression
    { 
        $current = $this_LogicalRelationExpression_0.current; 
        currentNode = currentNode.getParent();
    }

    |((
    { 
        temp=factory.create(grammarAccess.getLogicalNotExpressionAccess().getLogicalNotExpressionAction_1_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getLogicalNotExpressionAccess().getLogicalNotExpressionAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'!' 
    {
        createLeafNode(grammarAccess.getLogicalNotExpressionAccess().getExclamationMarkKeyword_1_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLogicalNotExpressionAccess().getOperandLogicalRelationExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_operand_3_0=ruleLogicalRelationExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLogicalNotExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"operand",
	        		lv_operand_3_0, 
	        		"LogicalRelationExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
;





// Entry rule entryRuleLogicalRelationExpression
entryRuleLogicalRelationExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLogicalRelationExpressionRule(), currentNode); }
	 iv_ruleLogicalRelationExpression=ruleLogicalRelationExpression 
	 { $current=$iv_ruleLogicalRelationExpression.current; } 
	 EOF 
;

// Rule LogicalRelationExpression
ruleLogicalRelationExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getLogicalRelationExpressionAccess().getNumericalAddSubtractExpressionParserRuleCall_0(), currentNode); 
    }
    this_NumericalAddSubtractExpression_0=ruleNumericalAddSubtractExpression
    { 
        $current = $this_NumericalAddSubtractExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getLogicalRelationExpressionAccess().getLogicalRelationExpressionLeftOperandAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "leftOperand", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getLogicalRelationExpressionAccess().getLogicalRelationExpressionLeftOperandAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLogicalRelationExpressionAccess().getOperatorRelationalOperatorEnumRuleCall_1_1_0(), currentNode); 
	    }
		lv_operator_2_0=ruleRelationalOperator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLogicalRelationExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"operator",
	        		lv_operator_2_0, 
	        		"RelationalOperator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLogicalRelationExpressionAccess().getRightOperandNumericalAddSubtractExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_rightOperand_3_0=ruleNumericalAddSubtractExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLogicalRelationExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rightOperand",
	        		lv_rightOperand_3_0, 
	        		"NumericalAddSubtractExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleNumericalAddSubtractExpression
entryRuleNumericalAddSubtractExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNumericalAddSubtractExpressionRule(), currentNode); }
	 iv_ruleNumericalAddSubtractExpression=ruleNumericalAddSubtractExpression 
	 { $current=$iv_ruleNumericalAddSubtractExpression.current; } 
	 EOF 
;

// Rule NumericalAddSubtractExpression
ruleNumericalAddSubtractExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getNumericalAddSubtractExpressionAccess().getNumericalMultiplyDivideExpressionParserRuleCall_0(), currentNode); 
    }
    this_NumericalMultiplyDivideExpression_0=ruleNumericalMultiplyDivideExpression
    { 
        $current = $this_NumericalMultiplyDivideExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getNumericalAddSubtractExpressionAccess().getNumericalAddSubtractExpressionLeftOperandAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "leftOperand", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getNumericalAddSubtractExpressionAccess().getNumericalAddSubtractExpressionLeftOperandAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNumericalAddSubtractExpressionAccess().getOperatorAdditiveOperatorEnumRuleCall_1_1_0(), currentNode); 
	    }
		lv_operator_2_0=ruleAdditiveOperator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNumericalAddSubtractExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"operator",
	        		lv_operator_2_0, 
	        		"AdditiveOperator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNumericalAddSubtractExpressionAccess().getRightOperandNumericalMultiplyDivideExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_rightOperand_3_0=ruleNumericalMultiplyDivideExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNumericalAddSubtractExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rightOperand",
	        		lv_rightOperand_3_0, 
	        		"NumericalMultiplyDivideExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleNumericalMultiplyDivideExpression
entryRuleNumericalMultiplyDivideExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNumericalMultiplyDivideExpressionRule(), currentNode); }
	 iv_ruleNumericalMultiplyDivideExpression=ruleNumericalMultiplyDivideExpression 
	 { $current=$iv_ruleNumericalMultiplyDivideExpression.current; } 
	 EOF 
;

// Rule NumericalMultiplyDivideExpression
ruleNumericalMultiplyDivideExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getNumericalUnaryExpressionParserRuleCall_0(), currentNode); 
    }
    this_NumericalUnaryExpression_0=ruleNumericalUnaryExpression
    { 
        $current = $this_NumericalUnaryExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getNumericalMultiplyDivideExpressionLeftOperandAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "leftOperand", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getNumericalMultiplyDivideExpressionLeftOperandAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getOperatorMultiplicativeOperatorEnumRuleCall_1_1_0(), currentNode); 
	    }
		lv_operator_2_0=ruleMultiplicativeOperator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNumericalMultiplyDivideExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"operator",
	        		lv_operator_2_0, 
	        		"MultiplicativeOperator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNumericalMultiplyDivideExpressionAccess().getRightOperandNumericalUnaryExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_rightOperand_3_0=ruleNumericalUnaryExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNumericalMultiplyDivideExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rightOperand",
	        		lv_rightOperand_3_0, 
	        		"NumericalUnaryExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleNumericalUnaryExpression
entryRuleNumericalUnaryExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNumericalUnaryExpressionRule(), currentNode); }
	 iv_ruleNumericalUnaryExpression=ruleNumericalUnaryExpression 
	 { $current=$iv_ruleNumericalUnaryExpression.current; } 
	 EOF 
;

// Rule NumericalUnaryExpression
ruleNumericalUnaryExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getNumericalUnaryExpressionAccess().getPrimaryExpressionParserRuleCall_0(), currentNode); 
    }
    this_PrimaryExpression_0=rulePrimaryExpression
    { 
        $current = $this_PrimaryExpression_0.current; 
        currentNode = currentNode.getParent();
    }

    |((
    { 
        temp=factory.create(grammarAccess.getNumericalUnaryExpressionAccess().getNumericalUnaryExpressionAction_1_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getNumericalUnaryExpressionAccess().getNumericalUnaryExpressionAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNumericalUnaryExpressionAccess().getOperatorUnaryOperatorEnumRuleCall_1_1_0(), currentNode); 
	    }
		lv_operator_2_0=ruleUnaryOperator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNumericalUnaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"operator",
	        		lv_operator_2_0, 
	        		"UnaryOperator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNumericalUnaryExpressionAccess().getOperandPrimaryExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_operand_3_0=rulePrimaryExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNumericalUnaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"operand",
	        		lv_operand_3_0, 
	        		"PrimaryExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
;





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPrimaryExpressionRule(), currentNode); }
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current; } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getValueExpressionParserRuleCall_0(), currentNode); 
    }
    this_ValueExpression_0=ruleValueExpression
    { 
        $current = $this_ValueExpression_0.current; 
        currentNode = currentNode.getParent();
    }

    |(	'(' 
    {
        createLeafNode(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_1_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLogicalOrExpressionParserRuleCall_1_1(), currentNode); 
    }
    this_LogicalOrExpression_2=ruleLogicalOrExpression
    { 
        $current = $this_LogicalOrExpression_2.current; 
        currentNode = currentNode.getParent();
    }
	')' 
    {
        createLeafNode(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_1_2(), null); 
    }
))
;





// Entry rule entryRuleValueExpression
entryRuleValueExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getValueExpressionRule(), currentNode); }
	 iv_ruleValueExpression=ruleValueExpression 
	 { $current=$iv_ruleValueExpression.current; } 
	 EOF 
;

// Rule ValueExpression
ruleValueExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getValueExpressionAccess().getPrimitiveValueExpressionParserRuleCall_0(), currentNode); 
    }
    this_PrimitiveValueExpression_0=rulePrimitiveValueExpression
    { 
        $current = $this_PrimitiveValueExpression_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getValueExpressionAccess().getVariableReferenceExpressionParserRuleCall_1(), currentNode); 
    }
    this_VariableReferenceExpression_1=ruleVariableReferenceExpression
    { 
        $current = $this_VariableReferenceExpression_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRulePrimitiveValueExpression
entryRulePrimitiveValueExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPrimitiveValueExpressionRule(), currentNode); }
	 iv_rulePrimitiveValueExpression=rulePrimitiveValueExpression 
	 { $current=$iv_rulePrimitiveValueExpression.current; } 
	 EOF 
;

// Rule PrimitiveValueExpression
rulePrimitiveValueExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getPrimitiveValueExpressionAccess().getPrimitiveValueExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getPrimitiveValueExpressionAccess().getPrimitiveValueExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrimitiveValueExpressionAccess().getValueLiteralParserRuleCall_1_0(), currentNode); 
	    }
		lv_value_1_0=ruleLiteral		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveValueExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_1_0, 
	        		"Literal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleVariableReferenceExpression
entryRuleVariableReferenceExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVariableReferenceExpressionRule(), currentNode); }
	 iv_ruleVariableReferenceExpression=ruleVariableReferenceExpression 
	 { $current=$iv_ruleVariableReferenceExpression.current; } 
	 EOF 
;

// Rule VariableReferenceExpression
ruleVariableReferenceExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getVariableReferenceExpressionAccess().getPropertyReferenceExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getVariableReferenceExpressionAccess().getPropertyReferenceExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableReferenceExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getVariableReferenceExpressionAccess().getValueDataElementCrossReference_1_0(), "value"); 
	}

)
))
;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLiteralRule(), currentNode); } 
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current.getText(); }  
	 EOF 
;

// Rule Literal
ruleLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_BOOL_0=RULE_BOOL    {
		$current.merge(this_BOOL_0);
    }

    { 
    createLeafNode(grammarAccess.getLiteralAccess().getBOOLTerminalRuleCall_0(), null); 
    }

    |    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    createLeafNode(grammarAccess.getLiteralAccess().getINTTerminalRuleCall_1(), null); 
    }

    |    this_STRING_2=RULE_STRING    {
		$current.merge(this_STRING_2);
    }

    { 
    createLeafNode(grammarAccess.getLiteralAccess().getSTRINGTerminalRuleCall_2(), null); 
    }

    |    this_FLOAT_3=RULE_FLOAT    {
		$current.merge(this_FLOAT_3);
    }

    { 
    createLeafNode(grammarAccess.getLiteralAccess().getFLOATTerminalRuleCall_3(), null); 
    }
)
    ;





// Rule Direction
ruleDirection returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'in' 
	{
        $current = grammarAccess.getDirectionAccess().getINEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getDirectionAccess().getINEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'out' 
	{
        $current = grammarAccess.getDirectionAccess().getOUTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getDirectionAccess().getOUTEnumLiteralDeclaration_1(), null); 
    }
));



// Rule AdditiveOperator
ruleAdditiveOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'+' 
	{
        $current = grammarAccess.getAdditiveOperatorAccess().getPlusEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAdditiveOperatorAccess().getPlusEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'-' 
	{
        $current = grammarAccess.getAdditiveOperatorAccess().getMinusEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAdditiveOperatorAccess().getMinusEnumLiteralDeclaration_1(), null); 
    }
));



// Rule MultiplicativeOperator
ruleMultiplicativeOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'*' 
	{
        $current = grammarAccess.getMultiplicativeOperatorAccess().getMulEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getMultiplicativeOperatorAccess().getMulEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'/' 
	{
        $current = grammarAccess.getMultiplicativeOperatorAccess().getDivEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getMultiplicativeOperatorAccess().getDivEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'%' 
	{
        $current = grammarAccess.getMultiplicativeOperatorAccess().getModEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getMultiplicativeOperatorAccess().getModEnumLiteralDeclaration_2(), null); 
    }
));



// Rule UnaryOperator
ruleUnaryOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'+' 
	{
        $current = grammarAccess.getUnaryOperatorAccess().getPositiveEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getUnaryOperatorAccess().getPositiveEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'-' 
	{
        $current = grammarAccess.getUnaryOperatorAccess().getNegativeEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getUnaryOperatorAccess().getNegativeEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'~' 
	{
        $current = grammarAccess.getUnaryOperatorAccess().getComplementEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getUnaryOperatorAccess().getComplementEnumLiteralDeclaration_2(), null); 
    }
));



// Rule RelationalOperator
ruleRelationalOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'<' 
	{
        $current = grammarAccess.getRelationalOperatorAccess().getSmallerEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationalOperatorAccess().getSmallerEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'<=' 
	{
        $current = grammarAccess.getRelationalOperatorAccess().getSmallerEqualEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationalOperatorAccess().getSmallerEqualEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'>' 
	{
        $current = grammarAccess.getRelationalOperatorAccess().getGreaterEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationalOperatorAccess().getGreaterEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'>=' 
	{
        $current = grammarAccess.getRelationalOperatorAccess().getGreaterEqualEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationalOperatorAccess().getGreaterEqualEnumLiteralDeclaration_3(), null); 
    }
)
    |(	'==' 
	{
        $current = grammarAccess.getRelationalOperatorAccess().getEqualsEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationalOperatorAccess().getEqualsEnumLiteralDeclaration_4(), null); 
    }
)
    |(	'!=' 
	{
        $current = grammarAccess.getRelationalOperatorAccess().getNotEqualsEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationalOperatorAccess().getNotEqualsEnumLiteralDeclaration_5(), null); 
    }
));





// Rule TimeUnit
ruleTimeUnit returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	's' 
	{
        $current = grammarAccess.getTimeUnitAccess().getSecondEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getTimeUnitAccess().getSecondEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'ms' 
	{
        $current = grammarAccess.getTimeUnitAccess().getMillisecondEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getTimeUnitAccess().getMillisecondEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'ns' 
	{
        $current = grammarAccess.getTimeUnitAccess().getNanosecondEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getTimeUnitAccess().getNanosecondEnumLiteralDeclaration_2(), null); 
    }
));



// Rule Type
ruleType returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'void' 
	{
        $current = grammarAccess.getTypeAccess().getVoidEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getTypeAccess().getVoidEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'integer' 
	{
        $current = grammarAccess.getTypeAccess().getIntegerEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getTypeAccess().getIntegerEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'real' 
	{
        $current = grammarAccess.getTypeAccess().getRealEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getTypeAccess().getRealEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'boolean' 
	{
        $current = grammarAccess.getTypeAccess().getBooleanEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getTypeAccess().getBooleanEnumLiteralDeclaration_3(), null); 
    }
)
    |(	'string' 
	{
        $current = grammarAccess.getTypeAccess().getStringEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getTypeAccess().getStringEnumLiteralDeclaration_4(), null); 
    }
));



RULE_BOOL : ('true'|'false');

RULE_FLOAT : ('-'|'+')? RULE_INT '.' RULE_INT ('e' ('-'|'+') RULE_INT)?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


