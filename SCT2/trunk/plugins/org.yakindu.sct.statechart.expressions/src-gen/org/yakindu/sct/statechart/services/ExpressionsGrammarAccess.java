/*
* generated by Xtext
*/

package org.yakindu.sct.statechart.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ExpressionsGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class RootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Root");
		private final Assignment cRootsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRootsDefRootParserRuleCall_0 = (RuleCall)cRootsAssignment.eContents().get(0);
		
		/// * ---- root rules ----
		//These root rules are not relevant for the grammar integration in the statechart. They just integrate the different start rules consistently 
		//into a single grammar. 
		// * /Root:
		//	roots+=DefRoot*;
		public ParserRule getRule() { return rule; }

		//roots+=DefRoot*
		public Assignment getRootsAssignment() { return cRootsAssignment; }

		//DefRoot
		public RuleCall getRootsDefRootParserRuleCall_0() { return cRootsDefRootParserRuleCall_0; }
	}

	public class DefRootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefRoot");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStatechartRootParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStateRootParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTransitionRootParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//DefRoot:
		//	StatechartRoot | StateRoot | TransitionRoot;
		public ParserRule getRule() { return rule; }

		//StatechartRoot | StateRoot | TransitionRoot
		public Alternatives getAlternatives() { return cAlternatives; }

		//StatechartRoot
		public RuleCall getStatechartRootParserRuleCall_0() { return cStatechartRootParserRuleCall_0; }

		//StateRoot
		public RuleCall getStateRootParserRuleCall_1() { return cStateRootParserRuleCall_1; }

		//TransitionRoot
		public RuleCall getTransitionRootParserRuleCall_2() { return cTransitionRootParserRuleCall_2; }
	}

	public class StatechartRootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StatechartRoot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStatechartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefStatechartDefinitionParserRuleCall_1_0 = (RuleCall)cDefAssignment_1.eContents().get(0);
		
		//StatechartRoot:
		//	"@@statechart@@" def=StatechartDefinition;
		public ParserRule getRule() { return rule; }

		//"@@statechart@@" def=StatechartDefinition
		public Group getGroup() { return cGroup; }

		//"@@statechart@@"
		public Keyword getStatechartKeyword_0() { return cStatechartKeyword_0; }

		//def=StatechartDefinition
		public Assignment getDefAssignment_1() { return cDefAssignment_1; }

		//StatechartDefinition
		public RuleCall getDefStatechartDefinitionParserRuleCall_1_0() { return cDefStatechartDefinitionParserRuleCall_1_0; }
	}

	public class StateRootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateRoot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefStateDefinitionParserRuleCall_1_0 = (RuleCall)cDefAssignment_1.eContents().get(0);
		
		//StateRoot:
		//	"@@state@@" def=StateDefinition;
		public ParserRule getRule() { return rule; }

		//"@@state@@" def=StateDefinition
		public Group getGroup() { return cGroup; }

		//"@@state@@"
		public Keyword getStateKeyword_0() { return cStateKeyword_0; }

		//def=StateDefinition
		public Assignment getDefAssignment_1() { return cDefAssignment_1; }

		//StateDefinition
		public RuleCall getDefStateDefinitionParserRuleCall_1_0() { return cDefStateDefinitionParserRuleCall_1_0; }
	}

	public class TransitionRootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransitionRoot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefTransitionStatementParserRuleCall_1_0 = (RuleCall)cDefAssignment_1.eContents().get(0);
		
		//TransitionRoot:
		//	"@@transition@@" def=TransitionStatement;
		public ParserRule getRule() { return rule; }

		//"@@transition@@" def=TransitionStatement
		public Group getGroup() { return cGroup; }

		//"@@transition@@"
		public Keyword getTransitionKeyword_0() { return cTransitionKeyword_0; }

		//def=TransitionStatement
		public Assignment getDefAssignment_1() { return cDefAssignment_1; }

		//TransitionStatement
		public RuleCall getDefTransitionStatementParserRuleCall_1_0() { return cDefTransitionStatementParserRuleCall_1_0; }
	}

	public class StatechartDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StatechartDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStatechartDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDefinitionScopesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefinitionScopesStatechartScopeParserRuleCall_1_0 = (RuleCall)cDefinitionScopesAssignment_1.eContents().get(0);
		
		/// * ---- start rules ----
		//Define the starting points used by the statechart integration. These rules hook in the concrete rules of the specific grammar.
		// * /StatechartDefinition:
		//	{StatechartDefinition} definitionScopes+=StatechartScope*;
		public ParserRule getRule() { return rule; }

		//{StatechartDefinition} definitionScopes+=StatechartScope*
		public Group getGroup() { return cGroup; }

		//{StatechartDefinition}
		public Action getStatechartDefinitionAction_0() { return cStatechartDefinitionAction_0; }

		//definitionScopes+=StatechartScope*
		public Assignment getDefinitionScopesAssignment_1() { return cDefinitionScopesAssignment_1; }

		//StatechartScope
		public RuleCall getDefinitionScopesStatechartScopeParserRuleCall_1_0() { return cDefinitionScopesStatechartScopeParserRuleCall_1_0; }
	}

	public class StateDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateDefinition");
		private final RuleCall cSimpleScopeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//StateDefinition:
		//	SimpleScope;
		public ParserRule getRule() { return rule; }

		//SimpleScope
		public RuleCall getSimpleScopeParserRuleCall() { return cSimpleScopeParserRuleCall; }
	}

	public class TransitionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransitionStatement");
		private final RuleCall cReactionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//TransitionStatement:
		//	Reaction;
		public ParserRule getRule() { return rule; }

		//Reaction
		public RuleCall getReactionParserRuleCall() { return cReactionParserRuleCall; }
	}

	public class ScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Scope");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleScopeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStatechartScopeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// * ---- scope rules ----
		//Defines different kinds of scopes that contain element definitions. Scopes are used for element definitions in statechart, regions, and state 
		// * /Scope:
		//	SimpleScope | StatechartScope;
		public ParserRule getRule() { return rule; }

		//SimpleScope | StatechartScope
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleScope
		public RuleCall getSimpleScopeParserRuleCall_0() { return cSimpleScopeParserRuleCall_0; }

		//StatechartScope
		public RuleCall getStatechartScopeParserRuleCall_1() { return cStatechartScopeParserRuleCall_1; }
	}

	public class SimpleScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleScope");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSimpleScopeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDefinitionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefinitionsDefinitionParserRuleCall_1_0 = (RuleCall)cDefinitionsAssignment_1.eContents().get(0);
		
		//// a SimpleScope is used for states and regions
		//SimpleScope:
		//	{SimpleScope} definitions+=Definition*;
		public ParserRule getRule() { return rule; }

		//{SimpleScope} definitions+=Definition*
		public Group getGroup() { return cGroup; }

		//{SimpleScope}
		public Action getSimpleScopeAction_0() { return cSimpleScopeAction_0; }

		//definitions+=Definition*
		public Assignment getDefinitionsAssignment_1() { return cDefinitionsAssignment_1; }

		//Definition
		public RuleCall getDefinitionsDefinitionParserRuleCall_1_0() { return cDefinitionsDefinitionParserRuleCall_1_0; }
	}

	public class StatechartScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StatechartScope");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInterfaceScopeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInternalScopeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// defines the poosible scopes for statecharts
		//StatechartScope:
		//	InterfaceScope | InternalScope;
		public ParserRule getRule() { return rule; }

		//InterfaceScope | InternalScope
		public Alternatives getAlternatives() { return cAlternatives; }

		//InterfaceScope
		public RuleCall getInterfaceScopeParserRuleCall_0() { return cInterfaceScopeParserRuleCall_0; }

		//InternalScope
		public RuleCall getInternalScopeParserRuleCall_1() { return cInternalScopeParserRuleCall_1; }
	}

	public class InterfaceScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfaceScope");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInterfaceScopeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInterfaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDefinitionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDefinitionsDefinitionParserRuleCall_4_0 = (RuleCall)cDefinitionsAssignment_4.eContents().get(0);
		
		//InterfaceScope:
		//	{InterfaceScope} "interface" name=ID? ":" definitions+=Definition*;
		public ParserRule getRule() { return rule; }

		//{InterfaceScope} "interface" name=ID? ":" definitions+=Definition*
		public Group getGroup() { return cGroup; }

		//{InterfaceScope}
		public Action getInterfaceScopeAction_0() { return cInterfaceScopeAction_0; }

		//"interface"
		public Keyword getInterfaceKeyword_1() { return cInterfaceKeyword_1; }

		//name=ID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//definitions+=Definition*
		public Assignment getDefinitionsAssignment_4() { return cDefinitionsAssignment_4; }

		//Definition
		public RuleCall getDefinitionsDefinitionParserRuleCall_4_0() { return cDefinitionsDefinitionParserRuleCall_4_0; }
	}

	public class InternalScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InternalScope");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInternalScopeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInternalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDefinitionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDefinitionsDefinitionParserRuleCall_3_0 = (RuleCall)cDefinitionsAssignment_3.eContents().get(0);
		
		//InternalScope:
		//	{InternalScope} "internal" ":" definitions+=Definition*;
		public ParserRule getRule() { return rule; }

		//{InternalScope} "internal" ":" definitions+=Definition*
		public Group getGroup() { return cGroup; }

		//{InternalScope}
		public Action getInternalScopeAction_0() { return cInternalScopeAction_0; }

		//"internal"
		public Keyword getInternalKeyword_1() { return cInternalKeyword_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//definitions+=Definition*
		public Assignment getDefinitionsAssignment_3() { return cDefinitionsAssignment_3; }

		//Definition
		public RuleCall getDefinitionsDefinitionParserRuleCall_3_0() { return cDefinitionsDefinitionParserRuleCall_3_0; }
	}

	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Definition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEventDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cClockParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOperationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cReactionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cEntrypointParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cExitpointParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		/// * ---- definitions ----
		//a definition is a top level element of a definition scope. * /Definition:
		//	EventDefinition | VariableDefinition | Clock | Operation | Reaction | Entrypoint | Exitpoint;
		public ParserRule getRule() { return rule; }

		//EventDefinition | VariableDefinition | Clock | Operation | Reaction | Entrypoint | Exitpoint
		public Alternatives getAlternatives() { return cAlternatives; }

		//EventDefinition
		public RuleCall getEventDefinitionParserRuleCall_0() { return cEventDefinitionParserRuleCall_0; }

		//VariableDefinition
		public RuleCall getVariableDefinitionParserRuleCall_1() { return cVariableDefinitionParserRuleCall_1; }

		//Clock
		public RuleCall getClockParserRuleCall_2() { return cClockParserRuleCall_2; }

		//Operation
		public RuleCall getOperationParserRuleCall_3() { return cOperationParserRuleCall_3; }

		//Reaction
		public RuleCall getReactionParserRuleCall_4() { return cReactionParserRuleCall_4; }

		//Entrypoint
		public RuleCall getEntrypointParserRuleCall_5() { return cEntrypointParserRuleCall_5; }

		//Exitpoint
		public RuleCall getExitpointParserRuleCall_6() { return cExitpointParserRuleCall_6; }
	}

	public class SCTEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SCTEvent");
		private final RuleCall cEventDefinitionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		/// * ---- event definition ---- * / // hook EventDefinition into statechart inheritance hiearchy
		//SCTEvent returns sct::Event:
		//	EventDefinition;
		public ParserRule getRule() { return rule; }

		//EventDefinition
		public RuleCall getEventDefinitionParserRuleCall() { return cEventDefinitionParserRuleCall; }
	}

	public class EventDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDirectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDirectionDirectionEnumRuleCall_0_0 = (RuleCall)cDirectionAssignment_0.eContents().get(0);
		private final Keyword cEventKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypeTypeEnumRuleCall_3_1_0 = (RuleCall)cTypeAssignment_3_1.eContents().get(0);
		private final Assignment cDerivationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDerivationEventDerivationParserRuleCall_4_0 = (RuleCall)cDerivationAssignment_4.eContents().get(0);
		
		//EventDefinition:
		//	direction=Direction? "event" name=ID (":" type=Type)? derivation=EventDerivation?;
		public ParserRule getRule() { return rule; }

		//direction=Direction? "event" name=ID (":" type=Type)? derivation=EventDerivation?
		public Group getGroup() { return cGroup; }

		//direction=Direction?
		public Assignment getDirectionAssignment_0() { return cDirectionAssignment_0; }

		//Direction
		public RuleCall getDirectionDirectionEnumRuleCall_0_0() { return cDirectionDirectionEnumRuleCall_0_0; }

		//"event"
		public Keyword getEventKeyword_1() { return cEventKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//(":" type=Type)?
		public Group getGroup_3() { return cGroup_3; }

		//":"
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }

		//type=Type
		public Assignment getTypeAssignment_3_1() { return cTypeAssignment_3_1; }

		//Type
		public RuleCall getTypeTypeEnumRuleCall_3_1_0() { return cTypeTypeEnumRuleCall_3_1_0; }

		//derivation=EventDerivation?
		public Assignment getDerivationAssignment_4() { return cDerivationAssignment_4; }

		//EventDerivation
		public RuleCall getDerivationEventDerivationParserRuleCall_4_0() { return cDerivationEventDerivationParserRuleCall_4_0; }
	}

	public class EventDerivationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventDerivation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionExpressionRuleParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueExpressionRuleParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		
		//EventDerivation:
		//	"=" condition=ExpressionRule (":" value=ExpressionRule)?;
		public ParserRule getRule() { return rule; }

		//"=" condition=ExpressionRule (":" value=ExpressionRule)?
		public Group getGroup() { return cGroup; }

		//"="
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }

		//condition=ExpressionRule
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//ExpressionRule
		public RuleCall getConditionExpressionRuleParserRuleCall_1_0() { return cConditionExpressionRuleParserRuleCall_1_0; }

		//(":" value=ExpressionRule)?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//value=ExpressionRule
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//ExpressionRule
		public RuleCall getValueExpressionRuleParserRuleCall_2_1_0() { return cValueExpressionRuleParserRuleCall_2_1_0; }
	}

	public class SCTVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SCTVariable");
		private final RuleCall cVariableDefinitionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		/// * ---- variable definition ---- * / // hook VariableDefinition into statechart inheritance hiearchy
		//SCTVariable returns sct::Variable:
		//	VariableDefinition;
		public ParserRule getRule() { return rule; }

		//VariableDefinition
		public RuleCall getVariableDefinitionParserRuleCall() { return cVariableDefinitionParserRuleCall; }
	}

	public class VariableDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Assignment cReadonlyAssignment_1_0 = (Assignment)cUnorderedGroup_1.eContents().get(0);
		private final Keyword cReadonlyReadonlyKeyword_1_0_0 = (Keyword)cReadonlyAssignment_1_0.eContents().get(0);
		private final Assignment cExternalAssignment_1_1 = (Assignment)cUnorderedGroup_1.eContents().get(1);
		private final Keyword cExternalExternalKeyword_1_1_0 = (Keyword)cExternalAssignment_1_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeTypeEnumRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cValueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cValueLiteralParserRuleCall_5_1_0 = (RuleCall)cValueAssignment_5_1.eContents().get(0);
		
		//VariableDefinition:
		//	"var" (readonly?="readonly"? & external?="external"?) name=ID ":" type=Type ("=" value=Literal)?;
		public ParserRule getRule() { return rule; }

		//"var" (readonly?="readonly"? & external?="external"?) name=ID ":" type=Type ("=" value=Literal)?
		public Group getGroup() { return cGroup; }

		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }

		//readonly?="readonly"? & external?="external"?
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }

		//readonly?="readonly"?
		public Assignment getReadonlyAssignment_1_0() { return cReadonlyAssignment_1_0; }

		//"readonly"
		public Keyword getReadonlyReadonlyKeyword_1_0_0() { return cReadonlyReadonlyKeyword_1_0_0; }

		//external?="external"?
		public Assignment getExternalAssignment_1_1() { return cExternalAssignment_1_1; }

		//"external"
		public Keyword getExternalExternalKeyword_1_1_0() { return cExternalExternalKeyword_1_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//type=Type
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }

		//Type
		public RuleCall getTypeTypeEnumRuleCall_4_0() { return cTypeTypeEnumRuleCall_4_0; }

		//("=" value=Literal)?
		public Group getGroup_5() { return cGroup_5; }

		//"="
		public Keyword getEqualsSignKeyword_5_0() { return cEqualsSignKeyword_5_0; }

		//value=Literal
		public Assignment getValueAssignment_5_1() { return cValueAssignment_5_1; }

		//Literal
		public RuleCall getValueLiteralParserRuleCall_5_1_0() { return cValueLiteralParserRuleCall_5_1_0; }
	}

	public class ClockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Clock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClockKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		/// * ---- clock definition ---- * / Clock:
		//	"clock" name=ID;
		public ParserRule getRule() { return rule; }

		//"clock" name=ID
		public Group getGroup() { return cGroup; }

		//"clock"
		public Keyword getClockKeyword_0() { return cClockKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOperationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParamTypesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParamTypesTypeEnumRuleCall_3_0_0 = (RuleCall)cParamTypesAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParamTypesAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParamTypesTypeEnumRuleCall_3_1_1_0 = (RuleCall)cParamTypesAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cTypeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cTypeTypeEnumRuleCall_5_1_0 = (RuleCall)cTypeAssignment_5_1.eContents().get(0);
		
		/// * ---- clock definition ---- * / Operation:
		//	"operation" name=ID "(" (paramTypes+=Type ("," paramTypes+=Type)*)? ")" (":" type=Type)?;
		public ParserRule getRule() { return rule; }

		//"operation" name=ID "(" (paramTypes+=Type ("," paramTypes+=Type)*)? ")" (":" type=Type)?
		public Group getGroup() { return cGroup; }

		//"operation"
		public Keyword getOperationKeyword_0() { return cOperationKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(paramTypes+=Type ("," paramTypes+=Type)*)?
		public Group getGroup_3() { return cGroup_3; }

		//paramTypes+=Type
		public Assignment getParamTypesAssignment_3_0() { return cParamTypesAssignment_3_0; }

		//Type
		public RuleCall getParamTypesTypeEnumRuleCall_3_0_0() { return cParamTypesTypeEnumRuleCall_3_0_0; }

		//("," paramTypes+=Type)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//paramTypes+=Type
		public Assignment getParamTypesAssignment_3_1_1() { return cParamTypesAssignment_3_1_1; }

		//Type
		public RuleCall getParamTypesTypeEnumRuleCall_3_1_1_0() { return cParamTypesTypeEnumRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//(":" type=Type)?
		public Group getGroup_5() { return cGroup_5; }

		//":"
		public Keyword getColonKeyword_5_0() { return cColonKeyword_5_0; }

		//type=Type
		public Assignment getTypeAssignment_5_1() { return cTypeAssignment_5_1; }

		//Type
		public RuleCall getTypeTypeEnumRuleCall_5_1_0() { return cTypeTypeEnumRuleCall_5_1_0; }
	}

	public class EntrypointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entrypoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntrypointKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		/// * ---- entrypoint definition ---- * / Entrypoint:
		//	"entrypoint" name=ID;
		public ParserRule getRule() { return rule; }

		//"entrypoint" name=ID
		public Group getGroup() { return cGroup; }

		//"entrypoint"
		public Keyword getEntrypointKeyword_0() { return cEntrypointKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class ExitpointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exitpoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExitpointKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		/// * ---- exitpoint definition ---- * / Exitpoint:
		//	"exitpoint" name=ID;
		public ParserRule getRule() { return rule; }

		//"exitpoint" name=ID
		public Group getGroup() { return cGroup; }

		//"exitpoint"
		public Keyword getExitpointKeyword_0() { return cExitpointKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class ReactionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Reaction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTriggerAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTriggerReactionTriggerParserRuleCall_0_0 = (RuleCall)cTriggerAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSolidusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cActionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cActionActionParserRuleCall_1_1_0 = (RuleCall)cActionAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cNumberSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPropertiesReactionPropertiesParserRuleCall_2_1_0 = (RuleCall)cPropertiesAssignment_2_1.eContents().get(0);
		
		/// * ---- reaction rules ----
		//Define the structure of reactions that are central for describing the statecharts behavior. 
		// * /Reaction:
		//	trigger=ReactionTrigger ("/" action=Action)? ("#" properties=ReactionProperties)?;
		public ParserRule getRule() { return rule; }

		//trigger=ReactionTrigger ("/" action=Action)? ("#" properties=ReactionProperties)?
		public Group getGroup() { return cGroup; }

		//trigger=ReactionTrigger
		public Assignment getTriggerAssignment_0() { return cTriggerAssignment_0; }

		//ReactionTrigger
		public RuleCall getTriggerReactionTriggerParserRuleCall_0_0() { return cTriggerReactionTriggerParserRuleCall_0_0; }

		//("/" action=Action)?
		public Group getGroup_1() { return cGroup_1; }

		//"/"
		public Keyword getSolidusKeyword_1_0() { return cSolidusKeyword_1_0; }

		//action=Action
		public Assignment getActionAssignment_1_1() { return cActionAssignment_1_1; }

		//Action
		public RuleCall getActionActionParserRuleCall_1_1_0() { return cActionActionParserRuleCall_1_1_0; }

		//("#" properties=ReactionProperties)?
		public Group getGroup_2() { return cGroup_2; }

		//"#"
		public Keyword getNumberSignKeyword_2_0() { return cNumberSignKeyword_2_0; }

		//properties=ReactionProperties
		public Assignment getPropertiesAssignment_2_1() { return cPropertiesAssignment_2_1; }

		//ReactionProperties
		public RuleCall getPropertiesReactionPropertiesParserRuleCall_2_1_0() { return cPropertiesReactionPropertiesParserRuleCall_2_1_0; }
	}

	public class ReactionTriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReactionTrigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cTriggersAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cTriggersEventCrossReference_0_0_0 = (CrossReference)cTriggersAssignment_0_0.eContents().get(0);
		private final RuleCall cTriggersEventIDTerminalRuleCall_0_0_0_1 = (RuleCall)cTriggersEventCrossReference_0_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cTriggersAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final CrossReference cTriggersEventCrossReference_0_1_1_0 = (CrossReference)cTriggersAssignment_0_1_1.eContents().get(0);
		private final RuleCall cTriggersEventIDTerminalRuleCall_0_1_1_0_1 = (RuleCall)cTriggersEventCrossReference_0_1_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cGuardExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cGuardExpressionLogicalOrExpressionParserRuleCall_1_1_0 = (RuleCall)cGuardExpressionAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//ReactionTrigger:
		//	(triggers+=[sct::Event] ("," triggers+=[sct::Event])*) ("[" guardExpression=LogicalOrExpression "]")?;
		public ParserRule getRule() { return rule; }

		//(triggers+=[sct::Event] ("," triggers+=[sct::Event])*) ("[" guardExpression=LogicalOrExpression "]")?
		public Group getGroup() { return cGroup; }

		//triggers+=[sct::Event] ("," triggers+=[sct::Event])*
		public Group getGroup_0() { return cGroup_0; }

		//triggers+=[sct::Event]
		public Assignment getTriggersAssignment_0_0() { return cTriggersAssignment_0_0; }

		//[sct::Event]
		public CrossReference getTriggersEventCrossReference_0_0_0() { return cTriggersEventCrossReference_0_0_0; }

		//ID
		public RuleCall getTriggersEventIDTerminalRuleCall_0_0_0_1() { return cTriggersEventIDTerminalRuleCall_0_0_0_1; }

		//("," triggers+=[sct::Event])*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//","
		public Keyword getCommaKeyword_0_1_0() { return cCommaKeyword_0_1_0; }

		//triggers+=[sct::Event]
		public Assignment getTriggersAssignment_0_1_1() { return cTriggersAssignment_0_1_1; }

		//[sct::Event]
		public CrossReference getTriggersEventCrossReference_0_1_1_0() { return cTriggersEventCrossReference_0_1_1_0; }

		//ID
		public RuleCall getTriggersEventIDTerminalRuleCall_0_1_1_0_1() { return cTriggersEventIDTerminalRuleCall_0_1_1_0_1; }

		//("[" guardExpression=LogicalOrExpression "]")?
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//guardExpression=LogicalOrExpression
		public Assignment getGuardExpressionAssignment_1_1() { return cGuardExpressionAssignment_1_1; }

		//LogicalOrExpression
		public RuleCall getGuardExpressionLogicalOrExpressionParserRuleCall_1_1_0() { return cGuardExpressionLogicalOrExpressionParserRuleCall_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}

	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Action");
		private final Assignment cActionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cActionExpressionRuleParserRuleCall_0 = (RuleCall)cActionAssignment.eContents().get(0);
		
		//Action:
		//	action=ExpressionRule;
		public ParserRule getRule() { return rule; }

		//action=ExpressionRule
		public Assignment getActionAssignment() { return cActionAssignment; }

		//ExpressionRule
		public RuleCall getActionExpressionRuleParserRuleCall_0() { return cActionExpressionRuleParserRuleCall_0; }
	}

	public class ReactionPropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReactionProperties");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReactionPropertiesAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPropertiesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropertiesReactionPropertyParserRuleCall_1_0 = (RuleCall)cPropertiesAssignment_1.eContents().get(0);
		
		//ReactionProperties:
		//	{ReactionProperties} properties+=ReactionProperty*;
		public ParserRule getRule() { return rule; }

		//{ReactionProperties} properties+=ReactionProperty*
		public Group getGroup() { return cGroup; }

		//{ReactionProperties}
		public Action getReactionPropertiesAction_0() { return cReactionPropertiesAction_0; }

		//properties+=ReactionProperty*
		public Assignment getPropertiesAssignment_1() { return cPropertiesAssignment_1; }

		//ReactionProperty
		public RuleCall getPropertiesReactionPropertyParserRuleCall_1_0() { return cPropertiesReactionPropertyParserRuleCall_1_0; }
	}

	public class ReactionPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReactionProperty");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cReactionPriorityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEntryPointSpecParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExitPointSpecParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ReactionProperty:
		//	ReactionPriority | EntryPointSpec | ExitPointSpec;
		public ParserRule getRule() { return rule; }

		//ReactionPriority | EntryPointSpec | ExitPointSpec
		public Alternatives getAlternatives() { return cAlternatives; }

		//ReactionPriority
		public RuleCall getReactionPriorityParserRuleCall_0() { return cReactionPriorityParserRuleCall_0; }

		//EntryPointSpec
		public RuleCall getEntryPointSpecParserRuleCall_1() { return cEntryPointSpecParserRuleCall_1; }

		//ExitPointSpec
		public RuleCall getExitPointSpecParserRuleCall_2() { return cExitPointSpecParserRuleCall_2; }
	}

	public class ReactionPriorityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReactionPriority");
		private final Assignment cPriorityAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPriorityINTTerminalRuleCall_0 = (RuleCall)cPriorityAssignment.eContents().get(0);
		
		//ReactionPriority:
		//	priority=INT;
		public ParserRule getRule() { return rule; }

		//priority=INT
		public Assignment getPriorityAssignment() { return cPriorityAssignment; }

		//INT
		public RuleCall getPriorityINTTerminalRuleCall_0() { return cPriorityINTTerminalRuleCall_0; }
	}

	public class EntryPointSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EntryPointSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEntrypointAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEntrypointEntrypointCrossReference_1_0 = (CrossReference)cEntrypointAssignment_1.eContents().get(0);
		private final RuleCall cEntrypointEntrypointIDTerminalRuleCall_1_0_1 = (RuleCall)cEntrypointEntrypointCrossReference_1_0.eContents().get(1);
		
		//EntryPointSpec:
		//	">" entrypoint=[Entrypoint];
		public ParserRule getRule() { return rule; }

		//">" entrypoint=[Entrypoint]
		public Group getGroup() { return cGroup; }

		//">"
		public Keyword getGreaterThanSignKeyword_0() { return cGreaterThanSignKeyword_0; }

		//entrypoint=[Entrypoint]
		public Assignment getEntrypointAssignment_1() { return cEntrypointAssignment_1; }

		//[Entrypoint]
		public CrossReference getEntrypointEntrypointCrossReference_1_0() { return cEntrypointEntrypointCrossReference_1_0; }

		//ID
		public RuleCall getEntrypointEntrypointIDTerminalRuleCall_1_0_1() { return cEntrypointEntrypointIDTerminalRuleCall_1_0_1; }
	}

	public class ExitPointSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExitPointSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExitpointAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cExitpointExitpointCrossReference_0_0 = (CrossReference)cExitpointAssignment_0.eContents().get(0);
		private final RuleCall cExitpointExitpointIDTerminalRuleCall_0_0_1 = (RuleCall)cExitpointExitpointCrossReference_0_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ExitPointSpec:
		//	exitpoint=[Exitpoint] ">";
		public ParserRule getRule() { return rule; }

		//exitpoint=[Exitpoint] ">"
		public Group getGroup() { return cGroup; }

		//exitpoint=[Exitpoint]
		public Assignment getExitpointAssignment_0() { return cExitpointAssignment_0; }

		//[Exitpoint]
		public CrossReference getExitpointExitpointCrossReference_0_0() { return cExitpointExitpointCrossReference_0_0; }

		//ID
		public RuleCall getExitpointExitpointIDTerminalRuleCall_0_0_1() { return cExitpointExitpointIDTerminalRuleCall_0_0_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_1() { return cGreaterThanSignKeyword_1; }
	}

	public class StateExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cEntryExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEntryExpressionEntryExpressionParserRuleCall_1_0 = (RuleCall)cEntryExpressionAssignment_1.eContents().get(0);
		private final Assignment cExitExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExitExpressionExitExpressionParserRuleCall_2_0 = (RuleCall)cExitExpressionAssignment_2.eContents().get(0);
		private final Assignment cOntickExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOntickExpressionOnTickExpressionParserRuleCall_3_0 = (RuleCall)cOntickExpressionAssignment_3.eContents().get(0);
		
		//// ****************
		//// State Expression
		//// ****************
		//StateExpression:
		//	{StateExpression} entryExpression+=EntryExpression* exitExpression+=ExitExpression*
		//	ontickExpression+=OnTickExpression*;
		public ParserRule getRule() { return rule; }

		//{StateExpression} entryExpression+=EntryExpression* exitExpression+=ExitExpression* ontickExpression+=OnTickExpression*
		public Group getGroup() { return cGroup; }

		//{StateExpression}
		public Action getStateExpressionAction_0() { return cStateExpressionAction_0; }

		//entryExpression+=EntryExpression*
		public Assignment getEntryExpressionAssignment_1() { return cEntryExpressionAssignment_1; }

		//EntryExpression
		public RuleCall getEntryExpressionEntryExpressionParserRuleCall_1_0() { return cEntryExpressionEntryExpressionParserRuleCall_1_0; }

		//exitExpression+=ExitExpression*
		public Assignment getExitExpressionAssignment_2() { return cExitExpressionAssignment_2; }

		//ExitExpression
		public RuleCall getExitExpressionExitExpressionParserRuleCall_2_0() { return cExitExpressionExitExpressionParserRuleCall_2_0; }

		//ontickExpression+=OnTickExpression*
		public Assignment getOntickExpressionAssignment_3() { return cOntickExpressionAssignment_3; }

		//OnTickExpression
		public RuleCall getOntickExpressionOnTickExpressionParserRuleCall_3_0() { return cOntickExpressionOnTickExpressionParserRuleCall_3_0; }
	}

	public class EntryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EntryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionRuleParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//EntryExpression:
		//	"entry:" expression=ExpressionRule;
		public ParserRule getRule() { return rule; }

		//"entry:" expression=ExpressionRule
		public Group getGroup() { return cGroup; }

		//"entry:"
		public Keyword getEntryKeyword_0() { return cEntryKeyword_0; }

		//expression=ExpressionRule
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//ExpressionRule
		public RuleCall getExpressionExpressionRuleParserRuleCall_1_0() { return cExpressionExpressionRuleParserRuleCall_1_0; }
	}

	public class ExitExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExitExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionRuleParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//ExitExpression:
		//	"exit:" expression=ExpressionRule;
		public ParserRule getRule() { return rule; }

		//"exit:" expression=ExpressionRule
		public Group getGroup() { return cGroup; }

		//"exit:"
		public Keyword getExitKeyword_0() { return cExitKeyword_0; }

		//expression=ExpressionRule
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//ExpressionRule
		public RuleCall getExpressionExpressionRuleParserRuleCall_1_0() { return cExpressionExpressionRuleParserRuleCall_1_0; }
	}

	public class OnTickExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OnTickExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionRuleParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//OnTickExpression:
		//	"do:" expression=ExpressionRule;
		public ParserRule getRule() { return rule; }

		//"do:" expression=ExpressionRule
		public Group getGroup() { return cGroup; }

		//"do:"
		public Keyword getDoKeyword_0() { return cDoKeyword_0; }

		//expression=ExpressionRule
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//ExpressionRule
		public RuleCall getExpressionExpressionRuleParserRuleCall_1_0() { return cExpressionExpressionRuleParserRuleCall_1_0; }
	}

	public class ExpressionRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionRule");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cExpressionAlternatives_0 = (Alternatives)cExpressionAssignment.eContents().get(0);
		private final RuleCall cExpressionLogicalOrExpressionParserRuleCall_0_0 = (RuleCall)cExpressionAlternatives_0.eContents().get(0);
		private final RuleCall cExpressionRaiseEventExpressionParserRuleCall_0_1 = (RuleCall)cExpressionAlternatives_0.eContents().get(1);
		
		//// ****************
		//// Expression Grammar
		//// ****************
		//ExpressionRule:
		//	expression=(LogicalOrExpression | RaiseEventExpression);
		public ParserRule getRule() { return rule; }

		//expression=(LogicalOrExpression | RaiseEventExpression)
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }

		//LogicalOrExpression | RaiseEventExpression
		public Alternatives getExpressionAlternatives_0() { return cExpressionAlternatives_0; }

		//LogicalOrExpression
		public RuleCall getExpressionLogicalOrExpressionParserRuleCall_0_0() { return cExpressionLogicalOrExpressionParserRuleCall_0_0; }

		//RaiseEventExpression
		public RuleCall getExpressionRaiseEventExpressionParserRuleCall_0_1() { return cExpressionRaiseEventExpressionParserRuleCall_0_1; }
	}

	public class RaiseEventExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RaiseEventExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRaiseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEventAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEventEventCrossReference_1_0 = (CrossReference)cEventAssignment_1.eContents().get(0);
		private final RuleCall cEventEventIDTerminalRuleCall_1_0_1 = (RuleCall)cEventEventCrossReference_1_0.eContents().get(1);
		
		//RaiseEventExpression:
		//	"raise" event=[sct::Event];
		public ParserRule getRule() { return rule; }

		//"raise" event=[sct::Event]
		public Group getGroup() { return cGroup; }

		//"raise"
		public Keyword getRaiseKeyword_0() { return cRaiseKeyword_0; }

		//event=[sct::Event]
		public Assignment getEventAssignment_1() { return cEventAssignment_1; }

		//[sct::Event]
		public CrossReference getEventEventCrossReference_1_0() { return cEventEventCrossReference_1_0; }

		//ID
		public RuleCall getEventEventIDTerminalRuleCall_1_0_1() { return cEventEventIDTerminalRuleCall_1_0_1; }
	}

	public class LogicalOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicalOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicalOrExpressionLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandLogicalAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//LogicalOrExpression returns Expression:
		//	LogicalAndExpression ({LogicalOrExpression.leftOperand=current} "||" rightOperand=LogicalAndExpression)*;
		public ParserRule getRule() { return rule; }

		//LogicalAndExpression ({LogicalOrExpression.leftOperand=current} "||" rightOperand=LogicalAndExpression)*
		public Group getGroup() { return cGroup; }

		//LogicalAndExpression
		public RuleCall getLogicalAndExpressionParserRuleCall_0() { return cLogicalAndExpressionParserRuleCall_0; }

		//({LogicalOrExpression.leftOperand=current} "||" rightOperand=LogicalAndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{LogicalOrExpression.leftOperand=current}
		public Action getLogicalOrExpressionLeftOperandAction_1_0() { return cLogicalOrExpressionLeftOperandAction_1_0; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }

		//rightOperand=LogicalAndExpression
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//LogicalAndExpression
		public RuleCall getRightOperandLogicalAndExpressionParserRuleCall_1_2_0() { return cRightOperandLogicalAndExpressionParserRuleCall_1_2_0; }
	}

	public class LogicalAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicalAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalNotExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicalAndExpressionLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandLogicalNotExpressionParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//LogicalAndExpression returns Expression:
		//	LogicalNotExpression ({LogicalAndExpression.leftOperand=current} "&&" rightOperand=LogicalNotExpression)*;
		public ParserRule getRule() { return rule; }

		//LogicalNotExpression ({LogicalAndExpression.leftOperand=current} "&&" rightOperand=LogicalNotExpression)*
		public Group getGroup() { return cGroup; }

		//LogicalNotExpression
		public RuleCall getLogicalNotExpressionParserRuleCall_0() { return cLogicalNotExpressionParserRuleCall_0; }

		//({LogicalAndExpression.leftOperand=current} "&&" rightOperand=LogicalNotExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{LogicalAndExpression.leftOperand=current}
		public Action getLogicalAndExpressionLeftOperandAction_1_0() { return cLogicalAndExpressionLeftOperandAction_1_0; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }

		//rightOperand=LogicalNotExpression
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//LogicalNotExpression
		public RuleCall getRightOperandLogicalNotExpressionParserRuleCall_1_2_0() { return cRightOperandLogicalNotExpressionParserRuleCall_1_2_0; }
	}

	public class LogicalNotExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicalNotExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLogicalRelationExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cLogicalNotExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperandLogicalRelationExpressionParserRuleCall_1_2_0 = (RuleCall)cOperandAssignment_1_2.eContents().get(0);
		
		//LogicalNotExpression returns Expression:
		//	LogicalRelationExpression | {LogicalNotExpression} "!" operand=LogicalRelationExpression;
		public ParserRule getRule() { return rule; }

		//LogicalRelationExpression | {LogicalNotExpression} "!" operand=LogicalRelationExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//LogicalRelationExpression
		public RuleCall getLogicalRelationExpressionParserRuleCall_0() { return cLogicalRelationExpressionParserRuleCall_0; }

		//{LogicalNotExpression} "!" operand=LogicalRelationExpression
		public Group getGroup_1() { return cGroup_1; }

		//{LogicalNotExpression}
		public Action getLogicalNotExpressionAction_1_0() { return cLogicalNotExpressionAction_1_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_1_1() { return cExclamationMarkKeyword_1_1; }

		//operand=LogicalRelationExpression
		public Assignment getOperandAssignment_1_2() { return cOperandAssignment_1_2; }

		//LogicalRelationExpression
		public RuleCall getOperandLogicalRelationExpressionParserRuleCall_1_2_0() { return cOperandLogicalRelationExpressionParserRuleCall_1_2_0; }
	}

	public class LogicalRelationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicalRelationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNumericalAddSubtractExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicalRelationExpressionLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorRelationalOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandNumericalAddSubtractExpressionParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//LogicalRelationExpression returns Expression:
		//	NumericalAddSubtractExpression ({LogicalRelationExpression.leftOperand=current} operator=RelationalOperator
		//	rightOperand=NumericalAddSubtractExpression)*;
		public ParserRule getRule() { return rule; }

		//NumericalAddSubtractExpression ({LogicalRelationExpression.leftOperand=current} operator=RelationalOperator
		//rightOperand=NumericalAddSubtractExpression)*
		public Group getGroup() { return cGroup; }

		//NumericalAddSubtractExpression
		public RuleCall getNumericalAddSubtractExpressionParserRuleCall_0() { return cNumericalAddSubtractExpressionParserRuleCall_0; }

		//({LogicalRelationExpression.leftOperand=current} operator=RelationalOperator
		//rightOperand=NumericalAddSubtractExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{LogicalRelationExpression.leftOperand=current}
		public Action getLogicalRelationExpressionLeftOperandAction_1_0() { return cLogicalRelationExpressionLeftOperandAction_1_0; }

		//operator=RelationalOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//RelationalOperator
		public RuleCall getOperatorRelationalOperatorEnumRuleCall_1_1_0() { return cOperatorRelationalOperatorEnumRuleCall_1_1_0; }

		//rightOperand=NumericalAddSubtractExpression
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//NumericalAddSubtractExpression
		public RuleCall getRightOperandNumericalAddSubtractExpressionParserRuleCall_1_2_0() { return cRightOperandNumericalAddSubtractExpressionParserRuleCall_1_2_0; }
	}

	public class NumericalAddSubtractExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumericalAddSubtractExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNumericalMultiplyDivideExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cNumericalAddSubtractExpressionLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorAdditiveOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandNumericalMultiplyDivideExpressionParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//NumericalAddSubtractExpression returns Expression:
		//	NumericalMultiplyDivideExpression ({NumericalAddSubtractExpression.leftOperand=current} operator=AdditiveOperator
		//	rightOperand=NumericalMultiplyDivideExpression)*;
		public ParserRule getRule() { return rule; }

		//NumericalMultiplyDivideExpression ({NumericalAddSubtractExpression.leftOperand=current} operator=AdditiveOperator
		//rightOperand=NumericalMultiplyDivideExpression)*
		public Group getGroup() { return cGroup; }

		//NumericalMultiplyDivideExpression
		public RuleCall getNumericalMultiplyDivideExpressionParserRuleCall_0() { return cNumericalMultiplyDivideExpressionParserRuleCall_0; }

		//({NumericalAddSubtractExpression.leftOperand=current} operator=AdditiveOperator
		//rightOperand=NumericalMultiplyDivideExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{NumericalAddSubtractExpression.leftOperand=current}
		public Action getNumericalAddSubtractExpressionLeftOperandAction_1_0() { return cNumericalAddSubtractExpressionLeftOperandAction_1_0; }

		//operator=AdditiveOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//AdditiveOperator
		public RuleCall getOperatorAdditiveOperatorEnumRuleCall_1_1_0() { return cOperatorAdditiveOperatorEnumRuleCall_1_1_0; }

		//rightOperand=NumericalMultiplyDivideExpression
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//NumericalMultiplyDivideExpression
		public RuleCall getRightOperandNumericalMultiplyDivideExpressionParserRuleCall_1_2_0() { return cRightOperandNumericalMultiplyDivideExpressionParserRuleCall_1_2_0; }
	}

	public class NumericalMultiplyDivideExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumericalMultiplyDivideExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNumericalUnaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cNumericalMultiplyDivideExpressionLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorMultiplicativeOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandNumericalUnaryExpressionParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//NumericalMultiplyDivideExpression returns Expression:
		//	NumericalUnaryExpression ({NumericalMultiplyDivideExpression.leftOperand=current} operator=MultiplicativeOperator
		//	rightOperand=NumericalUnaryExpression)*;
		public ParserRule getRule() { return rule; }

		//NumericalUnaryExpression ({NumericalMultiplyDivideExpression.leftOperand=current} operator=MultiplicativeOperator
		//rightOperand=NumericalUnaryExpression)*
		public Group getGroup() { return cGroup; }

		//NumericalUnaryExpression
		public RuleCall getNumericalUnaryExpressionParserRuleCall_0() { return cNumericalUnaryExpressionParserRuleCall_0; }

		//({NumericalMultiplyDivideExpression.leftOperand=current} operator=MultiplicativeOperator
		//rightOperand=NumericalUnaryExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{NumericalMultiplyDivideExpression.leftOperand=current}
		public Action getNumericalMultiplyDivideExpressionLeftOperandAction_1_0() { return cNumericalMultiplyDivideExpressionLeftOperandAction_1_0; }

		//operator=MultiplicativeOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//MultiplicativeOperator
		public RuleCall getOperatorMultiplicativeOperatorEnumRuleCall_1_1_0() { return cOperatorMultiplicativeOperatorEnumRuleCall_1_1_0; }

		//rightOperand=NumericalUnaryExpression
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//NumericalUnaryExpression
		public RuleCall getRightOperandNumericalUnaryExpressionParserRuleCall_1_2_0() { return cRightOperandNumericalUnaryExpressionParserRuleCall_1_2_0; }
	}

	public class NumericalUnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumericalUnaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNumericalUnaryExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorUnaryOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperandPrimaryExpressionParserRuleCall_1_2_0 = (RuleCall)cOperandAssignment_1_2.eContents().get(0);
		
		//NumericalUnaryExpression returns Expression:
		//	PrimaryExpression | {NumericalUnaryExpression} operator=UnaryOperator operand=PrimaryExpression;
		public ParserRule getRule() { return rule; }

		//PrimaryExpression | {NumericalUnaryExpression} operator=UnaryOperator operand=PrimaryExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }

		//{NumericalUnaryExpression} operator=UnaryOperator operand=PrimaryExpression
		public Group getGroup_1() { return cGroup_1; }

		//{NumericalUnaryExpression}
		public Action getNumericalUnaryExpressionAction_1_0() { return cNumericalUnaryExpressionAction_1_0; }

		//operator=UnaryOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//UnaryOperator
		public RuleCall getOperatorUnaryOperatorEnumRuleCall_1_1_0() { return cOperatorUnaryOperatorEnumRuleCall_1_1_0; }

		//operand=PrimaryExpression
		public Assignment getOperandAssignment_1_2() { return cOperandAssignment_1_2; }

		//PrimaryExpression
		public RuleCall getOperandPrimaryExpressionParserRuleCall_1_2_0() { return cOperandPrimaryExpressionParserRuleCall_1_2_0; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cLogicalOrExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//PrimaryExpression returns Expression:
		//	ValueExpression | "(" LogicalOrExpression ")";
		public ParserRule getRule() { return rule; }

		//ValueExpression | "(" LogicalOrExpression ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ValueExpression
		public RuleCall getValueExpressionParserRuleCall_0() { return cValueExpressionParserRuleCall_0; }

		//"(" LogicalOrExpression ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//LogicalOrExpression
		public RuleCall getLogicalOrExpressionParserRuleCall_1_1() { return cLogicalOrExpressionParserRuleCall_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class ValueExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveValueExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableReferenceExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ValueExpression returns Expression:
		//	PrimitiveValueExpression | VariableReferenceExpression;
		public ParserRule getRule() { return rule; }

		//PrimitiveValueExpression | VariableReferenceExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//PrimitiveValueExpression
		public RuleCall getPrimitiveValueExpressionParserRuleCall_0() { return cPrimitiveValueExpressionParserRuleCall_0; }

		//VariableReferenceExpression
		public RuleCall getVariableReferenceExpressionParserRuleCall_1() { return cVariableReferenceExpressionParserRuleCall_1; }
	}

	public class PrimitiveValueExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveValueExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimitiveValueExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueLiteralParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//PrimitiveValueExpression returns Expression:
		//	{PrimitiveValueExpression} value=Literal;
		public ParserRule getRule() { return rule; }

		//{PrimitiveValueExpression} value=Literal
		public Group getGroup() { return cGroup; }

		//{PrimitiveValueExpression}
		public Action getPrimitiveValueExpressionAction_0() { return cPrimitiveValueExpressionAction_0; }

		//value=Literal
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//Literal
		public RuleCall getValueLiteralParserRuleCall_1_0() { return cValueLiteralParserRuleCall_1_0; }
	}

	public class VariableReferenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableReferenceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPropertyReferenceExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cValueVariableCrossReference_1_0 = (CrossReference)cValueAssignment_1.eContents().get(0);
		private final RuleCall cValueVariableIDTerminalRuleCall_1_0_1 = (RuleCall)cValueVariableCrossReference_1_0.eContents().get(1);
		
		//VariableReferenceExpression returns Expression:
		//	{PropertyReferenceExpression} value=[sct::Variable];
		public ParserRule getRule() { return rule; }

		//{PropertyReferenceExpression} value=[sct::Variable]
		public Group getGroup() { return cGroup; }

		//{PropertyReferenceExpression}
		public Action getPropertyReferenceExpressionAction_0() { return cPropertyReferenceExpressionAction_0; }

		//value=[sct::Variable]
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//[sct::Variable]
		public CrossReference getValueVariableCrossReference_1_0() { return cValueVariableCrossReference_1_0; }

		//ID
		public RuleCall getValueVariableIDTerminalRuleCall_1_0_1() { return cValueVariableIDTerminalRuleCall_1_0_1; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBOOLTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFLOATTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Literal returns ecore::EString:
		//	BOOL | INT | STRING | FLOAT;
		public ParserRule getRule() { return rule; }

		//BOOL | INT | STRING | FLOAT
		public Alternatives getAlternatives() { return cAlternatives; }

		//BOOL
		public RuleCall getBOOLTerminalRuleCall_0() { return cBOOLTerminalRuleCall_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }

		//FLOAT
		public RuleCall getFLOATTerminalRuleCall_3() { return cFLOATTerminalRuleCall_3; }
	}
	
	
	public class DirectionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Direction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINInKeyword_0_0 = (Keyword)cINEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOUTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOUTOutKeyword_1_0 = (Keyword)cOUTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Direction:
		//	IN="in" | OUT="out";
		public EnumRule getRule() { return rule; }

		//IN="in" | OUT="out"
		public Alternatives getAlternatives() { return cAlternatives; }

		//IN="in"
		public EnumLiteralDeclaration getINEnumLiteralDeclaration_0() { return cINEnumLiteralDeclaration_0; }

		//"in"
		public Keyword getINInKeyword_0_0() { return cINInKeyword_0_0; }

		//OUT="out"
		public EnumLiteralDeclaration getOUTEnumLiteralDeclaration_1() { return cOUTEnumLiteralDeclaration_1; }

		//"out"
		public Keyword getOUTOutKeyword_1_0() { return cOUTOutKeyword_1_0; }
	}

	public class AdditiveOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "AdditiveOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPlusEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPlusPlusSignKeyword_0_0 = (Keyword)cPlusEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMinusEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMinusHyphenMinusKeyword_1_0 = (Keyword)cMinusEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum AdditiveOperator:
		//	plus="+" | minus="-";
		public EnumRule getRule() { return rule; }

		//plus="+" | minus="-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//plus="+"
		public EnumLiteralDeclaration getPlusEnumLiteralDeclaration_0() { return cPlusEnumLiteralDeclaration_0; }

		//"+"
		public Keyword getPlusPlusSignKeyword_0_0() { return cPlusPlusSignKeyword_0_0; }

		//minus="-"
		public EnumLiteralDeclaration getMinusEnumLiteralDeclaration_1() { return cMinusEnumLiteralDeclaration_1; }

		//"-"
		public Keyword getMinusHyphenMinusKeyword_1_0() { return cMinusHyphenMinusKeyword_1_0; }
	}

	public class MultiplicativeOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicativeOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMulEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMulAsteriskKeyword_0_0 = (Keyword)cMulEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDivEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDivSolidusKeyword_1_0 = (Keyword)cDivEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cModEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cModPercentSignKeyword_2_0 = (Keyword)cModEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum MultiplicativeOperator:
		//	mul="*" | div="/" | mod="%";
		public EnumRule getRule() { return rule; }

		//mul="*" | div="/" | mod="%"
		public Alternatives getAlternatives() { return cAlternatives; }

		//mul="*"
		public EnumLiteralDeclaration getMulEnumLiteralDeclaration_0() { return cMulEnumLiteralDeclaration_0; }

		//"*"
		public Keyword getMulAsteriskKeyword_0_0() { return cMulAsteriskKeyword_0_0; }

		//div="/"
		public EnumLiteralDeclaration getDivEnumLiteralDeclaration_1() { return cDivEnumLiteralDeclaration_1; }

		//"/"
		public Keyword getDivSolidusKeyword_1_0() { return cDivSolidusKeyword_1_0; }

		//mod="%"
		public EnumLiteralDeclaration getModEnumLiteralDeclaration_2() { return cModEnumLiteralDeclaration_2; }

		//"%"
		public Keyword getModPercentSignKeyword_2_0() { return cModPercentSignKeyword_2_0; }
	}

	public class UnaryOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPositiveEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPositivePlusSignKeyword_0_0 = (Keyword)cPositiveEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNegativeEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNegativeHyphenMinusKeyword_1_0 = (Keyword)cNegativeEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cComplementEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cComplementTildeKeyword_2_0 = (Keyword)cComplementEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum UnaryOperator:
		//	positive="+" | negative="-" | complement="~";
		public EnumRule getRule() { return rule; }

		//positive="+" | negative="-" | complement="~"
		public Alternatives getAlternatives() { return cAlternatives; }

		//positive="+"
		public EnumLiteralDeclaration getPositiveEnumLiteralDeclaration_0() { return cPositiveEnumLiteralDeclaration_0; }

		//"+"
		public Keyword getPositivePlusSignKeyword_0_0() { return cPositivePlusSignKeyword_0_0; }

		//negative="-"
		public EnumLiteralDeclaration getNegativeEnumLiteralDeclaration_1() { return cNegativeEnumLiteralDeclaration_1; }

		//"-"
		public Keyword getNegativeHyphenMinusKeyword_1_0() { return cNegativeHyphenMinusKeyword_1_0; }

		//complement="~"
		public EnumLiteralDeclaration getComplementEnumLiteralDeclaration_2() { return cComplementEnumLiteralDeclaration_2; }

		//"~"
		public Keyword getComplementTildeKeyword_2_0() { return cComplementTildeKeyword_2_0; }
	}

	public class RelationalOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "RelationalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSmallerEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSmallerLessThanSignKeyword_0_0 = (Keyword)cSmallerEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSmallerEqualEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSmallerEqualLessThanSignEqualsSignKeyword_1_0 = (Keyword)cSmallerEqualEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGreaterGreaterThanSignKeyword_2_0 = (Keyword)cGreaterEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterEqualEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGreaterEqualGreaterThanSignEqualsSignKeyword_3_0 = (Keyword)cGreaterEqualEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cEqualsEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cEqualsEqualsSignEqualsSignKeyword_4_0 = (Keyword)cEqualsEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cNotEqualsEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cNotEqualsExclamationMarkEqualsSignKeyword_5_0 = (Keyword)cNotEqualsEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum RelationalOperator:
		//	smaller="<" | smallerEqual="<=" | greater=">" | greaterEqual=">=" | equals="==" | notEquals="!=";
		public EnumRule getRule() { return rule; }

		//smaller="<" | smallerEqual="<=" | greater=">" | greaterEqual=">=" | equals="==" | notEquals="!="
		public Alternatives getAlternatives() { return cAlternatives; }

		//smaller="<"
		public EnumLiteralDeclaration getSmallerEnumLiteralDeclaration_0() { return cSmallerEnumLiteralDeclaration_0; }

		//"<"
		public Keyword getSmallerLessThanSignKeyword_0_0() { return cSmallerLessThanSignKeyword_0_0; }

		//smallerEqual="<="
		public EnumLiteralDeclaration getSmallerEqualEnumLiteralDeclaration_1() { return cSmallerEqualEnumLiteralDeclaration_1; }

		//"<="
		public Keyword getSmallerEqualLessThanSignEqualsSignKeyword_1_0() { return cSmallerEqualLessThanSignEqualsSignKeyword_1_0; }

		//greater=">"
		public EnumLiteralDeclaration getGreaterEnumLiteralDeclaration_2() { return cGreaterEnumLiteralDeclaration_2; }

		//">"
		public Keyword getGreaterGreaterThanSignKeyword_2_0() { return cGreaterGreaterThanSignKeyword_2_0; }

		//greaterEqual=">="
		public EnumLiteralDeclaration getGreaterEqualEnumLiteralDeclaration_3() { return cGreaterEqualEnumLiteralDeclaration_3; }

		//">="
		public Keyword getGreaterEqualGreaterThanSignEqualsSignKeyword_3_0() { return cGreaterEqualGreaterThanSignEqualsSignKeyword_3_0; }

		//equals="=="
		public EnumLiteralDeclaration getEqualsEnumLiteralDeclaration_4() { return cEqualsEnumLiteralDeclaration_4; }

		//"=="
		public Keyword getEqualsEqualsSignEqualsSignKeyword_4_0() { return cEqualsEqualsSignEqualsSignKeyword_4_0; }

		//notEquals="!="
		public EnumLiteralDeclaration getNotEqualsEnumLiteralDeclaration_5() { return cNotEqualsEnumLiteralDeclaration_5; }

		//"!="
		public Keyword getNotEqualsExclamationMarkEqualsSignKeyword_5_0() { return cNotEqualsExclamationMarkEqualsSignKeyword_5_0; }
	}

	public class DirectionKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "DirectionKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cIncomingEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cIncomingInKeyword_0_0 = (Keyword)cIncomingEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOutgoingEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOutgoingOutKeyword_1_0 = (Keyword)cOutgoingEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum DirectionKind:
		//	incoming="in" | outgoing="out";
		public EnumRule getRule() { return rule; }

		//incoming="in" | outgoing="out"
		public Alternatives getAlternatives() { return cAlternatives; }

		//incoming="in"
		public EnumLiteralDeclaration getIncomingEnumLiteralDeclaration_0() { return cIncomingEnumLiteralDeclaration_0; }

		//"in"
		public Keyword getIncomingInKeyword_0_0() { return cIncomingInKeyword_0_0; }

		//outgoing="out"
		public EnumLiteralDeclaration getOutgoingEnumLiteralDeclaration_1() { return cOutgoingEnumLiteralDeclaration_1; }

		//"out"
		public Keyword getOutgoingOutKeyword_1_0() { return cOutgoingOutKeyword_1_0; }
	}

	public class TimeUnitElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "TimeUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSecondEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSecondSKeyword_0_0 = (Keyword)cSecondEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMillisecondEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMillisecondMsKeyword_1_0 = (Keyword)cMillisecondEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNanosecondEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNanosecondNsKeyword_2_0 = (Keyword)cNanosecondEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum TimeUnit:
		//	second="s" | millisecond="ms" | nanosecond="ns";
		public EnumRule getRule() { return rule; }

		//second="s" | millisecond="ms" | nanosecond="ns"
		public Alternatives getAlternatives() { return cAlternatives; }

		//second="s"
		public EnumLiteralDeclaration getSecondEnumLiteralDeclaration_0() { return cSecondEnumLiteralDeclaration_0; }

		//"s"
		public Keyword getSecondSKeyword_0_0() { return cSecondSKeyword_0_0; }

		//millisecond="ms"
		public EnumLiteralDeclaration getMillisecondEnumLiteralDeclaration_1() { return cMillisecondEnumLiteralDeclaration_1; }

		//"ms"
		public Keyword getMillisecondMsKeyword_1_0() { return cMillisecondMsKeyword_1_0; }

		//nanosecond="ns"
		public EnumLiteralDeclaration getNanosecondEnumLiteralDeclaration_2() { return cNanosecondEnumLiteralDeclaration_2; }

		//"ns"
		public Keyword getNanosecondNsKeyword_2_0() { return cNanosecondNsKeyword_2_0; }
	}

	public class TypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cVoidEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cVoidVoidKeyword_0_0 = (Keyword)cVoidEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIntegerEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIntegerIntegerKeyword_1_0 = (Keyword)cIntegerEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cRealEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cRealRealKeyword_2_0 = (Keyword)cRealEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cBooleanEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cBooleanBooleanKeyword_3_0 = (Keyword)cBooleanEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cStringStringKeyword_4_0 = (Keyword)cStringEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum Type:
		//	void | integer | real | boolean | string;
		public EnumRule getRule() { return rule; }

		//void | integer | real | boolean | string
		public Alternatives getAlternatives() { return cAlternatives; }

		//void
		public EnumLiteralDeclaration getVoidEnumLiteralDeclaration_0() { return cVoidEnumLiteralDeclaration_0; }

		//"void"
		public Keyword getVoidVoidKeyword_0_0() { return cVoidVoidKeyword_0_0; }

		//integer
		public EnumLiteralDeclaration getIntegerEnumLiteralDeclaration_1() { return cIntegerEnumLiteralDeclaration_1; }

		//"integer"
		public Keyword getIntegerIntegerKeyword_1_0() { return cIntegerIntegerKeyword_1_0; }

		//real
		public EnumLiteralDeclaration getRealEnumLiteralDeclaration_2() { return cRealEnumLiteralDeclaration_2; }

		//"real"
		public Keyword getRealRealKeyword_2_0() { return cRealRealKeyword_2_0; }

		//boolean
		public EnumLiteralDeclaration getBooleanEnumLiteralDeclaration_3() { return cBooleanEnumLiteralDeclaration_3; }

		//"boolean"
		public Keyword getBooleanBooleanKeyword_3_0() { return cBooleanBooleanKeyword_3_0; }

		//string
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_4() { return cStringEnumLiteralDeclaration_4; }

		//"string"
		public Keyword getStringStringKeyword_4_0() { return cStringStringKeyword_4_0; }
	}
	
	private RootElements pRoot;
	private DefRootElements pDefRoot;
	private StatechartRootElements pStatechartRoot;
	private StateRootElements pStateRoot;
	private TransitionRootElements pTransitionRoot;
	private StatechartDefinitionElements pStatechartDefinition;
	private StateDefinitionElements pStateDefinition;
	private TransitionStatementElements pTransitionStatement;
	private ScopeElements pScope;
	private SimpleScopeElements pSimpleScope;
	private StatechartScopeElements pStatechartScope;
	private InterfaceScopeElements pInterfaceScope;
	private InternalScopeElements pInternalScope;
	private DefinitionElements pDefinition;
	private SCTEventElements pSCTEvent;
	private EventDefinitionElements pEventDefinition;
	private EventDerivationElements pEventDerivation;
	private DirectionElements unknownRuleDirection;
	private SCTVariableElements pSCTVariable;
	private VariableDefinitionElements pVariableDefinition;
	private ClockElements pClock;
	private OperationElements pOperation;
	private EntrypointElements pEntrypoint;
	private ExitpointElements pExitpoint;
	private ReactionElements pReaction;
	private ReactionTriggerElements pReactionTrigger;
	private ActionElements pAction;
	private ReactionPropertiesElements pReactionProperties;
	private ReactionPropertyElements pReactionProperty;
	private ReactionPriorityElements pReactionPriority;
	private EntryPointSpecElements pEntryPointSpec;
	private ExitPointSpecElements pExitPointSpec;
	private StateExpressionElements pStateExpression;
	private EntryExpressionElements pEntryExpression;
	private ExitExpressionElements pExitExpression;
	private OnTickExpressionElements pOnTickExpression;
	private ExpressionRuleElements pExpressionRule;
	private RaiseEventExpressionElements pRaiseEventExpression;
	private LogicalOrExpressionElements pLogicalOrExpression;
	private LogicalAndExpressionElements pLogicalAndExpression;
	private LogicalNotExpressionElements pLogicalNotExpression;
	private LogicalRelationExpressionElements pLogicalRelationExpression;
	private NumericalAddSubtractExpressionElements pNumericalAddSubtractExpression;
	private NumericalMultiplyDivideExpressionElements pNumericalMultiplyDivideExpression;
	private NumericalUnaryExpressionElements pNumericalUnaryExpression;
	private PrimaryExpressionElements pPrimaryExpression;
	private AdditiveOperatorElements unknownRuleAdditiveOperator;
	private MultiplicativeOperatorElements unknownRuleMultiplicativeOperator;
	private UnaryOperatorElements unknownRuleUnaryOperator;
	private RelationalOperatorElements unknownRuleRelationalOperator;
	private DirectionKindElements unknownRuleDirectionKind;
	private TimeUnitElements unknownRuleTimeUnit;
	private TypeElements unknownRuleType;
	private ValueExpressionElements pValueExpression;
	private PrimitiveValueExpressionElements pPrimitiveValueExpression;
	private VariableReferenceExpressionElements pVariableReferenceExpression;
	private LiteralElements pLiteral;
	private TerminalRule tBOOL;
	private TerminalRule tFLOAT;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ExpressionsGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// * ---- root rules ----
	//These root rules are not relevant for the grammar integration in the statechart. They just integrate the different start rules consistently 
	//into a single grammar. 
	// * /Root:
	//	roots+=DefRoot*;
	public RootElements getRootAccess() {
		return (pRoot != null) ? pRoot : (pRoot = new RootElements());
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}

	//DefRoot:
	//	StatechartRoot | StateRoot | TransitionRoot;
	public DefRootElements getDefRootAccess() {
		return (pDefRoot != null) ? pDefRoot : (pDefRoot = new DefRootElements());
	}
	
	public ParserRule getDefRootRule() {
		return getDefRootAccess().getRule();
	}

	//StatechartRoot:
	//	"@@statechart@@" def=StatechartDefinition;
	public StatechartRootElements getStatechartRootAccess() {
		return (pStatechartRoot != null) ? pStatechartRoot : (pStatechartRoot = new StatechartRootElements());
	}
	
	public ParserRule getStatechartRootRule() {
		return getStatechartRootAccess().getRule();
	}

	//StateRoot:
	//	"@@state@@" def=StateDefinition;
	public StateRootElements getStateRootAccess() {
		return (pStateRoot != null) ? pStateRoot : (pStateRoot = new StateRootElements());
	}
	
	public ParserRule getStateRootRule() {
		return getStateRootAccess().getRule();
	}

	//TransitionRoot:
	//	"@@transition@@" def=TransitionStatement;
	public TransitionRootElements getTransitionRootAccess() {
		return (pTransitionRoot != null) ? pTransitionRoot : (pTransitionRoot = new TransitionRootElements());
	}
	
	public ParserRule getTransitionRootRule() {
		return getTransitionRootAccess().getRule();
	}

	/// * ---- start rules ----
	//Define the starting points used by the statechart integration. These rules hook in the concrete rules of the specific grammar.
	// * /StatechartDefinition:
	//	{StatechartDefinition} definitionScopes+=StatechartScope*;
	public StatechartDefinitionElements getStatechartDefinitionAccess() {
		return (pStatechartDefinition != null) ? pStatechartDefinition : (pStatechartDefinition = new StatechartDefinitionElements());
	}
	
	public ParserRule getStatechartDefinitionRule() {
		return getStatechartDefinitionAccess().getRule();
	}

	//StateDefinition:
	//	SimpleScope;
	public StateDefinitionElements getStateDefinitionAccess() {
		return (pStateDefinition != null) ? pStateDefinition : (pStateDefinition = new StateDefinitionElements());
	}
	
	public ParserRule getStateDefinitionRule() {
		return getStateDefinitionAccess().getRule();
	}

	//TransitionStatement:
	//	Reaction;
	public TransitionStatementElements getTransitionStatementAccess() {
		return (pTransitionStatement != null) ? pTransitionStatement : (pTransitionStatement = new TransitionStatementElements());
	}
	
	public ParserRule getTransitionStatementRule() {
		return getTransitionStatementAccess().getRule();
	}

	/// * ---- scope rules ----
	//Defines different kinds of scopes that contain element definitions. Scopes are used for element definitions in statechart, regions, and state 
	// * /Scope:
	//	SimpleScope | StatechartScope;
	public ScopeElements getScopeAccess() {
		return (pScope != null) ? pScope : (pScope = new ScopeElements());
	}
	
	public ParserRule getScopeRule() {
		return getScopeAccess().getRule();
	}

	//// a SimpleScope is used for states and regions
	//SimpleScope:
	//	{SimpleScope} definitions+=Definition*;
	public SimpleScopeElements getSimpleScopeAccess() {
		return (pSimpleScope != null) ? pSimpleScope : (pSimpleScope = new SimpleScopeElements());
	}
	
	public ParserRule getSimpleScopeRule() {
		return getSimpleScopeAccess().getRule();
	}

	//// defines the poosible scopes for statecharts
	//StatechartScope:
	//	InterfaceScope | InternalScope;
	public StatechartScopeElements getStatechartScopeAccess() {
		return (pStatechartScope != null) ? pStatechartScope : (pStatechartScope = new StatechartScopeElements());
	}
	
	public ParserRule getStatechartScopeRule() {
		return getStatechartScopeAccess().getRule();
	}

	//InterfaceScope:
	//	{InterfaceScope} "interface" name=ID? ":" definitions+=Definition*;
	public InterfaceScopeElements getInterfaceScopeAccess() {
		return (pInterfaceScope != null) ? pInterfaceScope : (pInterfaceScope = new InterfaceScopeElements());
	}
	
	public ParserRule getInterfaceScopeRule() {
		return getInterfaceScopeAccess().getRule();
	}

	//InternalScope:
	//	{InternalScope} "internal" ":" definitions+=Definition*;
	public InternalScopeElements getInternalScopeAccess() {
		return (pInternalScope != null) ? pInternalScope : (pInternalScope = new InternalScopeElements());
	}
	
	public ParserRule getInternalScopeRule() {
		return getInternalScopeAccess().getRule();
	}

	/// * ---- definitions ----
	//a definition is a top level element of a definition scope. * /Definition:
	//	EventDefinition | VariableDefinition | Clock | Operation | Reaction | Entrypoint | Exitpoint;
	public DefinitionElements getDefinitionAccess() {
		return (pDefinition != null) ? pDefinition : (pDefinition = new DefinitionElements());
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}

	/// * ---- event definition ---- * / // hook EventDefinition into statechart inheritance hiearchy
	//SCTEvent returns sct::Event:
	//	EventDefinition;
	public SCTEventElements getSCTEventAccess() {
		return (pSCTEvent != null) ? pSCTEvent : (pSCTEvent = new SCTEventElements());
	}
	
	public ParserRule getSCTEventRule() {
		return getSCTEventAccess().getRule();
	}

	//EventDefinition:
	//	direction=Direction? "event" name=ID (":" type=Type)? derivation=EventDerivation?;
	public EventDefinitionElements getEventDefinitionAccess() {
		return (pEventDefinition != null) ? pEventDefinition : (pEventDefinition = new EventDefinitionElements());
	}
	
	public ParserRule getEventDefinitionRule() {
		return getEventDefinitionAccess().getRule();
	}

	//EventDerivation:
	//	"=" condition=ExpressionRule (":" value=ExpressionRule)?;
	public EventDerivationElements getEventDerivationAccess() {
		return (pEventDerivation != null) ? pEventDerivation : (pEventDerivation = new EventDerivationElements());
	}
	
	public ParserRule getEventDerivationRule() {
		return getEventDerivationAccess().getRule();
	}

	//enum Direction:
	//	IN="in" | OUT="out";
	public DirectionElements getDirectionAccess() {
		return (unknownRuleDirection != null) ? unknownRuleDirection : (unknownRuleDirection = new DirectionElements());
	}
	
	public EnumRule getDirectionRule() {
		return getDirectionAccess().getRule();
	}

	/// * ---- variable definition ---- * / // hook VariableDefinition into statechart inheritance hiearchy
	//SCTVariable returns sct::Variable:
	//	VariableDefinition;
	public SCTVariableElements getSCTVariableAccess() {
		return (pSCTVariable != null) ? pSCTVariable : (pSCTVariable = new SCTVariableElements());
	}
	
	public ParserRule getSCTVariableRule() {
		return getSCTVariableAccess().getRule();
	}

	//VariableDefinition:
	//	"var" (readonly?="readonly"? & external?="external"?) name=ID ":" type=Type ("=" value=Literal)?;
	public VariableDefinitionElements getVariableDefinitionAccess() {
		return (pVariableDefinition != null) ? pVariableDefinition : (pVariableDefinition = new VariableDefinitionElements());
	}
	
	public ParserRule getVariableDefinitionRule() {
		return getVariableDefinitionAccess().getRule();
	}

	/// * ---- clock definition ---- * / Clock:
	//	"clock" name=ID;
	public ClockElements getClockAccess() {
		return (pClock != null) ? pClock : (pClock = new ClockElements());
	}
	
	public ParserRule getClockRule() {
		return getClockAccess().getRule();
	}

	/// * ---- clock definition ---- * / Operation:
	//	"operation" name=ID "(" (paramTypes+=Type ("," paramTypes+=Type)*)? ")" (":" type=Type)?;
	public OperationElements getOperationAccess() {
		return (pOperation != null) ? pOperation : (pOperation = new OperationElements());
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}

	/// * ---- entrypoint definition ---- * / Entrypoint:
	//	"entrypoint" name=ID;
	public EntrypointElements getEntrypointAccess() {
		return (pEntrypoint != null) ? pEntrypoint : (pEntrypoint = new EntrypointElements());
	}
	
	public ParserRule getEntrypointRule() {
		return getEntrypointAccess().getRule();
	}

	/// * ---- exitpoint definition ---- * / Exitpoint:
	//	"exitpoint" name=ID;
	public ExitpointElements getExitpointAccess() {
		return (pExitpoint != null) ? pExitpoint : (pExitpoint = new ExitpointElements());
	}
	
	public ParserRule getExitpointRule() {
		return getExitpointAccess().getRule();
	}

	/// * ---- reaction rules ----
	//Define the structure of reactions that are central for describing the statecharts behavior. 
	// * /Reaction:
	//	trigger=ReactionTrigger ("/" action=Action)? ("#" properties=ReactionProperties)?;
	public ReactionElements getReactionAccess() {
		return (pReaction != null) ? pReaction : (pReaction = new ReactionElements());
	}
	
	public ParserRule getReactionRule() {
		return getReactionAccess().getRule();
	}

	//ReactionTrigger:
	//	(triggers+=[sct::Event] ("," triggers+=[sct::Event])*) ("[" guardExpression=LogicalOrExpression "]")?;
	public ReactionTriggerElements getReactionTriggerAccess() {
		return (pReactionTrigger != null) ? pReactionTrigger : (pReactionTrigger = new ReactionTriggerElements());
	}
	
	public ParserRule getReactionTriggerRule() {
		return getReactionTriggerAccess().getRule();
	}

	//Action:
	//	action=ExpressionRule;
	public ActionElements getActionAccess() {
		return (pAction != null) ? pAction : (pAction = new ActionElements());
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	//ReactionProperties:
	//	{ReactionProperties} properties+=ReactionProperty*;
	public ReactionPropertiesElements getReactionPropertiesAccess() {
		return (pReactionProperties != null) ? pReactionProperties : (pReactionProperties = new ReactionPropertiesElements());
	}
	
	public ParserRule getReactionPropertiesRule() {
		return getReactionPropertiesAccess().getRule();
	}

	//ReactionProperty:
	//	ReactionPriority | EntryPointSpec | ExitPointSpec;
	public ReactionPropertyElements getReactionPropertyAccess() {
		return (pReactionProperty != null) ? pReactionProperty : (pReactionProperty = new ReactionPropertyElements());
	}
	
	public ParserRule getReactionPropertyRule() {
		return getReactionPropertyAccess().getRule();
	}

	//ReactionPriority:
	//	priority=INT;
	public ReactionPriorityElements getReactionPriorityAccess() {
		return (pReactionPriority != null) ? pReactionPriority : (pReactionPriority = new ReactionPriorityElements());
	}
	
	public ParserRule getReactionPriorityRule() {
		return getReactionPriorityAccess().getRule();
	}

	//EntryPointSpec:
	//	">" entrypoint=[Entrypoint];
	public EntryPointSpecElements getEntryPointSpecAccess() {
		return (pEntryPointSpec != null) ? pEntryPointSpec : (pEntryPointSpec = new EntryPointSpecElements());
	}
	
	public ParserRule getEntryPointSpecRule() {
		return getEntryPointSpecAccess().getRule();
	}

	//ExitPointSpec:
	//	exitpoint=[Exitpoint] ">";
	public ExitPointSpecElements getExitPointSpecAccess() {
		return (pExitPointSpec != null) ? pExitPointSpec : (pExitPointSpec = new ExitPointSpecElements());
	}
	
	public ParserRule getExitPointSpecRule() {
		return getExitPointSpecAccess().getRule();
	}

	//// ****************
	//// State Expression
	//// ****************
	//StateExpression:
	//	{StateExpression} entryExpression+=EntryExpression* exitExpression+=ExitExpression*
	//	ontickExpression+=OnTickExpression*;
	public StateExpressionElements getStateExpressionAccess() {
		return (pStateExpression != null) ? pStateExpression : (pStateExpression = new StateExpressionElements());
	}
	
	public ParserRule getStateExpressionRule() {
		return getStateExpressionAccess().getRule();
	}

	//EntryExpression:
	//	"entry:" expression=ExpressionRule;
	public EntryExpressionElements getEntryExpressionAccess() {
		return (pEntryExpression != null) ? pEntryExpression : (pEntryExpression = new EntryExpressionElements());
	}
	
	public ParserRule getEntryExpressionRule() {
		return getEntryExpressionAccess().getRule();
	}

	//ExitExpression:
	//	"exit:" expression=ExpressionRule;
	public ExitExpressionElements getExitExpressionAccess() {
		return (pExitExpression != null) ? pExitExpression : (pExitExpression = new ExitExpressionElements());
	}
	
	public ParserRule getExitExpressionRule() {
		return getExitExpressionAccess().getRule();
	}

	//OnTickExpression:
	//	"do:" expression=ExpressionRule;
	public OnTickExpressionElements getOnTickExpressionAccess() {
		return (pOnTickExpression != null) ? pOnTickExpression : (pOnTickExpression = new OnTickExpressionElements());
	}
	
	public ParserRule getOnTickExpressionRule() {
		return getOnTickExpressionAccess().getRule();
	}

	//// ****************
	//// Expression Grammar
	//// ****************
	//ExpressionRule:
	//	expression=(LogicalOrExpression | RaiseEventExpression);
	public ExpressionRuleElements getExpressionRuleAccess() {
		return (pExpressionRule != null) ? pExpressionRule : (pExpressionRule = new ExpressionRuleElements());
	}
	
	public ParserRule getExpressionRuleRule() {
		return getExpressionRuleAccess().getRule();
	}

	//RaiseEventExpression:
	//	"raise" event=[sct::Event];
	public RaiseEventExpressionElements getRaiseEventExpressionAccess() {
		return (pRaiseEventExpression != null) ? pRaiseEventExpression : (pRaiseEventExpression = new RaiseEventExpressionElements());
	}
	
	public ParserRule getRaiseEventExpressionRule() {
		return getRaiseEventExpressionAccess().getRule();
	}

	//LogicalOrExpression returns Expression:
	//	LogicalAndExpression ({LogicalOrExpression.leftOperand=current} "||" rightOperand=LogicalAndExpression)*;
	public LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return (pLogicalOrExpression != null) ? pLogicalOrExpression : (pLogicalOrExpression = new LogicalOrExpressionElements());
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}

	//LogicalAndExpression returns Expression:
	//	LogicalNotExpression ({LogicalAndExpression.leftOperand=current} "&&" rightOperand=LogicalNotExpression)*;
	public LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return (pLogicalAndExpression != null) ? pLogicalAndExpression : (pLogicalAndExpression = new LogicalAndExpressionElements());
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}

	//LogicalNotExpression returns Expression:
	//	LogicalRelationExpression | {LogicalNotExpression} "!" operand=LogicalRelationExpression;
	public LogicalNotExpressionElements getLogicalNotExpressionAccess() {
		return (pLogicalNotExpression != null) ? pLogicalNotExpression : (pLogicalNotExpression = new LogicalNotExpressionElements());
	}
	
	public ParserRule getLogicalNotExpressionRule() {
		return getLogicalNotExpressionAccess().getRule();
	}

	//LogicalRelationExpression returns Expression:
	//	NumericalAddSubtractExpression ({LogicalRelationExpression.leftOperand=current} operator=RelationalOperator
	//	rightOperand=NumericalAddSubtractExpression)*;
	public LogicalRelationExpressionElements getLogicalRelationExpressionAccess() {
		return (pLogicalRelationExpression != null) ? pLogicalRelationExpression : (pLogicalRelationExpression = new LogicalRelationExpressionElements());
	}
	
	public ParserRule getLogicalRelationExpressionRule() {
		return getLogicalRelationExpressionAccess().getRule();
	}

	//NumericalAddSubtractExpression returns Expression:
	//	NumericalMultiplyDivideExpression ({NumericalAddSubtractExpression.leftOperand=current} operator=AdditiveOperator
	//	rightOperand=NumericalMultiplyDivideExpression)*;
	public NumericalAddSubtractExpressionElements getNumericalAddSubtractExpressionAccess() {
		return (pNumericalAddSubtractExpression != null) ? pNumericalAddSubtractExpression : (pNumericalAddSubtractExpression = new NumericalAddSubtractExpressionElements());
	}
	
	public ParserRule getNumericalAddSubtractExpressionRule() {
		return getNumericalAddSubtractExpressionAccess().getRule();
	}

	//NumericalMultiplyDivideExpression returns Expression:
	//	NumericalUnaryExpression ({NumericalMultiplyDivideExpression.leftOperand=current} operator=MultiplicativeOperator
	//	rightOperand=NumericalUnaryExpression)*;
	public NumericalMultiplyDivideExpressionElements getNumericalMultiplyDivideExpressionAccess() {
		return (pNumericalMultiplyDivideExpression != null) ? pNumericalMultiplyDivideExpression : (pNumericalMultiplyDivideExpression = new NumericalMultiplyDivideExpressionElements());
	}
	
	public ParserRule getNumericalMultiplyDivideExpressionRule() {
		return getNumericalMultiplyDivideExpressionAccess().getRule();
	}

	//NumericalUnaryExpression returns Expression:
	//	PrimaryExpression | {NumericalUnaryExpression} operator=UnaryOperator operand=PrimaryExpression;
	public NumericalUnaryExpressionElements getNumericalUnaryExpressionAccess() {
		return (pNumericalUnaryExpression != null) ? pNumericalUnaryExpression : (pNumericalUnaryExpression = new NumericalUnaryExpressionElements());
	}
	
	public ParserRule getNumericalUnaryExpressionRule() {
		return getNumericalUnaryExpressionAccess().getRule();
	}

	//PrimaryExpression returns Expression:
	//	ValueExpression | "(" LogicalOrExpression ")";
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return (pPrimaryExpression != null) ? pPrimaryExpression : (pPrimaryExpression = new PrimaryExpressionElements());
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//enum AdditiveOperator:
	//	plus="+" | minus="-";
	public AdditiveOperatorElements getAdditiveOperatorAccess() {
		return (unknownRuleAdditiveOperator != null) ? unknownRuleAdditiveOperator : (unknownRuleAdditiveOperator = new AdditiveOperatorElements());
	}
	
	public EnumRule getAdditiveOperatorRule() {
		return getAdditiveOperatorAccess().getRule();
	}

	//enum MultiplicativeOperator:
	//	mul="*" | div="/" | mod="%";
	public MultiplicativeOperatorElements getMultiplicativeOperatorAccess() {
		return (unknownRuleMultiplicativeOperator != null) ? unknownRuleMultiplicativeOperator : (unknownRuleMultiplicativeOperator = new MultiplicativeOperatorElements());
	}
	
	public EnumRule getMultiplicativeOperatorRule() {
		return getMultiplicativeOperatorAccess().getRule();
	}

	//enum UnaryOperator:
	//	positive="+" | negative="-" | complement="~";
	public UnaryOperatorElements getUnaryOperatorAccess() {
		return (unknownRuleUnaryOperator != null) ? unknownRuleUnaryOperator : (unknownRuleUnaryOperator = new UnaryOperatorElements());
	}
	
	public EnumRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}

	//enum RelationalOperator:
	//	smaller="<" | smallerEqual="<=" | greater=">" | greaterEqual=">=" | equals="==" | notEquals="!=";
	public RelationalOperatorElements getRelationalOperatorAccess() {
		return (unknownRuleRelationalOperator != null) ? unknownRuleRelationalOperator : (unknownRuleRelationalOperator = new RelationalOperatorElements());
	}
	
	public EnumRule getRelationalOperatorRule() {
		return getRelationalOperatorAccess().getRule();
	}

	//enum DirectionKind:
	//	incoming="in" | outgoing="out";
	public DirectionKindElements getDirectionKindAccess() {
		return (unknownRuleDirectionKind != null) ? unknownRuleDirectionKind : (unknownRuleDirectionKind = new DirectionKindElements());
	}
	
	public EnumRule getDirectionKindRule() {
		return getDirectionKindAccess().getRule();
	}

	//enum TimeUnit:
	//	second="s" | millisecond="ms" | nanosecond="ns";
	public TimeUnitElements getTimeUnitAccess() {
		return (unknownRuleTimeUnit != null) ? unknownRuleTimeUnit : (unknownRuleTimeUnit = new TimeUnitElements());
	}
	
	public EnumRule getTimeUnitRule() {
		return getTimeUnitAccess().getRule();
	}

	//enum Type:
	//	void | integer | real | boolean | string;
	public TypeElements getTypeAccess() {
		return (unknownRuleType != null) ? unknownRuleType : (unknownRuleType = new TypeElements());
	}
	
	public EnumRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//ValueExpression returns Expression:
	//	PrimitiveValueExpression | VariableReferenceExpression;
	public ValueExpressionElements getValueExpressionAccess() {
		return (pValueExpression != null) ? pValueExpression : (pValueExpression = new ValueExpressionElements());
	}
	
	public ParserRule getValueExpressionRule() {
		return getValueExpressionAccess().getRule();
	}

	//PrimitiveValueExpression returns Expression:
	//	{PrimitiveValueExpression} value=Literal;
	public PrimitiveValueExpressionElements getPrimitiveValueExpressionAccess() {
		return (pPrimitiveValueExpression != null) ? pPrimitiveValueExpression : (pPrimitiveValueExpression = new PrimitiveValueExpressionElements());
	}
	
	public ParserRule getPrimitiveValueExpressionRule() {
		return getPrimitiveValueExpressionAccess().getRule();
	}

	//VariableReferenceExpression returns Expression:
	//	{PropertyReferenceExpression} value=[sct::Variable];
	public VariableReferenceExpressionElements getVariableReferenceExpressionAccess() {
		return (pVariableReferenceExpression != null) ? pVariableReferenceExpression : (pVariableReferenceExpression = new VariableReferenceExpressionElements());
	}
	
	public ParserRule getVariableReferenceExpressionRule() {
		return getVariableReferenceExpressionAccess().getRule();
	}

	//Literal returns ecore::EString:
	//	BOOL | INT | STRING | FLOAT;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//terminal BOOL:
	//	"true" | "false";
	public TerminalRule getBOOLRule() {
		return (tBOOL != null) ? tBOOL : (tBOOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOL"));
	} 

	//terminal FLOAT:
	//	("-" | "+")? (INT "." INT) ("e" ("-" | "+") INT)?;
	public TerminalRule getFLOATRule() {
		return (tFLOAT != null) ? tFLOAT : (tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
