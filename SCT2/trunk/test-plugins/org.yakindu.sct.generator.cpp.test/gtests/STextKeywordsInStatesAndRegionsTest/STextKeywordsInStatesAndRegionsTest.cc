/**
* Copyright (c) 2014 committers of YAKINDU and others.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     committers of YAKINDU - initial API and implementation
*/
#include <string>
#include "gtest/gtest.h"
#include "STextKeywordsInStatesAndRegions.h"

TEST(StatemachineTest, activeCheckWithSTextNamedStates) {
	STextKeywordsInStatesAndRegions* statechart = new STextKeywordsInStatesAndRegions();
	statechart->init();
	statechart->enter();
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::namespace_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::interface));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::event));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::in));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::var));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::external));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::default_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::entry));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::always));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::raise));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::active));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::external_interface));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::else_event));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::entry_in));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::exit_var));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::always_external));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::oncycle_default));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::raise_entry));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::valueof_always));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::active_raise));
	statechart->raise_e1();
	statechart->runCycle();
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::namespace_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::internal));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::event));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::in));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::var));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::external));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::default_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::entry));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::always));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::raise));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::active));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::external_interface));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::else_event));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::entry_in));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::exit_var));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::always_external));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::oncycle_default));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::raise_entry));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::valueof_always));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::active_raise));
	statechart->raise_e2();
	statechart->runCycle();
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::namespace_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::internal));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::local));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::in));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::var));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::external));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::default_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::entry));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::always));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::raise));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::active));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::external_interface));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::else_event));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::entry_in));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::exit_var));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::always_external));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::oncycle_default));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::raise_entry));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::valueof_always));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::active_raise));
	statechart->raise_e1();
	statechart->runCycle();
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::namespace_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::internal));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::local));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::out));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::var));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::external));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::default_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::entry));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::always));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::raise));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::active));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::external_interface));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::else_event));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::entry_in));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::exit_var));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::always_external));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::oncycle_default));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::raise_entry));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::valueof_always));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::active_raise));
	statechart->raise_e2();
	statechart->runCycle();
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::namespace_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::internal));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::local));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::out));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::readonly));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::external));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::default_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::entry));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::always));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::raise));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::active));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::external_interface));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::else_event));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::entry_in));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::exit_var));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::always_external));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::oncycle_default));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::raise_entry));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::valueof_always));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::active_raise));
	statechart->raise_e1();
	statechart->runCycle();
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::namespace_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::internal));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::local));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::out));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::readonly));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::internal_operation));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::default_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::entry));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::always));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::raise));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::active));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::external_interface));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::else_event));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::entry_in));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::exit_var));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::always_external));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::oncycle_default));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::raise_entry));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::valueof_always));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::active_raise));
	statechart->raise_e2();
	statechart->runCycle();
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::namespace_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::internal));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::local));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::out));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::readonly));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::internal_operation));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::else_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::entry));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::always));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::raise));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::active));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::external_interface));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::else_event));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::entry_in));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::exit_var));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::always_external));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::oncycle_default));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::raise_entry));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::valueof_always));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::active_raise));
	statechart->raise_e1();
	statechart->runCycle();
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::namespace_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::internal));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::local));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::out));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::readonly));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::internal_operation));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::else_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::exit_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::always));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::raise));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::active));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::external_interface));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::else_event));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::entry_in));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::exit_var));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::always_external));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::oncycle_default));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::raise_entry));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::valueof_always));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::active_raise));
	statechart->raise_e2();
	statechart->runCycle();
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::namespace_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::internal));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::local));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::out));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::readonly));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::internal_operation));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::else_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::exit_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::oncycle));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::raise));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::active));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::external_interface));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::else_event));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::entry_in));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::exit_var));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::always_external));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::oncycle_default));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::raise_entry));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::valueof_always));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::active_raise));
	statechart->raise_e1();
	statechart->runCycle();
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::namespace_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::internal));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::local));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::out));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::readonly));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::internal_operation));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::else_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::exit_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::oncycle));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::valueof));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::active));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::external_interface));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::else_event));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::entry_in));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::exit_var));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::always_external));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::oncycle_default));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::raise_entry));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::valueof_always));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::active_raise));
	statechart->raise_e2();
	statechart->runCycle();
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::namespace_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::internal));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::local));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::out));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::readonly));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::internal_operation));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::else_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::exit_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::oncycle));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::valueof));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::readonly_namespace));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::external_interface));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::else_event));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::entry_in));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::exit_var));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::always_external));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::oncycle_default));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::raise_entry));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::valueof_always));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::active_raise));
	statechart->raise_e1();
	statechart->runCycle();
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::namespace_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::internal));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::local));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::out));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::readonly));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::internal_operation));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::else_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::exit_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::oncycle));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::valueof));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::readonly_namespace));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::external_internal));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::else_event));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::entry_in));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::exit_var));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::always_external));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::oncycle_default));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::raise_entry));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::valueof_always));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::active_raise));
	statechart->raise_e2();
	statechart->runCycle();
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::namespace_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::internal));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::local));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::out));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::readonly));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::internal_operation));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::else_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::exit_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::oncycle));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::valueof));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::readonly_namespace));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::external_internal));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::else_local));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::entry_in));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::exit_var));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::always_external));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::oncycle_default));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::raise_entry));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::valueof_always));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::active_raise));
	statechart->raise_e1();
	statechart->runCycle();
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::namespace_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::internal));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::local));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::out));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::readonly));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::internal_operation));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::else_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::exit_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::oncycle));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::valueof));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::readonly_namespace));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::external_internal));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::else_local));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::entry_out));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::exit_var));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::always_external));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::oncycle_default));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::raise_entry));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::valueof_always));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::active_raise));
	statechart->raise_e2();
	statechart->runCycle();
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::namespace_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::internal));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::local));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::out));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::readonly));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::internal_operation));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::else_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::exit_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::oncycle));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::valueof));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::readonly_namespace));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::external_internal));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::else_local));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::entry_out));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::exit_readonly));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::always_external));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::oncycle_default));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::raise_entry));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::valueof_always));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::active_raise));
	statechart->raise_e1();
	statechart->runCycle();
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::namespace_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::internal));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::local));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::out));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::readonly));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::internal_operation));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::else_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::exit_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::oncycle));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::valueof));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::readonly_namespace));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::external_internal));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::else_local));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::entry_out));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::exit_readonly));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::always_operation));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::oncycle_default));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::raise_entry));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::valueof_always));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::active_raise));
	statechart->raise_e2();
	statechart->runCycle();
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::namespace_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::internal));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::local));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::out));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::readonly));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::internal_operation));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::else_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::exit_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::oncycle));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::valueof));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::readonly_namespace));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::external_internal));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::else_local));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::entry_out));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::exit_readonly));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::always_operation));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::oncycle_else));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::raise_entry));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::valueof_always));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::active_raise));
	statechart->raise_e1();
	statechart->runCycle();
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::namespace_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::internal));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::local));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::out));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::readonly));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::internal_operation));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::else_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::exit_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::oncycle));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::valueof));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::readonly_namespace));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::external_internal));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::else_local));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::entry_out));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::exit_readonly));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::always_operation));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::oncycle_else));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::raise_exit));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::valueof_always));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::active_raise));
	statechart->raise_e2();
	statechart->runCycle();
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::namespace_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::internal));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::local));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::out));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::readonly));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::internal_operation));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::else_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::exit_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::oncycle));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::valueof));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::readonly_namespace));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::external_internal));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::else_local));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::entry_out));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::exit_readonly));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::always_operation));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::oncycle_else));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::raise_exit));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::valueof_oncycle));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::active_raise));
	statechart->raise_e1();
	statechart->runCycle();
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::namespace_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::internal));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::local));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::out));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::readonly));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::internal_operation));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::else_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::exit_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::oncycle));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::valueof));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::readonly_namespace));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::external_internal));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::else_local));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::entry_out));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::exit_readonly));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::always_operation));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::oncycle_else));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::raise_exit));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::valueof_oncycle));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::active_valueof));
	statechart->raise_e2();
	statechart->runCycle();
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::namespace_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::internal));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::local));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::out));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::readonly));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::internal_operation));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::else_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::exit_ID));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::oncycle));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::valueof));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::readonly_namespace));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::external_internal));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::else_local));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::entry_out));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::exit_readonly));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::always_operation));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::oncycle_else));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::raise_exit));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::valueof_oncycle));
	EXPECT_TRUE(statechart->isActive(STextKeywordsInStatesAndRegions::active_valueof));
	delete statechart;
}
