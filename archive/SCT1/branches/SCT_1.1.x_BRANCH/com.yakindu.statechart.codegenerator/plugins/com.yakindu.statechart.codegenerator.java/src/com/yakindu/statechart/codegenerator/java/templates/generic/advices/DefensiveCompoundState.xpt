«REM» Copyright
> Copyright (c) 2010 committers of YAKINDU and others.
> All rights reserved. This program and the accompanying materials
> are made available under the terms of the Eclipse Public License v1.0
> which accompanies this distribution, and is available at
> http://www.eclipse.org/legal/epl-v10.html
>
> Contributors:
>     committers of YAKINDU - initial API and implementation
«ENDREM»
«IMPORT statemachine»
«IMPORT statechartexpressions»

«EXTENSION com::yakindu::statechart::codegenerator::java::extensions::Extensions»

«AROUND com::yakindu::statechart::codegenerator::java::templates::generic::CompoundState::CompoundStateClassBody FOR Object» 
	«targetDef.proceed()»
	
	protected void finalizeInitialization() {
		
		// check regions are sorted by priority
		assertRegionsSortedByPriority();
		
		for (Region region : regions) {
			region.finalizeInitialization();
		}
		super.finalizeInitialization();
	}
	
	private void assertRegionsSortedByPriority() {
		// check regions are sorted by priority
		List<Region> regionsCopy = new ArrayList<Region>();
		regionsCopy.addAll(regions);
		Collections.sort(regionsCopy, new Comparator<Region>() {
			public int compare(Region o1, Region o2) {
				return o1.getPriority() - o2.getPriority();
			}
		});
		if(!regionsCopy.equals(regions)){
			throw new IllegalArgumentException("Regions not sorted by priority");
		}
	}
«ENDAROUND»

«AROUND com::yakindu::statechart::codegenerator::java::templates::generic::CompoundState::Imports FOR Object»
«targetDef.proceed()»
import java.util.Collections;
import java.util.Comparator;
«ENDAROUND»

«AROUND com::yakindu::statechart::codegenerator::java::templates::generic::CompoundState::getRegionsMethodBody FOR Object»
	// if initialization is finalized, modifications to the nested regions
	// list are no longer allowed
	if (!initialized) {
		return regions;
	} else {
		return Collections.unmodifiableList(regions);
	}
«ENDAROUND»

«AROUND com::yakindu::statechart::codegenerator::java::templates::generic::CompoundState::enterMethodBody FOR Object»
	assertInitialized();
	assertNotEntered();
	«targetDef.proceed()»
	entered = true;
«ENDAROUND»

«AROUND com::yakindu::statechart::codegenerator::java::templates::generic::CompoundState::shallowEnterMethodBody FOR Object»
	assertInitialized();
	assertNotEntered();
	«targetDef.proceed()»
	entered = true;
«ENDAROUND»

«AROUND com::yakindu::statechart::codegenerator::java::templates::generic::CompoundState::reenterMethodBody FOR Object»
	assertInitialized();
	assertNotEntered();
	«targetDef.proceed()»
	entered = true;
«ENDAROUND»

«AROUND com::yakindu::statechart::codegenerator::java::templates::generic::CompoundState::leaveMethodBody FOR Object»
	assertInitialized();
	assertEntered();
	«targetDef.proceed()»
	entered = false;
«ENDAROUND»

«AROUND com::yakindu::statechart::codegenerator::java::templates::generic::CompoundState::shallowLeaveMethodBody FOR Object»
	assertInitialized();
	assertEntered();
	«targetDef.proceed()»
	entered = false;
«ENDAROUND»
