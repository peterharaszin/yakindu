/*
* generated by Xtext
*/
grammar InternalStatechartExpressions;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package com.yakindu.statechart.model.expressions.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.yakindu.statechart.model.expressions.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import com.yakindu.statechart.model.expressions.services.StatechartExpressionsGrammarAccess;

}

@parser::members {
 
 	private StatechartExpressionsGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(StatechartExpressionsGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleExpression
entryRuleExpression :
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
(rule__Expression__Alternatives)
{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTriggerExpression
entryRuleTriggerExpression :
{ before(grammarAccess.getTriggerExpressionRule()); }
	 ruleTriggerExpression
{ after(grammarAccess.getTriggerExpressionRule()); } 
	 EOF 
;

// Rule TriggerExpression
ruleTriggerExpression 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getTriggerExpressionAccess().getGroup()); }
(rule__TriggerExpression__Group__0)
{ after(grammarAccess.getTriggerExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGuardExpression
entryRuleGuardExpression :
{ before(grammarAccess.getGuardExpressionRule()); }
	 ruleGuardExpression
{ after(grammarAccess.getGuardExpressionRule()); } 
	 EOF 
;

// Rule GuardExpression
ruleGuardExpression 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getGuardExpressionAccess().getExpressionAssignment()); }
(rule__GuardExpression__ExpressionAssignment)
{ after(grammarAccess.getGuardExpressionAccess().getExpressionAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleActionExpression
entryRuleActionExpression :
{ before(grammarAccess.getActionExpressionRule()); }
	 ruleActionExpression
{ after(grammarAccess.getActionExpressionRule()); } 
	 EOF 
;

// Rule ActionExpression
ruleActionExpression 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
(
{ before(grammarAccess.getActionExpressionAccess().getStatementAssignment()); }
(rule__ActionExpression__StatementAssignment)
{ after(grammarAccess.getActionExpressionAccess().getStatementAssignment()); }
)
(
{ before(grammarAccess.getActionExpressionAccess().getStatementAssignment()); }
(rule__ActionExpression__StatementAssignment)*
{ after(grammarAccess.getActionExpressionAccess().getStatementAssignment()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTrigger
entryRuleTrigger :
{ before(grammarAccess.getTriggerRule()); }
	 ruleTrigger
{ after(grammarAccess.getTriggerRule()); } 
	 EOF 
;

// Rule Trigger
ruleTrigger 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getTriggerAccess().getEventAssignment()); }
(rule__Trigger__EventAssignment)
{ after(grammarAccess.getTriggerAccess().getEventAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEvent
entryRuleEvent :
{ before(grammarAccess.getEventRule()); }
	 ruleEvent
{ after(grammarAccess.getEventRule()); } 
	 EOF 
;

// Rule Event
ruleEvent 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getEventAccess().getAlternatives()); }
(rule__Event__Alternatives)
{ after(grammarAccess.getEventAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSignalEvent
entryRuleSignalEvent :
{ before(grammarAccess.getSignalEventRule()); }
	 ruleSignalEvent
{ after(grammarAccess.getSignalEventRule()); } 
	 EOF 
;

// Rule SignalEvent
ruleSignalEvent 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getSignalEventAccess().getIdentifierAssignment()); }
(rule__SignalEvent__IdentifierAssignment)
{ after(grammarAccess.getSignalEventAccess().getIdentifierAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTimeEvent
entryRuleTimeEvent :
{ before(grammarAccess.getTimeEventRule()); }
	 ruleTimeEvent
{ after(grammarAccess.getTimeEventRule()); } 
	 EOF 
;

// Rule TimeEvent
ruleTimeEvent 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getTimeEventAccess().getGroup()); }
(rule__TimeEvent__Group__0)
{ after(grammarAccess.getTimeEventAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTimeExpression
entryRuleTimeExpression :
{ before(grammarAccess.getTimeExpressionRule()); }
	 ruleTimeExpression
{ after(grammarAccess.getTimeExpressionRule()); } 
	 EOF 
;

// Rule TimeExpression
ruleTimeExpression 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getTimeExpressionAccess().getAlternatives()); }
(rule__TimeExpression__Alternatives)
{ after(grammarAccess.getTimeExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableReference
entryRuleVariableReference :
{ before(grammarAccess.getVariableReferenceRule()); }
	 ruleVariableReference
{ after(grammarAccess.getVariableReferenceRule()); } 
	 EOF 
;

// Rule VariableReference
ruleVariableReference 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getVariableReferenceAccess().getAlternatives()); }
(rule__VariableReference__Alternatives)
{ after(grammarAccess.getVariableReferenceAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariable
entryRuleVariable :
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getVariableAccess().getIdentifierAssignment()); }
(rule__Variable__IdentifierAssignment)
{ after(grammarAccess.getVariableAccess().getIdentifierAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTimeConstant
entryRuleTimeConstant :
{ before(grammarAccess.getTimeConstantRule()); }
	 ruleTimeConstant
{ after(grammarAccess.getTimeConstantRule()); } 
	 EOF 
;

// Rule TimeConstant
ruleTimeConstant 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getTimeConstantAccess().getGroup()); }
(rule__TimeConstant__Group__0)
{ after(grammarAccess.getTimeConstantAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStatement
entryRuleStatement :
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getStatementAccess().getGroup()); }
(rule__Statement__Group__0)
{ after(grammarAccess.getStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableAssignment
entryRuleVariableAssignment :
{ before(grammarAccess.getVariableAssignmentRule()); }
	 ruleVariableAssignment
{ after(grammarAccess.getVariableAssignmentRule()); } 
	 EOF 
;

// Rule VariableAssignment
ruleVariableAssignment 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getVariableAssignmentAccess().getGroup()); }
(rule__VariableAssignment__Group__0)
{ after(grammarAccess.getVariableAssignmentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProcedureCall
entryRuleProcedureCall :
{ before(grammarAccess.getProcedureCallRule()); }
	 ruleProcedureCall
{ after(grammarAccess.getProcedureCallRule()); } 
	 EOF 
;

// Rule ProcedureCall
ruleProcedureCall 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getProcedureCallAccess().getGroup()); }
(rule__ProcedureCall__Group__0)
{ after(grammarAccess.getProcedureCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProcedure
entryRuleProcedure :
{ before(grammarAccess.getProcedureRule()); }
	 ruleProcedure
{ after(grammarAccess.getProcedureRule()); } 
	 EOF 
;

// Rule Procedure
ruleProcedure 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getProcedureAccess().getIdentifierAssignment()); }
(rule__Procedure__IdentifierAssignment)
{ after(grammarAccess.getProcedureAccess().getIdentifierAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEventRaising
entryRuleEventRaising :
{ before(grammarAccess.getEventRaisingRule()); }
	 ruleEventRaising
{ after(grammarAccess.getEventRaisingRule()); } 
	 EOF 
;

// Rule EventRaising
ruleEventRaising 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getEventRaisingAccess().getGroup()); }
(rule__EventRaising__Group__0)
{ after(grammarAccess.getEventRaisingAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanOrExpression
entryRuleBooleanOrExpression :
{ before(grammarAccess.getBooleanOrExpressionRule()); }
	 ruleBooleanOrExpression
{ after(grammarAccess.getBooleanOrExpressionRule()); } 
	 EOF 
;

// Rule BooleanOrExpression
ruleBooleanOrExpression 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getBooleanOrExpressionAccess().getGroup()); }
(rule__BooleanOrExpression__Group__0)
{ after(grammarAccess.getBooleanOrExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanAndExpression
entryRuleBooleanAndExpression :
{ before(grammarAccess.getBooleanAndExpressionRule()); }
	 ruleBooleanAndExpression
{ after(grammarAccess.getBooleanAndExpressionRule()); } 
	 EOF 
;

// Rule BooleanAndExpression
ruleBooleanAndExpression 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getBooleanAndExpressionAccess().getGroup()); }
(rule__BooleanAndExpression__Group__0)
{ after(grammarAccess.getBooleanAndExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBitwiseXorExpression
entryRuleBitwiseXorExpression :
{ before(grammarAccess.getBitwiseXorExpressionRule()); }
	 ruleBitwiseXorExpression
{ after(grammarAccess.getBitwiseXorExpressionRule()); } 
	 EOF 
;

// Rule BitwiseXorExpression
ruleBitwiseXorExpression 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getBitwiseXorExpressionAccess().getGroup()); }
(rule__BitwiseXorExpression__Group__0)
{ after(grammarAccess.getBitwiseXorExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBitwiseOrExpression
entryRuleBitwiseOrExpression :
{ before(grammarAccess.getBitwiseOrExpressionRule()); }
	 ruleBitwiseOrExpression
{ after(grammarAccess.getBitwiseOrExpressionRule()); } 
	 EOF 
;

// Rule BitwiseOrExpression
ruleBitwiseOrExpression 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getBitwiseOrExpressionAccess().getGroup()); }
(rule__BitwiseOrExpression__Group__0)
{ after(grammarAccess.getBitwiseOrExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBitwiseAndExpression
entryRuleBitwiseAndExpression :
{ before(grammarAccess.getBitwiseAndExpressionRule()); }
	 ruleBitwiseAndExpression
{ after(grammarAccess.getBitwiseAndExpressionRule()); } 
	 EOF 
;

// Rule BitwiseAndExpression
ruleBitwiseAndExpression 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getBitwiseAndExpressionAccess().getGroup()); }
(rule__BitwiseAndExpression__Group__0)
{ after(grammarAccess.getBitwiseAndExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression :
{ before(grammarAccess.getEqualityExpressionRule()); }
	 ruleEqualityExpression
{ after(grammarAccess.getEqualityExpressionRule()); } 
	 EOF 
;

// Rule EqualityExpression
ruleEqualityExpression 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getEqualityExpressionAccess().getGroup()); }
(rule__EqualityExpression__Group__0)
{ after(grammarAccess.getEqualityExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression :
{ before(grammarAccess.getRelationalExpressionRule()); }
	 ruleRelationalExpression
{ after(grammarAccess.getRelationalExpressionRule()); } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup()); }
(rule__RelationalExpression__Group__0)
{ after(grammarAccess.getRelationalExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConditionalExpression
entryRuleConditionalExpression :
{ before(grammarAccess.getConditionalExpressionRule()); }
	 ruleConditionalExpression
{ after(grammarAccess.getConditionalExpressionRule()); } 
	 EOF 
;

// Rule ConditionalExpression
ruleConditionalExpression 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getConditionalExpressionAccess().getGroup()); }
(rule__ConditionalExpression__Group__0)
{ after(grammarAccess.getConditionalExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleShiftExpression
entryRuleShiftExpression :
{ before(grammarAccess.getShiftExpressionRule()); }
	 ruleShiftExpression
{ after(grammarAccess.getShiftExpressionRule()); } 
	 EOF 
;

// Rule ShiftExpression
ruleShiftExpression 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getShiftExpressionAccess().getGroup()); }
(rule__ShiftExpression__Group__0)
{ after(grammarAccess.getShiftExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression :
{ before(grammarAccess.getAdditiveExpressionRule()); }
	 ruleAdditiveExpression
{ after(grammarAccess.getAdditiveExpressionRule()); } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
(rule__AdditiveExpression__Group__0)
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression :
{ before(grammarAccess.getMultiplicativeExpressionRule()); }
	 ruleMultiplicativeExpression
{ after(grammarAccess.getMultiplicativeExpressionRule()); } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
(rule__MultiplicativeExpression__Group__0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression :
{ before(grammarAccess.getUnaryExpressionRule()); }
	 ruleUnaryExpression
{ after(grammarAccess.getUnaryExpressionRule()); } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getUnaryExpressionAccess().getGroup()); }
(rule__UnaryExpression__Group__0)
{ after(grammarAccess.getUnaryExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression :
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
(rule__PrimaryExpression__Alternatives)
{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNestedExpression
entryRuleNestedExpression :
{ before(grammarAccess.getNestedExpressionRule()); }
	 ruleNestedExpression
{ after(grammarAccess.getNestedExpressionRule()); } 
	 EOF 
;

// Rule NestedExpression
ruleNestedExpression 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getNestedExpressionAccess().getExpressionAssignment()); }
(rule__NestedExpression__ExpressionAssignment)
{ after(grammarAccess.getNestedExpressionAccess().getExpressionAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteralValue
entryRuleLiteralValue :
{ before(grammarAccess.getLiteralValueRule()); }
	 ruleLiteralValue
{ after(grammarAccess.getLiteralValueRule()); } 
	 EOF 
;

// Rule LiteralValue
ruleLiteralValue 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getLiteralValueAccess().getValueAssignment()); }
(rule__LiteralValue__ValueAssignment)
{ after(grammarAccess.getLiteralValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteral
entryRuleLiteral :
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
(rule__Literal__Alternatives)
{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule TimeUnit
ruleTimeUnit
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeUnitAccess().getAlternatives()); }
(rule__TimeUnit__Alternatives)
{ after(grammarAccess.getTimeUnitAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule AssignmentOperator
ruleAssignmentOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentOperatorAccess().getAlternatives()); }
(rule__AssignmentOperator__Alternatives)
{ after(grammarAccess.getAssignmentOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule EqualityOperator
ruleEqualityOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityOperatorAccess().getAlternatives()); }
(rule__EqualityOperator__Alternatives)
{ after(grammarAccess.getEqualityOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule RelationalOperator
ruleRelationalOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalOperatorAccess().getAlternatives()); }
(rule__RelationalOperator__Alternatives)
{ after(grammarAccess.getRelationalOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule ShiftOperator
ruleShiftOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftOperatorAccess().getAlternatives()); }
(rule__ShiftOperator__Alternatives)
{ after(grammarAccess.getShiftOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule AdditiveOperator
ruleAdditiveOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveOperatorAccess().getAlternatives()); }
(rule__AdditiveOperator__Alternatives)
{ after(grammarAccess.getAdditiveOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule MultiplicativeOperator
ruleMultiplicativeOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeOperatorAccess().getAlternatives()); }
(rule__MultiplicativeOperator__Alternatives)
{ after(grammarAccess.getMultiplicativeOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule UnaryOperator
ruleUnaryOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperatorAccess().getAlternatives()); }
(rule__UnaryOperator__Alternatives)
{ after(grammarAccess.getUnaryOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Expression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getTriggerExpressionParserRuleCall_0()); }
	ruleTriggerExpression
{ after(grammarAccess.getExpressionAccess().getTriggerExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getGuardExpressionParserRuleCall_1()); }
	ruleGuardExpression
{ after(grammarAccess.getExpressionAccess().getGuardExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getActionExpressionParserRuleCall_2()); }
	ruleActionExpression
{ after(grammarAccess.getExpressionAccess().getActionExpressionParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getSignalEventParserRuleCall_0()); }
	ruleSignalEvent
{ after(grammarAccess.getEventAccess().getSignalEventParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getEventAccess().getTimeEventParserRuleCall_1()); }
	ruleTimeEvent
{ after(grammarAccess.getEventAccess().getTimeEventParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TimeExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeExpressionAccess().getTimeConstantParserRuleCall_0()); }
	ruleTimeConstant
{ after(grammarAccess.getTimeExpressionAccess().getTimeConstantParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTimeExpressionAccess().getVariableReferenceParserRuleCall_1()); }
	ruleVariableReference
{ after(grammarAccess.getTimeExpressionAccess().getVariableReferenceParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getVariableAssignment_0()); }
(rule__VariableReference__VariableAssignment_0)
{ after(grammarAccess.getVariableReferenceAccess().getVariableAssignment_0()); }
)

    |(
{ before(grammarAccess.getVariableReferenceAccess().getGroup_1()); }
(rule__VariableReference__Group_1__0)
{ after(grammarAccess.getVariableReferenceAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getVariableAssignmentParserRuleCall_0_0()); }
	ruleVariableAssignment
{ after(grammarAccess.getStatementAccess().getVariableAssignmentParserRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getEventRaisingParserRuleCall_0_1()); }
	ruleEventRaising
{ after(grammarAccess.getStatementAccess().getEventRaisingParserRuleCall_0_1()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getProcedureCallParserRuleCall_0_2()); }
	ruleProcedureCall
{ after(grammarAccess.getStatementAccess().getProcedureCallParserRuleCall_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getVariableReferenceParserRuleCall_0()); }
	ruleVariableReference
{ after(grammarAccess.getPrimaryExpressionAccess().getVariableReferenceParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getLiteralValueParserRuleCall_1()); }
	ruleLiteralValue
{ after(grammarAccess.getPrimaryExpressionAccess().getLiteralValueParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_2()); }
(rule__PrimaryExpression__Group_2__0)
{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getHEX_LITERALTerminalRuleCall_0()); }
	RULE_HEX_LITERAL
{ after(grammarAccess.getLiteralAccess().getHEX_LITERALTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getBOOLEAN_LITERALTerminalRuleCall_1()); }
	RULE_BOOLEAN_LITERAL
{ after(grammarAccess.getLiteralAccess().getBOOLEAN_LITERALTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getINTTerminalRuleCall_2()); }
	RULE_INT
{ after(grammarAccess.getLiteralAccess().getINTTerminalRuleCall_2()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getSTRINGTerminalRuleCall_3()); }
	RULE_STRING
{ after(grammarAccess.getLiteralAccess().getSTRINGTerminalRuleCall_3()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getFLOATING_POINT_LITERALTerminalRuleCall_4()); }
	RULE_FLOATING_POINT_LITERAL
{ after(grammarAccess.getLiteralAccess().getFLOATING_POINT_LITERALTerminalRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TimeUnit__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeUnitAccess().getSecondEnumLiteralDeclaration_0()); }
(	's' 
)
{ after(grammarAccess.getTimeUnitAccess().getSecondEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getTimeUnitAccess().getMillisecondEnumLiteralDeclaration_1()); }
(	'ms' 
)
{ after(grammarAccess.getTimeUnitAccess().getMillisecondEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getTimeUnitAccess().getNanosecondEnumLiteralDeclaration_2()); }
(	'ns' 
)
{ after(grammarAccess.getTimeUnitAccess().getNanosecondEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentOperatorAccess().getAssignEnumLiteralDeclaration_0()); }
(	'=' 
)
{ after(grammarAccess.getAssignmentOperatorAccess().getAssignEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getAssignmentOperatorAccess().getMultAssignEnumLiteralDeclaration_1()); }
(	'*=' 
)
{ after(grammarAccess.getAssignmentOperatorAccess().getMultAssignEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getAssignmentOperatorAccess().getDivAssignEnumLiteralDeclaration_2()); }
(	'/=' 
)
{ after(grammarAccess.getAssignmentOperatorAccess().getDivAssignEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getAssignmentOperatorAccess().getModAssignEnumLiteralDeclaration_3()); }
(	'%=' 
)
{ after(grammarAccess.getAssignmentOperatorAccess().getModAssignEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getAssignmentOperatorAccess().getAddAssignEnumLiteralDeclaration_4()); }
(	'+=' 
)
{ after(grammarAccess.getAssignmentOperatorAccess().getAddAssignEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getAssignmentOperatorAccess().getSubAssignEnumLiteralDeclaration_5()); }
(	'-=' 
)
{ after(grammarAccess.getAssignmentOperatorAccess().getSubAssignEnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getAssignmentOperatorAccess().getLeftShiftAssignEnumLiteralDeclaration_6()); }
(	'<<=' 
)
{ after(grammarAccess.getAssignmentOperatorAccess().getLeftShiftAssignEnumLiteralDeclaration_6()); }
)

    |(
{ before(grammarAccess.getAssignmentOperatorAccess().getRightShiftAssignEnumLiteralDeclaration_7()); }
(	'>>=' 
)
{ after(grammarAccess.getAssignmentOperatorAccess().getRightShiftAssignEnumLiteralDeclaration_7()); }
)

    |(
{ before(grammarAccess.getAssignmentOperatorAccess().getAndAssignEnumLiteralDeclaration_8()); }
(	'&=' 
)
{ after(grammarAccess.getAssignmentOperatorAccess().getAndAssignEnumLiteralDeclaration_8()); }
)

    |(
{ before(grammarAccess.getAssignmentOperatorAccess().getXorAssignEnumLiteralDeclaration_9()); }
(	'^=' 
)
{ after(grammarAccess.getAssignmentOperatorAccess().getXorAssignEnumLiteralDeclaration_9()); }
)

    |(
{ before(grammarAccess.getAssignmentOperatorAccess().getOrAssignEnumLiteralDeclaration_10()); }
(	'|=' 
)
{ after(grammarAccess.getAssignmentOperatorAccess().getOrAssignEnumLiteralDeclaration_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityOperatorAccess().getEqualsEnumLiteralDeclaration_0()); }
(	'==' 
)
{ after(grammarAccess.getEqualityOperatorAccess().getEqualsEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getEqualityOperatorAccess().getNotEqualsEnumLiteralDeclaration_1()); }
(	'!=' 
)
{ after(grammarAccess.getEqualityOperatorAccess().getNotEqualsEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalOperatorAccess().getSmallerEnumLiteralDeclaration_0()); }
(	'<' 
)
{ after(grammarAccess.getRelationalOperatorAccess().getSmallerEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getGreaterEnumLiteralDeclaration_1()); }
(	'>' 
)
{ after(grammarAccess.getRelationalOperatorAccess().getGreaterEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getSmallerEqualEnumLiteralDeclaration_2()); }
(	'<=' 
)
{ after(grammarAccess.getRelationalOperatorAccess().getSmallerEqualEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getGreaterEqualEnumLiteralDeclaration_3()); }
(	'>=' 
)
{ after(grammarAccess.getRelationalOperatorAccess().getGreaterEqualEnumLiteralDeclaration_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftOperatorAccess().getLeftEnumLiteralDeclaration_0()); }
(	'<<' 
)
{ after(grammarAccess.getShiftOperatorAccess().getLeftEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getShiftOperatorAccess().getRightEnumLiteralDeclaration_1()); }
(	'>>' 
)
{ after(grammarAccess.getShiftOperatorAccess().getRightEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveOperatorAccess().getPlusEnumLiteralDeclaration_0()); }
(	'+' 
)
{ after(grammarAccess.getAdditiveOperatorAccess().getPlusEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getAdditiveOperatorAccess().getMinusEnumLiteralDeclaration_1()); }
(	'-' 
)
{ after(grammarAccess.getAdditiveOperatorAccess().getMinusEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeOperatorAccess().getMulEnumLiteralDeclaration_0()); }
(	'*' 
)
{ after(grammarAccess.getMultiplicativeOperatorAccess().getMulEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getMultiplicativeOperatorAccess().getDivEnumLiteralDeclaration_1()); }
(	'/' 
)
{ after(grammarAccess.getMultiplicativeOperatorAccess().getDivEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getMultiplicativeOperatorAccess().getModEnumLiteralDeclaration_2()); }
(	'%' 
)
{ after(grammarAccess.getMultiplicativeOperatorAccess().getModEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperatorAccess().getPositiveEnumLiteralDeclaration_0()); }
(	'+' 
)
{ after(grammarAccess.getUnaryOperatorAccess().getPositiveEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getUnaryOperatorAccess().getNegativeEnumLiteralDeclaration_1()); }
(	'-' 
)
{ after(grammarAccess.getUnaryOperatorAccess().getNegativeEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getUnaryOperatorAccess().getComplementEnumLiteralDeclaration_2()); }
(	'~' 
)
{ after(grammarAccess.getUnaryOperatorAccess().getComplementEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getUnaryOperatorAccess().getNotEnumLiteralDeclaration_3()); }
(	'!' 
)
{ after(grammarAccess.getUnaryOperatorAccess().getNotEnumLiteralDeclaration_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__TriggerExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTriggerExpressionAccess().getTriggersAssignment_0()); }
(rule__TriggerExpression__TriggersAssignment_0)
{ after(grammarAccess.getTriggerExpressionAccess().getTriggersAssignment_0()); }
)

	rule__TriggerExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__TriggerExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTriggerExpressionAccess().getGroup_1()); }
(rule__TriggerExpression__Group_1__0)*
{ after(grammarAccess.getTriggerExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TriggerExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTriggerExpressionAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getTriggerExpressionAccess().getCommaKeyword_1_0()); }
)

	rule__TriggerExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__TriggerExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTriggerExpressionAccess().getTriggersAssignment_1_1()); }
(rule__TriggerExpression__TriggersAssignment_1_1)
{ after(grammarAccess.getTriggerExpressionAccess().getTriggersAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TimeEvent__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeEventAccess().getAfterKeyword_0()); }

	'after' 

{ after(grammarAccess.getTimeEventAccess().getAfterKeyword_0()); }
)

	rule__TimeEvent__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__TimeEvent__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeEventAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getTimeEventAccess().getLeftParenthesisKeyword_1()); }
)

	rule__TimeEvent__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__TimeEvent__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeEventAccess().getDurationAssignment_2()); }
(rule__TimeEvent__DurationAssignment_2)
{ after(grammarAccess.getTimeEventAccess().getDurationAssignment_2()); }
)

	rule__TimeEvent__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__TimeEvent__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeEventAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getTimeEventAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__VariableReference__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getVarKeyword_1_0()); }

	'var' 

{ after(grammarAccess.getVariableReferenceAccess().getVarKeyword_1_0()); }
)

	rule__VariableReference__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableReference__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getLeftParenthesisKeyword_1_1()); }

	'(' 

{ after(grammarAccess.getVariableReferenceAccess().getLeftParenthesisKeyword_1_1()); }
)

	rule__VariableReference__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableReference__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getVariableAssignment_1_2()); }
(rule__VariableReference__VariableAssignment_1_2)
{ after(grammarAccess.getVariableReferenceAccess().getVariableAssignment_1_2()); }
)

	rule__VariableReference__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableReference__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getRightParenthesisKeyword_1_3()); }

	')' 

{ after(grammarAccess.getVariableReferenceAccess().getRightParenthesisKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__TimeConstant__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeConstantAccess().getValueAssignment_0()); }
(rule__TimeConstant__ValueAssignment_0)
{ after(grammarAccess.getTimeConstantAccess().getValueAssignment_0()); }
)

	rule__TimeConstant__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__TimeConstant__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeConstantAccess().getUnitAssignment_1()); }
(rule__TimeConstant__UnitAssignment_1)?
{ after(grammarAccess.getTimeConstantAccess().getUnitAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Statement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getAlternatives_0()); }
(rule__Statement__Alternatives_0)
{ after(grammarAccess.getStatementAccess().getAlternatives_0()); }
)

	rule__Statement__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getSemicolonKeyword_1()); }

	';' 

{ after(grammarAccess.getStatementAccess().getSemicolonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VariableAssignment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAssignmentAccess().getVariableReferenceAssignment_0()); }
(rule__VariableAssignment__VariableReferenceAssignment_0)
{ after(grammarAccess.getVariableAssignmentAccess().getVariableReferenceAssignment_0()); }
)

	rule__VariableAssignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableAssignment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAssignmentAccess().getOperatorAssignment_1()); }
(rule__VariableAssignment__OperatorAssignment_1)
{ after(grammarAccess.getVariableAssignmentAccess().getOperatorAssignment_1()); }
)

	rule__VariableAssignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableAssignment__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAssignmentAccess().getValueAssignment_2()); }
(rule__VariableAssignment__ValueAssignment_2)
{ after(grammarAccess.getVariableAssignmentAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ProcedureCall__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureCallAccess().getProcedureAssignment_0()); }
(rule__ProcedureCall__ProcedureAssignment_0)
{ after(grammarAccess.getProcedureCallAccess().getProcedureAssignment_0()); }
)

	rule__ProcedureCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__ProcedureCall__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureCallAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getProcedureCallAccess().getLeftParenthesisKeyword_1()); }
)

	rule__ProcedureCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__ProcedureCall__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureCallAccess().getRightParenthesisKeyword_2()); }

	')' 

{ after(grammarAccess.getProcedureCallAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__EventRaising__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventRaisingAccess().getRaiseKeyword_0()); }

	'raise' 

{ after(grammarAccess.getEventRaisingAccess().getRaiseKeyword_0()); }
)

	rule__EventRaising__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__EventRaising__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventRaisingAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getEventRaisingAccess().getLeftParenthesisKeyword_1()); }
)

	rule__EventRaising__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__EventRaising__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventRaisingAccess().getEventAssignment_2()); }
(rule__EventRaising__EventAssignment_2)
{ after(grammarAccess.getEventRaisingAccess().getEventAssignment_2()); }
)

	rule__EventRaising__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__EventRaising__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventRaisingAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getEventRaisingAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__BooleanOrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanOrExpressionAccess().getOperand1Assignment_0()); }
(rule__BooleanOrExpression__Operand1Assignment_0)
{ after(grammarAccess.getBooleanOrExpressionAccess().getOperand1Assignment_0()); }
)

	rule__BooleanOrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanOrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanOrExpressionAccess().getGroup_1()); }
(rule__BooleanOrExpression__Group_1__0)*
{ after(grammarAccess.getBooleanOrExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BooleanOrExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanOrExpressionAccess().getVerticalLineVerticalLineKeyword_1_0()); }

	'||' 

{ after(grammarAccess.getBooleanOrExpressionAccess().getVerticalLineVerticalLineKeyword_1_0()); }
)

	rule__BooleanOrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanOrExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanOrExpressionAccess().getOperand2Assignment_1_1()); }
(rule__BooleanOrExpression__Operand2Assignment_1_1)
{ after(grammarAccess.getBooleanOrExpressionAccess().getOperand2Assignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BooleanAndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanAndExpressionAccess().getOperand1Assignment_0()); }
(rule__BooleanAndExpression__Operand1Assignment_0)
{ after(grammarAccess.getBooleanAndExpressionAccess().getOperand1Assignment_0()); }
)

	rule__BooleanAndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanAndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanAndExpressionAccess().getGroup_1()); }
(rule__BooleanAndExpression__Group_1__0)*
{ after(grammarAccess.getBooleanAndExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BooleanAndExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanAndExpressionAccess().getAmpersandAmpersandKeyword_1_0()); }

	'&&' 

{ after(grammarAccess.getBooleanAndExpressionAccess().getAmpersandAmpersandKeyword_1_0()); }
)

	rule__BooleanAndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanAndExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanAndExpressionAccess().getOperand2Assignment_1_1()); }
(rule__BooleanAndExpression__Operand2Assignment_1_1)
{ after(grammarAccess.getBooleanAndExpressionAccess().getOperand2Assignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BitwiseXorExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseXorExpressionAccess().getOperand1Assignment_0()); }
(rule__BitwiseXorExpression__Operand1Assignment_0)
{ after(grammarAccess.getBitwiseXorExpressionAccess().getOperand1Assignment_0()); }
)

	rule__BitwiseXorExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__BitwiseXorExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseXorExpressionAccess().getGroup_1()); }
(rule__BitwiseXorExpression__Group_1__0)*
{ after(grammarAccess.getBitwiseXorExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BitwiseXorExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseXorExpressionAccess().getCircumflexAccentKeyword_1_0()); }

	'^' 

{ after(grammarAccess.getBitwiseXorExpressionAccess().getCircumflexAccentKeyword_1_0()); }
)

	rule__BitwiseXorExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__BitwiseXorExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseXorExpressionAccess().getOperand2Assignment_1_1()); }
(rule__BitwiseXorExpression__Operand2Assignment_1_1)
{ after(grammarAccess.getBitwiseXorExpressionAccess().getOperand2Assignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BitwiseOrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseOrExpressionAccess().getOperand1Assignment_0()); }
(rule__BitwiseOrExpression__Operand1Assignment_0)
{ after(grammarAccess.getBitwiseOrExpressionAccess().getOperand1Assignment_0()); }
)

	rule__BitwiseOrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__BitwiseOrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseOrExpressionAccess().getGroup_1()); }
(rule__BitwiseOrExpression__Group_1__0)*
{ after(grammarAccess.getBitwiseOrExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BitwiseOrExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseOrExpressionAccess().getVerticalLineKeyword_1_0()); }

	'|' 

{ after(grammarAccess.getBitwiseOrExpressionAccess().getVerticalLineKeyword_1_0()); }
)

	rule__BitwiseOrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__BitwiseOrExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseOrExpressionAccess().getOperand2Assignment_1_1()); }
(rule__BitwiseOrExpression__Operand2Assignment_1_1)
{ after(grammarAccess.getBitwiseOrExpressionAccess().getOperand2Assignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BitwiseAndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseAndExpressionAccess().getOperand1Assignment_0()); }
(rule__BitwiseAndExpression__Operand1Assignment_0)
{ after(grammarAccess.getBitwiseAndExpressionAccess().getOperand1Assignment_0()); }
)

	rule__BitwiseAndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__BitwiseAndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseAndExpressionAccess().getGroup_1()); }
(rule__BitwiseAndExpression__Group_1__0)*
{ after(grammarAccess.getBitwiseAndExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BitwiseAndExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseAndExpressionAccess().getAmpersandKeyword_1_0()); }

	'&' 

{ after(grammarAccess.getBitwiseAndExpressionAccess().getAmpersandKeyword_1_0()); }
)

	rule__BitwiseAndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__BitwiseAndExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseAndExpressionAccess().getOperand2Assignment_1_1()); }
(rule__BitwiseAndExpression__Operand2Assignment_1_1)
{ after(grammarAccess.getBitwiseAndExpressionAccess().getOperand2Assignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EqualityExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getOperand1Assignment_0()); }
(rule__EqualityExpression__Operand1Assignment_0)
{ after(grammarAccess.getEqualityExpressionAccess().getOperand1Assignment_0()); }
)

	rule__EqualityExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getGroup_1()); }
(rule__EqualityExpression__Group_1__0)*
{ after(grammarAccess.getEqualityExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EqualityExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getOperatorAssignment_1_0()); }
(rule__EqualityExpression__OperatorAssignment_1_0)
{ after(grammarAccess.getEqualityExpressionAccess().getOperatorAssignment_1_0()); }
)

	rule__EqualityExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getOperand2Assignment_1_1()); }
(rule__EqualityExpression__Operand2Assignment_1_1)
{ after(grammarAccess.getEqualityExpressionAccess().getOperand2Assignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOperand1Assignment_0()); }
(rule__RelationalExpression__Operand1Assignment_0)
{ after(grammarAccess.getRelationalExpressionAccess().getOperand1Assignment_0()); }
)

	rule__RelationalExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup_1()); }
(rule__RelationalExpression__Group_1__0)*
{ after(grammarAccess.getRelationalExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOperatorAssignment_1_0()); }
(rule__RelationalExpression__OperatorAssignment_1_0)
{ after(grammarAccess.getRelationalExpressionAccess().getOperatorAssignment_1_0()); }
)

	rule__RelationalExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOperand2Assignment_1_1()); }
(rule__RelationalExpression__Operand2Assignment_1_1)
{ after(grammarAccess.getRelationalExpressionAccess().getOperand2Assignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConditionalExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getOperand1Assignment_0()); }
(rule__ConditionalExpression__Operand1Assignment_0)
{ after(grammarAccess.getConditionalExpressionAccess().getOperand1Assignment_0()); }
)

	rule__ConditionalExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getGroup_1()); }
(rule__ConditionalExpression__Group_1__0)?
{ after(grammarAccess.getConditionalExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConditionalExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0()); }

	'?' 

{ after(grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0()); }
)

	rule__ConditionalExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getOperand2Assignment_1_1()); }
(rule__ConditionalExpression__Operand2Assignment_1_1)
{ after(grammarAccess.getConditionalExpressionAccess().getOperand2Assignment_1_1()); }
)

	rule__ConditionalExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2()); }

	':' 

{ after(grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2()); }
)

	rule__ConditionalExpression__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getOperand3Assignment_1_3()); }
(rule__ConditionalExpression__Operand3Assignment_1_3)
{ after(grammarAccess.getConditionalExpressionAccess().getOperand3Assignment_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ShiftExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftExpressionAccess().getOperand1Assignment_0()); }
(rule__ShiftExpression__Operand1Assignment_0)
{ after(grammarAccess.getShiftExpressionAccess().getOperand1Assignment_0()); }
)

	rule__ShiftExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__ShiftExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftExpressionAccess().getGroup_1()); }
(rule__ShiftExpression__Group_1__0)*
{ after(grammarAccess.getShiftExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ShiftExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftExpressionAccess().getOperatorAssignment_1_0()); }
(rule__ShiftExpression__OperatorAssignment_1_0)
{ after(grammarAccess.getShiftExpressionAccess().getOperatorAssignment_1_0()); }
)

	rule__ShiftExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__ShiftExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftExpressionAccess().getOperand2Assignment_1_1()); }
(rule__ShiftExpression__Operand2Assignment_1_1)
{ after(grammarAccess.getShiftExpressionAccess().getOperand2Assignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditiveExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getOperand1Assignment_0()); }
(rule__AdditiveExpression__Operand1Assignment_0)
{ after(grammarAccess.getAdditiveExpressionAccess().getOperand1Assignment_0()); }
)

	rule__AdditiveExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup_1()); }
(rule__AdditiveExpression__Group_1__0)*
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditiveExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getOperatorAssignment_1_0()); }
(rule__AdditiveExpression__OperatorAssignment_1_0)
{ after(grammarAccess.getAdditiveExpressionAccess().getOperatorAssignment_1_0()); }
)

	rule__AdditiveExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getOperand2Assignment_1_1()); }
(rule__AdditiveExpression__Operand2Assignment_1_1)
{ after(grammarAccess.getAdditiveExpressionAccess().getOperand2Assignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicativeExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOperand1Assignment_0()); }
(rule__MultiplicativeExpression__Operand1Assignment_0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getOperand1Assignment_0()); }
)

	rule__MultiplicativeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1()); }
(rule__MultiplicativeExpression__Group_1__0)*
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicativeExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOperatorAssignment_1_0()); }
(rule__MultiplicativeExpression__OperatorAssignment_1_0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getOperatorAssignment_1_0()); }
)

	rule__MultiplicativeExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOperand2Assignment_1_1()); }
(rule__MultiplicativeExpression__Operand2Assignment_1_1)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getOperand2Assignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnaryExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getOperatorAssignment_0()); }
(rule__UnaryExpression__OperatorAssignment_0)?
{ after(grammarAccess.getUnaryExpressionAccess().getOperatorAssignment_0()); }
)

	rule__UnaryExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getOperandAssignment_1()); }
(rule__UnaryExpression__OperandAssignment_1)
{ after(grammarAccess.getUnaryExpressionAccess().getOperandAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PrimaryExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_2_0()); }

	'(' 

{ after(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_2_0()); }
)

	rule__PrimaryExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getNestedExpressionParserRuleCall_2_1()); }
	ruleNestedExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getNestedExpressionParserRuleCall_2_1()); }
)

	rule__PrimaryExpression__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_2_2()); }

	')' 

{ after(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TriggerExpression__TriggersAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTriggerExpressionAccess().getTriggersTriggerParserRuleCall_0_0()); }
	ruleTrigger{ after(grammarAccess.getTriggerExpressionAccess().getTriggersTriggerParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TriggerExpression__TriggersAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTriggerExpressionAccess().getTriggersTriggerParserRuleCall_1_1_0()); }
	ruleTrigger{ after(grammarAccess.getTriggerExpressionAccess().getTriggersTriggerParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GuardExpression__ExpressionAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGuardExpressionAccess().getExpressionBooleanOrExpressionParserRuleCall_0()); }
	ruleBooleanOrExpression{ after(grammarAccess.getGuardExpressionAccess().getExpressionBooleanOrExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ActionExpression__StatementAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionExpressionAccess().getStatementStatementParserRuleCall_0()); }
	ruleStatement{ after(grammarAccess.getActionExpressionAccess().getStatementStatementParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Trigger__EventAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTriggerAccess().getEventEventParserRuleCall_0()); }
	ruleEvent{ after(grammarAccess.getTriggerAccess().getEventEventParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SignalEvent__IdentifierAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalEventAccess().getIdentifierIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getSignalEventAccess().getIdentifierIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TimeEvent__DurationAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeEventAccess().getDurationTimeExpressionParserRuleCall_2_0()); }
	ruleTimeExpression{ after(grammarAccess.getTimeEventAccess().getDurationTimeExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__VariableAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getVariableVariableParserRuleCall_0_0()); }
	ruleVariable{ after(grammarAccess.getVariableReferenceAccess().getVariableVariableParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__VariableAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getVariableVariableParserRuleCall_1_2_0()); }
	ruleVariable{ after(grammarAccess.getVariableReferenceAccess().getVariableVariableParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__IdentifierAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getIdentifierIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getVariableAccess().getIdentifierIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TimeConstant__ValueAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeConstantAccess().getValueINTTerminalRuleCall_0_0()); }
	RULE_INT{ after(grammarAccess.getTimeConstantAccess().getValueINTTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TimeConstant__UnitAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeConstantAccess().getUnitTimeUnitEnumRuleCall_1_0()); }
	ruleTimeUnit{ after(grammarAccess.getTimeConstantAccess().getUnitTimeUnitEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignment__VariableReferenceAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAssignmentAccess().getVariableReferenceVariableReferenceParserRuleCall_0_0()); }
	ruleVariableReference{ after(grammarAccess.getVariableAssignmentAccess().getVariableReferenceVariableReferenceParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignment__OperatorAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAssignmentAccess().getOperatorAssignmentOperatorEnumRuleCall_1_0()); }
	ruleAssignmentOperator{ after(grammarAccess.getVariableAssignmentAccess().getOperatorAssignmentOperatorEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignment__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAssignmentAccess().getValueConditionalExpressionParserRuleCall_2_0()); }
	ruleConditionalExpression{ after(grammarAccess.getVariableAssignmentAccess().getValueConditionalExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureCall__ProcedureAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureCallAccess().getProcedureProcedureParserRuleCall_0_0()); }
	ruleProcedure{ after(grammarAccess.getProcedureCallAccess().getProcedureProcedureParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__IdentifierAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureAccess().getIdentifierIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getProcedureAccess().getIdentifierIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventRaising__EventAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventRaisingAccess().getEventSignalEventParserRuleCall_2_0()); }
	ruleSignalEvent{ after(grammarAccess.getEventRaisingAccess().getEventSignalEventParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanOrExpression__Operand1Assignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanOrExpressionAccess().getOperand1BooleanAndExpressionParserRuleCall_0_0()); }
	ruleBooleanAndExpression{ after(grammarAccess.getBooleanOrExpressionAccess().getOperand1BooleanAndExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanOrExpression__Operand2Assignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanOrExpressionAccess().getOperand2BooleanAndExpressionParserRuleCall_1_1_0()); }
	ruleBooleanAndExpression{ after(grammarAccess.getBooleanOrExpressionAccess().getOperand2BooleanAndExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanAndExpression__Operand1Assignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanAndExpressionAccess().getOperand1BitwiseXorExpressionParserRuleCall_0_0()); }
	ruleBitwiseXorExpression{ after(grammarAccess.getBooleanAndExpressionAccess().getOperand1BitwiseXorExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanAndExpression__Operand2Assignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanAndExpressionAccess().getOperand2BitwiseXorExpressionParserRuleCall_1_1_0()); }
	ruleBitwiseXorExpression{ after(grammarAccess.getBooleanAndExpressionAccess().getOperand2BitwiseXorExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseXorExpression__Operand1Assignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseXorExpressionAccess().getOperand1BitwiseOrExpressionParserRuleCall_0_0()); }
	ruleBitwiseOrExpression{ after(grammarAccess.getBitwiseXorExpressionAccess().getOperand1BitwiseOrExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseXorExpression__Operand2Assignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseXorExpressionAccess().getOperand2BitwiseOrExpressionParserRuleCall_1_1_0()); }
	ruleBitwiseOrExpression{ after(grammarAccess.getBitwiseXorExpressionAccess().getOperand2BitwiseOrExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseOrExpression__Operand1Assignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseOrExpressionAccess().getOperand1BitwiseAndExpressionParserRuleCall_0_0()); }
	ruleBitwiseAndExpression{ after(grammarAccess.getBitwiseOrExpressionAccess().getOperand1BitwiseAndExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseOrExpression__Operand2Assignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseOrExpressionAccess().getOperand2BitwiseAndExpressionParserRuleCall_1_1_0()); }
	ruleBitwiseAndExpression{ after(grammarAccess.getBitwiseOrExpressionAccess().getOperand2BitwiseAndExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseAndExpression__Operand1Assignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseAndExpressionAccess().getOperand1EqualityExpressionParserRuleCall_0_0()); }
	ruleEqualityExpression{ after(grammarAccess.getBitwiseAndExpressionAccess().getOperand1EqualityExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseAndExpression__Operand2Assignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseAndExpressionAccess().getOperand2EqualityExpressionParserRuleCall_1_1_0()); }
	ruleEqualityExpression{ after(grammarAccess.getBitwiseAndExpressionAccess().getOperand2EqualityExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Operand1Assignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getOperand1RelationalExpressionParserRuleCall_0_0()); }
	ruleRelationalExpression{ after(grammarAccess.getEqualityExpressionAccess().getOperand1RelationalExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__OperatorAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getOperatorEqualityOperatorEnumRuleCall_1_0_0()); }
	ruleEqualityOperator{ after(grammarAccess.getEqualityExpressionAccess().getOperatorEqualityOperatorEnumRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Operand2Assignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getOperand2RelationalExpressionParserRuleCall_1_1_0()); }
	ruleRelationalExpression{ after(grammarAccess.getEqualityExpressionAccess().getOperand2RelationalExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Operand1Assignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOperand1ShiftExpressionParserRuleCall_0_0()); }
	ruleShiftExpression{ after(grammarAccess.getRelationalExpressionAccess().getOperand1ShiftExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__OperatorAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOperatorRelationalOperatorEnumRuleCall_1_0_0()); }
	ruleRelationalOperator{ after(grammarAccess.getRelationalExpressionAccess().getOperatorRelationalOperatorEnumRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Operand2Assignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOperand2ShiftExpressionParserRuleCall_1_1_0()); }
	ruleShiftExpression{ after(grammarAccess.getRelationalExpressionAccess().getOperand2ShiftExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Operand1Assignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getOperand1BooleanOrExpressionParserRuleCall_0_0()); }
	ruleBooleanOrExpression{ after(grammarAccess.getConditionalExpressionAccess().getOperand1BooleanOrExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Operand2Assignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getOperand2ShiftExpressionParserRuleCall_1_1_0()); }
	ruleShiftExpression{ after(grammarAccess.getConditionalExpressionAccess().getOperand2ShiftExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Operand3Assignment_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getOperand3ShiftExpressionParserRuleCall_1_3_0()); }
	ruleShiftExpression{ after(grammarAccess.getConditionalExpressionAccess().getOperand3ShiftExpressionParserRuleCall_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__Operand1Assignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftExpressionAccess().getOperand1AdditiveExpressionParserRuleCall_0_0()); }
	ruleAdditiveExpression{ after(grammarAccess.getShiftExpressionAccess().getOperand1AdditiveExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__OperatorAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftExpressionAccess().getOperatorShiftOperatorEnumRuleCall_1_0_0()); }
	ruleShiftOperator{ after(grammarAccess.getShiftExpressionAccess().getOperatorShiftOperatorEnumRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__Operand2Assignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftExpressionAccess().getOperand2AdditiveExpressionParserRuleCall_1_1_0()); }
	ruleAdditiveExpression{ after(grammarAccess.getShiftExpressionAccess().getOperand2AdditiveExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Operand1Assignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getOperand1MultiplicativeExpressionParserRuleCall_0_0()); }
	ruleMultiplicativeExpression{ after(grammarAccess.getAdditiveExpressionAccess().getOperand1MultiplicativeExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__OperatorAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getOperatorAdditiveOperatorEnumRuleCall_1_0_0()); }
	ruleAdditiveOperator{ after(grammarAccess.getAdditiveExpressionAccess().getOperatorAdditiveOperatorEnumRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Operand2Assignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getOperand2MultiplicativeExpressionParserRuleCall_1_1_0()); }
	ruleMultiplicativeExpression{ after(grammarAccess.getAdditiveExpressionAccess().getOperand2MultiplicativeExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Operand1Assignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOperand1UnaryExpressionParserRuleCall_0_0()); }
	ruleUnaryExpression{ after(grammarAccess.getMultiplicativeExpressionAccess().getOperand1UnaryExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__OperatorAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOperatorMultiplicativeOperatorEnumRuleCall_1_0_0()); }
	ruleMultiplicativeOperator{ after(grammarAccess.getMultiplicativeExpressionAccess().getOperatorMultiplicativeOperatorEnumRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Operand2Assignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOperand2UnaryExpressionParserRuleCall_1_1_0()); }
	ruleUnaryExpression{ after(grammarAccess.getMultiplicativeExpressionAccess().getOperand2UnaryExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__OperatorAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getOperatorUnaryOperatorEnumRuleCall_0_0()); }
	ruleUnaryOperator{ after(grammarAccess.getUnaryExpressionAccess().getOperatorUnaryOperatorEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__OperandAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getOperandPrimaryExpressionParserRuleCall_1_0()); }
	rulePrimaryExpression{ after(grammarAccess.getUnaryExpressionAccess().getOperandPrimaryExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NestedExpression__ExpressionAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNestedExpressionAccess().getExpressionConditionalExpressionParserRuleCall_0()); }
	ruleConditionalExpression{ after(grammarAccess.getNestedExpressionAccess().getExpressionConditionalExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralValueAccess().getValueLiteralParserRuleCall_0()); }
	ruleLiteral{ after(grammarAccess.getLiteralValueAccess().getValueLiteralParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_BOOLEAN_LITERAL : ('true'|'false');

RULE_HEX_LITERAL : '0' ('x'|'X') ('0'..'9'|'a'..'f'|'A'..'F')+;

RULE_FLOATING_POINT_LITERAL : ('0'..'9')* '.' ('0'..'9')* (('e'|'E') ('+'|'-')? ('0'..'9')+)? ('f'|'F'|'d'|'D')?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


