/*
* generated by Xtext
*/
grammar InternalStatechartExpressions;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.yakindu.statechart.model.expressions.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.yakindu.statechart.model.expressions.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import com.yakindu.statechart.model.expressions.services.StatechartExpressionsGrammarAccess;

}

@parser::members {
 
 	private StatechartExpressionsGrammarAccess grammarAccess;
 	
    public InternalStatechartExpressionsParser(TokenStream input, IAstFactory factory, StatechartExpressionsGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("com/yakindu/statechart/model/expressions/parser/antlr/internal/InternalStatechartExpressions.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Expression";	
   	} 
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getExpressionRule(), currentNode); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getTriggerExpressionParserRuleCall_0(), currentNode); 
    }
    this_TriggerExpression_0=ruleTriggerExpression
    { 
        $current = $this_TriggerExpression_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getGuardExpressionParserRuleCall_1(), currentNode); 
    }
    this_GuardExpression_1=ruleGuardExpression
    { 
        $current = $this_GuardExpression_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getActionExpressionParserRuleCall_2(), currentNode); 
    }
    this_ActionExpression_2=ruleActionExpression
    { 
        $current = $this_ActionExpression_2.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleTriggerExpression
entryRuleTriggerExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getTriggerExpressionRule(), currentNode); }
	 iv_ruleTriggerExpression=ruleTriggerExpression 
	 { $current=$iv_ruleTriggerExpression.current; } 
	 EOF 
;

// Rule TriggerExpression
ruleTriggerExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getTriggerExpressionAccess().getTriggersTriggerParserRuleCall_0_0(), currentNode); 
	    }
	    lv_triggers_0=ruleTrigger 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTriggerExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "triggers", lv_triggers_0, "Trigger", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getTriggerExpressionAccess().getCommaKeyword_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getTriggerExpressionAccess().getTriggersTriggerParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_triggers_2=ruleTrigger 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTriggerExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "triggers", lv_triggers_2, "Trigger", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleGuardExpression
entryRuleGuardExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getGuardExpressionRule(), currentNode); }
	 iv_ruleGuardExpression=ruleGuardExpression 
	 { $current=$iv_ruleGuardExpression.current; } 
	 EOF 
;

// Rule GuardExpression
ruleGuardExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getGuardExpressionAccess().getExpressionBooleanOrExpressionParserRuleCall_0(), currentNode); 
	    }
	    lv_expression_0=ruleBooleanOrExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGuardExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "expression", lv_expression_0, "BooleanOrExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
);





// Entry rule entryRuleActionExpression
entryRuleActionExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getActionExpressionRule(), currentNode); }
	 iv_ruleActionExpression=ruleActionExpression 
	 { $current=$iv_ruleActionExpression.current; } 
	 EOF 
;

// Rule ActionExpression
ruleActionExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getActionExpressionAccess().getStatementStatementParserRuleCall_0(), currentNode); 
	    }
	    lv_statement_0=ruleStatement 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getActionExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "statement", lv_statement_0, "Statement", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)+;





// Entry rule entryRuleTrigger
entryRuleTrigger returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getTriggerRule(), currentNode); }
	 iv_ruleTrigger=ruleTrigger 
	 { $current=$iv_ruleTrigger.current; } 
	 EOF 
;

// Rule Trigger
ruleTrigger returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getTriggerAccess().getEventEventParserRuleCall_0(), currentNode); 
	    }
	    lv_event_0=ruleEvent 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTriggerRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "event", lv_event_0, "Event", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
);





// Entry rule entryRuleEvent
entryRuleEvent returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getEventRule(), currentNode); }
	 iv_ruleEvent=ruleEvent 
	 { $current=$iv_ruleEvent.current; } 
	 EOF 
;

// Rule Event
ruleEvent returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getEventAccess().getSignalEventParserRuleCall_0(), currentNode); 
    }
    this_SignalEvent_0=ruleSignalEvent
    { 
        $current = $this_SignalEvent_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getEventAccess().getTimeEventParserRuleCall_1(), currentNode); 
    }
    this_TimeEvent_1=ruleTimeEvent
    { 
        $current = $this_TimeEvent_1.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleSignalEvent
entryRuleSignalEvent returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSignalEventRule(), currentNode); }
	 iv_ruleSignalEvent=ruleSignalEvent 
	 { $current=$iv_ruleSignalEvent.current; } 
	 EOF 
;

// Rule SignalEvent
ruleSignalEvent returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    lv_identifier_0=	RULE_ID
	{
		createLeafNode(grammarAccess.getSignalEventAccess().getIdentifierIDTerminalRuleCall_0(), "identifier"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignalEventRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "identifier", lv_identifier_0, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
);





// Entry rule entryRuleTimeEvent
entryRuleTimeEvent returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getTimeEventRule(), currentNode); }
	 iv_ruleTimeEvent=ruleTimeEvent 
	 { $current=$iv_ruleTimeEvent.current; } 
	 EOF 
;

// Rule TimeEvent
ruleTimeEvent returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('after' 
    {
        createLeafNode(grammarAccess.getTimeEventAccess().getAfterKeyword_0(), null); 
    }
'(' 
    {
        createLeafNode(grammarAccess.getTimeEventAccess().getLeftParenthesisKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getTimeEventAccess().getDurationTimeExpressionParserRuleCall_2_0(), currentNode); 
	    }
	    lv_duration_2=ruleTimeExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTimeEventRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "duration", lv_duration_2, "TimeExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)')' 
    {
        createLeafNode(grammarAccess.getTimeEventAccess().getRightParenthesisKeyword_3(), null); 
    }
);





// Entry rule entryRuleTimeExpression
entryRuleTimeExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getTimeExpressionRule(), currentNode); }
	 iv_ruleTimeExpression=ruleTimeExpression 
	 { $current=$iv_ruleTimeExpression.current; } 
	 EOF 
;

// Rule TimeExpression
ruleTimeExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getTimeExpressionAccess().getTimeConstantParserRuleCall_0(), currentNode); 
    }
    this_TimeConstant_0=ruleTimeConstant
    { 
        $current = $this_TimeConstant_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTimeExpressionAccess().getVariableReferenceParserRuleCall_1(), currentNode); 
    }
    this_VariableReference_1=ruleVariableReference
    { 
        $current = $this_VariableReference_1.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleVariableReference
entryRuleVariableReference returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getVariableReferenceRule(), currentNode); }
	 iv_ruleVariableReference=ruleVariableReference 
	 { $current=$iv_ruleVariableReference.current; } 
	 EOF 
;

// Rule VariableReference
ruleVariableReference returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getVariableReferenceAccess().getVariableVariableParserRuleCall_0_0(), currentNode); 
	    }
	    lv_variable_0=ruleVariable 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "variable", lv_variable_0, "Variable", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |('var' 
    {
        createLeafNode(grammarAccess.getVariableReferenceAccess().getVarKeyword_1_0(), null); 
    }
'(' 
    {
        createLeafNode(grammarAccess.getVariableReferenceAccess().getLeftParenthesisKeyword_1_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getVariableReferenceAccess().getVariableVariableParserRuleCall_1_2_0(), currentNode); 
	    }
	    lv_variable_3=ruleVariable 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "variable", lv_variable_3, "Variable", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)')' 
    {
        createLeafNode(grammarAccess.getVariableReferenceAccess().getRightParenthesisKeyword_1_3(), null); 
    }
));





// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getVariableRule(), currentNode); }
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current; } 
	 EOF 
;

// Rule Variable
ruleVariable returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    lv_identifier_0=	RULE_ID
	{
		createLeafNode(grammarAccess.getVariableAccess().getIdentifierIDTerminalRuleCall_0(), "identifier"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "identifier", lv_identifier_0, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
);





// Entry rule entryRuleTimeConstant
entryRuleTimeConstant returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getTimeConstantRule(), currentNode); }
	 iv_ruleTimeConstant=ruleTimeConstant 
	 { $current=$iv_ruleTimeConstant.current; } 
	 EOF 
;

// Rule TimeConstant
ruleTimeConstant returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_value_0=	RULE_INT
	{
		createLeafNode(grammarAccess.getTimeConstantAccess().getValueINTTerminalRuleCall_0_0(), "value"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTimeConstantRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_0, "INT", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getTimeConstantAccess().getUnitTimeUnitEnumRuleCall_1_0(), currentNode); 
	    }
	    lv_unit_1=ruleTimeUnit 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTimeConstantRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "unit", lv_unit_1, "TimeUnit", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?);





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getStatementRule(), currentNode); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getVariableAssignmentParserRuleCall_0_0(), currentNode); 
    }
    this_VariableAssignment_0=ruleVariableAssignment
    { 
        $current = $this_VariableAssignment_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getEventRaisingParserRuleCall_0_1(), currentNode); 
    }
    this_EventRaising_1=ruleEventRaising
    { 
        $current = $this_EventRaising_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getProcedureCallParserRuleCall_0_2(), currentNode); 
    }
    this_ProcedureCall_2=ruleProcedureCall
    { 
        $current = $this_ProcedureCall_2.current; 
        currentNode = currentNode.getParent();
    }
)';' 
    {
        createLeafNode(grammarAccess.getStatementAccess().getSemicolonKeyword_1(), null); 
    }
);





// Entry rule entryRuleVariableAssignment
entryRuleVariableAssignment returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getVariableAssignmentRule(), currentNode); }
	 iv_ruleVariableAssignment=ruleVariableAssignment 
	 { $current=$iv_ruleVariableAssignment.current; } 
	 EOF 
;

// Rule VariableAssignment
ruleVariableAssignment returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getVariableAssignmentAccess().getVariableReferenceVariableReferenceParserRuleCall_0_0(), currentNode); 
	    }
	    lv_variableReference_0=ruleVariableReference 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableAssignmentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "variableReference", lv_variableReference_0, "VariableReference", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getVariableAssignmentAccess().getOperatorAssignmentOperatorEnumRuleCall_1_0(), currentNode); 
	    }
	    lv_operator_1=ruleAssignmentOperator 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableAssignmentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "operator", lv_operator_1, "AssignmentOperator", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getVariableAssignmentAccess().getValueConditionalExpressionParserRuleCall_2_0(), currentNode); 
	    }
	    lv_value_2=ruleConditionalExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableAssignmentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_2, "ConditionalExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleProcedureCall
entryRuleProcedureCall returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getProcedureCallRule(), currentNode); }
	 iv_ruleProcedureCall=ruleProcedureCall 
	 { $current=$iv_ruleProcedureCall.current; } 
	 EOF 
;

// Rule ProcedureCall
ruleProcedureCall returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getProcedureCallAccess().getProcedureProcedureParserRuleCall_0_0(), currentNode); 
	    }
	    lv_procedure_0=ruleProcedure 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProcedureCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "procedure", lv_procedure_0, "Procedure", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'(' 
    {
        createLeafNode(grammarAccess.getProcedureCallAccess().getLeftParenthesisKeyword_1(), null); 
    }
')' 
    {
        createLeafNode(grammarAccess.getProcedureCallAccess().getRightParenthesisKeyword_2(), null); 
    }
);





// Entry rule entryRuleProcedure
entryRuleProcedure returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getProcedureRule(), currentNode); }
	 iv_ruleProcedure=ruleProcedure 
	 { $current=$iv_ruleProcedure.current; } 
	 EOF 
;

// Rule Procedure
ruleProcedure returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    lv_identifier_0=	RULE_ID
	{
		createLeafNode(grammarAccess.getProcedureAccess().getIdentifierIDTerminalRuleCall_0(), "identifier"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProcedureRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "identifier", lv_identifier_0, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
);





// Entry rule entryRuleEventRaising
entryRuleEventRaising returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getEventRaisingRule(), currentNode); }
	 iv_ruleEventRaising=ruleEventRaising 
	 { $current=$iv_ruleEventRaising.current; } 
	 EOF 
;

// Rule EventRaising
ruleEventRaising returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('raise' 
    {
        createLeafNode(grammarAccess.getEventRaisingAccess().getRaiseKeyword_0(), null); 
    }
'(' 
    {
        createLeafNode(grammarAccess.getEventRaisingAccess().getLeftParenthesisKeyword_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getEventRaisingAccess().getEventSignalEventParserRuleCall_2_0(), currentNode); 
	    }
	    lv_event_2=ruleSignalEvent 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEventRaisingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "event", lv_event_2, "SignalEvent", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)')' 
    {
        createLeafNode(grammarAccess.getEventRaisingAccess().getRightParenthesisKeyword_3(), null); 
    }
);





// Entry rule entryRuleBooleanOrExpression
entryRuleBooleanOrExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getBooleanOrExpressionRule(), currentNode); }
	 iv_ruleBooleanOrExpression=ruleBooleanOrExpression 
	 { $current=$iv_ruleBooleanOrExpression.current; } 
	 EOF 
;

// Rule BooleanOrExpression
ruleBooleanOrExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBooleanOrExpressionAccess().getOperand1BooleanAndExpressionParserRuleCall_0_0(), currentNode); 
	    }
	    lv_operand1_0=ruleBooleanAndExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBooleanOrExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "operand1", lv_operand1_0, "BooleanAndExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)('||' 
    {
        createLeafNode(grammarAccess.getBooleanOrExpressionAccess().getVerticalLineVerticalLineKeyword_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBooleanOrExpressionAccess().getOperand2BooleanAndExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_operand2_2=ruleBooleanAndExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBooleanOrExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "operand2", lv_operand2_2, "BooleanAndExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleBooleanAndExpression
entryRuleBooleanAndExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getBooleanAndExpressionRule(), currentNode); }
	 iv_ruleBooleanAndExpression=ruleBooleanAndExpression 
	 { $current=$iv_ruleBooleanAndExpression.current; } 
	 EOF 
;

// Rule BooleanAndExpression
ruleBooleanAndExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBooleanAndExpressionAccess().getOperand1BitwiseXorExpressionParserRuleCall_0_0(), currentNode); 
	    }
	    lv_operand1_0=ruleBitwiseXorExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBooleanAndExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "operand1", lv_operand1_0, "BitwiseXorExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)('&&' 
    {
        createLeafNode(grammarAccess.getBooleanAndExpressionAccess().getAmpersandAmpersandKeyword_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBooleanAndExpressionAccess().getOperand2BitwiseXorExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_operand2_2=ruleBitwiseXorExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBooleanAndExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "operand2", lv_operand2_2, "BitwiseXorExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleBitwiseXorExpression
entryRuleBitwiseXorExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getBitwiseXorExpressionRule(), currentNode); }
	 iv_ruleBitwiseXorExpression=ruleBitwiseXorExpression 
	 { $current=$iv_ruleBitwiseXorExpression.current; } 
	 EOF 
;

// Rule BitwiseXorExpression
ruleBitwiseXorExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBitwiseXorExpressionAccess().getOperand1BitwiseOrExpressionParserRuleCall_0_0(), currentNode); 
	    }
	    lv_operand1_0=ruleBitwiseOrExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBitwiseXorExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "operand1", lv_operand1_0, "BitwiseOrExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)('^' 
    {
        createLeafNode(grammarAccess.getBitwiseXorExpressionAccess().getCircumflexAccentKeyword_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBitwiseXorExpressionAccess().getOperand2BitwiseOrExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_operand2_2=ruleBitwiseOrExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBitwiseXorExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "operand2", lv_operand2_2, "BitwiseOrExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleBitwiseOrExpression
entryRuleBitwiseOrExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getBitwiseOrExpressionRule(), currentNode); }
	 iv_ruleBitwiseOrExpression=ruleBitwiseOrExpression 
	 { $current=$iv_ruleBitwiseOrExpression.current; } 
	 EOF 
;

// Rule BitwiseOrExpression
ruleBitwiseOrExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBitwiseOrExpressionAccess().getOperand1BitwiseAndExpressionParserRuleCall_0_0(), currentNode); 
	    }
	    lv_operand1_0=ruleBitwiseAndExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBitwiseOrExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "operand1", lv_operand1_0, "BitwiseAndExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)('|' 
    {
        createLeafNode(grammarAccess.getBitwiseOrExpressionAccess().getVerticalLineKeyword_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBitwiseOrExpressionAccess().getOperand2BitwiseAndExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_operand2_2=ruleBitwiseAndExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBitwiseOrExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "operand2", lv_operand2_2, "BitwiseAndExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleBitwiseAndExpression
entryRuleBitwiseAndExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getBitwiseAndExpressionRule(), currentNode); }
	 iv_ruleBitwiseAndExpression=ruleBitwiseAndExpression 
	 { $current=$iv_ruleBitwiseAndExpression.current; } 
	 EOF 
;

// Rule BitwiseAndExpression
ruleBitwiseAndExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBitwiseAndExpressionAccess().getOperand1EqualityExpressionParserRuleCall_0_0(), currentNode); 
	    }
	    lv_operand1_0=ruleEqualityExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBitwiseAndExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "operand1", lv_operand1_0, "EqualityExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)('&' 
    {
        createLeafNode(grammarAccess.getBitwiseAndExpressionAccess().getAmpersandKeyword_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getBitwiseAndExpressionAccess().getOperand2EqualityExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_operand2_2=ruleEqualityExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBitwiseAndExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "operand2", lv_operand2_2, "EqualityExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getEqualityExpressionRule(), currentNode); }
	 iv_ruleEqualityExpression=ruleEqualityExpression 
	 { $current=$iv_ruleEqualityExpression.current; } 
	 EOF 
;

// Rule EqualityExpression
ruleEqualityExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getEqualityExpressionAccess().getOperand1RelationalExpressionParserRuleCall_0_0(), currentNode); 
	    }
	    lv_operand1_0=ruleRelationalExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEqualityExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "operand1", lv_operand1_0, "RelationalExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getEqualityExpressionAccess().getOperatorEqualityOperatorEnumRuleCall_1_0_0(), currentNode); 
	    }
	    lv_operator_1=ruleEqualityOperator 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEqualityExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "operator", lv_operator_1, "EqualityOperator", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getEqualityExpressionAccess().getOperand2RelationalExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_operand2_2=ruleRelationalExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEqualityExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "operand2", lv_operand2_2, "RelationalExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getRelationalExpressionRule(), currentNode); }
	 iv_ruleRelationalExpression=ruleRelationalExpression 
	 { $current=$iv_ruleRelationalExpression.current; } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getOperand1ShiftExpressionParserRuleCall_0_0(), currentNode); 
	    }
	    lv_operand1_0=ruleShiftExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "operand1", lv_operand1_0, "ShiftExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getOperatorRelationalOperatorEnumRuleCall_1_0_0(), currentNode); 
	    }
	    lv_operator_1=ruleRelationalOperator 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "operator", lv_operator_1, "RelationalOperator", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getOperand2ShiftExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_operand2_2=ruleShiftExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "operand2", lv_operand2_2, "ShiftExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleConditionalExpression
entryRuleConditionalExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getConditionalExpressionRule(), currentNode); }
	 iv_ruleConditionalExpression=ruleConditionalExpression 
	 { $current=$iv_ruleConditionalExpression.current; } 
	 EOF 
;

// Rule ConditionalExpression
ruleConditionalExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getConditionalExpressionAccess().getOperand1BooleanOrExpressionParserRuleCall_0_0(), currentNode); 
	    }
	    lv_operand1_0=ruleBooleanOrExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditionalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "operand1", lv_operand1_0, "BooleanOrExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)('?' 
    {
        createLeafNode(grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getConditionalExpressionAccess().getOperand2ShiftExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_operand2_2=ruleShiftExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditionalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "operand2", lv_operand2_2, "ShiftExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)':' 
    {
        createLeafNode(grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getConditionalExpressionAccess().getOperand3ShiftExpressionParserRuleCall_1_3_0(), currentNode); 
	    }
	    lv_operand3_4=ruleShiftExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditionalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "operand3", lv_operand3_4, "ShiftExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?);





// Entry rule entryRuleShiftExpression
entryRuleShiftExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getShiftExpressionRule(), currentNode); }
	 iv_ruleShiftExpression=ruleShiftExpression 
	 { $current=$iv_ruleShiftExpression.current; } 
	 EOF 
;

// Rule ShiftExpression
ruleShiftExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getShiftExpressionAccess().getOperand1AdditiveExpressionParserRuleCall_0_0(), currentNode); 
	    }
	    lv_operand1_0=ruleAdditiveExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getShiftExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "operand1", lv_operand1_0, "AdditiveExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getShiftExpressionAccess().getOperatorShiftOperatorEnumRuleCall_1_0_0(), currentNode); 
	    }
	    lv_operator_1=ruleShiftOperator 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getShiftExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "operator", lv_operator_1, "ShiftOperator", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getShiftExpressionAccess().getOperand2AdditiveExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_operand2_2=ruleAdditiveExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getShiftExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "operand2", lv_operand2_2, "AdditiveExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAdditiveExpressionRule(), currentNode); }
	 iv_ruleAdditiveExpression=ruleAdditiveExpression 
	 { $current=$iv_ruleAdditiveExpression.current; } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAdditiveExpressionAccess().getOperand1MultiplicativeExpressionParserRuleCall_0_0(), currentNode); 
	    }
	    lv_operand1_0=ruleMultiplicativeExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditiveExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "operand1", lv_operand1_0, "MultiplicativeExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAdditiveExpressionAccess().getOperatorAdditiveOperatorEnumRuleCall_1_0_0(), currentNode); 
	    }
	    lv_operator_1=ruleAdditiveOperator 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditiveExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "operator", lv_operator_1, "AdditiveOperator", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAdditiveExpressionAccess().getOperand2MultiplicativeExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_operand2_2=ruleMultiplicativeExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditiveExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "operand2", lv_operand2_2, "MultiplicativeExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getMultiplicativeExpressionRule(), currentNode); }
	 iv_ruleMultiplicativeExpression=ruleMultiplicativeExpression 
	 { $current=$iv_ruleMultiplicativeExpression.current; } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getOperand1UnaryExpressionParserRuleCall_0_0(), currentNode); 
	    }
	    lv_operand1_0=ruleUnaryExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "operand1", lv_operand1_0, "UnaryExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getOperatorMultiplicativeOperatorEnumRuleCall_1_0_0(), currentNode); 
	    }
	    lv_operator_1=ruleMultiplicativeOperator 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "operator", lv_operator_1, "MultiplicativeOperator", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getOperand2UnaryExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_operand2_2=ruleUnaryExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "operand2", lv_operand2_2, "UnaryExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getUnaryExpressionRule(), currentNode); }
	 iv_ruleUnaryExpression=ruleUnaryExpression 
	 { $current=$iv_ruleUnaryExpression.current; } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnaryExpressionAccess().getOperatorUnaryOperatorEnumRuleCall_0_0(), currentNode); 
	    }
	    lv_operator_0=ruleUnaryOperator 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "operator", lv_operator_0, "UnaryOperator", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getUnaryExpressionAccess().getOperandPrimaryExpressionParserRuleCall_1_0(), currentNode); 
	    }
	    lv_operand_1=rulePrimaryExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "operand", lv_operand_1, "PrimaryExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPrimaryExpressionRule(), currentNode); }
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current; } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getVariableReferenceParserRuleCall_0(), currentNode); 
    }
    this_VariableReference_0=ruleVariableReference
    { 
        $current = $this_VariableReference_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLiteralValueParserRuleCall_1(), currentNode); 
    }
    this_LiteralValue_1=ruleLiteralValue
    { 
        $current = $this_LiteralValue_1.current; 
        currentNode = currentNode.getParent();
    }

    |('(' 
    {
        createLeafNode(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_2_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getNestedExpressionParserRuleCall_2_1(), currentNode); 
    }
    this_NestedExpression_3=ruleNestedExpression
    { 
        $current = $this_NestedExpression_3.current; 
        currentNode = currentNode.getParent();
    }
')' 
    {
        createLeafNode(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_2_2(), null); 
    }
));





// Entry rule entryRuleNestedExpression
entryRuleNestedExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getNestedExpressionRule(), currentNode); }
	 iv_ruleNestedExpression=ruleNestedExpression 
	 { $current=$iv_ruleNestedExpression.current; } 
	 EOF 
;

// Rule NestedExpression
ruleNestedExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getNestedExpressionAccess().getExpressionConditionalExpressionParserRuleCall_0(), currentNode); 
	    }
	    lv_expression_0=ruleConditionalExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNestedExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "expression", lv_expression_0, "ConditionalExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
);





// Entry rule entryRuleLiteralValue
entryRuleLiteralValue returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getLiteralValueRule(), currentNode); }
	 iv_ruleLiteralValue=ruleLiteralValue 
	 { $current=$iv_ruleLiteralValue.current; } 
	 EOF 
;

// Rule LiteralValue
ruleLiteralValue returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getLiteralValueAccess().getValueLiteralParserRuleCall_0(), currentNode); 
	    }
	    lv_value_0=ruleLiteral 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_0, "Literal", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
);





// Entry rule entryRuleLiteral
entryRuleLiteral returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getLiteralRule(), currentNode); } 
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current.getText(); }  
	 EOF 
;

// Rule Literal
ruleLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(    this_HEX_LITERAL_0=RULE_HEX_LITERAL    {
		$current.merge(this_HEX_LITERAL_0);
    }

    { 
    createLeafNode(grammarAccess.getLiteralAccess().getHEX_LITERALTerminalRuleCall_0(), null); 
    }

    |    this_BOOLEAN_LITERAL_1=RULE_BOOLEAN_LITERAL    {
		$current.merge(this_BOOLEAN_LITERAL_1);
    }

    { 
    createLeafNode(grammarAccess.getLiteralAccess().getBOOLEAN_LITERALTerminalRuleCall_1(), null); 
    }

    |    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    createLeafNode(grammarAccess.getLiteralAccess().getINTTerminalRuleCall_2(), null); 
    }

    |    this_STRING_3=RULE_STRING    {
		$current.merge(this_STRING_3);
    }

    { 
    createLeafNode(grammarAccess.getLiteralAccess().getSTRINGTerminalRuleCall_3(), null); 
    }

    |    this_FLOATING_POINT_LITERAL_4=RULE_FLOATING_POINT_LITERAL    {
		$current.merge(this_FLOATING_POINT_LITERAL_4);
    }

    { 
    createLeafNode(grammarAccess.getLiteralAccess().getFLOATING_POINT_LITERALTerminalRuleCall_4(), null); 
    }
)
    ;





// Rule TimeUnit
ruleTimeUnit returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	's' 
	{
        $current = grammarAccess.getTimeUnitAccess().getSecondEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getTimeUnitAccess().getSecondEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'ms' 
	{
        $current = grammarAccess.getTimeUnitAccess().getMillisecondEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getTimeUnitAccess().getMillisecondEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'ns' 
	{
        $current = grammarAccess.getTimeUnitAccess().getNanosecondEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getTimeUnitAccess().getNanosecondEnumLiteralDeclaration_2(), null); 
    }
));



// Rule AssignmentOperator
ruleAssignmentOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getAssignEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getAssignEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'*=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getMultAssignEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getMultAssignEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'/=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getDivAssignEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getDivAssignEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'%=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getModAssignEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getModAssignEnumLiteralDeclaration_3(), null); 
    }
)
    |(	'+=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getAddAssignEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getAddAssignEnumLiteralDeclaration_4(), null); 
    }
)
    |(	'-=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getSubAssignEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getSubAssignEnumLiteralDeclaration_5(), null); 
    }
)
    |(	'<<=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getLeftShiftAssignEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getLeftShiftAssignEnumLiteralDeclaration_6(), null); 
    }
)
    |(	'>>=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getRightShiftAssignEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getRightShiftAssignEnumLiteralDeclaration_7(), null); 
    }
)
    |(	'&=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getAndAssignEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getAndAssignEnumLiteralDeclaration_8(), null); 
    }
)
    |(	'^=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getXorAssignEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getXorAssignEnumLiteralDeclaration_9(), null); 
    }
)
    |(	'|=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getOrAssignEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getOrAssignEnumLiteralDeclaration_10(), null); 
    }
));



// Rule EqualityOperator
ruleEqualityOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'==' 
	{
        $current = grammarAccess.getEqualityOperatorAccess().getEqualsEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getEqualityOperatorAccess().getEqualsEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'!=' 
	{
        $current = grammarAccess.getEqualityOperatorAccess().getNotEqualsEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getEqualityOperatorAccess().getNotEqualsEnumLiteralDeclaration_1(), null); 
    }
));



// Rule RelationalOperator
ruleRelationalOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'<' 
	{
        $current = grammarAccess.getRelationalOperatorAccess().getSmallerEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationalOperatorAccess().getSmallerEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'>' 
	{
        $current = grammarAccess.getRelationalOperatorAccess().getGreaterEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationalOperatorAccess().getGreaterEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'<=' 
	{
        $current = grammarAccess.getRelationalOperatorAccess().getSmallerEqualEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationalOperatorAccess().getSmallerEqualEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'>=' 
	{
        $current = grammarAccess.getRelationalOperatorAccess().getGreaterEqualEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRelationalOperatorAccess().getGreaterEqualEnumLiteralDeclaration_3(), null); 
    }
));



// Rule ShiftOperator
ruleShiftOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'<<' 
	{
        $current = grammarAccess.getShiftOperatorAccess().getLeftEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getShiftOperatorAccess().getLeftEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'>>' 
	{
        $current = grammarAccess.getShiftOperatorAccess().getRightEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getShiftOperatorAccess().getRightEnumLiteralDeclaration_1(), null); 
    }
));



// Rule AdditiveOperator
ruleAdditiveOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'+' 
	{
        $current = grammarAccess.getAdditiveOperatorAccess().getPlusEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAdditiveOperatorAccess().getPlusEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'-' 
	{
        $current = grammarAccess.getAdditiveOperatorAccess().getMinusEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAdditiveOperatorAccess().getMinusEnumLiteralDeclaration_1(), null); 
    }
));



// Rule MultiplicativeOperator
ruleMultiplicativeOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'*' 
	{
        $current = grammarAccess.getMultiplicativeOperatorAccess().getMulEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getMultiplicativeOperatorAccess().getMulEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'/' 
	{
        $current = grammarAccess.getMultiplicativeOperatorAccess().getDivEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getMultiplicativeOperatorAccess().getDivEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'%' 
	{
        $current = grammarAccess.getMultiplicativeOperatorAccess().getModEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getMultiplicativeOperatorAccess().getModEnumLiteralDeclaration_2(), null); 
    }
));



// Rule UnaryOperator
ruleUnaryOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'+' 
	{
        $current = grammarAccess.getUnaryOperatorAccess().getPositiveEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getUnaryOperatorAccess().getPositiveEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'-' 
	{
        $current = grammarAccess.getUnaryOperatorAccess().getNegativeEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getUnaryOperatorAccess().getNegativeEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'~' 
	{
        $current = grammarAccess.getUnaryOperatorAccess().getComplementEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getUnaryOperatorAccess().getComplementEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'!' 
	{
        $current = grammarAccess.getUnaryOperatorAccess().getNotEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getUnaryOperatorAccess().getNotEnumLiteralDeclaration_3(), null); 
    }
));



RULE_BOOLEAN_LITERAL : ('true'|'false');

RULE_HEX_LITERAL : '0' ('x'|'X') ('0'..'9'|'a'..'f'|'A'..'F')+;

RULE_FLOATING_POINT_LITERAL : ('0'..'9')* '.' ('0'..'9')* (('e'|'E') ('+'|'-')? ('0'..'9')+)? ('f'|'F'|'d'|'D')?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


