/**
 * Copyright (c) 2010 committers of YAKINDU and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     committers of YAKINDU - initial API and implementation
 */
/*
* generated by Xtext
*/

package com.yakindu.statechart.model.expressions.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class StatechartExpressionsGrammarAccess implements IGrammarAccess {
	
	
	public class ExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTriggerExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGuardExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cActionExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Expression:
		//  TriggerExpression|GuardExpression|ActionExpression; 
		//
		//// specify your DSL grammar rules here ...
		//// IMPORTANT: You should change the property 'overwrite.pluginresources=true' in the properties file to 'overwrite.pluginresources=false' AFTER first generation
		public ParserRule getRule() { return rule; }

		//TriggerExpression|GuardExpression|ActionExpression 
		//
		//// specify your DSL grammar rules here ...
		//// IMPORTANT: You should change the property 'overwrite.pluginresources=true' in the properties file to 'overwrite.pluginresources=false' AFTER first generation
		public Alternatives getAlternatives() { return cAlternatives; }

		//TriggerExpression
		public RuleCall getTriggerExpressionParserRuleCall_0() { return cTriggerExpressionParserRuleCall_0; }

		//GuardExpression
		public RuleCall getGuardExpressionParserRuleCall_1() { return cGuardExpressionParserRuleCall_1; }

		//ActionExpression
		public RuleCall getActionExpressionParserRuleCall_2() { return cActionExpressionParserRuleCall_2; }
	}

	public class TriggerExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TriggerExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTriggersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTriggersTriggerParserRuleCall_0_0 = (RuleCall)cTriggersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTriggersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTriggersTriggerParserRuleCall_1_1_0 = (RuleCall)cTriggersAssignment_1_1.eContents().get(0);
		
		//TriggerExpression:
		//  triggers+=Trigger ("," triggers+=Trigger)*;
		public ParserRule getRule() { return rule; }

		//triggers+=Trigger ("," triggers+=Trigger)*
		public Group getGroup() { return cGroup; }

		//triggers+=Trigger
		public Assignment getTriggersAssignment_0() { return cTriggersAssignment_0; }

		//Trigger
		public RuleCall getTriggersTriggerParserRuleCall_0_0() { return cTriggersTriggerParserRuleCall_0_0; }

		//("," triggers+=Trigger)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//triggers+=Trigger
		public Assignment getTriggersAssignment_1_1() { return cTriggersAssignment_1_1; }

		//Trigger
		public RuleCall getTriggersTriggerParserRuleCall_1_1_0() { return cTriggersTriggerParserRuleCall_1_1_0; }
	}

	public class GuardExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GuardExpression");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionBooleanOrExpressionParserRuleCall_0 = (RuleCall)cExpressionAssignment.eContents().get(0);
		
		//GuardExpression:
		//  expression=BooleanOrExpression;
		public ParserRule getRule() { return rule; }

		//expression=BooleanOrExpression
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }

		//BooleanOrExpression
		public RuleCall getExpressionBooleanOrExpressionParserRuleCall_0() { return cExpressionBooleanOrExpressionParserRuleCall_0; }
	}

	public class ActionExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActionExpression");
		private final Assignment cStatementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_0 = (RuleCall)cStatementAssignment.eContents().get(0);
		
		//ActionExpression:
		//  statement+=Statement+;
		public ParserRule getRule() { return rule; }

		//statement+=Statement+
		public Assignment getStatementAssignment() { return cStatementAssignment; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_0() { return cStatementStatementParserRuleCall_0; }
	}

	public class TriggerElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Trigger");
		private final Assignment cEventAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cEventEventParserRuleCall_0 = (RuleCall)cEventAssignment.eContents().get(0);
		
		//Trigger:
		//  event=Event;
		public ParserRule getRule() { return rule; }

		//event=Event
		public Assignment getEventAssignment() { return cEventAssignment; }

		//Event
		public RuleCall getEventEventParserRuleCall_0() { return cEventEventParserRuleCall_0; }
	}

	public class EventElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Event");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSignalEventParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTimeEventParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Event:
		//  SignalEvent|TimeEvent;
		public ParserRule getRule() { return rule; }

		//SignalEvent|TimeEvent
		public Alternatives getAlternatives() { return cAlternatives; }

		//SignalEvent
		public RuleCall getSignalEventParserRuleCall_0() { return cSignalEventParserRuleCall_0; }

		//TimeEvent
		public RuleCall getTimeEventParserRuleCall_1() { return cTimeEventParserRuleCall_1; }
	}

	public class SignalEventElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignalEvent");
		private final Assignment cIdentifierAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_0 = (RuleCall)cIdentifierAssignment.eContents().get(0);
		
		//SignalEvent:
		//  identifier=ID;
		public ParserRule getRule() { return rule; }

		//identifier=ID
		public Assignment getIdentifierAssignment() { return cIdentifierAssignment; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_0() { return cIdentifierIDTerminalRuleCall_0; }
	}

	public class TimeEventElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimeEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAfterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDurationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDurationTimeExpressionParserRuleCall_2_0 = (RuleCall)cDurationAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TimeEvent:
		//  "after" "(" duration=TimeExpression ")";
		public ParserRule getRule() { return rule; }

		//"after" "(" duration=TimeExpression ")"
		public Group getGroup() { return cGroup; }

		//"after"
		public Keyword getAfterKeyword_0() { return cAfterKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//duration=TimeExpression
		public Assignment getDurationAssignment_2() { return cDurationAssignment_2; }

		//TimeExpression
		public RuleCall getDurationTimeExpressionParserRuleCall_2_0() { return cDurationTimeExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class TimeExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimeExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTimeConstantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TimeExpression:
		//  TimeConstant|VariableReference;
		public ParserRule getRule() { return rule; }

		//TimeConstant|VariableReference
		public Alternatives getAlternatives() { return cAlternatives; }

		//TimeConstant
		public RuleCall getTimeConstantParserRuleCall_0() { return cTimeConstantParserRuleCall_0; }

		//VariableReference
		public RuleCall getVariableReferenceParserRuleCall_1() { return cVariableReferenceParserRuleCall_1; }
	}

	public class VariableReferenceElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVariableVariableParserRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cVarKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cVariableAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cVariableVariableParserRuleCall_1_2_0 = (RuleCall)cVariableAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//VariableReference:
		//  variable=Variable|"var" "(" variable=Variable ")"; 
		//
		// 
		//       
		//               // backwards compatibility
		public ParserRule getRule() { return rule; }

		//variable=Variable|"var" "(" variable=Variable ")" 
		//
		// 
		//       
		//               // backwards compatibility
		public Alternatives getAlternatives() { return cAlternatives; }

		//variable=Variable
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }

		//Variable
		public RuleCall getVariableVariableParserRuleCall_0_0() { return cVariableVariableParserRuleCall_0_0; }

		//"var" "(" variable=Variable ")"        
		//               // backwards compatibility
		public Group getGroup_1() { return cGroup_1; }

		//"var"
		public Keyword getVarKeyword_1_0() { return cVarKeyword_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//variable=Variable
		public Assignment getVariableAssignment_1_2() { return cVariableAssignment_1_2; }

		//Variable
		public RuleCall getVariableVariableParserRuleCall_1_2_0() { return cVariableVariableParserRuleCall_1_2_0; }

		//")"     // backwards compatibility
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}

	public class VariableElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Assignment cIdentifierAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_0 = (RuleCall)cIdentifierAssignment.eContents().get(0);
		
		//Variable:
		//  identifier=ID;
		public ParserRule getRule() { return rule; }

		//identifier=ID
		public Assignment getIdentifierAssignment() { return cIdentifierAssignment; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_0() { return cIdentifierIDTerminalRuleCall_0; }
	}

	public class TimeConstantElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimeConstant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUnitTimeUnitEnumRuleCall_1_0 = (RuleCall)cUnitAssignment_1.eContents().get(0);
		
		//TimeConstant:
		//  value=INT unit=TimeUnit?;
		public ParserRule getRule() { return rule; }

		//value=INT unit=TimeUnit?
		public Group getGroup() { return cGroup; }

		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }

		//unit=TimeUnit?
		public Assignment getUnitAssignment_1() { return cUnitAssignment_1; }

		//TimeUnit
		public RuleCall getUnitTimeUnitEnumRuleCall_1_0() { return cUnitTimeUnitEnumRuleCall_1_0; }
	}

	public class StatementElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cVariableAssignmentParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cEventRaisingParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cProcedureCallParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Statement:
		//  (VariableAssignment|EventRaising|ProcedureCall) ";";
		public ParserRule getRule() { return rule; }

		//(VariableAssignment|EventRaising|ProcedureCall) ";"
		public Group getGroup() { return cGroup; }

		//VariableAssignment|EventRaising|ProcedureCall
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//VariableAssignment
		public RuleCall getVariableAssignmentParserRuleCall_0_0() { return cVariableAssignmentParserRuleCall_0_0; }

		//EventRaising
		public RuleCall getEventRaisingParserRuleCall_0_1() { return cEventRaisingParserRuleCall_0_1; }

		//ProcedureCall
		public RuleCall getProcedureCallParserRuleCall_0_2() { return cProcedureCallParserRuleCall_0_2; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class VariableAssignmentElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableReferenceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableReferenceVariableReferenceParserRuleCall_0_0 = (RuleCall)cVariableReferenceAssignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorAssignmentOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueConditionalExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//VariableAssignment:
		//  variableReference=VariableReference operator=AssignmentOperator value=
		//  ConditionalExpression;
		public ParserRule getRule() { return rule; }

		//variableReference=VariableReference operator=AssignmentOperator value=
		//ConditionalExpression
		public Group getGroup() { return cGroup; }

		//variableReference=VariableReference
		public Assignment getVariableReferenceAssignment_0() { return cVariableReferenceAssignment_0; }

		//VariableReference
		public RuleCall getVariableReferenceVariableReferenceParserRuleCall_0_0() { return cVariableReferenceVariableReferenceParserRuleCall_0_0; }

		//operator=AssignmentOperator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//AssignmentOperator
		public RuleCall getOperatorAssignmentOperatorEnumRuleCall_1_0() { return cOperatorAssignmentOperatorEnumRuleCall_1_0; }

		//value=ConditionalExpression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//ConditionalExpression
		public RuleCall getValueConditionalExpressionParserRuleCall_2_0() { return cValueConditionalExpressionParserRuleCall_2_0; }
	}

	public class ProcedureCallElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProcedureCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProcedureAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cProcedureProcedureParserRuleCall_0_0 = (RuleCall)cProcedureAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ProcedureCall:
		//  procedure=Procedure "(" ")";
		public ParserRule getRule() { return rule; }

		//procedure=Procedure "(" ")"
		public Group getGroup() { return cGroup; }

		//procedure=Procedure
		public Assignment getProcedureAssignment_0() { return cProcedureAssignment_0; }

		//Procedure
		public RuleCall getProcedureProcedureParserRuleCall_0_0() { return cProcedureProcedureParserRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class ProcedureElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Procedure");
		private final Assignment cIdentifierAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_0 = (RuleCall)cIdentifierAssignment.eContents().get(0);
		
		//Procedure:
		//  identifier=ID;
		public ParserRule getRule() { return rule; }

		//identifier=ID
		public Assignment getIdentifierAssignment() { return cIdentifierAssignment; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_0() { return cIdentifierIDTerminalRuleCall_0; }
	}

	public class EventRaisingElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventRaising");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRaiseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEventAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEventSignalEventParserRuleCall_2_0 = (RuleCall)cEventAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//EventRaising:
		//  "raise" "(" event=SignalEvent ")";
		public ParserRule getRule() { return rule; }

		//"raise" "(" event=SignalEvent ")"
		public Group getGroup() { return cGroup; }

		//"raise"
		public Keyword getRaiseKeyword_0() { return cRaiseKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//event=SignalEvent
		public Assignment getEventAssignment_2() { return cEventAssignment_2; }

		//SignalEvent
		public RuleCall getEventSignalEventParserRuleCall_2_0() { return cEventSignalEventParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class BooleanOrExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperand1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperand1BooleanAndExpressionParserRuleCall_0_0 = (RuleCall)cOperand1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOperand2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperand2BooleanAndExpressionParserRuleCall_1_1_0 = (RuleCall)cOperand2Assignment_1_1.eContents().get(0);
		
		//BooleanOrExpression:
		//  operand1=BooleanAndExpression ("||" operand2=BooleanAndExpression)*;
		public ParserRule getRule() { return rule; }

		//operand1=BooleanAndExpression ("||" operand2=BooleanAndExpression)*
		public Group getGroup() { return cGroup; }

		//operand1=BooleanAndExpression
		public Assignment getOperand1Assignment_0() { return cOperand1Assignment_0; }

		//BooleanAndExpression
		public RuleCall getOperand1BooleanAndExpressionParserRuleCall_0_0() { return cOperand1BooleanAndExpressionParserRuleCall_0_0; }

		//("||" operand2=BooleanAndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_0() { return cVerticalLineVerticalLineKeyword_1_0; }

		//operand2=BooleanAndExpression
		public Assignment getOperand2Assignment_1_1() { return cOperand2Assignment_1_1; }

		//BooleanAndExpression
		public RuleCall getOperand2BooleanAndExpressionParserRuleCall_1_1_0() { return cOperand2BooleanAndExpressionParserRuleCall_1_1_0; }
	}

	public class BooleanAndExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperand1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperand1BitwiseXorExpressionParserRuleCall_0_0 = (RuleCall)cOperand1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAmpersandAmpersandKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOperand2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperand2BitwiseXorExpressionParserRuleCall_1_1_0 = (RuleCall)cOperand2Assignment_1_1.eContents().get(0);
		
		//BooleanAndExpression:
		//  operand1=BitwiseXorExpression ("&&" operand2=BitwiseXorExpression)*;
		public ParserRule getRule() { return rule; }

		//operand1=BitwiseXorExpression ("&&" operand2=BitwiseXorExpression)*
		public Group getGroup() { return cGroup; }

		//operand1=BitwiseXorExpression
		public Assignment getOperand1Assignment_0() { return cOperand1Assignment_0; }

		//BitwiseXorExpression
		public RuleCall getOperand1BitwiseXorExpressionParserRuleCall_0_0() { return cOperand1BitwiseXorExpressionParserRuleCall_0_0; }

		//("&&" operand2=BitwiseXorExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_0() { return cAmpersandAmpersandKeyword_1_0; }

		//operand2=BitwiseXorExpression
		public Assignment getOperand2Assignment_1_1() { return cOperand2Assignment_1_1; }

		//BitwiseXorExpression
		public RuleCall getOperand2BitwiseXorExpressionParserRuleCall_1_1_0() { return cOperand2BitwiseXorExpressionParserRuleCall_1_1_0; }
	}

	public class BitwiseXorExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BitwiseXorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperand1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperand1BitwiseOrExpressionParserRuleCall_0_0 = (RuleCall)cOperand1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCircumflexAccentKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOperand2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperand2BitwiseOrExpressionParserRuleCall_1_1_0 = (RuleCall)cOperand2Assignment_1_1.eContents().get(0);
		
		//BitwiseXorExpression:
		//  operand1=BitwiseOrExpression ("^" operand2=BitwiseOrExpression)*;
		public ParserRule getRule() { return rule; }

		//operand1=BitwiseOrExpression ("^" operand2=BitwiseOrExpression)*
		public Group getGroup() { return cGroup; }

		//operand1=BitwiseOrExpression
		public Assignment getOperand1Assignment_0() { return cOperand1Assignment_0; }

		//BitwiseOrExpression
		public RuleCall getOperand1BitwiseOrExpressionParserRuleCall_0_0() { return cOperand1BitwiseOrExpressionParserRuleCall_0_0; }

		//("^" operand2=BitwiseOrExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//"^"
		public Keyword getCircumflexAccentKeyword_1_0() { return cCircumflexAccentKeyword_1_0; }

		//operand2=BitwiseOrExpression
		public Assignment getOperand2Assignment_1_1() { return cOperand2Assignment_1_1; }

		//BitwiseOrExpression
		public RuleCall getOperand2BitwiseOrExpressionParserRuleCall_1_1_0() { return cOperand2BitwiseOrExpressionParserRuleCall_1_1_0; }
	}

	public class BitwiseOrExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BitwiseOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperand1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperand1BitwiseAndExpressionParserRuleCall_0_0 = (RuleCall)cOperand1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOperand2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperand2BitwiseAndExpressionParserRuleCall_1_1_0 = (RuleCall)cOperand2Assignment_1_1.eContents().get(0);
		
		//BitwiseOrExpression:
		//  operand1=BitwiseAndExpression ("|" operand2=BitwiseAndExpression)*;
		public ParserRule getRule() { return rule; }

		//operand1=BitwiseAndExpression ("|" operand2=BitwiseAndExpression)*
		public Group getGroup() { return cGroup; }

		//operand1=BitwiseAndExpression
		public Assignment getOperand1Assignment_0() { return cOperand1Assignment_0; }

		//BitwiseAndExpression
		public RuleCall getOperand1BitwiseAndExpressionParserRuleCall_0_0() { return cOperand1BitwiseAndExpressionParserRuleCall_0_0; }

		//("|" operand2=BitwiseAndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//"|"
		public Keyword getVerticalLineKeyword_1_0() { return cVerticalLineKeyword_1_0; }

		//operand2=BitwiseAndExpression
		public Assignment getOperand2Assignment_1_1() { return cOperand2Assignment_1_1; }

		//BitwiseAndExpression
		public RuleCall getOperand2BitwiseAndExpressionParserRuleCall_1_1_0() { return cOperand2BitwiseAndExpressionParserRuleCall_1_1_0; }
	}

	public class BitwiseAndExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BitwiseAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperand1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperand1EqualityExpressionParserRuleCall_0_0 = (RuleCall)cOperand1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAmpersandKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOperand2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperand2EqualityExpressionParserRuleCall_1_1_0 = (RuleCall)cOperand2Assignment_1_1.eContents().get(0);
		
		//BitwiseAndExpression:
		//  operand1=EqualityExpression ("&" operand2=EqualityExpression)*;
		public ParserRule getRule() { return rule; }

		//operand1=EqualityExpression ("&" operand2=EqualityExpression)*
		public Group getGroup() { return cGroup; }

		//operand1=EqualityExpression
		public Assignment getOperand1Assignment_0() { return cOperand1Assignment_0; }

		//EqualityExpression
		public RuleCall getOperand1EqualityExpressionParserRuleCall_0_0() { return cOperand1EqualityExpressionParserRuleCall_0_0; }

		//("&" operand2=EqualityExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//"&"
		public Keyword getAmpersandKeyword_1_0() { return cAmpersandKeyword_1_0; }

		//operand2=EqualityExpression
		public Assignment getOperand2Assignment_1_1() { return cOperand2Assignment_1_1; }

		//EqualityExpression
		public RuleCall getOperand2EqualityExpressionParserRuleCall_1_1_0() { return cOperand2EqualityExpressionParserRuleCall_1_1_0; }
	}

	public class EqualityExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperand1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperand1RelationalExpressionParserRuleCall_0_0 = (RuleCall)cOperand1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOperatorEqualityOperatorEnumRuleCall_1_0_0 = (RuleCall)cOperatorAssignment_1_0.eContents().get(0);
		private final Assignment cOperand2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperand2RelationalExpressionParserRuleCall_1_1_0 = (RuleCall)cOperand2Assignment_1_1.eContents().get(0);
		
		//EqualityExpression:
		//  operand1=RelationalExpression (operator=EqualityOperator operand2=
		//  RelationalExpression)*;
		public ParserRule getRule() { return rule; }

		//operand1=RelationalExpression (operator=EqualityOperator operand2=
		//RelationalExpression)*
		public Group getGroup() { return cGroup; }

		//operand1=RelationalExpression
		public Assignment getOperand1Assignment_0() { return cOperand1Assignment_0; }

		//RelationalExpression
		public RuleCall getOperand1RelationalExpressionParserRuleCall_0_0() { return cOperand1RelationalExpressionParserRuleCall_0_0; }

		//(operator=EqualityOperator operand2=RelationalExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//operator=EqualityOperator
		public Assignment getOperatorAssignment_1_0() { return cOperatorAssignment_1_0; }

		//EqualityOperator
		public RuleCall getOperatorEqualityOperatorEnumRuleCall_1_0_0() { return cOperatorEqualityOperatorEnumRuleCall_1_0_0; }

		//operand2=RelationalExpression
		public Assignment getOperand2Assignment_1_1() { return cOperand2Assignment_1_1; }

		//RelationalExpression
		public RuleCall getOperand2RelationalExpressionParserRuleCall_1_1_0() { return cOperand2RelationalExpressionParserRuleCall_1_1_0; }
	}

	public class RelationalExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperand1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperand1ShiftExpressionParserRuleCall_0_0 = (RuleCall)cOperand1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOperatorRelationalOperatorEnumRuleCall_1_0_0 = (RuleCall)cOperatorAssignment_1_0.eContents().get(0);
		private final Assignment cOperand2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperand2ShiftExpressionParserRuleCall_1_1_0 = (RuleCall)cOperand2Assignment_1_1.eContents().get(0);
		
		//RelationalExpression:
		//  operand1=ShiftExpression (operator=RelationalOperator operand2=ShiftExpression)*;
		public ParserRule getRule() { return rule; }

		//operand1=ShiftExpression (operator=RelationalOperator operand2=ShiftExpression)*
		public Group getGroup() { return cGroup; }

		//operand1=ShiftExpression
		public Assignment getOperand1Assignment_0() { return cOperand1Assignment_0; }

		//ShiftExpression
		public RuleCall getOperand1ShiftExpressionParserRuleCall_0_0() { return cOperand1ShiftExpressionParserRuleCall_0_0; }

		//(operator=RelationalOperator operand2=ShiftExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//operator=RelationalOperator
		public Assignment getOperatorAssignment_1_0() { return cOperatorAssignment_1_0; }

		//RelationalOperator
		public RuleCall getOperatorRelationalOperatorEnumRuleCall_1_0_0() { return cOperatorRelationalOperatorEnumRuleCall_1_0_0; }

		//operand2=ShiftExpression
		public Assignment getOperand2Assignment_1_1() { return cOperand2Assignment_1_1; }

		//ShiftExpression
		public RuleCall getOperand2ShiftExpressionParserRuleCall_1_1_0() { return cOperand2ShiftExpressionParserRuleCall_1_1_0; }
	}

	public class ConditionalExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperand1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperand1BooleanOrExpressionParserRuleCall_0_0 = (RuleCall)cOperand1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOperand2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperand2ShiftExpressionParserRuleCall_1_1_0 = (RuleCall)cOperand2Assignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cOperand3Assignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cOperand3ShiftExpressionParserRuleCall_1_3_0 = (RuleCall)cOperand3Assignment_1_3.eContents().get(0);
		
		//ConditionalExpression:
		//  operand1=BooleanOrExpression ("?" operand2=ShiftExpression ":" operand3=
		//  ShiftExpression)?;
		public ParserRule getRule() { return rule; }

		//operand1=BooleanOrExpression ("?" operand2=ShiftExpression ":" operand3=
		//ShiftExpression)?
		public Group getGroup() { return cGroup; }

		//operand1=BooleanOrExpression
		public Assignment getOperand1Assignment_0() { return cOperand1Assignment_0; }

		//BooleanOrExpression
		public RuleCall getOperand1BooleanOrExpressionParserRuleCall_0_0() { return cOperand1BooleanOrExpressionParserRuleCall_0_0; }

		//("?" operand2=ShiftExpression ":" operand3=ShiftExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//"?"
		public Keyword getQuestionMarkKeyword_1_0() { return cQuestionMarkKeyword_1_0; }

		//operand2=ShiftExpression
		public Assignment getOperand2Assignment_1_1() { return cOperand2Assignment_1_1; }

		//ShiftExpression
		public RuleCall getOperand2ShiftExpressionParserRuleCall_1_1_0() { return cOperand2ShiftExpressionParserRuleCall_1_1_0; }

		//":"
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }

		//operand3=ShiftExpression
		public Assignment getOperand3Assignment_1_3() { return cOperand3Assignment_1_3; }

		//ShiftExpression
		public RuleCall getOperand3ShiftExpressionParserRuleCall_1_3_0() { return cOperand3ShiftExpressionParserRuleCall_1_3_0; }
	}

	public class ShiftExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShiftExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperand1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperand1AdditiveExpressionParserRuleCall_0_0 = (RuleCall)cOperand1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOperatorShiftOperatorEnumRuleCall_1_0_0 = (RuleCall)cOperatorAssignment_1_0.eContents().get(0);
		private final Assignment cOperand2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperand2AdditiveExpressionParserRuleCall_1_1_0 = (RuleCall)cOperand2Assignment_1_1.eContents().get(0);
		
		//ShiftExpression:
		//  operand1=AdditiveExpression (operator=ShiftOperator operand2=AdditiveExpression)*;
		public ParserRule getRule() { return rule; }

		//operand1=AdditiveExpression (operator=ShiftOperator operand2=AdditiveExpression)*
		public Group getGroup() { return cGroup; }

		//operand1=AdditiveExpression
		public Assignment getOperand1Assignment_0() { return cOperand1Assignment_0; }

		//AdditiveExpression
		public RuleCall getOperand1AdditiveExpressionParserRuleCall_0_0() { return cOperand1AdditiveExpressionParserRuleCall_0_0; }

		//(operator=ShiftOperator operand2=AdditiveExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//operator=ShiftOperator
		public Assignment getOperatorAssignment_1_0() { return cOperatorAssignment_1_0; }

		//ShiftOperator
		public RuleCall getOperatorShiftOperatorEnumRuleCall_1_0_0() { return cOperatorShiftOperatorEnumRuleCall_1_0_0; }

		//operand2=AdditiveExpression
		public Assignment getOperand2Assignment_1_1() { return cOperand2Assignment_1_1; }

		//AdditiveExpression
		public RuleCall getOperand2AdditiveExpressionParserRuleCall_1_1_0() { return cOperand2AdditiveExpressionParserRuleCall_1_1_0; }
	}

	public class AdditiveExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperand1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperand1MultiplicativeExpressionParserRuleCall_0_0 = (RuleCall)cOperand1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOperatorAdditiveOperatorEnumRuleCall_1_0_0 = (RuleCall)cOperatorAssignment_1_0.eContents().get(0);
		private final Assignment cOperand2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperand2MultiplicativeExpressionParserRuleCall_1_1_0 = (RuleCall)cOperand2Assignment_1_1.eContents().get(0);
		
		//AdditiveExpression:
		//  operand1=MultiplicativeExpression (operator=AdditiveOperator operand2=
		//  MultiplicativeExpression)*;
		public ParserRule getRule() { return rule; }

		//operand1=MultiplicativeExpression (operator=AdditiveOperator operand2=
		//MultiplicativeExpression)*
		public Group getGroup() { return cGroup; }

		//operand1=MultiplicativeExpression
		public Assignment getOperand1Assignment_0() { return cOperand1Assignment_0; }

		//MultiplicativeExpression
		public RuleCall getOperand1MultiplicativeExpressionParserRuleCall_0_0() { return cOperand1MultiplicativeExpressionParserRuleCall_0_0; }

		//(operator=AdditiveOperator operand2=MultiplicativeExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//operator=AdditiveOperator
		public Assignment getOperatorAssignment_1_0() { return cOperatorAssignment_1_0; }

		//AdditiveOperator
		public RuleCall getOperatorAdditiveOperatorEnumRuleCall_1_0_0() { return cOperatorAdditiveOperatorEnumRuleCall_1_0_0; }

		//operand2=MultiplicativeExpression
		public Assignment getOperand2Assignment_1_1() { return cOperand2Assignment_1_1; }

		//MultiplicativeExpression
		public RuleCall getOperand2MultiplicativeExpressionParserRuleCall_1_1_0() { return cOperand2MultiplicativeExpressionParserRuleCall_1_1_0; }
	}

	public class MultiplicativeExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperand1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperand1UnaryExpressionParserRuleCall_0_0 = (RuleCall)cOperand1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOperatorMultiplicativeOperatorEnumRuleCall_1_0_0 = (RuleCall)cOperatorAssignment_1_0.eContents().get(0);
		private final Assignment cOperand2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperand2UnaryExpressionParserRuleCall_1_1_0 = (RuleCall)cOperand2Assignment_1_1.eContents().get(0);
		
		//MultiplicativeExpression:
		//  operand1=UnaryExpression (operator=MultiplicativeOperator operand2=UnaryExpression
		//  )*;
		public ParserRule getRule() { return rule; }

		//operand1=UnaryExpression (operator=MultiplicativeOperator operand2=UnaryExpression
		//)*
		public Group getGroup() { return cGroup; }

		//operand1=UnaryExpression
		public Assignment getOperand1Assignment_0() { return cOperand1Assignment_0; }

		//UnaryExpression
		public RuleCall getOperand1UnaryExpressionParserRuleCall_0_0() { return cOperand1UnaryExpressionParserRuleCall_0_0; }

		//(operator=MultiplicativeOperator operand2=UnaryExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//operator=MultiplicativeOperator
		public Assignment getOperatorAssignment_1_0() { return cOperatorAssignment_1_0; }

		//MultiplicativeOperator
		public RuleCall getOperatorMultiplicativeOperatorEnumRuleCall_1_0_0() { return cOperatorMultiplicativeOperatorEnumRuleCall_1_0_0; }

		//operand2=UnaryExpression
		public Assignment getOperand2Assignment_1_1() { return cOperand2Assignment_1_1; }

		//UnaryExpression
		public RuleCall getOperand2UnaryExpressionParserRuleCall_1_1_0() { return cOperand2UnaryExpressionParserRuleCall_1_1_0; }
	}

	public class UnaryExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorUnaryOperatorEnumRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperandPrimaryExpressionParserRuleCall_1_0 = (RuleCall)cOperandAssignment_1.eContents().get(0);
		
		//UnaryExpression:
		//  operator=UnaryOperator? operand=PrimaryExpression;
		public ParserRule getRule() { return rule; }

		//operator=UnaryOperator? operand=PrimaryExpression
		public Group getGroup() { return cGroup; }

		//operator=UnaryOperator?
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }

		//UnaryOperator
		public RuleCall getOperatorUnaryOperatorEnumRuleCall_0_0() { return cOperatorUnaryOperatorEnumRuleCall_0_0; }

		//operand=PrimaryExpression
		public Assignment getOperandAssignment_1() { return cOperandAssignment_1; }

		//PrimaryExpression
		public RuleCall getOperandPrimaryExpressionParserRuleCall_1_0() { return cOperandPrimaryExpressionParserRuleCall_1_0; }
	}

	public class PrimaryExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cNestedExpressionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//PrimaryExpression:
		//  VariableReference|LiteralValue|"(" NestedExpression ")";
		public ParserRule getRule() { return rule; }

		//VariableReference|LiteralValue|"(" NestedExpression ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//VariableReference
		public RuleCall getVariableReferenceParserRuleCall_0() { return cVariableReferenceParserRuleCall_0; }

		//LiteralValue
		public RuleCall getLiteralValueParserRuleCall_1() { return cLiteralValueParserRuleCall_1; }

		//"(" NestedExpression ")"
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//NestedExpression
		public RuleCall getNestedExpressionParserRuleCall_2_1() { return cNestedExpressionParserRuleCall_2_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class NestedExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NestedExpression");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionConditionalExpressionParserRuleCall_0 = (RuleCall)cExpressionAssignment.eContents().get(0);
		
		//NestedExpression:
		//  expression=ConditionalExpression;
		public ParserRule getRule() { return rule; }

		//expression=ConditionalExpression
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }

		//ConditionalExpression
		public RuleCall getExpressionConditionalExpressionParserRuleCall_0() { return cExpressionConditionalExpressionParserRuleCall_0; }
	}

	public class LiteralValueElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LiteralValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueLiteralParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//LiteralValue:
		//  value=Literal;
		public ParserRule getRule() { return rule; }

		//value=Literal
		public Assignment getValueAssignment() { return cValueAssignment; }

		//Literal
		public RuleCall getValueLiteralParserRuleCall_0() { return cValueLiteralParserRuleCall_0; }
	}

	public class LiteralElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHEX_LITERALTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBOOLEAN_LITERALTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSTRINGTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFLOATING_POINT_LITERALTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Literal returns ecore::EString:
		//  HEX_LITERAL|BOOLEAN_LITERAL|INT|STRING|FLOATING_POINT_LITERAL;
		public ParserRule getRule() { return rule; }

		//HEX_LITERAL|BOOLEAN_LITERAL|INT|STRING|FLOATING_POINT_LITERAL
		public Alternatives getAlternatives() { return cAlternatives; }

		//HEX_LITERAL
		public RuleCall getHEX_LITERALTerminalRuleCall_0() { return cHEX_LITERALTerminalRuleCall_0; }

		//BOOLEAN_LITERAL
		public RuleCall getBOOLEAN_LITERALTerminalRuleCall_1() { return cBOOLEAN_LITERALTerminalRuleCall_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_3() { return cSTRINGTerminalRuleCall_3; }

		//FLOATING_POINT_LITERAL
		public RuleCall getFLOATING_POINT_LITERALTerminalRuleCall_4() { return cFLOATING_POINT_LITERALTerminalRuleCall_4; }
	}
	
	
	public class TimeUnitElements implements IEnumRuleAccess {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "TimeUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSecondEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSecondSKeyword_0_0 = (Keyword)cSecondEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMillisecondEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMillisecondMsKeyword_1_0 = (Keyword)cMillisecondEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNanosecondEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNanosecondNsKeyword_2_0 = (Keyword)cNanosecondEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum TimeUnit:
		//  second="s" | millisecond="ms" | nanosecond="ns";
		public EnumRule getRule() { return rule; }

		//second="s" | millisecond="ms" | nanosecond="ns"
		public Alternatives getAlternatives() { return cAlternatives; }

		//second="s"
		public EnumLiteralDeclaration getSecondEnumLiteralDeclaration_0() { return cSecondEnumLiteralDeclaration_0; }

		//"s"
		public Keyword getSecondSKeyword_0_0() { return cSecondSKeyword_0_0; }

		//millisecond="ms"
		public EnumLiteralDeclaration getMillisecondEnumLiteralDeclaration_1() { return cMillisecondEnumLiteralDeclaration_1; }

		//"ms"
		public Keyword getMillisecondMsKeyword_1_0() { return cMillisecondMsKeyword_1_0; }

		//nanosecond="ns"
		public EnumLiteralDeclaration getNanosecondEnumLiteralDeclaration_2() { return cNanosecondEnumLiteralDeclaration_2; }

		//"ns"
		public Keyword getNanosecondNsKeyword_2_0() { return cNanosecondNsKeyword_2_0; }
	}

	public class AssignmentOperatorElements implements IEnumRuleAccess {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "AssignmentOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAssignEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAssignEqualsSignKeyword_0_0 = (Keyword)cAssignEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMultAssignEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMultAssignAsteriskEqualsSignKeyword_1_0 = (Keyword)cMultAssignEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDivAssignEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDivAssignSolidusEqualsSignKeyword_2_0 = (Keyword)cDivAssignEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cModAssignEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cModAssignPercentSignEqualsSignKeyword_3_0 = (Keyword)cModAssignEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cAddAssignEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cAddAssignPlusSignEqualsSignKeyword_4_0 = (Keyword)cAddAssignEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cSubAssignEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cSubAssignHyphenMinusEqualsSignKeyword_5_0 = (Keyword)cSubAssignEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cLeftShiftAssignEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cLeftShiftAssignLessThanSignLessThanSignEqualsSignKeyword_6_0 = (Keyword)cLeftShiftAssignEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cRightShiftAssignEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cRightShiftAssignGreaterThanSignGreaterThanSignEqualsSignKeyword_7_0 = (Keyword)cRightShiftAssignEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cAndAssignEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cAndAssignAmpersandEqualsSignKeyword_8_0 = (Keyword)cAndAssignEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cXorAssignEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cXorAssignCircumflexAccentEqualsSignKeyword_9_0 = (Keyword)cXorAssignEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cOrAssignEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cOrAssignVerticalLineEqualsSignKeyword_10_0 = (Keyword)cOrAssignEnumLiteralDeclaration_10.eContents().get(0);
		
		//enum AssignmentOperator:
		//  assign="=" | multAssign="*=" | divAssign="/=" | modAssign="%=" | addAssign="+=" |
		//  subAssign="-=" | leftShiftAssign="<<=" | rightShiftAssign=">>=" | andAssign="&=" |
		//  xorAssign="^=" | orAssign="|=";
		public EnumRule getRule() { return rule; }

		//assign="=" | multAssign="*=" | divAssign="/=" | modAssign="%=" | addAssign="+=" |
		//subAssign="-=" | leftShiftAssign="<<=" | rightShiftAssign=">>=" | andAssign="&=" |
		//xorAssign="^=" | orAssign="|="
		public Alternatives getAlternatives() { return cAlternatives; }

		//assign="="
		public EnumLiteralDeclaration getAssignEnumLiteralDeclaration_0() { return cAssignEnumLiteralDeclaration_0; }

		//"="
		public Keyword getAssignEqualsSignKeyword_0_0() { return cAssignEqualsSignKeyword_0_0; }

		//multAssign="*="
		public EnumLiteralDeclaration getMultAssignEnumLiteralDeclaration_1() { return cMultAssignEnumLiteralDeclaration_1; }

		//"*="
		public Keyword getMultAssignAsteriskEqualsSignKeyword_1_0() { return cMultAssignAsteriskEqualsSignKeyword_1_0; }

		//divAssign="/="
		public EnumLiteralDeclaration getDivAssignEnumLiteralDeclaration_2() { return cDivAssignEnumLiteralDeclaration_2; }

		//"/="
		public Keyword getDivAssignSolidusEqualsSignKeyword_2_0() { return cDivAssignSolidusEqualsSignKeyword_2_0; }

		//modAssign="%="
		public EnumLiteralDeclaration getModAssignEnumLiteralDeclaration_3() { return cModAssignEnumLiteralDeclaration_3; }

		//"%="
		public Keyword getModAssignPercentSignEqualsSignKeyword_3_0() { return cModAssignPercentSignEqualsSignKeyword_3_0; }

		//addAssign="+="
		public EnumLiteralDeclaration getAddAssignEnumLiteralDeclaration_4() { return cAddAssignEnumLiteralDeclaration_4; }

		//"+="
		public Keyword getAddAssignPlusSignEqualsSignKeyword_4_0() { return cAddAssignPlusSignEqualsSignKeyword_4_0; }

		//subAssign="-="
		public EnumLiteralDeclaration getSubAssignEnumLiteralDeclaration_5() { return cSubAssignEnumLiteralDeclaration_5; }

		//"-="
		public Keyword getSubAssignHyphenMinusEqualsSignKeyword_5_0() { return cSubAssignHyphenMinusEqualsSignKeyword_5_0; }

		//leftShiftAssign="<<="
		public EnumLiteralDeclaration getLeftShiftAssignEnumLiteralDeclaration_6() { return cLeftShiftAssignEnumLiteralDeclaration_6; }

		//"<<="
		public Keyword getLeftShiftAssignLessThanSignLessThanSignEqualsSignKeyword_6_0() { return cLeftShiftAssignLessThanSignLessThanSignEqualsSignKeyword_6_0; }

		//rightShiftAssign=">>="
		public EnumLiteralDeclaration getRightShiftAssignEnumLiteralDeclaration_7() { return cRightShiftAssignEnumLiteralDeclaration_7; }

		//">>="
		public Keyword getRightShiftAssignGreaterThanSignGreaterThanSignEqualsSignKeyword_7_0() { return cRightShiftAssignGreaterThanSignGreaterThanSignEqualsSignKeyword_7_0; }

		//andAssign="&="
		public EnumLiteralDeclaration getAndAssignEnumLiteralDeclaration_8() { return cAndAssignEnumLiteralDeclaration_8; }

		//"&="
		public Keyword getAndAssignAmpersandEqualsSignKeyword_8_0() { return cAndAssignAmpersandEqualsSignKeyword_8_0; }

		//xorAssign="^="
		public EnumLiteralDeclaration getXorAssignEnumLiteralDeclaration_9() { return cXorAssignEnumLiteralDeclaration_9; }

		//"^="
		public Keyword getXorAssignCircumflexAccentEqualsSignKeyword_9_0() { return cXorAssignCircumflexAccentEqualsSignKeyword_9_0; }

		//orAssign="|="
		public EnumLiteralDeclaration getOrAssignEnumLiteralDeclaration_10() { return cOrAssignEnumLiteralDeclaration_10; }

		//"|="
		public Keyword getOrAssignVerticalLineEqualsSignKeyword_10_0() { return cOrAssignVerticalLineEqualsSignKeyword_10_0; }
	}

	public class EqualityOperatorElements implements IEnumRuleAccess {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "EqualityOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEqualsEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEqualsEqualsSignEqualsSignKeyword_0_0 = (Keyword)cEqualsEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNotEqualsEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNotEqualsExclamationMarkEqualsSignKeyword_1_0 = (Keyword)cNotEqualsEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum EqualityOperator:
		//  equals="==" | notEquals="!=";
		public EnumRule getRule() { return rule; }

		//equals="==" | notEquals="!="
		public Alternatives getAlternatives() { return cAlternatives; }

		//equals="=="
		public EnumLiteralDeclaration getEqualsEnumLiteralDeclaration_0() { return cEqualsEnumLiteralDeclaration_0; }

		//"=="
		public Keyword getEqualsEqualsSignEqualsSignKeyword_0_0() { return cEqualsEqualsSignEqualsSignKeyword_0_0; }

		//notEquals="!="
		public EnumLiteralDeclaration getNotEqualsEnumLiteralDeclaration_1() { return cNotEqualsEnumLiteralDeclaration_1; }

		//"!="
		public Keyword getNotEqualsExclamationMarkEqualsSignKeyword_1_0() { return cNotEqualsExclamationMarkEqualsSignKeyword_1_0; }
	}

	public class RelationalOperatorElements implements IEnumRuleAccess {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "RelationalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSmallerEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSmallerLessThanSignKeyword_0_0 = (Keyword)cSmallerEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGreaterGreaterThanSignKeyword_1_0 = (Keyword)cGreaterEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSmallerEqualEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSmallerEqualLessThanSignEqualsSignKeyword_2_0 = (Keyword)cSmallerEqualEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterEqualEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGreaterEqualGreaterThanSignEqualsSignKeyword_3_0 = (Keyword)cGreaterEqualEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum RelationalOperator:
		//  smaller="<" | greater=">" | smallerEqual="<=" | greaterEqual=">=";
		public EnumRule getRule() { return rule; }

		//smaller="<" | greater=">" | smallerEqual="<=" | greaterEqual=">="
		public Alternatives getAlternatives() { return cAlternatives; }

		//smaller="<"
		public EnumLiteralDeclaration getSmallerEnumLiteralDeclaration_0() { return cSmallerEnumLiteralDeclaration_0; }

		//"<"
		public Keyword getSmallerLessThanSignKeyword_0_0() { return cSmallerLessThanSignKeyword_0_0; }

		//greater=">"
		public EnumLiteralDeclaration getGreaterEnumLiteralDeclaration_1() { return cGreaterEnumLiteralDeclaration_1; }

		//">"
		public Keyword getGreaterGreaterThanSignKeyword_1_0() { return cGreaterGreaterThanSignKeyword_1_0; }

		//smallerEqual="<="
		public EnumLiteralDeclaration getSmallerEqualEnumLiteralDeclaration_2() { return cSmallerEqualEnumLiteralDeclaration_2; }

		//"<="
		public Keyword getSmallerEqualLessThanSignEqualsSignKeyword_2_0() { return cSmallerEqualLessThanSignEqualsSignKeyword_2_0; }

		//greaterEqual=">="
		public EnumLiteralDeclaration getGreaterEqualEnumLiteralDeclaration_3() { return cGreaterEqualEnumLiteralDeclaration_3; }

		//">="
		public Keyword getGreaterEqualGreaterThanSignEqualsSignKeyword_3_0() { return cGreaterEqualGreaterThanSignEqualsSignKeyword_3_0; }
	}

	public class ShiftOperatorElements implements IEnumRuleAccess {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ShiftOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLeftEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLeftLessThanSignLessThanSignKeyword_0_0 = (Keyword)cLeftEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRightEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRightGreaterThanSignGreaterThanSignKeyword_1_0 = (Keyword)cRightEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ShiftOperator:
		//  left="<<" | right=">>";
		public EnumRule getRule() { return rule; }

		//left="<<" | right=">>"
		public Alternatives getAlternatives() { return cAlternatives; }

		//left="<<"
		public EnumLiteralDeclaration getLeftEnumLiteralDeclaration_0() { return cLeftEnumLiteralDeclaration_0; }

		//"<<"
		public Keyword getLeftLessThanSignLessThanSignKeyword_0_0() { return cLeftLessThanSignLessThanSignKeyword_0_0; }

		//right=">>"
		public EnumLiteralDeclaration getRightEnumLiteralDeclaration_1() { return cRightEnumLiteralDeclaration_1; }

		//">>"
		public Keyword getRightGreaterThanSignGreaterThanSignKeyword_1_0() { return cRightGreaterThanSignGreaterThanSignKeyword_1_0; }
	}

	public class AdditiveOperatorElements implements IEnumRuleAccess {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "AdditiveOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPlusEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPlusPlusSignKeyword_0_0 = (Keyword)cPlusEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMinusEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMinusHyphenMinusKeyword_1_0 = (Keyword)cMinusEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum AdditiveOperator:
		//  plus="+" | minus="-";
		public EnumRule getRule() { return rule; }

		//plus="+" | minus="-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//plus="+"
		public EnumLiteralDeclaration getPlusEnumLiteralDeclaration_0() { return cPlusEnumLiteralDeclaration_0; }

		//"+"
		public Keyword getPlusPlusSignKeyword_0_0() { return cPlusPlusSignKeyword_0_0; }

		//minus="-"
		public EnumLiteralDeclaration getMinusEnumLiteralDeclaration_1() { return cMinusEnumLiteralDeclaration_1; }

		//"-"
		public Keyword getMinusHyphenMinusKeyword_1_0() { return cMinusHyphenMinusKeyword_1_0; }
	}

	public class MultiplicativeOperatorElements implements IEnumRuleAccess {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicativeOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMulEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMulAsteriskKeyword_0_0 = (Keyword)cMulEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDivEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDivSolidusKeyword_1_0 = (Keyword)cDivEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cModEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cModPercentSignKeyword_2_0 = (Keyword)cModEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum MultiplicativeOperator:
		//  mul="*" | div="/" | mod="%";
		public EnumRule getRule() { return rule; }

		//mul="*" | div="/" | mod="%"
		public Alternatives getAlternatives() { return cAlternatives; }

		//mul="*"
		public EnumLiteralDeclaration getMulEnumLiteralDeclaration_0() { return cMulEnumLiteralDeclaration_0; }

		//"*"
		public Keyword getMulAsteriskKeyword_0_0() { return cMulAsteriskKeyword_0_0; }

		//div="/"
		public EnumLiteralDeclaration getDivEnumLiteralDeclaration_1() { return cDivEnumLiteralDeclaration_1; }

		//"/"
		public Keyword getDivSolidusKeyword_1_0() { return cDivSolidusKeyword_1_0; }

		//mod="%"
		public EnumLiteralDeclaration getModEnumLiteralDeclaration_2() { return cModEnumLiteralDeclaration_2; }

		//"%"
		public Keyword getModPercentSignKeyword_2_0() { return cModPercentSignKeyword_2_0; }
	}

	public class UnaryOperatorElements implements IEnumRuleAccess {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPositiveEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPositivePlusSignKeyword_0_0 = (Keyword)cPositiveEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNegativeEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNegativeHyphenMinusKeyword_1_0 = (Keyword)cNegativeEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cComplementEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cComplementTildeKeyword_2_0 = (Keyword)cComplementEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cNotEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cNotExclamationMarkKeyword_3_0 = (Keyword)cNotEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum UnaryOperator:
		//  positive="+" | negative="-" | complement="~" | not="!";
		public EnumRule getRule() { return rule; }

		//positive="+" | negative="-" | complement="~" | not="!"
		public Alternatives getAlternatives() { return cAlternatives; }

		//positive="+"
		public EnumLiteralDeclaration getPositiveEnumLiteralDeclaration_0() { return cPositiveEnumLiteralDeclaration_0; }

		//"+"
		public Keyword getPositivePlusSignKeyword_0_0() { return cPositivePlusSignKeyword_0_0; }

		//negative="-"
		public EnumLiteralDeclaration getNegativeEnumLiteralDeclaration_1() { return cNegativeEnumLiteralDeclaration_1; }

		//"-"
		public Keyword getNegativeHyphenMinusKeyword_1_0() { return cNegativeHyphenMinusKeyword_1_0; }

		//complement="~"
		public EnumLiteralDeclaration getComplementEnumLiteralDeclaration_2() { return cComplementEnumLiteralDeclaration_2; }

		//"~"
		public Keyword getComplementTildeKeyword_2_0() { return cComplementTildeKeyword_2_0; }

		//not="!"
		public EnumLiteralDeclaration getNotEnumLiteralDeclaration_3() { return cNotEnumLiteralDeclaration_3; }

		//"!"
		public Keyword getNotExclamationMarkKeyword_3_0() { return cNotExclamationMarkKeyword_3_0; }
	}
	
	private ExpressionElements pExpression;
	private TriggerExpressionElements pTriggerExpression;
	private GuardExpressionElements pGuardExpression;
	private ActionExpressionElements pActionExpression;
	private TriggerElements pTrigger;
	private EventElements pEvent;
	private SignalEventElements pSignalEvent;
	private TimeEventElements pTimeEvent;
	private TimeExpressionElements pTimeExpression;
	private VariableReferenceElements pVariableReference;
	private VariableElements pVariable;
	private TimeConstantElements pTimeConstant;
	private TimeUnitElements unknownRuleTimeUnit;
	private StatementElements pStatement;
	private VariableAssignmentElements pVariableAssignment;
	private ProcedureCallElements pProcedureCall;
	private ProcedureElements pProcedure;
	private AssignmentOperatorElements unknownRuleAssignmentOperator;
	private EventRaisingElements pEventRaising;
	private BooleanOrExpressionElements pBooleanOrExpression;
	private BooleanAndExpressionElements pBooleanAndExpression;
	private BitwiseXorExpressionElements pBitwiseXorExpression;
	private BitwiseOrExpressionElements pBitwiseOrExpression;
	private BitwiseAndExpressionElements pBitwiseAndExpression;
	private EqualityExpressionElements pEqualityExpression;
	private EqualityOperatorElements unknownRuleEqualityOperator;
	private RelationalExpressionElements pRelationalExpression;
	private RelationalOperatorElements unknownRuleRelationalOperator;
	private ConditionalExpressionElements pConditionalExpression;
	private ShiftExpressionElements pShiftExpression;
	private ShiftOperatorElements unknownRuleShiftOperator;
	private AdditiveExpressionElements pAdditiveExpression;
	private AdditiveOperatorElements unknownRuleAdditiveOperator;
	private MultiplicativeExpressionElements pMultiplicativeExpression;
	private MultiplicativeOperatorElements unknownRuleMultiplicativeOperator;
	private UnaryExpressionElements pUnaryExpression;
	private UnaryOperatorElements unknownRuleUnaryOperator;
	private PrimaryExpressionElements pPrimaryExpression;
	private NestedExpressionElements pNestedExpression;
	private LiteralValueElements pLiteralValue;
	private LiteralElements pLiteral;
	private TerminalRule tBOOLEAN_LITERAL;
	private TerminalRule tHEX_LITERAL;
	private TerminalRule tFLOATING_POINT_LITERAL;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public StatechartExpressionsGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Expression:
	//  TriggerExpression|GuardExpression|ActionExpression; 
	//
	//// specify your DSL grammar rules here ...
	//// IMPORTANT: You should change the property 'overwrite.pluginresources=true' in the properties file to 'overwrite.pluginresources=false' AFTER first generation
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//TriggerExpression:
	//  triggers+=Trigger ("," triggers+=Trigger)*;
	public TriggerExpressionElements getTriggerExpressionAccess() {
		return (pTriggerExpression != null) ? pTriggerExpression : (pTriggerExpression = new TriggerExpressionElements());
	}
	
	public ParserRule getTriggerExpressionRule() {
		return getTriggerExpressionAccess().getRule();
	}

	//GuardExpression:
	//  expression=BooleanOrExpression;
	public GuardExpressionElements getGuardExpressionAccess() {
		return (pGuardExpression != null) ? pGuardExpression : (pGuardExpression = new GuardExpressionElements());
	}
	
	public ParserRule getGuardExpressionRule() {
		return getGuardExpressionAccess().getRule();
	}

	//ActionExpression:
	//  statement+=Statement+;
	public ActionExpressionElements getActionExpressionAccess() {
		return (pActionExpression != null) ? pActionExpression : (pActionExpression = new ActionExpressionElements());
	}
	
	public ParserRule getActionExpressionRule() {
		return getActionExpressionAccess().getRule();
	}

	//Trigger:
	//  event=Event;
	public TriggerElements getTriggerAccess() {
		return (pTrigger != null) ? pTrigger : (pTrigger = new TriggerElements());
	}
	
	public ParserRule getTriggerRule() {
		return getTriggerAccess().getRule();
	}

	//Event:
	//  SignalEvent|TimeEvent;
	public EventElements getEventAccess() {
		return (pEvent != null) ? pEvent : (pEvent = new EventElements());
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}

	//SignalEvent:
	//  identifier=ID;
	public SignalEventElements getSignalEventAccess() {
		return (pSignalEvent != null) ? pSignalEvent : (pSignalEvent = new SignalEventElements());
	}
	
	public ParserRule getSignalEventRule() {
		return getSignalEventAccess().getRule();
	}

	//TimeEvent:
	//  "after" "(" duration=TimeExpression ")";
	public TimeEventElements getTimeEventAccess() {
		return (pTimeEvent != null) ? pTimeEvent : (pTimeEvent = new TimeEventElements());
	}
	
	public ParserRule getTimeEventRule() {
		return getTimeEventAccess().getRule();
	}

	//TimeExpression:
	//  TimeConstant|VariableReference;
	public TimeExpressionElements getTimeExpressionAccess() {
		return (pTimeExpression != null) ? pTimeExpression : (pTimeExpression = new TimeExpressionElements());
	}
	
	public ParserRule getTimeExpressionRule() {
		return getTimeExpressionAccess().getRule();
	}

	//VariableReference:
	//  variable=Variable|"var" "(" variable=Variable ")"; 
	//
	// 
	//       
	//               // backwards compatibility
	public VariableReferenceElements getVariableReferenceAccess() {
		return (pVariableReference != null) ? pVariableReference : (pVariableReference = new VariableReferenceElements());
	}
	
	public ParserRule getVariableReferenceRule() {
		return getVariableReferenceAccess().getRule();
	}

	//Variable:
	//  identifier=ID;
	public VariableElements getVariableAccess() {
		return (pVariable != null) ? pVariable : (pVariable = new VariableElements());
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//TimeConstant:
	//  value=INT unit=TimeUnit?;
	public TimeConstantElements getTimeConstantAccess() {
		return (pTimeConstant != null) ? pTimeConstant : (pTimeConstant = new TimeConstantElements());
	}
	
	public ParserRule getTimeConstantRule() {
		return getTimeConstantAccess().getRule();
	}

	//enum TimeUnit:
	//  second="s" | millisecond="ms" | nanosecond="ns";
	public TimeUnitElements getTimeUnitAccess() {
		return (unknownRuleTimeUnit != null) ? unknownRuleTimeUnit : (unknownRuleTimeUnit = new TimeUnitElements());
	}
	
	public EnumRule getTimeUnitRule() {
		return getTimeUnitAccess().getRule();
	}

	//Statement:
	//  (VariableAssignment|EventRaising|ProcedureCall) ";";
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//VariableAssignment:
	//  variableReference=VariableReference operator=AssignmentOperator value=
	//  ConditionalExpression;
	public VariableAssignmentElements getVariableAssignmentAccess() {
		return (pVariableAssignment != null) ? pVariableAssignment : (pVariableAssignment = new VariableAssignmentElements());
	}
	
	public ParserRule getVariableAssignmentRule() {
		return getVariableAssignmentAccess().getRule();
	}

	//ProcedureCall:
	//  procedure=Procedure "(" ")";
	public ProcedureCallElements getProcedureCallAccess() {
		return (pProcedureCall != null) ? pProcedureCall : (pProcedureCall = new ProcedureCallElements());
	}
	
	public ParserRule getProcedureCallRule() {
		return getProcedureCallAccess().getRule();
	}

	//Procedure:
	//  identifier=ID;
	public ProcedureElements getProcedureAccess() {
		return (pProcedure != null) ? pProcedure : (pProcedure = new ProcedureElements());
	}
	
	public ParserRule getProcedureRule() {
		return getProcedureAccess().getRule();
	}

	//enum AssignmentOperator:
	//  assign="=" | multAssign="*=" | divAssign="/=" | modAssign="%=" | addAssign="+=" |
	//  subAssign="-=" | leftShiftAssign="<<=" | rightShiftAssign=">>=" | andAssign="&=" |
	//  xorAssign="^=" | orAssign="|=";
	public AssignmentOperatorElements getAssignmentOperatorAccess() {
		return (unknownRuleAssignmentOperator != null) ? unknownRuleAssignmentOperator : (unknownRuleAssignmentOperator = new AssignmentOperatorElements());
	}
	
	public EnumRule getAssignmentOperatorRule() {
		return getAssignmentOperatorAccess().getRule();
	}

	//EventRaising:
	//  "raise" "(" event=SignalEvent ")";
	public EventRaisingElements getEventRaisingAccess() {
		return (pEventRaising != null) ? pEventRaising : (pEventRaising = new EventRaisingElements());
	}
	
	public ParserRule getEventRaisingRule() {
		return getEventRaisingAccess().getRule();
	}

	//BooleanOrExpression:
	//  operand1=BooleanAndExpression ("||" operand2=BooleanAndExpression)*;
	public BooleanOrExpressionElements getBooleanOrExpressionAccess() {
		return (pBooleanOrExpression != null) ? pBooleanOrExpression : (pBooleanOrExpression = new BooleanOrExpressionElements());
	}
	
	public ParserRule getBooleanOrExpressionRule() {
		return getBooleanOrExpressionAccess().getRule();
	}

	//BooleanAndExpression:
	//  operand1=BitwiseXorExpression ("&&" operand2=BitwiseXorExpression)*;
	public BooleanAndExpressionElements getBooleanAndExpressionAccess() {
		return (pBooleanAndExpression != null) ? pBooleanAndExpression : (pBooleanAndExpression = new BooleanAndExpressionElements());
	}
	
	public ParserRule getBooleanAndExpressionRule() {
		return getBooleanAndExpressionAccess().getRule();
	}

	//BitwiseXorExpression:
	//  operand1=BitwiseOrExpression ("^" operand2=BitwiseOrExpression)*;
	public BitwiseXorExpressionElements getBitwiseXorExpressionAccess() {
		return (pBitwiseXorExpression != null) ? pBitwiseXorExpression : (pBitwiseXorExpression = new BitwiseXorExpressionElements());
	}
	
	public ParserRule getBitwiseXorExpressionRule() {
		return getBitwiseXorExpressionAccess().getRule();
	}

	//BitwiseOrExpression:
	//  operand1=BitwiseAndExpression ("|" operand2=BitwiseAndExpression)*;
	public BitwiseOrExpressionElements getBitwiseOrExpressionAccess() {
		return (pBitwiseOrExpression != null) ? pBitwiseOrExpression : (pBitwiseOrExpression = new BitwiseOrExpressionElements());
	}
	
	public ParserRule getBitwiseOrExpressionRule() {
		return getBitwiseOrExpressionAccess().getRule();
	}

	//BitwiseAndExpression:
	//  operand1=EqualityExpression ("&" operand2=EqualityExpression)*;
	public BitwiseAndExpressionElements getBitwiseAndExpressionAccess() {
		return (pBitwiseAndExpression != null) ? pBitwiseAndExpression : (pBitwiseAndExpression = new BitwiseAndExpressionElements());
	}
	
	public ParserRule getBitwiseAndExpressionRule() {
		return getBitwiseAndExpressionAccess().getRule();
	}

	//EqualityExpression:
	//  operand1=RelationalExpression (operator=EqualityOperator operand2=
	//  RelationalExpression)*;
	public EqualityExpressionElements getEqualityExpressionAccess() {
		return (pEqualityExpression != null) ? pEqualityExpression : (pEqualityExpression = new EqualityExpressionElements());
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}

	//enum EqualityOperator:
	//  equals="==" | notEquals="!=";
	public EqualityOperatorElements getEqualityOperatorAccess() {
		return (unknownRuleEqualityOperator != null) ? unknownRuleEqualityOperator : (unknownRuleEqualityOperator = new EqualityOperatorElements());
	}
	
	public EnumRule getEqualityOperatorRule() {
		return getEqualityOperatorAccess().getRule();
	}

	//RelationalExpression:
	//  operand1=ShiftExpression (operator=RelationalOperator operand2=ShiftExpression)*;
	public RelationalExpressionElements getRelationalExpressionAccess() {
		return (pRelationalExpression != null) ? pRelationalExpression : (pRelationalExpression = new RelationalExpressionElements());
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}

	//enum RelationalOperator:
	//  smaller="<" | greater=">" | smallerEqual="<=" | greaterEqual=">=";
	public RelationalOperatorElements getRelationalOperatorAccess() {
		return (unknownRuleRelationalOperator != null) ? unknownRuleRelationalOperator : (unknownRuleRelationalOperator = new RelationalOperatorElements());
	}
	
	public EnumRule getRelationalOperatorRule() {
		return getRelationalOperatorAccess().getRule();
	}

	//ConditionalExpression:
	//  operand1=BooleanOrExpression ("?" operand2=ShiftExpression ":" operand3=
	//  ShiftExpression)?;
	public ConditionalExpressionElements getConditionalExpressionAccess() {
		return (pConditionalExpression != null) ? pConditionalExpression : (pConditionalExpression = new ConditionalExpressionElements());
	}
	
	public ParserRule getConditionalExpressionRule() {
		return getConditionalExpressionAccess().getRule();
	}

	//ShiftExpression:
	//  operand1=AdditiveExpression (operator=ShiftOperator operand2=AdditiveExpression)*;
	public ShiftExpressionElements getShiftExpressionAccess() {
		return (pShiftExpression != null) ? pShiftExpression : (pShiftExpression = new ShiftExpressionElements());
	}
	
	public ParserRule getShiftExpressionRule() {
		return getShiftExpressionAccess().getRule();
	}

	//enum ShiftOperator:
	//  left="<<" | right=">>";
	public ShiftOperatorElements getShiftOperatorAccess() {
		return (unknownRuleShiftOperator != null) ? unknownRuleShiftOperator : (unknownRuleShiftOperator = new ShiftOperatorElements());
	}
	
	public EnumRule getShiftOperatorRule() {
		return getShiftOperatorAccess().getRule();
	}

	//AdditiveExpression:
	//  operand1=MultiplicativeExpression (operator=AdditiveOperator operand2=
	//  MultiplicativeExpression)*;
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return (pAdditiveExpression != null) ? pAdditiveExpression : (pAdditiveExpression = new AdditiveExpressionElements());
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	//enum AdditiveOperator:
	//  plus="+" | minus="-";
	public AdditiveOperatorElements getAdditiveOperatorAccess() {
		return (unknownRuleAdditiveOperator != null) ? unknownRuleAdditiveOperator : (unknownRuleAdditiveOperator = new AdditiveOperatorElements());
	}
	
	public EnumRule getAdditiveOperatorRule() {
		return getAdditiveOperatorAccess().getRule();
	}

	//MultiplicativeExpression:
	//  operand1=UnaryExpression (operator=MultiplicativeOperator operand2=UnaryExpression
	//  )*;
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return (pMultiplicativeExpression != null) ? pMultiplicativeExpression : (pMultiplicativeExpression = new MultiplicativeExpressionElements());
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}

	//enum MultiplicativeOperator:
	//  mul="*" | div="/" | mod="%";
	public MultiplicativeOperatorElements getMultiplicativeOperatorAccess() {
		return (unknownRuleMultiplicativeOperator != null) ? unknownRuleMultiplicativeOperator : (unknownRuleMultiplicativeOperator = new MultiplicativeOperatorElements());
	}
	
	public EnumRule getMultiplicativeOperatorRule() {
		return getMultiplicativeOperatorAccess().getRule();
	}

	//UnaryExpression:
	//  operator=UnaryOperator? operand=PrimaryExpression;
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return (pUnaryExpression != null) ? pUnaryExpression : (pUnaryExpression = new UnaryExpressionElements());
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}

	//enum UnaryOperator:
	//  positive="+" | negative="-" | complement="~" | not="!";
	public UnaryOperatorElements getUnaryOperatorAccess() {
		return (unknownRuleUnaryOperator != null) ? unknownRuleUnaryOperator : (unknownRuleUnaryOperator = new UnaryOperatorElements());
	}
	
	public EnumRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}

	//PrimaryExpression:
	//  VariableReference|LiteralValue|"(" NestedExpression ")";
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return (pPrimaryExpression != null) ? pPrimaryExpression : (pPrimaryExpression = new PrimaryExpressionElements());
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//NestedExpression:
	//  expression=ConditionalExpression;
	public NestedExpressionElements getNestedExpressionAccess() {
		return (pNestedExpression != null) ? pNestedExpression : (pNestedExpression = new NestedExpressionElements());
	}
	
	public ParserRule getNestedExpressionRule() {
		return getNestedExpressionAccess().getRule();
	}

	//LiteralValue:
	//  value=Literal;
	public LiteralValueElements getLiteralValueAccess() {
		return (pLiteralValue != null) ? pLiteralValue : (pLiteralValue = new LiteralValueElements());
	}
	
	public ParserRule getLiteralValueRule() {
		return getLiteralValueAccess().getRule();
	}

	//Literal returns ecore::EString:
	//  HEX_LITERAL|BOOLEAN_LITERAL|INT|STRING|FLOATING_POINT_LITERAL;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//terminal BOOLEAN_LITERAL:
	//  "true" | "false"; 
	//
	//  
	//	     
	//
	//
	//// LEXER TOKENS
	public TerminalRule getBOOLEAN_LITERALRule() {
		return (tBOOLEAN_LITERAL != null) ? tBOOLEAN_LITERAL : (tBOOLEAN_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOLEAN_LITERAL"));
	} 

	//terminal HEX_LITERAL:
	//  "0" ("x" | "X") ("0".."9" | "a".."f" | "A".."F")+; 
	//
	//// LEXER TOKENS
	public TerminalRule getHEX_LITERALRule() {
		return (tHEX_LITERAL != null) ? tHEX_LITERAL : (tHEX_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEX_LITERAL"));
	} 

	//terminal FLOATING_POINT_LITERAL:
	//  "0".."9"* "." "0".."9"* (("e" | "E") ("+" | "-")? "0".."9"+)? ("f" | "F" | "d" | "D")?;
	public TerminalRule getFLOATING_POINT_LITERALRule() {
		return (tFLOATING_POINT_LITERAL != null) ? tFLOATING_POINT_LITERAL : (tFLOATING_POINT_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOATING_POINT_LITERAL"));
	} 

	//terminal ID:
	//  "^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//  "0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//  "\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" |
	//  "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//  "/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//  "//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//  (" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//  .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
