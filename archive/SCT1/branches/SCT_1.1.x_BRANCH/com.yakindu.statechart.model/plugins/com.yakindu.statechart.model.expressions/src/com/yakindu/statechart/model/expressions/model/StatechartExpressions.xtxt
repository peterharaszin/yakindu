// specify your DSL grammar rules here ...
// IMPORTANT: You should change the property 'overwrite.pluginresources=true' in the properties file to 'overwrite.pluginresources=false' AFTER first generation

Expression
: 	TriggerExpression | GuardExpression | ActionExpression
;

TriggerExpression 
:	(triggers+=(Trigger) ("," triggers+=Trigger)*)
;	

GuardExpression
: 	expression = BooleanOrExpression
;
  
ActionExpression 
:	(statement += Statement)+
;

Trigger 
: 	event = Event
;

Event
:   SignalEvent 
| 	TimeEvent
;

SignalEvent
: 	identifier = ID
;
  
TimeEvent
: 	'after' '(' duration = TimeExpression ')'
;

TimeExpression
: 	TimeConstant
|   VariableReference 	
;

VariableReference 
:  variable = Variable
|  'var' '(' variable = Variable ')' // backwards compatibility
;

Variable
:  	identifier = ID
;

TimeConstant
:  value = INT (unit = TimeUnit)?
; 

Enum TimeUnit
: 	second = 's'
|   millisecond = 'ms'
|   nanosecond = 'ns'
;

Statement
: 	(VariableAssignment | EventRaising | ProcedureCall) ";"
;

VariableAssignment
:	variableReference = VariableReference  operator = AssignmentOperator value = ConditionalExpression
;

ProcedureCall
:  procedure = Procedure '(' ')'
;

Procedure
: 	identifier = ID
;

Enum AssignmentOperator
: assign = '=' 
| multAssign = '*=' 
| divAssign = '/=' 
| modAssign = '%=' 
| addAssign = '+=' 
| subAssign = '-=' 
| leftShiftAssign = '<<=' 
| rightShiftAssign = '>>=' 
| andAssign = '&=' 
| xorAssign = '^=' 
| orAssign = '|='
;

EventRaising
:	'raise' '(' event = SignalEvent ')'
;

BooleanOrExpression
	: operand1 = BooleanAndExpression ('||' operand2 = BooleanAndExpression)*
	;

BooleanAndExpression
	: operand1 = BitwiseXorExpression ('&&' operand2 = BitwiseXorExpression)*
	;

BitwiseXorExpression
	: operand1 = BitwiseOrExpression ('^' operand2 = BitwiseOrExpression)*
	;

BitwiseOrExpression
	: operand1 = BitwiseAndExpression ('|' operand2 = BitwiseAndExpression)*
	;

BitwiseAndExpression
	: operand1 = EqualityExpression ('&' operand2 = EqualityExpression)*
	;
	
EqualityExpression
	: operand1 = RelationalExpression (operator = EqualityOperator operand2 = RelationalExpression)*
	;

Enum EqualityOperator
:	equals = '=='
|   notEquals = '!='
;

RelationalExpression
: operand1 = ShiftExpression (operator = RelationalOperator operand2 = ShiftExpression)*
;

Enum RelationalOperator
:	smaller = '<'
|   greater = '>'
|   smallerEqual = '<='
|   greaterEqual = '>='
;

ConditionalExpression
:  	operand1 = BooleanOrExpression ('?' operand2 = ShiftExpression ':' operand3 = ShiftExpression)?
;

ShiftExpression
: operand1 = AdditiveExpression (operator = ShiftOperator operand2 = AdditiveExpression)*
;	
	
Enum ShiftOperator
:   left = '<<'
|   right = '>>'
;

AdditiveExpression
	: operand1 = MultiplicativeExpression (operator = AdditiveOperator operand2 = MultiplicativeExpression)*
	;
	
Enum AdditiveOperator
:	plus = '+'
|   minus = '-'
;

MultiplicativeExpression
	: operand1 = UnaryExpression (operator = MultiplicativeOperator operand2 = UnaryExpression)*
;

Enum MultiplicativeOperator
: 	mul = '*'
|   div = '/'
|   mod = '%'
;

UnaryExpression
:	 (operator = UnaryOperator)? operand = (PrimaryExpression ) 
;
	
Enum UnaryOperator
: 	positive = '+'
|   negative = '-'
|   complement = '~'
|   not = '!'
;

PrimaryExpression
: 	VariableReference 
|   LiteralValue
|   '(' NestedExpression ')'
;

NestedExpression
:  	expression = ConditionalExpression
;

/*
LiteralValue
: 	StringLiteralValue 
|	IntegerLiteralValue
|	BooleanLiteralValue
|	RealLiteralValue
;

StringLiteralValue
: 	value = STRING
;

IntegerLiteralValue
: 	value = IntegerLiteral
;

BooleanLiteralValue
: 	value = BOOLEAN_LITERAL
;

RealLiteralValue
: 	value = FLOATING_POINT_LITERAL
;


String IntegerLiteral
:  	HEX_LITERAL
|   INT 
;
*/

LiteralValue
: 	value = Literal
;

String Literal
:  	HEX_LITERAL
|   BOOLEAN_LITERAL
|   INT 
|	STRING
|   FLOATING_POINT_LITERAL
;

String BOOLEAN_LITERAL
:	"true" | "false"
;
   
// LEXER TOKENS
Native HEX_LITERAL 
: "'0' ('x'|'X') ('0'..'9'|'a'..'f'|'A'..'F')+";

Native FLOATING_POINT_LITERAL
: 	"('0'..'9')* '.' ('0'..'9')* (('e'|'E') ('+'|'-')? ('0'..'9')+)? ('f'|'F'|'d'|'D')?"
;
