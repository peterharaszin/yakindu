/*
* generated by Xtext
*/
package com.yakindu.statechart.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.CharStream;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import com.yakindu.statechart.services.WorkflowGrammarAccess;

public class WorkflowParser extends AbstractContentAssistParser {
	
	@Inject
	private WorkflowGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected com.yakindu.statechart.contentassist.antlr.internal.InternalWorkflowLexer createLexer(CharStream stream) {
		return new com.yakindu.statechart.contentassist.antlr.internal.InternalWorkflowLexer(stream);
	}
	
	@Override
	protected com.yakindu.statechart.contentassist.antlr.internal.InternalWorkflowParser createParser() {
		com.yakindu.statechart.contentassist.antlr.internal.InternalWorkflowParser result = new com.yakindu.statechart.contentassist.antlr.internal.InternalWorkflowParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				{
					put(grammarAccess.getPlatformAccess().getAlternatives(), "rule__Platform__Alternatives");
					put(grammarAccess.getWorkflowAccess().getGroup(), "rule__Workflow__Group__0");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getTargetAccess().getGroup(), "rule__Target__Group__0");
					put(grammarAccess.getTargetPlatformAccess().getGroup(), "rule__TargetPlatform__Group__0");
					put(grammarAccess.getWorkflowAccess().getModelsAssignment_0(), "rule__Workflow__ModelsAssignment_0");
					put(grammarAccess.getWorkflowAccess().getTargetAssignment_1(), "rule__Workflow__TargetAssignment_1");
					put(grammarAccess.getWorkflowAccess().getPlatformAssignment_2(), "rule__Workflow__PlatformAssignment_2");
					put(grammarAccess.getModelAccess().getModelAssignment_1(), "rule__Model__ModelAssignment_1");
					put(grammarAccess.getTargetAccess().getTargetAssignment_1(), "rule__Target__TargetAssignment_1");
					put(grammarAccess.getTargetPlatformAccess().getTargetplatformAssignment_1(), "rule__TargetPlatform__TargetplatformAssignment_1");
					put(grammarAccess.getTargetPlatformAccess().getDefensiveAssignment_2(), "rule__TargetPlatform__DefensiveAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			com.yakindu.statechart.contentassist.antlr.internal.InternalWorkflowParser typedParser = (com.yakindu.statechart.contentassist.antlr.internal.InternalWorkflowParser) parser;
			typedParser.entryRuleWorkflow();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public WorkflowGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(WorkflowGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
