/*
* generated by Xtext
*/
package com.yakindu.statechart.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import com.yakindu.statechart.services.WorkflowGrammarAccess;

import com.google.inject.Inject;

public class WorkflowParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private WorkflowGrammarAccess grammarAccess;
		
	public WorkflowGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Workflow_Group(this, this, 0, inst);
			case 1: return new Model_Group(this, this, 1, inst);
			case 2: return new Target_Group(this, this, 2, inst);
			case 3: return new TargetPlatform_Group(this, this, 3, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Workflow ****************
 *
 * Workflow:
 *   models+=Model+ target=Target platform=TargetPlatform;
 *
 **/

// models+=Model+ target=Target platform=TargetPlatform
protected class Workflow_Group extends GroupToken {
	
	public Workflow_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getWorkflowAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Workflow_PlatformAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getWorkflowRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// models+=Model+
protected class Workflow_ModelsAssignment_0 extends AssignmentToken  {
	
	public Workflow_ModelsAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getWorkflowAccess().getModelsAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("models",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("models");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getModelRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getWorkflowAccess().getModelsModelParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Workflow_ModelsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// target=Target
protected class Workflow_TargetAssignment_1 extends AssignmentToken  {
	
	public Workflow_TargetAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getWorkflowAccess().getTargetAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Target_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("target",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("target");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTargetRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getWorkflowAccess().getTargetTargetParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Workflow_ModelsAssignment_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// platform=TargetPlatform
protected class Workflow_PlatformAssignment_2 extends AssignmentToken  {
	
	public Workflow_PlatformAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getWorkflowAccess().getPlatformAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TargetPlatform_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("platform",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("platform");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTargetPlatformRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getWorkflowAccess().getPlatformTargetPlatformParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Workflow_TargetAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Workflow ****************/


/************ begin Rule Model ****************
 *
 * Model:
 *   "modelFile" model=STRING;
 *
 **/

// "modelFile" model=STRING
protected class Model_Group extends GroupToken {
	
	public Model_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_ModelAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getModelRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "modelFile"
protected class Model_ModelFileKeyword_0 extends KeywordToken  {
	
	public Model_ModelFileKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getModelAccess().getModelFileKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// model=STRING
protected class Model_ModelAssignment_1 extends AssignmentToken  {
	
	public Model_ModelAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getModelAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_ModelFileKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("model",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("model");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getModelAccess().getModelSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Model ****************/


/************ begin Rule Target ****************
 *
 * Target:
 *   "targetDir" target=STRING;
 *
 **/

// "targetDir" target=STRING
protected class Target_Group extends GroupToken {
	
	public Target_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getTargetAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Target_TargetAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTargetRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "targetDir"
protected class Target_TargetDirKeyword_0 extends KeywordToken  {
	
	public Target_TargetDirKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTargetAccess().getTargetDirKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// target=STRING
protected class Target_TargetAssignment_1 extends AssignmentToken  {
	
	public Target_TargetAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTargetAccess().getTargetAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Target_TargetDirKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("target",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("target");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTargetAccess().getTargetSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Target ****************/


/************ begin Rule TargetPlatform ****************
 *
 * TargetPlatform:
 *   "targetPlatform" targetplatform=Platform defensive?="defensive"?;
 *
 **/

// "targetPlatform" targetplatform=Platform defensive?="defensive"?
protected class TargetPlatform_Group extends GroupToken {
	
	public TargetPlatform_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getTargetPlatformAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TargetPlatform_DefensiveAssignment_2(parent, this, 0, inst);
			case 1: return new TargetPlatform_TargetplatformAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTargetPlatformRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "targetPlatform"
protected class TargetPlatform_TargetPlatformKeyword_0 extends KeywordToken  {
	
	public TargetPlatform_TargetPlatformKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getTargetPlatformAccess().getTargetPlatformKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// targetplatform=Platform
protected class TargetPlatform_TargetplatformAssignment_1 extends AssignmentToken  {
	
	public TargetPlatform_TargetplatformAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTargetPlatformAccess().getTargetplatformAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TargetPlatform_TargetPlatformKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("targetplatform",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("targetplatform");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getTargetPlatformAccess().getTargetplatformPlatformParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// defensive?="defensive"?
protected class TargetPlatform_DefensiveAssignment_2 extends AssignmentToken  {
	
	public TargetPlatform_DefensiveAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTargetPlatformAccess().getDefensiveAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TargetPlatform_TargetplatformAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("defensive",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("defensive");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getTargetPlatformAccess().getDefensiveDefensiveKeyword_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule TargetPlatform ****************/


}
