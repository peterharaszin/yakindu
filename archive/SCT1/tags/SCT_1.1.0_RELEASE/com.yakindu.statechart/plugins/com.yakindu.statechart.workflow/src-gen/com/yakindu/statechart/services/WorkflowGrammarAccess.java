/*
* generated by Xtext
*/

package com.yakindu.statechart.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class WorkflowGrammarAccess implements IGrammarAccess {
	
	
	public class WorkflowElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Workflow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModelsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModelsModelParserRuleCall_0_0 = (RuleCall)cModelsAssignment_0.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTargetTargetParserRuleCall_1_0 = (RuleCall)cTargetAssignment_1.eContents().get(0);
		private final Assignment cPlatformAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPlatformTargetPlatformParserRuleCall_2_0 = (RuleCall)cPlatformAssignment_2.eContents().get(0);
		
		//Workflow:
		//  models+=Model+ target=Target platform=TargetPlatform;
		public ParserRule getRule() { return rule; }

		//models+=Model+ target=Target platform=TargetPlatform
		public Group getGroup() { return cGroup; }

		//models+=Model+
		public Assignment getModelsAssignment_0() { return cModelsAssignment_0; }

		//Model
		public RuleCall getModelsModelParserRuleCall_0_0() { return cModelsModelParserRuleCall_0_0; }

		//target=Target
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }

		//Target
		public RuleCall getTargetTargetParserRuleCall_1_0() { return cTargetTargetParserRuleCall_1_0; }

		//platform=TargetPlatform
		public Assignment getPlatformAssignment_2() { return cPlatformAssignment_2; }

		//TargetPlatform
		public RuleCall getPlatformTargetPlatformParserRuleCall_2_0() { return cPlatformTargetPlatformParserRuleCall_2_0; }
	}

	public class ModelElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelFileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cModelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModelSTRINGTerminalRuleCall_1_0 = (RuleCall)cModelAssignment_1.eContents().get(0);
		
		//Model:
		//  "modelFile" model=STRING;
		public ParserRule getRule() { return rule; }

		//"modelFile" model=STRING
		public Group getGroup() { return cGroup; }

		//"modelFile"
		public Keyword getModelFileKeyword_0() { return cModelFileKeyword_0; }

		//model=STRING
		public Assignment getModelAssignment_1() { return cModelAssignment_1; }

		//STRING
		public RuleCall getModelSTRINGTerminalRuleCall_1_0() { return cModelSTRINGTerminalRuleCall_1_0; }
	}

	public class TargetElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Target");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTargetDirKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTargetSTRINGTerminalRuleCall_1_0 = (RuleCall)cTargetAssignment_1.eContents().get(0);
		
		//Target:
		//  "targetDir" target=STRING;
		public ParserRule getRule() { return rule; }

		//"targetDir" target=STRING
		public Group getGroup() { return cGroup; }

		//"targetDir"
		public Keyword getTargetDirKeyword_0() { return cTargetDirKeyword_0; }

		//target=STRING
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }

		//STRING
		public RuleCall getTargetSTRINGTerminalRuleCall_1_0() { return cTargetSTRINGTerminalRuleCall_1_0; }
	}

	public class TargetPlatformElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TargetPlatform");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTargetPlatformKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetplatformAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTargetplatformPlatformParserRuleCall_1_0 = (RuleCall)cTargetplatformAssignment_1.eContents().get(0);
		private final Assignment cDefensiveAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cDefensiveDefensiveKeyword_2_0 = (Keyword)cDefensiveAssignment_2.eContents().get(0);
		
		//TargetPlatform:
		//  "targetPlatform" targetplatform=Platform defensive?="defensive"?;
		public ParserRule getRule() { return rule; }

		//"targetPlatform" targetplatform=Platform defensive?="defensive"?
		public Group getGroup() { return cGroup; }

		//"targetPlatform"
		public Keyword getTargetPlatformKeyword_0() { return cTargetPlatformKeyword_0; }

		//targetplatform=Platform
		public Assignment getTargetplatformAssignment_1() { return cTargetplatformAssignment_1; }

		//Platform
		public RuleCall getTargetplatformPlatformParserRuleCall_1_0() { return cTargetplatformPlatformParserRuleCall_1_0; }

		//defensive?="defensive"?
		public Assignment getDefensiveAssignment_2() { return cDefensiveAssignment_2; }

		//"defensive"
		public Keyword getDefensiveDefensiveKeyword_2_0() { return cDefensiveDefensiveKeyword_2_0; }
	}

	public class PlatformElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Platform");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cJavaKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cJavameKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLejosKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//Platform returns ecore::EString:
		//  "c"|"java"|"javame"|"lejos";
		public ParserRule getRule() { return rule; }

		//"c"|"java"|"javame"|"lejos"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"c"
		public Keyword getCKeyword_0() { return cCKeyword_0; }

		//"java"
		public Keyword getJavaKeyword_1() { return cJavaKeyword_1; }

		//"javame"
		public Keyword getJavameKeyword_2() { return cJavameKeyword_2; }

		//"lejos"
		public Keyword getLejosKeyword_3() { return cLejosKeyword_3; }
	}
	
	
	private WorkflowElements pWorkflow;
	private ModelElements pModel;
	private TargetElements pTarget;
	private TargetPlatformElements pTargetPlatform;
	private PlatformElements pPlatform;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public WorkflowGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Workflow:
	//  models+=Model+ target=Target platform=TargetPlatform;
	public WorkflowElements getWorkflowAccess() {
		return (pWorkflow != null) ? pWorkflow : (pWorkflow = new WorkflowElements());
	}
	
	public ParserRule getWorkflowRule() {
		return getWorkflowAccess().getRule();
	}

	//Model:
	//  "modelFile" model=STRING;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Target:
	//  "targetDir" target=STRING;
	public TargetElements getTargetAccess() {
		return (pTarget != null) ? pTarget : (pTarget = new TargetElements());
	}
	
	public ParserRule getTargetRule() {
		return getTargetAccess().getRule();
	}

	//TargetPlatform:
	//  "targetPlatform" targetplatform=Platform defensive?="defensive"?;
	public TargetPlatformElements getTargetPlatformAccess() {
		return (pTargetPlatform != null) ? pTargetPlatform : (pTargetPlatform = new TargetPlatformElements());
	}
	
	public ParserRule getTargetPlatformRule() {
		return getTargetPlatformAccess().getRule();
	}

	//Platform returns ecore::EString:
	//  "c"|"java"|"javame"|"lejos";
	public PlatformElements getPlatformAccess() {
		return (pPlatform != null) ? pPlatform : (pPlatform = new PlatformElements());
	}
	
	public ParserRule getPlatformRule() {
		return getPlatformAccess().getRule();
	}

	//terminal ID:
	//  "^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//  "0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//  "\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" |
	//  "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//  "/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//  "//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//  (" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//  .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
