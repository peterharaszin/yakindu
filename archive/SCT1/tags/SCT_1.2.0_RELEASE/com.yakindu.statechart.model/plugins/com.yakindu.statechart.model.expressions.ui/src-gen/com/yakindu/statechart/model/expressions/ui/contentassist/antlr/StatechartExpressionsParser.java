/*
* generated by Xtext
*/
package com.yakindu.statechart.model.expressions.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import com.yakindu.statechart.model.expressions.services.StatechartExpressionsGrammarAccess;

public class StatechartExpressionsParser extends AbstractContentAssistParser {
	
	@Inject
	private StatechartExpressionsGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected com.yakindu.statechart.model.expressions.ui.contentassist.antlr.internal.InternalStatechartExpressionsParser createParser() {
		com.yakindu.statechart.model.expressions.ui.contentassist.antlr.internal.InternalStatechartExpressionsParser result = new com.yakindu.statechart.model.expressions.ui.contentassist.antlr.internal.InternalStatechartExpressionsParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
					put(grammarAccess.getEventAccess().getAlternatives(), "rule__Event__Alternatives");
					put(grammarAccess.getTimeExpressionAccess().getAlternatives(), "rule__TimeExpression__Alternatives");
					put(grammarAccess.getVariableReferenceAccess().getAlternatives(), "rule__VariableReference__Alternatives");
					put(grammarAccess.getStatementAccess().getAlternatives_0(), "rule__Statement__Alternatives_0");
					put(grammarAccess.getPrimaryExpressionAccess().getAlternatives(), "rule__PrimaryExpression__Alternatives");
					put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
					put(grammarAccess.getTimeUnitAccess().getAlternatives(), "rule__TimeUnit__Alternatives");
					put(grammarAccess.getAssignmentOperatorAccess().getAlternatives(), "rule__AssignmentOperator__Alternatives");
					put(grammarAccess.getEqualityOperatorAccess().getAlternatives(), "rule__EqualityOperator__Alternatives");
					put(grammarAccess.getRelationalOperatorAccess().getAlternatives(), "rule__RelationalOperator__Alternatives");
					put(grammarAccess.getShiftOperatorAccess().getAlternatives(), "rule__ShiftOperator__Alternatives");
					put(grammarAccess.getAdditiveOperatorAccess().getAlternatives(), "rule__AdditiveOperator__Alternatives");
					put(grammarAccess.getMultiplicativeOperatorAccess().getAlternatives(), "rule__MultiplicativeOperator__Alternatives");
					put(grammarAccess.getUnaryOperatorAccess().getAlternatives(), "rule__UnaryOperator__Alternatives");
					put(grammarAccess.getTriggerExpressionAccess().getGroup(), "rule__TriggerExpression__Group__0");
					put(grammarAccess.getTriggerExpressionAccess().getGroup_1(), "rule__TriggerExpression__Group_1__0");
					put(grammarAccess.getTimeEventAccess().getGroup(), "rule__TimeEvent__Group__0");
					put(grammarAccess.getVariableReferenceAccess().getGroup_1(), "rule__VariableReference__Group_1__0");
					put(grammarAccess.getTimeConstantAccess().getGroup(), "rule__TimeConstant__Group__0");
					put(grammarAccess.getStatementAccess().getGroup(), "rule__Statement__Group__0");
					put(grammarAccess.getVariableAssignmentAccess().getGroup(), "rule__VariableAssignment__Group__0");
					put(grammarAccess.getProcedureCallAccess().getGroup(), "rule__ProcedureCall__Group__0");
					put(grammarAccess.getEventRaisingAccess().getGroup(), "rule__EventRaising__Group__0");
					put(grammarAccess.getBooleanOrExpressionAccess().getGroup(), "rule__BooleanOrExpression__Group__0");
					put(grammarAccess.getBooleanOrExpressionAccess().getGroup_1(), "rule__BooleanOrExpression__Group_1__0");
					put(grammarAccess.getBooleanAndExpressionAccess().getGroup(), "rule__BooleanAndExpression__Group__0");
					put(grammarAccess.getBooleanAndExpressionAccess().getGroup_1(), "rule__BooleanAndExpression__Group_1__0");
					put(grammarAccess.getBitwiseXorExpressionAccess().getGroup(), "rule__BitwiseXorExpression__Group__0");
					put(grammarAccess.getBitwiseXorExpressionAccess().getGroup_1(), "rule__BitwiseXorExpression__Group_1__0");
					put(grammarAccess.getBitwiseOrExpressionAccess().getGroup(), "rule__BitwiseOrExpression__Group__0");
					put(grammarAccess.getBitwiseOrExpressionAccess().getGroup_1(), "rule__BitwiseOrExpression__Group_1__0");
					put(grammarAccess.getBitwiseAndExpressionAccess().getGroup(), "rule__BitwiseAndExpression__Group__0");
					put(grammarAccess.getBitwiseAndExpressionAccess().getGroup_1(), "rule__BitwiseAndExpression__Group_1__0");
					put(grammarAccess.getEqualityExpressionAccess().getGroup(), "rule__EqualityExpression__Group__0");
					put(grammarAccess.getEqualityExpressionAccess().getGroup_1(), "rule__EqualityExpression__Group_1__0");
					put(grammarAccess.getRelationalExpressionAccess().getGroup(), "rule__RelationalExpression__Group__0");
					put(grammarAccess.getRelationalExpressionAccess().getGroup_1(), "rule__RelationalExpression__Group_1__0");
					put(grammarAccess.getConditionalExpressionAccess().getGroup(), "rule__ConditionalExpression__Group__0");
					put(grammarAccess.getConditionalExpressionAccess().getGroup_1(), "rule__ConditionalExpression__Group_1__0");
					put(grammarAccess.getShiftExpressionAccess().getGroup(), "rule__ShiftExpression__Group__0");
					put(grammarAccess.getShiftExpressionAccess().getGroup_1(), "rule__ShiftExpression__Group_1__0");
					put(grammarAccess.getAdditiveExpressionAccess().getGroup(), "rule__AdditiveExpression__Group__0");
					put(grammarAccess.getAdditiveExpressionAccess().getGroup_1(), "rule__AdditiveExpression__Group_1__0");
					put(grammarAccess.getMultiplicativeExpressionAccess().getGroup(), "rule__MultiplicativeExpression__Group__0");
					put(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1(), "rule__MultiplicativeExpression__Group_1__0");
					put(grammarAccess.getUnaryExpressionAccess().getGroup(), "rule__UnaryExpression__Group__0");
					put(grammarAccess.getPrimaryExpressionAccess().getGroup_2(), "rule__PrimaryExpression__Group_2__0");
					put(grammarAccess.getTriggerExpressionAccess().getTriggersAssignment_0(), "rule__TriggerExpression__TriggersAssignment_0");
					put(grammarAccess.getTriggerExpressionAccess().getTriggersAssignment_1_1(), "rule__TriggerExpression__TriggersAssignment_1_1");
					put(grammarAccess.getGuardExpressionAccess().getExpressionAssignment(), "rule__GuardExpression__ExpressionAssignment");
					put(grammarAccess.getActionExpressionAccess().getStatementAssignment(), "rule__ActionExpression__StatementAssignment");
					put(grammarAccess.getTriggerAccess().getEventAssignment(), "rule__Trigger__EventAssignment");
					put(grammarAccess.getSignalEventAccess().getIdentifierAssignment(), "rule__SignalEvent__IdentifierAssignment");
					put(grammarAccess.getTimeEventAccess().getDurationAssignment_2(), "rule__TimeEvent__DurationAssignment_2");
					put(grammarAccess.getVariableReferenceAccess().getVariableAssignment_0(), "rule__VariableReference__VariableAssignment_0");
					put(grammarAccess.getVariableReferenceAccess().getVariableAssignment_1_2(), "rule__VariableReference__VariableAssignment_1_2");
					put(grammarAccess.getVariableAccess().getIdentifierAssignment(), "rule__Variable__IdentifierAssignment");
					put(grammarAccess.getTimeConstantAccess().getValueAssignment_0(), "rule__TimeConstant__ValueAssignment_0");
					put(grammarAccess.getTimeConstantAccess().getUnitAssignment_1(), "rule__TimeConstant__UnitAssignment_1");
					put(grammarAccess.getVariableAssignmentAccess().getVariableReferenceAssignment_0(), "rule__VariableAssignment__VariableReferenceAssignment_0");
					put(grammarAccess.getVariableAssignmentAccess().getOperatorAssignment_1(), "rule__VariableAssignment__OperatorAssignment_1");
					put(grammarAccess.getVariableAssignmentAccess().getValueAssignment_2(), "rule__VariableAssignment__ValueAssignment_2");
					put(grammarAccess.getProcedureCallAccess().getProcedureAssignment_0(), "rule__ProcedureCall__ProcedureAssignment_0");
					put(grammarAccess.getProcedureAccess().getIdentifierAssignment(), "rule__Procedure__IdentifierAssignment");
					put(grammarAccess.getEventRaisingAccess().getEventAssignment_2(), "rule__EventRaising__EventAssignment_2");
					put(grammarAccess.getBooleanOrExpressionAccess().getOperand1Assignment_0(), "rule__BooleanOrExpression__Operand1Assignment_0");
					put(grammarAccess.getBooleanOrExpressionAccess().getOperand2Assignment_1_1(), "rule__BooleanOrExpression__Operand2Assignment_1_1");
					put(grammarAccess.getBooleanAndExpressionAccess().getOperand1Assignment_0(), "rule__BooleanAndExpression__Operand1Assignment_0");
					put(grammarAccess.getBooleanAndExpressionAccess().getOperand2Assignment_1_1(), "rule__BooleanAndExpression__Operand2Assignment_1_1");
					put(grammarAccess.getBitwiseXorExpressionAccess().getOperand1Assignment_0(), "rule__BitwiseXorExpression__Operand1Assignment_0");
					put(grammarAccess.getBitwiseXorExpressionAccess().getOperand2Assignment_1_1(), "rule__BitwiseXorExpression__Operand2Assignment_1_1");
					put(grammarAccess.getBitwiseOrExpressionAccess().getOperand1Assignment_0(), "rule__BitwiseOrExpression__Operand1Assignment_0");
					put(grammarAccess.getBitwiseOrExpressionAccess().getOperand2Assignment_1_1(), "rule__BitwiseOrExpression__Operand2Assignment_1_1");
					put(grammarAccess.getBitwiseAndExpressionAccess().getOperand1Assignment_0(), "rule__BitwiseAndExpression__Operand1Assignment_0");
					put(grammarAccess.getBitwiseAndExpressionAccess().getOperand2Assignment_1_1(), "rule__BitwiseAndExpression__Operand2Assignment_1_1");
					put(grammarAccess.getEqualityExpressionAccess().getOperand1Assignment_0(), "rule__EqualityExpression__Operand1Assignment_0");
					put(grammarAccess.getEqualityExpressionAccess().getOperatorAssignment_1_0(), "rule__EqualityExpression__OperatorAssignment_1_0");
					put(grammarAccess.getEqualityExpressionAccess().getOperand2Assignment_1_1(), "rule__EqualityExpression__Operand2Assignment_1_1");
					put(grammarAccess.getRelationalExpressionAccess().getOperand1Assignment_0(), "rule__RelationalExpression__Operand1Assignment_0");
					put(grammarAccess.getRelationalExpressionAccess().getOperatorAssignment_1_0(), "rule__RelationalExpression__OperatorAssignment_1_0");
					put(grammarAccess.getRelationalExpressionAccess().getOperand2Assignment_1_1(), "rule__RelationalExpression__Operand2Assignment_1_1");
					put(grammarAccess.getConditionalExpressionAccess().getOperand1Assignment_0(), "rule__ConditionalExpression__Operand1Assignment_0");
					put(grammarAccess.getConditionalExpressionAccess().getOperand2Assignment_1_1(), "rule__ConditionalExpression__Operand2Assignment_1_1");
					put(grammarAccess.getConditionalExpressionAccess().getOperand3Assignment_1_3(), "rule__ConditionalExpression__Operand3Assignment_1_3");
					put(grammarAccess.getShiftExpressionAccess().getOperand1Assignment_0(), "rule__ShiftExpression__Operand1Assignment_0");
					put(grammarAccess.getShiftExpressionAccess().getOperatorAssignment_1_0(), "rule__ShiftExpression__OperatorAssignment_1_0");
					put(grammarAccess.getShiftExpressionAccess().getOperand2Assignment_1_1(), "rule__ShiftExpression__Operand2Assignment_1_1");
					put(grammarAccess.getAdditiveExpressionAccess().getOperand1Assignment_0(), "rule__AdditiveExpression__Operand1Assignment_0");
					put(grammarAccess.getAdditiveExpressionAccess().getOperatorAssignment_1_0(), "rule__AdditiveExpression__OperatorAssignment_1_0");
					put(grammarAccess.getAdditiveExpressionAccess().getOperand2Assignment_1_1(), "rule__AdditiveExpression__Operand2Assignment_1_1");
					put(grammarAccess.getMultiplicativeExpressionAccess().getOperand1Assignment_0(), "rule__MultiplicativeExpression__Operand1Assignment_0");
					put(grammarAccess.getMultiplicativeExpressionAccess().getOperatorAssignment_1_0(), "rule__MultiplicativeExpression__OperatorAssignment_1_0");
					put(grammarAccess.getMultiplicativeExpressionAccess().getOperand2Assignment_1_1(), "rule__MultiplicativeExpression__Operand2Assignment_1_1");
					put(grammarAccess.getUnaryExpressionAccess().getOperatorAssignment_0(), "rule__UnaryExpression__OperatorAssignment_0");
					put(grammarAccess.getUnaryExpressionAccess().getOperandAssignment_1(), "rule__UnaryExpression__OperandAssignment_1");
					put(grammarAccess.getNestedExpressionAccess().getExpressionAssignment(), "rule__NestedExpression__ExpressionAssignment");
					put(grammarAccess.getLiteralValueAccess().getValueAssignment(), "rule__LiteralValue__ValueAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			com.yakindu.statechart.model.expressions.ui.contentassist.antlr.internal.InternalStatechartExpressionsParser typedParser = (com.yakindu.statechart.model.expressions.ui.contentassist.antlr.internal.InternalStatechartExpressionsParser) parser;
			typedParser.entryRuleExpression();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public StatechartExpressionsGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(StatechartExpressionsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
