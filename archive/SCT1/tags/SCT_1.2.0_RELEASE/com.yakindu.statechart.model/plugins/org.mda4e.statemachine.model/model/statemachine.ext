/**
 * Copyright (c) 2006-2009 committers of mda4e and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     committers of mda4e (http://www.mda4e.org/) - initial API and implementation
 *
 */
import gmfgen;
import ecore;

// transforms the given GMFGenModel
List[emf::EObject] transform(List[emf::EObject] gmfGenModelContents) :
   let contents = gmfGenModelContents.eAllContents.addAll(gmfGenModelContents) :
   	contents.internalTransform() ->
   gmfGenModelContents;
   
internalTransform(GenEditorGenerator this) :
	setDynamicTemplates(true) ->
	setTemplateDirectory("/org.mda4e.statemachine.model/templates");
//	setModelID("Datatype") ->
//	setPackageNamePrefix("de.itemis.gmf.example.datatype.diagram") ->
//	setDiagramFileExtension("datatype_diagram");

internalTransform(GenPlugin this) :
	setPrintingEnabled(true)->
	setID("org.mda4e.statemachine.diagram");

internalTransform(GenJavaExpressionProvider this) :
	setInjectExpressionBody(true);

internalTransform(OpenDiagramBehaviour this) :
	setEditPolicyClassName(((GenCommonBase) eContainer).editPartClassName.trim(8) + "OpenDiagramEditPolicy");

internalTransform(GenDiagram this):
	setValidationEnabled(true) ->
	setValidationDecorators(true) ->
	setLiveValidationUIFeedback(true);
	//-> setVisualIDRegistryClassName("statemachine.diagram.part.CustomStatemachineVisualIDRegistry");

//internalTransform(GenDiagram this) :
//	setVisualID(10000) ->
//	setEditingDomainID("de.itemis.gmf.example.sharedEditingDomainID");
	
internalTransform(emf::EObject o) :
	{};

String trim(String this, int numChars) :
	subString(0, this.length - numChars);