«REM» Copyright
> Copyright (c) 2010 committers of YAKINDU and others.
> All rights reserved. This program and the accompanying materials
> are made available under the terms of the Eclipse Public License v1.0
> which accompanies this distribution, and is available at
> http://www.eclipse.org/legal/epl-v10.html
>
> Contributors:
>     committers of YAKINDU - initial API and implementation
«ENDREM»
«IMPORT statemachine»

«EXTENSION com::yakindu::statechart::codegenerator::java::extensions::Extensions»

«DEFINE Root FOR Object»
  «FILE getLibraryPackagePath() + "Region.java"»
package «getLibraryPackage()»;

«EXPAND Imports»  

public class Region {
	«EXPAND RegionClassBody»
}
  «ENDFILE»
«ENDDEFINE»

«DEFINE Imports FOR Object»
import java.util.HashSet;
import java.util.Set;
«ENDDEFINE»

«DEFINE RegionClassBody FOR Object»
	«EXPAND Declarations»
	
	«EXPAND Constructors»
	
	/** Returns the id of the region.
	 */
	public String getId() {
		return id;
	}
	
	/** Returns the priority of the region. Regions with lower priority value will be evaluated 
	 * before regions with higher priority value.
	 */
	public int getPriority(){
		return priority;
	}

	public AbstractStatechart getStatechart() {
		if (owningStatechart != null) {
			return owningStatechart;
		} else {
			return owningState.getStatechart();
		}
	}

	protected CompoundState getOwningState() {
		return owningState;
	}

	protected AbstractStatechart getOwningStatechart() {
		return owningStatechart;
	}

	«EXPAND getNodesMethod»

	«EXPAND getInitialNodeMethod»

	protected void setCurrentState(State state) {
		this.currentState = state;
	}
	
	public State getCurrentState(){
	 	return currentState;
	}

	«EXPAND enterMethod»

	«EXPAND reenterMethod»

	«EXPAND reactOnMethod»

	«EXPAND leaveMethod»
	
«ENDDEFINE»

«DEFINE Declarations FOR Object»
	private String id;
	private int priority;
	private AbstractStatechart owningStatechart;
	private CompoundState owningState;

	private Set<Node> nodes = new HashSet<Node>();

	protected State currentState;
«ENDDEFINE»

«DEFINE Constructors FOR Object»
	public Region(String id, int priority, AbstractStatechart owner) {
		this.id = id;
		this.priority = priority;
		this.owningStatechart = owner;
		this.owningStatechart.getRegions().add(this);
	}

	public Region(String id, int priority, CompoundState owner) {
		this.id = id;
		this.priority = priority;
		this.owningState = owner;
		this.owningState.getRegions().add(this);
	}
«ENDDEFINE»

«DEFINE enterMethod FOR Object»
	protected void enter() {
		«EXPAND enterMethodBody»
	}
«ENDDEFINE»

«DEFINE enterMethodBody FOR Object»
	getInitialNode().enter();
«ENDDEFINE»


«DEFINE reenterMethod FOR Object»
	protected void reenter(HistoryMode history) {
		«EXPAND reenterMethodBody»
	}
«ENDDEFINE»

«DEFINE reenterMethodBody FOR Object»
	currentState.reenter(history);	
«ENDDEFINE»


«DEFINE reactOnMethod FOR Object»
	protected void reactOn(Set<Event> events) {
		«EXPAND reactOnMethodBody»
	}
«ENDDEFINE»

«DEFINE reactOnMethodBody FOR Object»
	currentState.reactOn(events);
«ENDDEFINE»

«DEFINE leaveMethod FOR Object»
	protected void leave() {
		«EXPAND leaveMethodBody»
	} 
«ENDDEFINE»

«DEFINE leaveMethodBody FOR Object»
	currentState.leave();
«ENDDEFINE»


«DEFINE getNodesMethod FOR Object»
	protected Set<Node> getNodes() {
		«EXPAND getNodesMethodBody»
	}
«ENDDEFINE»

«DEFINE getNodesMethodBody FOR Object»
	return nodes;
«ENDDEFINE»

«DEFINE getInitialNodeMethod FOR Object»
	private Node getInitialNode() {
		for (Node node : nodes) {
			if (node instanceof Pseudostate
					&& ((Pseudostate) node).getKind() == PseudostateKind.INITIAL) {
				return node;
			}
		}
		throw new IllegalStateException("No initial state present");
	}
«ENDDEFINE»