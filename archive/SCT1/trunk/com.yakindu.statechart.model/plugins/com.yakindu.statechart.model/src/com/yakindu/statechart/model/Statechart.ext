/**
 * Copyright (c) 2010 committers of YAKINDU and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     committers of YAKINDU - initial API and implementation
 */
import statechart;
import expressions;

extension org::yakindu::sct::codegenerator::base::extensions::Extensions;

String getId(Statechart this):
	"STATECHART_" + this.name; // should also be unique (but better readable than UUID)
  
List[Variable] getVariables(Statechart this):
	eContents.typeSelect(Variable);
	
cached List[Event] getSignalEvents(Statechart this): 
	this.scopes.typeSelect(InterfaceScope).events.flatten();

// TODO: This may be altered when the statechart meta-model is refactored	
cached List[Event] getTimeEvents(Statechart this):
    eAllContents.typeSelect(Transition).select(e|e.isTimeTriggered()).collect(e|createDummyTimeEvent(e));
	
// TODO: This may be removed when the statechart meta-model is refactored
create Event createDummyTimeEvent(Transition transition):
    setName(transition.ID().toString());
    
Transition getTransitionById(Statechart this, String id):
  this.eAllContents.typeSelect(Transition).selectFirst(e|e.ID().toString().compareTo(id) == 0);
  
List[Region] getNestedRegions(Statechart chart) :
	getNestedRegions(chart.regions.first()).reverse().add(chart.regions.first());

 
boolean hasAnyStateActions(Statechart this) :
	this.getAllRegions().vertices.typeSelect(State).exists(e| !e.localReactions.isEmpty);
