package org.yakindu.sct.generator.playgo;

import org.eclipse.xtend2.lib.StringConcatenation;
import org.yakindu.sct.generator.java.Statemachine;
import org.yakindu.sct.model.sexec.ExecutionFlow;
import org.yakindu.sct.model.sgen.GeneratorEntry;

@SuppressWarnings("all")
public class PlaygoStatemachine extends Statemachine {
  protected CharSequence content(final ExecutionFlow flow, final GeneratorEntry entry) {
    StringConcatenation _builder = new StringConcatenation();
    String _licenseText = this._genmodelEntries.getLicenseText(entry);
    _builder.append(_licenseText, "");
    _builder.newLineIfNotEmpty();
    _builder.append("package ");
    String _implementationPackageName = this._genmodelEntries.getImplementationPackageName(flow, entry);
    _builder.append(_implementationPackageName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    CharSequence _createImports = this.createImports(flow, entry);
    _builder.append(_createImports, "");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("public class ");
    String _statemachineClassName = this._naming.statemachineClassName(flow);
    _builder.append(_statemachineClassName, "");
    _builder.append(" extends PlayableFramework implements ");
    String _statemachineInterfaceName = this._naming.statemachineInterfaceName(flow);
    _builder.append(_statemachineInterfaceName, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _createFieldDeclarations = this.createFieldDeclarations(flow, entry);
    _builder.append(_createFieldDeclarations, "\t");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _createConstructor = this.createConstructor(flow);
    _builder.append(_createConstructor, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _initFunction = this.initFunction(flow);
    _builder.append(_initFunction, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _enterFunction = this.enterFunction(flow);
    _builder.append(_enterFunction, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _exitFunction = this.exitFunction(flow);
    _builder.append(_exitFunction, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _clearInEventsFunction = this.clearInEventsFunction(flow);
    _builder.append(_clearInEventsFunction, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _clearOutEventsFunction = this.clearOutEventsFunction(flow);
    _builder.append(_clearOutEventsFunction, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _isActiveFunction = this.isActiveFunction(flow);
    _builder.append(_isActiveFunction, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _timingFunctions = this.timingFunctions(flow);
    _builder.append(_timingFunctions, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _interfaceAccessors = this.interfaceAccessors(flow);
    _builder.append(_interfaceAccessors, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _internalScopeFunctions = this.internalScopeFunctions(flow);
    _builder.append(_internalScopeFunctions, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _defaultInterfaceFunctions = this.defaultInterfaceFunctions(flow, entry);
    _builder.append(_defaultInterfaceFunctions, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _functionImplementations = this.functionImplementations(flow);
    _builder.append(_functionImplementations, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _runCycleFunction = this.runCycleFunction(flow);
    _builder.append(_runCycleFunction, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence createImports(final ExecutionFlow flow, final GeneratorEntry entry) {
    CharSequence _createImports = super.createImports(flow, entry);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import org.playgo.framework.*;");
    return (_createImports + _builder.toString());
  }
}
